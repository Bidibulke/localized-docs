# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2019, Lawrence Livermore National Laboratory.
# This file is distributed under the same license as the Spack package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Spack 0.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-23 08:25-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../spack/lib/spack/docs/contribution_guide.rst:10
# f430a02a6fa444d3bb518496f6e3ae50
msgid "Contribution Guide"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:12
# 9c199c16b63144678b6854a2f0837cb2
msgid "This guide is intended for developers or administrators who want to contribute a new package, feature, or bugfix to Spack. It assumes that you have at least some familiarity with Git VCS and Github. The guide will show a few examples of contributing workflows and discuss the granularity of pull-requests (PRs). It will also discuss the tests your PR must pass in order to be accepted into Spack."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:19
# a1ff37ac6c264e719df599a9df0a84af
msgid "First, what is a PR? Quoting `Bitbucket's tutorials <https://www.atlassian.com/git/tutorials/making-a-pull-request/>`_:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:21
# 6b357c7ade6844d38cb0508e834e3626
msgid "Pull requests are a mechanism for a developer to notify team members that they have **completed a feature**. The pull request is more than just a notification—it’s a dedicated forum for discussing the proposed feature."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:25
# d419696c2c95415d9ba1ba8e7d431dad
msgid "Important is **completed feature**. The changes one proposes in a PR should correspond to one feature/bugfix/extension/etc. One can create PRs with changes relevant to different ideas, however reviewing such PRs becomes tedious and error prone. If possible, try to follow the **one-PR-one-package/feature** rule."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:30
# 318894737edb4dcfbe98491206af0c29
msgid "Spack uses a rough approximation of the `Git Flow <http://nvie.com/posts/a-successful-git-branching-model/>`_ branching model. The develop branch contains the latest contributions, and master is always tagged and points to the latest stable release. Therefore, when you send your request, make ``develop`` the destination branch on the `Spack repository <https://github.com/spack/spack>`_."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:38
# 0707a03a59e14994a6217ecce5d38829
msgid "Continuous Integration"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:40
# 21483af538d744a6a53af5a04a622144
msgid "Spack uses `Travis CI <https://travis-ci.org/spack/spack>`_ for Continuous Integration testing. This means that every time you submit a pull request, a series of tests will be run to make sure you didn't accidentally introduce any bugs into Spack. **Your PR will not be accepted until it passes all of these tests.** While you can certainly wait for the results of these tests after submitting a PR, we recommend that you run them locally to speed up the review process."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:49
# 64f846806fdb4ea6a026ade523bb7b3e
msgid "Oftentimes, Travis will fail for reasons other than a problem with your PR. For example, apt-get, pip, or homebrew will fail to download one of the dependencies for the test suite, or a transient bug will cause the unit tests to timeout. If Travis fails, click the \"Details\" link and click on the test(s) that is failing. If it doesn't look like it is failing for reasons related to your PR, you have two options. If you have write permissions for the Spack repository, you should see a \"Restart job\" button on the right-hand side. If not, you can close and reopen your PR to rerun all of the tests. If the same test keeps failing, there may be a problem with your PR. If you notice that every recent PR is failing with the same error message, it may be that Travis is down or one of Spack's dependencies put out a new release that is causing problems. If this is the case, please file an issue."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:63
# 43f257b103e140fb806b8a61e8d79ca2
msgid "If you take a look in ``$SPACK_ROOT/.travis.yml``, you'll notice that we test against Python 2.6, 2.7, and 3.4-3.7 on both macOS and Linux. We currently perform 3 types of tests:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:69
# 9f6f47e646194b5392278020ea00d55f
msgid "Unit Tests"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:71
# 0be6e8518027493e852c7999e223f6ee
msgid "Unit tests ensure that core Spack features like fetching or spec resolution are working as expected. If your PR only adds new packages or modifies existing ones, there's very little chance that your changes could cause the unit tests to fail. However, if you make changes to Spack's core libraries, you should run the unit tests to make sure you didn't break anything."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:77
# 5974f9de1c9a45cdbb33f32ee5bb2331
msgid "Since they test things like fetching from VCS repos, the unit tests require `git <https://git-scm.com/>`_, `mercurial <https://www.mercurial-scm.org/>`_, and `subversion <https://subversion.apache.org/>`_ to run. Make sure these are installed on your system and can be found in your ``PATH``. All of these can be installed with Spack or with your system package manager."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:83
# 1068bcbbac3b4e0f97ab9c59d1541c35
msgid "To run *all* of the unit tests, use:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:89
# 2020b8133c3347f8a1809fd490d1a83c
msgid "These tests may take several minutes to complete. If you know you are only modifying a single Spack feature, you can run a single unit test at a time:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:96
# 0719ae6ff19846c48be633f9613cdb92
msgid "This allows you to develop iteratively: make a change, test that change, make another change, test that change, etc. To get a list of all available unit tests, run:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:102
# be90b5ca5cde44709fa8292fec38a339
msgid "A more detailed list of available unit tests can be found by running ``spack test --long-list``."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:105
# 266f89ebf7bd4c29b4d1c4a25c59f042
msgid "By default, ``pytest`` captures the output of all unit tests. If you add print statements to a unit test and want to see the output, simply run:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:112
# 3260f786548843908d4cfff45540c100
msgid "Unit tests are crucial to making sure bugs aren't introduced into Spack. If you are modifying core Spack libraries or adding new functionality, please consider adding new unit tests or strengthening existing tests."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:118
# eb659787c24849c6b7156b8b0c5ed9d7
msgid "There is also a ``run-unit-tests`` script in ``share/spack/qa`` that runs the unit tests. Afterwards, it reports back to Codecov with the percentage of Spack that is covered by unit tests. This script is designed for Travis CI. If you want to run the unit tests yourself, we suggest you use ``spack test``."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:126
# 044bf564afd84d5fbe5457af3254a57a
msgid "Flake8 Tests"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:128
# a1e30f21ee05425c8f13fd9beab02487
msgid "Spack uses `Flake8 <http://flake8.pycqa.org/en/latest/>`_ to test for `PEP 8 <https://www.python.org/dev/peps/pep-0008/>`_ conformance. PEP 8 is a series of style guides for Python that provide suggestions for everything from variable naming to indentation. In order to limit the number of PRs that were mostly style changes, we decided to enforce PEP 8 conformance. Your PR needs to comply with PEP 8 in order to be accepted."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:135
# 86cafd99e294400da4ec1a6d40f93a47
msgid "Testing for PEP 8 compliance is easy. Simply run the ``spack flake8`` command:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:142
# 2238a3de585f43f9a23026ef00140f9e
msgid "``spack flake8`` has a couple advantages over running ``flake8`` by hand:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:144
# d8fc18e4ffb34ffba0cf58ea12a15d56
msgid "It only tests files that you have modified since branching off of ``develop``."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:147
# 46dea1d3a816450ea0d0e7e8ebe99e6f
msgid "It works regardless of what directory you are in."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:149
# 3580c28731f346b2b5f3834bca972eb8
msgid "It automatically adds approved exemptions from the ``flake8`` checks. For example, URLs are often longer than 80 characters, so we exempt them from line length checks. We also exempt lines that start with \"homepage\", \"url\", \"version\", \"variant\", \"depends_on\", and \"extends\" in ``package.py`` files."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:155
# cfe9afd3ba3e481ea256713ffaed1361
msgid "More approved flake8 exemptions can be found `here <https://github.com/spack/spack/blob/develop/.flake8>`_."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:158
# f5a6415b434946e6866b3ebe1245f98e
msgid "If all is well, you'll see something like this:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:175
# 275147e18f5048d7865e139dc59ad164
msgid "However, if you aren't compliant with PEP 8, flake8 will complain:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:184
# dea9ab2db77449168747a2e1c5e771bb
msgid "Most of the error messages are straightforward, but if you don't understand what they mean, just ask questions about them when you submit your PR. The line numbers will change if you add or delete lines, so simply run ``spack flake8`` again to update them."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:191
# 4b7ba518ef0348baa8eaffd6d33caf5d
msgid "Try fixing flake8 errors in reverse order. This eliminates the need for multiple runs of ``spack flake8`` just to re-compute line numbers and makes it much easier to fix errors directly off of the Travis output."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:197
# 34f34828474d468c8e840ac4cfbce86b
msgid "Flake8 and ``pep8-naming`` require a number of dependencies in order to run.  If you installed ``py-flake8`` and ``py-pep8-naming``, the easiest way to ensure the right packages are on your ``PYTHONPATH`` is to run::"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:205
#: ../spack/lib/spack/docs/contribution_guide.rst:249
# b413cce1a26847459f573011e6add194
# e6daee61206f40a18eb802f99f1123d3
msgid "so that all of the dependencies are symlinked to a central location. If you see an error message like:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:215
# 9e2d4e93811f40cbb27c59f4cfef99ac
msgid "that means Flake8 couldn't find setuptools in your ``PYTHONPATH``."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:219
# a73f9e91971a403ea34375dd35f09cae
msgid "Documentation Tests"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:221
# 7e5a860f88394b6ea32afe85bed0a448
msgid "Spack uses `Sphinx <http://www.sphinx-doc.org/en/stable/>`_ to build its documentation. In order to prevent things like broken links and missing imports, we added documentation tests that build the documentation and fail if there are any warning or error messages."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:226
# 3167ae6f6a1e4e38b284195fb5a54146
msgid "Building the documentation requires several dependencies, all of which can be installed with Spack:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:229
# 0e5cdba0a0e04d4cbbb114d8a9bdf7de
msgid "sphinx"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:230
# 73642bb509fe42ecaef52f0b1ca5e46e
msgid "sphinxcontrib-programoutput"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:231
# f36c405aaa1e45fb911626253f439188
msgid "sphinx-rtd-theme"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:232
# 78845515eb0441b197db4ef087e5ba31
msgid "graphviz"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:233
# b3d65e5718e34dc38086d1fb3f6e8ad7
msgid "git"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:234
# 4e9da19d75ea47c892e8d4b326c59e34
msgid "mercurial"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:235
# 08836c1c1e8c4cbe884299317e3beffb
msgid "subversion"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:239
# bb677dc4ee4d43b19d8e0d5f4e90105e
msgid "Sphinx has `several required dependencies <https://github.com/spack/spack/blob/develop/var/spack/repos/builtin/packages/py-sphinx/package.py>`_. If you installed ``py-sphinx`` with Spack, make sure to add all of these dependencies to your ``PYTHONPATH``. The easiest way to do this is to run:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:258
# 5c7e2711f073478991451530e0485022
msgid "that means Sphinx couldn't find ``py-sphinxcontrib-programoutput`` in your ``PYTHONPATH``."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:261
# 8b09abf5645b4dc6aeb3a28726a55b9c
msgid "Once all of the dependencies are installed, you can try building the documentation:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:269
# bb07e8ac9b7540289536c3a69d8426d8
msgid "If you see any warning or error messages, you will have to correct those before your PR is accepted."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:274
# 7f8956ba194544299079e3a403501492
msgid "There is also a ``run-doc-tests`` script in ``share/spack/qa``. The only difference between running this script and running ``make`` by hand is that the script will exit immediately if it encounters an error or warning. This is necessary for Travis CI. If you made a lot of documentation changes, it is much quicker to run ``make`` by hand so that you can see all of the warnings at once."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:281
# 915969f8f2c740d49d43d79d33e4971f
msgid "If you are editing the documentation, you should obviously be running the documentation tests. But even if you are simply adding a new package, your changes could cause the documentation tests to fail:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:289
# c975cfbb5b76421784ec94eebeba1359
msgid "At first, this error message will mean nothing to you, since you didn't edit that file. Until you look at line 8745 of the file in question:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:299
# 21e762c8df8e45f6be85717824a454c7
msgid "Our documentation includes :ref:`a list of all Spack packages <package-list>`. If you add a new package, its docstring is added to this page. The problem in this case was that the docstring looked like:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:312
# e49466425a9e47129061f07286c4f460
msgid "Docstrings cannot start with a newline character, or else Sphinx will complain. Instead, they should look like:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:322
# 3046c5f1608e42b7942686935356a6c5
msgid "Documentation changes can result in much more obfuscated warning messages. If you don't understand what they mean, feel free to ask when you submit your PR."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:328
# 3cd2b3fd91c94bd5afab2aa04a08cffa
msgid "Coverage"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:330
# d7b3c63b8b9f40e0b7f8c3d1c14b488e
msgid "Spack uses `Codecov <https://codecov.io/>`_ to generate and report unit test coverage. This helps us tell what percentage of lines of code in Spack are covered by unit tests. Although code covered by unit tests can still contain bugs, it is much less error prone than code that is not covered by unit tests."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:335
# d540d5d0415d4d0ba019baee05d68a31
msgid "Codecov provides `browser extensions <https://github.com/codecov/browser-extension>`_ for Google Chrome, Firefox, and Opera. These extensions integrate with GitHub and allow you to see coverage line-by-line when viewing the Spack repository. If you are new to Spack, a great way to get started is to write unit tests to increase coverage!"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:341
# 8449bcf3ed994f528eb67859b9ab0fce
msgid "Unlike with Travis, Codecov tests are not required to pass in order for your PR to be merged. If you modify core Spack libraries, we would greatly appreciate unit tests that cover these changed lines. Otherwise, we have no way of knowing whether or not your changes introduce a bug. If you make substantial changes to the core, we may request unit tests to increase coverage."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:349
# 30128e7de2034ef3b3411944b1cd042d
msgid "If the only files you modified are package files, we do not care about coverage on your PR. You may notice that the Codecov tests fail even though you didn't modify any core files. This means that Spack's overall coverage has increased since you branched off of develop. This is a good thing! If you really want to get the Codecov tests to pass, you can rebase off of the latest develop, but again, this is not required."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:359
# c10458d292cf4e909321a4f91a275915
msgid "Git Workflows"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:361
# 8e7fc97a4a4643dea5d2757eaaf79a49
msgid "Spack is still in the beta stages of development. Most of our users run off of the develop branch, and fixes and new features are constantly being merged. So how do you keep up-to-date with upstream while maintaining your own local differences and contributing PRs to Spack?"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:368
# e4bc066727d94fd594fe723c59ce2988
msgid "Branching"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:370
# 1aff1657fb3b459aa42a194937ab8b70
msgid "The easiest way to contribute a pull request is to make all of your changes on new branches. Make sure your ``develop`` is up-to-date and create a new branch off of it:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:381
# b6132b0936b54dd1ac89f223d0f9a344
msgid "Here we assume that the local ``develop`` branch tracks the upstream develop branch of Spack. This is not a requirement and you could also do the same with remote branches. But for some it is more convenient to have a local branch that tracks upstream."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:386
# facc3ec1e49846dea2e9cdb90112c38d
msgid "Normally we prefer that commits pertaining to a package ``<package-name>`` have a message ``<package-name>: descriptive message``. It is important to add descriptive message so that others, who might be looking at your changes later (in a year or maybe two), would understand the rationale behind them."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:391
# 1be1a534d726441dacbbc0b174ede87b
msgid "Now, you can make your changes while keeping the ``develop`` branch pure. Edit a few files and commit them by running:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:399
# 56ea6e88cfea4d4fb642f2f633e0da13
msgid "Next, push it to your remote fork and create a PR:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:405
# 937f9d6e6a244f1abadc48993d63a400
msgid "GitHub provides a `tutorial <https://help.github.com/articles/about-pull-requests/>`_ on how to file a pull request. When you send the request, make ``develop`` the destination branch."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:409
# fcfe03a5371240c0b38462986b2d0636
msgid "If you need this change immediately and don't have time to wait for your PR to be merged, you can always work on this branch. But if you have multiple PRs, another option is to maintain a Frankenstein branch that combines all of your other branches:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:421
# ea7627daee3041c6b3c2b1681d5eec9f
msgid "This can be done with each new PR you submit. Just make sure to keep this local branch up-to-date with upstream ``develop`` too."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:426
# 4580d988453d4793a35b489bcc348f87
msgid "Cherry-Picking"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:428
# 277dcdef978e4e8db854c4acbe8e5011
msgid "What if you made some changes to your local modified develop branch and already committed them, but later decided to contribute them to Spack? You can use cherry-picking to create a new branch with only these commits."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:432
# 62a7ffb5edb34195b42f2024b80b26dd
msgid "First, check out your local modified develop branch:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:438
# dac350254c5f46eea2aa7f0f581be06b
msgid "Now, get the hashes of the commits you want from the output of:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:444
# a8d4905c26fa4520b8f5b1ae370aa5c7
msgid "Next, create a new branch off of upstream ``develop`` and copy the commits that you want in your PR:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:456
# 768a38cb667a4d32885a48de5ca2f459
msgid "Now you can create a PR from the web-interface of GitHub. The net result is as follows:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:459
# 3fc7b11b1b5842a2a18ea9ea053378bd
msgid "You patched your local version of Spack and can use it further."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:460
# 12fecb3c9a2b46d39a1dbf45a81844d3
msgid "You \"cherry-picked\" these changes in a stand-alone branch and submitted it as a PR upstream."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:463
# 7fb943bd492940e982bc9ae199ed5c6a
msgid "Should you have several commits to contribute, you could follow the same procedure by getting hashes of all of them and cherry-picking to the PR branch."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:468
# da7ee99a8fdb480fab2f677a1ab471bd
msgid "It is important that whenever you change something that might be of importance upstream, create a pull request as soon as possible. Do not wait for weeks/months to do this, because:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:472
# 94ea8f341a464a0588dc637c2cacc449
msgid "you might forget why you modified certain files"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:473
# 99ee9c8893b044baba964cd8dc13219d
msgid "it could get difficult to isolate this change into a stand-alone clean PR."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:477
# 89261b3d860d4a08bfec5c64e81730ca
msgid "Rebasing"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:479
# 47901a19209c4cc5b92b1357d4b31420
msgid "Other developers are constantly making contributions to Spack, possibly on the same files that your PR changed. If their PR is merged before yours, it can create a merge conflict. This means that your PR can no longer be automatically merged without a chance of breaking your changes. In this case, you will be asked to rebase on top of the latest upstream ``develop``."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:485
# 6b105e7c75104e8aae5c55f9fe1ea055
msgid "First, make sure your develop branch is up-to-date:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:492
# 4df01dd108294a4eba6af10c228df5d3
msgid "Now, we need to switch to the branch you submitted for your PR and rebase it on top of develop:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:500
# aec90008c2f74a048dc933cf98cc8d7d
msgid "Git will likely ask you to resolve conflicts. Edit the file that it says can't be merged automatically and resolve the conflict. Then, run:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:508
# 192de6dcdabe4a98a5ddea7d8f63f250
msgid "You may have to repeat this process multiple times until all conflicts are resolved. Once this is done, simply force push your rebased branch to your remote fork:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:517
# 17c07d17e6304e788c2d8d42e5035b62
msgid "Rebasing with cherry-pick"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:519
# c0eb5e338a624bcd8f658bc1495c47a7
msgid "You can also perform a rebase using ``cherry-pick``. First, create a temporary backup branch:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:527
# c043dacacbd7425c8c04396c79d3beb3
msgid "If anything goes wrong, you can always go back to your ``tmp`` branch. Now, look at the logs and save the hashes of any commits you would like to keep:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:534
# 527bd0477f20456b80f6b8f3a256186a
msgid "Next, go back to the original branch and reset it to ``develop``. Before doing so, make sure that you local ``develop`` branch is up-to-date with upstream:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:545
# 0e41c41f88354d7d8975326634bb8b21
msgid "Now you can cherry-pick relevant commits:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:552
# b1e604ae89b24da9ae8abee329291426
msgid "Push the modified branch to your fork:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:558
# 683bb3219be444738c745057cab21ace
msgid "If everything looks good, delete the backup branch:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:566
# 8ef54f32d70e44c191bf6ec2572b2a34
msgid "Re-writing History"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:568
# 2510346b7f8c495da670fb8531f73972
msgid "Sometimes you may end up on a branch that has diverged so much from develop that it cannot easily be rebased. If the current commits history is more of an experimental nature and only the net result is important, you may rewrite the history."
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:573
# 3b44601e3765494a887ff44387a8032c
msgid "First, merge upstream ``develop`` and reset you branch to it. On the branch in question, run:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:581
# fad6d45d7bc34b82a18357d4049abd5b
msgid "At this point your branch will point to the same commit as develop and thereby the two are indistinguishable. However, all the files that were previously modified will stay as such. In other words, you do not lose the changes you made. Changes can be reviewed by looking at diffs:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:591
# 4e0a7c62a32545099ee17f3e67b465fd
msgid "The next step is to rewrite the history by adding files and creating commits:"
msgstr ""

#: ../spack/lib/spack/docs/contribution_guide.rst:598
# 1b31e7d10d614f83945bc2e5045e600a
msgid "After all changed files are committed, you can push the branch to your fork and create a PR:"
msgstr ""

