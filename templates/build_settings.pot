# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2019, Lawrence Livermore National Laboratory.
# This file is distributed under the same license as the Spack package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Spack 0.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-23 08:25-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../spack/lib/spack/docs/build_settings.rst:10
# be4ef4985d694fe8899d54e35c45f2af
msgid "Build Customization"
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:12
# d7c6c3314a704d498fd8e0c469e376d5
msgid "Spack allows you to customize how your software is built through the ``packages.yaml`` file.  Using it, you can make Spack prefer particular implementations of virtual dependencies (e.g., MPI or BLAS/LAPACK), or you can make it prefer to build with particular compilers.  You can also tell Spack to use *external* software installations already present on your system."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:19
# bbc153eb1c40421785decf63d2917106
msgid "At a high level, the ``packages.yaml`` file is structured like this:"
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:32
# 8943a3d6038b4ade89ec0504a65f43b2
msgid "So you can either set build preferences specifically for *one* package, or you can specify that certain settings should apply to *all* packages. The types of settings you can customize are described in detail below."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:36
# 8c9609e19ca342faa677fe90d675ab82
msgid "Spack's build defaults are in the default ``etc/spack/defaults/packages.yaml`` file.  You can override them in ``~/.spack/packages.yaml`` or ``etc/spack/packages.yaml``. For more details on how this works, see :ref:`configuration-scopes`."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:45
# 36b3ffd068ad40f494e979e5678d96f6
msgid "External Packages"
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:47
# b710631595a2413eb03204bb90effde4
msgid "Spack can be configured to use externally-installed packages rather than building its own packages. This may be desirable if machines ship with system packages, such as a customized MPI that should be used instead of Spack building its own MPI."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:52
# 45326bdd88da4c299dcff758494bdd1f
msgid "External packages are configured through the ``packages.yaml`` file found in a Spack installation's ``etc/spack/`` or a user's ``~/.spack/`` directory. Here's an example of an external configuration:"
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:65
# 2985398c49ca4427ac61e62b25f51c3c
msgid "This example lists three installations of OpenMPI, one built with GCC, one built with GCC and debug information, and another built with Intel. If Spack is asked to build a package that uses one of these MPIs as a dependency, it will use the pre-installed OpenMPI in the given directory. ``packages.yaml`` can also be used to specify modules to load instead of the installation prefixes."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:72
# 9e69e2a27aa044409704c4618d15be02
msgid "Each ``packages.yaml`` begins with a ``packages:`` token, followed by a list of package names.  To specify externals, add a ``paths`` or ``modules`` token under the package name, which lists externals in a ``spec: /path`` or ``spec: module-name`` format.  Each spec should be as well-defined as reasonably possible.  If a package lacks a spec component, such as missing a compiler or package version, then Spack will guess the missing component based on its most-favored packages, and it may guess incorrectly."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:81
# 49466c7f92b84937840d5a7ebaa5c08e
msgid "Each package version and compiler listed in an external should have entries in Spack's packages and compiler configuration, even though the package and compiler may not ever be built."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:85
# 5639af24c24143d6af4369bc84ed4612
msgid "The packages configuration can tell Spack to use an external location for certain package versions, but it does not restrict Spack to using external packages.  In the above example, since newer versions of OpenMPI are available, Spack will choose to start building and linking with the latest version rather than continue using the pre-installed OpenMPI versions."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:91
# ba3ddba5059d457abb7474550437ad0a
msgid "To prevent this, the ``packages.yaml`` configuration also allows packages to be flagged as non-buildable.  The previous example could be modified to be:"
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:105
# a1677e2f3e4144aa8404c87c1f3b2238
msgid "The addition of the ``buildable`` flag tells Spack that it should never build its own version of OpenMPI, and it will instead always rely on a pre-built OpenMPI.  Similar to ``paths``, ``buildable`` is specified as a property under a package name."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:110
# b774c09203e440369a01364101149ec2
msgid "If an external module is specified as not buildable, then Spack will load the external module into the build environment which can be used for linking."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:113
# 49ff4dfeb53a4748adb864b5ec89fc07
msgid "The ``buildable`` does not need to be paired with external packages. It could also be used alone to forbid packages that may be buggy or otherwise undesirable."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:122
# 631b9cc57a7a4311b89ce677422c798b
msgid "Concretization Preferences"
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:124
# 59d98e7457c644368723ba6e750781e2
msgid "Spack can be configured to prefer certain compilers, package versions, dependencies, and variants during concretization. The preferred configuration can be controlled via the ``~/.spack/packages.yaml`` file for user configurations, or the ``etc/spack/packages.yaml`` site configuration."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:130
# 8751ca41b27b46c9964d1f8612640750
msgid "Here's an example ``packages.yaml`` file that sets preferred packages:"
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:145
# 259096540b5b472abf41ae7e7b0816e1
msgid "At a high level, this example is specifying how packages should be concretized.  The opencv package should prefer using GCC 4.9 and be built with debug options.  The gperftools package should prefer version 2.2 over 2.4.  Every package on the system should prefer mvapich2 for its MPI and GCC 4.4.7 (except for opencv, which overrides this by preferring GCC 4.9). These options are used to fill in implicit defaults.  Any of them can be overwritten on the command line if explicitly requested."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:153
# fc8b916a7724422886800d5eaad9bfcf
msgid "Each ``packages.yaml`` file begins with the string ``packages:`` and package names are specified on the next level. The special string ``all`` applies settings to each package. Underneath each package name is one or more components: ``compiler``, ``variants``, ``version``, or ``providers``.  Each component has an ordered list of spec ``constraints``, with earlier entries in the list being preferred over later entries."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:161
# 8b60dd5e873a4c328a5d22fd7a91fb92
msgid "Sometimes a package installation may have constraints that forbid the first concretization rule, in which case Spack will use the first legal concretization rule.  Going back to the example, if a user requests gperftools 2.3 or later, then Spack will install version 2.4 as the 2.4 version of gperftools is preferred over 2.3."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:167
# 3fa8471cb4eb4f6fa5675a7ba4117106
msgid "An explicit concretization rule in the preferred section will always take preference over unlisted concretizations.  In the above example, xlc isn't listed in the compiler list.  Every listed compiler from gcc to pgi will thus be preferred over the xlc compiler."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:172
# edce3b6157d4426faaf441b895987e5b
msgid "The syntax for the ``provider`` section differs slightly from other concretization rules.  A provider lists a value that packages may ``depend_on`` (e.g, MPI) and a list of rules for fulfilling that dependency."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:181
# ffd6afdcea02478389d65ebc7711b4f4
msgid "Package Permissions"
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:183
# a88b0e6e483a4249b717fb8169ac8a5f
msgid "Spack can be configured to assign permissions to the files installed by a package."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:186
# 4b35db2588374231aff95285e14cf606
msgid "In the ``packages.yaml`` file under ``permissions``, the attributes ``read``, ``write``, and ``group`` control the package permissions. These attributes can be set per-package, or for all packages under ``all``. If permissions are set under ``all`` and for a specific package, the package-specific settings take precedence."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:192
# 5d2bf91432fe45c8b7385faad26a1a44
msgid "The ``read`` and ``write`` attributes take one of ``user``, ``group``, and ``world``."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:207
# 1c6065a4038042f4b80deab3661df04c
msgid "The permissions settings describe the broadest level of access to installations of the specified packages. The execute permissions of the file are set to the same level as read permissions for those files that are executable. The default setting for ``read`` is ``world``, and for ``write`` is ``user``. In the example above, installations of ``my_app`` will be installed with user and group permissions but no world permissions, and owned by the group ``my_team``. All other packages will be installed with user and group write privileges, and world read privileges. Those packages will be owned by the group ``spack``."
msgstr ""

#: ../spack/lib/spack/docs/build_settings.rst:218
# 5b7d88434ca647a5a9cae664ac187ed4
msgid "The ``group`` attribute assigns a Unix-style group to a package. All files installed by the package will be owned by the assigned group, and the sticky group bit will be set on the install prefix and all directories inside the install prefix. This will ensure that even manually placed files within the install prefix are owned by the assigned group. If no group is assigned, Spack will allow the OS default behavior to go as expected."
msgstr ""

