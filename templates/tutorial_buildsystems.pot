# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2019, Lawrence Livermore National Laboratory.
# This file is distributed under the same license as the Spack package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Spack 0.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-27 13:44-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:10
msgid "Spack Package Build Systems"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:12
msgid "You may begin to notice after writing a couple of package template files a pattern emerge for some packages. For example, you may find yourself writing an :code:`install()` method that invokes: :code:`configure`, :code:`cmake`, :code:`make`, :code:`make install`. You may also find yourself writing :code:`\"prefix=\" + prefix` as an argument to :code:`configure` or :code:`cmake`. Rather than having you repeat these lines for all packages, Spack has classes that can take care of these patterns. In addition, these package files allow for finer grained control of these build systems. In this section, we will describe each build system and give examples on how these can be manipulated to install a package."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:25
msgid "Package Class Hierarchy"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:45
msgid "The above diagram gives a high level view of the class hierarchy and how each package relates. Each subclass inherits from the :code:`PackageBaseClass` super class. The bulk of the work is done in this super class which includes fetching, extracting to a staging directory and installing. Each subclass then adds additional build-system-specific functionality. In the following sections, we will go over examples of how to utilize each subclass and to see how powerful these abstractions are when packaging."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:55
msgid "Package"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:57
msgid "We've already seen examples of a :code:`Package` class in our walkthrough for writing package files, so we won't be spending much time with them here. Briefly, the Package class allows for abitrary control over the build process, whereas subclasses rely on certain patterns (e.g. :code:`configure` :code:`make` :code:`make install`) to be useful. :code:`Package` classes are particularly useful for packages that have a non-conventional way of being built since the packager can utilize some of Spack's helper functions to customize the building and installing of a package."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:68
msgid "Autotools"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:70
msgid "As we have seen earlier, packages using :code:`Autotools` use :code:`configure`, :code:`make` and :code:`make install` commands to execute the build and install process. In our :code:`Package` class, your typical build incantation will consist of the following:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:82
msgid "You'll see that this looks similar to what we wrote in our packaging tutorial."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:84
msgid "The :code:`Autotools` subclass aims to simplify writing package files and provides convenience methods to manipulate each of the different phases for a :code:`Autotools` build system."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:88
msgid ":code:`Autotools` packages consist of four phases:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:90
msgid ":code:`autoreconf()`"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:91
msgid ":code:`configure()`"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:92
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:195
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:485
msgid ":code:`build()`"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:93
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:196
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:486
msgid ":code:`install()`"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:96
msgid "Each of these phases have sensible defaults. Let's take a quick look at some the internals of the :code:`Autotools` class:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:104
msgid "This will open the :code:`AutotoolsPackage` file in your text editor."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:107
msgid "The examples showing code for these classes is abridged to avoid having long examples. We only show what is relevant to the packager."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:118
msgid "Important to note are the highlighted lines. These properties allow the packager to set what build targets and install targets they want for their package. If, for example, we wanted to add as our build target :code:`foo` then we can append to our :code:`build_targets` property:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:127
msgid "Which is similiar to invoking make in our Package"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:133
msgid "This is useful if we have packages that ignore environment variables and need a command-line argument."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:136
msgid "Another thing to take note of is in the :code:`configure()` method. Here we see that the :code:`prefix` argument is already included since it is a common pattern amongst packages using :code:`Autotools`. We then only have to override :code:`configure_args()`, which will then return it's output to to :code:`configure()`. Then, :code:`configure()` will append the common arguments"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:143
msgid "Packagers also have the option to run :code:`autoreconf` in case a package needs to update the build system and generate a new :code:`configure`. Though, for the most part this will be unnecessary."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:147
msgid "Let's look at the :code:`mpileaks` package.py file that we worked on earlier:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:153
msgid "Notice that mpileaks is a :code:`Package` class but uses the :code:`Autotools` build system. Although this package is acceptable let's make this into an :code:`AutotoolsPackage` class and simplify it further."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:162
msgid "We first inherit from the :code:`AutotoolsPackage` class."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:165
msgid "Although we could keep the :code:`install()` method, most of it can be handled by the :code:`AutotoolsPackage` base class. In fact, the only thing that needs to be overridden is :code:`configure_args()`."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:174
msgid "Since Spack takes care of setting the prefix for us we can exclude that as an argument to :code:`configure`. Our packages look simpler, and the packager does not need to worry about whether they have properly included :code:`configure` and :code:`make`."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:179
msgid "This version of the :code:`mpileaks` package installs the same as the previous, but the :code:`AutotoolsPackage` class lets us do it with a cleaner looking package file."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:185
msgid "Makefile"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:187
msgid "Packages that utilize :code:`Make` or a :code:`Makefile` usually require you to edit a :code:`Makefile` to set up platform and compiler specific variables. These packages are handled by the :code:`Makefile` subclass which provides convenience methods to help write these types of packages."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:192
msgid "A :code:`MakefilePackage` class has three phases that can be overridden. These include:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:194
msgid ":code:`edit()`"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:198
msgid "Packagers then have the ability to control how a :code:`Makefile` is edited, and what targets to include for the build phase or install phase."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:201
msgid "Let's also take a look inside the :code:`MakefilePackage` class:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:207
msgid "Take note of the following:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:216
msgid "Similar to :code:`Autotools`, :code:`MakefilePackage` class has properties that can be set by the packager. We can also override the different methods highlighted."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:221
msgid "Let's try to recreate the Bowtie_ package:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:243
msgid "Once the fetching is completed, Spack will open up your text editor in the usual fashion and create a template of a :code:`MakefilePackage` package.py."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:250
msgid "Spack was successfully able to detect that :code:`Bowtie` uses :code:`Make`. Let's add in the rest of our details for our package:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:258
msgid "As we mentioned earlier, most packages using a :code:`Makefile` have hard-coded variables that must be edited. These variables are fine if you happen to not care about setup or types of compilers used but Spack is designed to work with any compiler. The :code:`MakefilePackage` subclass makes it easy to edit these :code:`Makefiles` by having an :code:`edit()` method that can be overridden."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:265
msgid "Let's take a look at the default :code:`Makefile` that :code:`Bowtie` provides. If we look inside, we see that :code:`CC` and :code:`CXX` point to our GNU compiler:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:274
msgid "As usual make sure you have shell support activated with spack:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:275
msgid ":code:`source /path/to/spack_root/spack/share/spack/setup-env.sh`"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:292
msgid "To fix this, we need to use the :code:`edit()` method to write our custom :code:`Makefile`."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:300
msgid "Here we use a :code:`FileFilter` object to edit our :code:`Makefile`. It takes in a regular expression and then replaces :code:`CC` and :code:`CXX` to whatever Spack sets :code:`CC` and :code:`CXX` environment variables to. This allows us to build :code:`Bowtie` with whatever compiler we specify through Spack's :code:`spec` syntax."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:306
msgid "Let's change the build and install phases of our package:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:313
msgid "Here demonstrate another strategy that we can use to manipulate our package We can provide command-line arguments to :code:`make()`. Since :code:`Bowtie` can use :code:`tbb` we can either add :code:`NO_TBB=1` as a argument to prevent :code:`tbb` support or we can just invoke :code:`make` with no arguments."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:318
msgid ":code:`Bowtie` requires our :code:`install_target` to provide a path to the install directory. We can do this by providing :code:`prefix=` as a command line argument to :code:`make()`."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:322
msgid "Let's look at a couple of other examples and go through them:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:328
msgid "Some packages allow environment variables to be set and will honor them. Packages that use :code:`?=` for assignment in their :code:`Makefile` can be set using environment variables. In our :code:`esmf` example we set two environment variables in our :code:`edit()` method:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:357
msgid "As you may have noticed, we didn't really write anything to the :code:`Makefile` but rather we set environment variables that will override variables set in the :code:`Makefile`."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:361
msgid "Some packages include a configuration file that sets certain compiler variables, platform specific variables, and the location of dependencies or libraries. If the file is simple and only requires a couple of changes, we can overwrite those entries with our :code:`FileFilter` object. If the configuration involves complex changes, we can write a new configuration file from scratch."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:367
msgid "Let's look at an example of this in the :code:`elk` package:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:455
msgid ":code:`config` is just a dictionary that we can add key-value pairs to. By the end of the :code:`edit()` method we write the contents of our dictionary to :code:`make.inc`."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:461
msgid "CMake"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:463
msgid "CMake_ is another common build system that has been gaining popularity. It works in a similar manner to :code:`Autotools` but with differences in variable names, the number of configuration options available, and the handling of shared libraries. Typical build incantations look like this:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:477
msgid "As you can see from the example above, it's very similar to invoking :code:`configure` and :code:`make` in an :code:`Autotools` build system. However, the variable names and options differ. Most options in CMake are prefixed with a :code:`'-D'` flag to indicate a configuration setting."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:482
msgid "In the :code:`CMakePackage` class we can override the following phases:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:484
msgid ":code:`cmake()`"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:488
msgid "The :code:`CMakePackage` class also provides sensible defaults so we only need to override :code:`cmake_args()`."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:491
msgid "Let's look at these defaults in the :code:`CMakePackage` class in the :code:`_std_args()` method:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:503
msgid "Some :code:`CMake` packages use different generators. Spack is able to support Unix-Makefile_ generators as well as Ninja_ generators."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:509
msgid "If no generator is specified Spack will default to :code:`Unix Makefiles`."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:511
msgid "Next we setup the build type. In :code:`CMake` you can specify the build type that you want. Options include:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:514
msgid ":code:`empty`"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:515
msgid ":code:`Debug`"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:516
msgid ":code:`Release`"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:517
msgid ":code:`RelWithDebInfo`"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:518
msgid ":code:`MinSizeRel`"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:520
msgid "With these options you can specify whether you want your executable to have the debug version only, release version or the release with debug information. Release executables tend to be more optimized than Debug. In Spack, we set the default as RelWithDebInfo unless otherwise specified through a variant."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:525
msgid "Spack then automatically sets up the :code:`-DCMAKE_INSTALL_PREFIX` path, appends the build type (:code:`RelWithDebInfo` default), and then specifies a verbose :code:`Makefile`."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:529
msgid "Next we add the :code:`rpaths` to :code:`-DCMAKE_INSTALL_RPATH:STRING`."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:532
msgid "Finally we add to :code:`-DCMAKE_PREFIX_PATH:STRING` the locations of all our dependencies so that :code:`CMake` can find them."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:535
msgid "In the end our :code:`cmake` line will look like this (example is :code:`xrootd`):"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:541
msgid "We can see now how :code:`CMake` takes care of a lot of the boilerplate code that would have to be otherwise typed in."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:544
msgid "Let's try to recreate callpath_:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:569
msgid "which then produces the following template:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:575
msgid "Again we fill in the details:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:582
msgid "As mentioned earlier, Spack will use sensible defaults to prevent repeated code and to make writing :code:`CMake` package files simpler."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:585
msgid "In callpath, we want to add options to :code:`CALLPATH_WALKER` as well as add compiler flags. We add the following options like so:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:593
msgid "Now we can control our build options using :code:`cmake_args()`. If defaults are sufficient enough for the package, we can leave this method out."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:596
msgid ":code:`CMakePackage` classes allow for control of other features in the build system. For example, you can specify the path to the \"out of source\" build directory and also point to the root of the :code:`CMakeLists.txt` file if it is placed in a non-standard location."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:601
msgid "A good example of a package that has its :code:`CMakeLists.txt` file located at a different location is found in :code:`spades`."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:612
msgid "Here :code:`root_cmakelists_dir` will tell Spack where to find the location of :code:`CMakeLists.txt`. In this example, it is located a directory level below in the :code:`src` directory."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:616
msgid "Some :code:`CMake` packages also require the :code:`install` phase to be overridden. For example, let's take a look at :code:`sniffles`."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:623
msgid "In the :code:`install()` method, we have to manually install our targets so we override the :code:`install()` method to do it for us:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:639
msgid "PythonPackage"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:641
msgid "Python extensions and modules are built differently from source than most applications. Python uses a :code:`setup.py` script to install Python modules. The script consists of a call to :code:`setup()` which provides the information required to build a module to Distutils. If you're familiar with pip or easy_install, setup.py does the same thing."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:647
msgid "These modules are usually installed using the following line:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:653
msgid "There are also a list of commands and phases that you can call. To see the full list you can run:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:681
msgid "We can write package files for Python packages using the :code:`Package` class, but the class brings with it a lot of methods that are useless for Python packages. Instead, Spack has a :code:`PythonPackage` subclass that allows packagers of Python modules to be able to invoke :code:`setup.py` and use :code:`Distutils`, which is much more familiar to a typical python user."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:687
msgid "To see the defaults that Spack has for each a methods, we will take a look at the :code:`PythonPackage` class:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:694
msgid "We see the following:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:702
msgid "Each of these methods have sensible defaults or they can be overridden."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:704
msgid "We will write a package file for Pandas_:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:727
msgid "And we are left with the following template:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:733
msgid "As you can see this is not any different than any package template that we have written. We have the choice of providing build options or using the sensible defaults"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:737
msgid "Luckily for us, there is no need to provide build args."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:739
msgid "Next we need to find the dependencies of a package. Dependencies are usually listed in :code:`setup.py`. You can find the dependencies by searching for :code:`install_requires` keyword in that file. Here it is for :code:`Pandas`:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:761
msgid "You can find a more comprehensive list at the Pandas documentation_."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:766
msgid "By reading the documentation and :code:`setup.py` we found that :code:`Pandas` depends on :code:`python-dateutil`, :code:`pytz`, and :code:`numpy`, :code:`numexpr`, and finally :code:`bottleneck`."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:770
msgid "Here is the completed :code:`Pandas` script:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:776
msgid "It is quite important to declare all the dependencies of a Python package. Spack can \"activate\" Python packages to prevent the user from having to load each dependency module explictly. If a dependency is missed, Spack will be unable to properly activate the package and it will cause an issue. To learn more about extensions go to :ref:`cmd-spack-extensions`."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:782
msgid "From this example, you can see that building Python modules is made easy through the :code:`PythonPackage` class."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:787
msgid "Other Build Systems"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:789
msgid "Although we won't get in depth with any of the other build systems that Spack supports, it is worth mentioning that Spack does provide subclasses for the following build systems:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:793
msgid ":code:`IntelPackage`"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:794
msgid ":code:`SconsPackage`"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:795
msgid ":code:`WafPackage`"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:796
msgid ":code:`RPackage`"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:797
msgid ":code:`PerlPackage`"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:798
msgid ":code:`QMakePackage`"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:801
msgid "Each of these classes have their own abstractions to help assist in writing package files. For whatever doesn't fit nicely into the other build-systems, you can use the :code:`Package` class."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:805
msgid "Hopefully by now you can see how we aim to make packaging simple and robust through these classes. If you want to learn more about these build systems, check out :ref:`installation_procedure` in the Packaging Guide."
msgstr ""

