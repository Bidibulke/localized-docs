# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2019, Lawrence Livermore National Laboratory.
# This file is distributed under the same license as the Spack package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Spack 0.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-27 13:44-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../spack/lib/spack/docs/repositories.rst:10
msgid "Package Repositories"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:12
msgid "Spack comes with over 1,000 built-in package recipes in ``var/spack/repos/builtin/``.  This is a **package repository** -- a directory that Spack searches when it needs to find a package by name. You may need to maintain packages for restricted, proprietary or experimental software separately from the built-in repository. Spack allows you to configure local repositories using either the ``repos.yaml`` or the ``spack repo`` command."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:20
msgid "A package repository a directory structured like this::"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:34
msgid "The top-level ``repo.yaml`` file contains configuration metadata for the repository, and the ``packages`` directory contains subdirectories for each package in the repository.  Each package directory contains a ``package.py`` file and any patches or other files needed to build the package."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:40
msgid "Package repositories allow you to:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:42
msgid "Maintain your own packages separately from Spack;"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:44
msgid "Share your packages (e.g., by hosting them in a shared file system), without committing them to the built-in Spack package repository; and"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:47
msgid "Override built-in Spack packages with your own implementation."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:49
msgid "Packages in a separate repository can also *depend on* built-in Spack packages.  So, you can leverage existing recipes without re-implementing them in your own repository."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:55
msgid "``repos.yaml``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:57
msgid "Spack uses the ``repos.yaml`` file in ``~/.spack`` (and :ref:`elsewhere <configuration>`) to find repositories. Note that the ``repos.yaml`` configuration file is distinct from the ``repo.yaml`` file in each repository.  For more on the YAML format, and on how configuration file precedence works in Spack, see :ref:`configuration <configuration>`."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:63
msgid "The default ``etc/spack/defaults/repos.yaml`` file looks like this:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:70
msgid "The file starts with ``repos:`` and contains a single ordered list of paths to repositories. Each path is on a separate line starting with ``-``.  You can add a repository by inserting another path into the list:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:80
msgid "When Spack interprets a spec, e.g., ``mpich`` in ``spack install mpich``, it searches these repositories in order (first to last) to resolve each package name.  In this example, Spack will look for the following packages and use the first valid file:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:85
msgid "``/opt/local-repo/packages/mpich/package.py``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:86
msgid "``$spack/var/spack/repos/builtin/packages/mpich/package.py``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:90
msgid "Currently, Spack can only use repositories in the file system. We plan to eventually support URLs in ``repos.yaml``, so that you can easily point to remote package repositories, but that is not yet implemented."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:96
msgid "Namespaces"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:98
msgid "Every repository in Spack has an associated **namespace** defined in its top-level ``repo.yaml`` file.  If you look at ``var/spack/repos/builtin/repo.yaml`` in the built-in repository, you'll see that its namespace is ``builtin``:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:109
msgid "Spack records the repository namespace of each installed package.  For example, if you install the ``mpich`` package from the ``builtin`` repo, Spack records its fully qualified name as ``builtin.mpich``.  This accomplishes two things:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:114
msgid "You can have packages with the same name from different namespaces installed at once."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:117
msgid "You can easily determine which repository a package came from after it is installed (more :ref:`below <namespace-example>`)."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:122
msgid "It may seem redundant for a repository to have both a namespace and a path, but repository *paths* may change over time, or, as mentioned above, a locally hosted repository path may eventually be hosted at some remote URL."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:127
msgid "Namespaces are designed to allow *package authors* to associate a unique identifier with their packages, so that the package can be identified even if the repository moves. This is why the namespace is determined by the ``repo.yaml`` file in the repository rather than the local ``repos.yaml`` configuration: the *repository maintainer* sets the name."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:136
msgid "Uniqueness"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:138
msgid "You should choose a namespace that uniquely identifies your package repository.  For example, if you make a repository for packages written by your organization, you could use your organization's name.  You can also nest namespaces using periods, so you could identify a repository by a sub-organization.  For example, LLNL might use a namespace for its internal repositories like ``llnl``. Packages from the Physical & Life Sciences directorate (PLS) might use the ``llnl.pls`` namespace, and packages created by the Computation directorate might use ``llnl.comp``."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:147
msgid "Spack cannot ensure that every repository is named uniquely, but it will prevent you from registering two repositories with the same namespace at the same time.  If you try to add a repository that has the same name as an existing one, e.g., ``builtin``, Spack will print a warning message."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:156
msgid "Namespace example"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:158
msgid "Suppose that LLNL maintains its own version of ``mpich``, separate from Spack's built-in ``mpich`` package, and suppose you've installed both LLNL's and Spack's ``mpich`` packages.  If you just use ``spack find``, you won't see a difference between these two packages:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:170
msgid "However, if you use ``spack find -N``, Spack will display the packages with their namespaces:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:180
msgid "Now you know which one is LLNL's special version, and which one is the built-in Spack package.  As you might guess, packages that are identical except for their namespace will still have different hashes:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:191
msgid "All Spack commands that take a package :ref:`spec <sec-specs>` can also accept a fully qualified spec with a namespace.  This means you can use the namespace to be more specific when designating, e.g., which package you want to uninstall:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:202
msgid "Overriding built-in packages"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:204
msgid "Spack's search semantics mean that you can make your own implementation of a built-in Spack package (like ``mpich``), put it in a repository, and use it to override the built-in package.  As long as the repository containing your ``mpich`` is earlier any other in ``repos.yaml``, any built-in package that depends on ``mpich`` will be use the one in your repository."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:211
msgid "Suppose you have three repositories: the builtin Spack repo (``builtin``), a shared repo for your institution (e.g., ``llnl``), and a repo containing your own prototype packages (``proto``).  Suppose they contain packages as follows:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:217
msgid "Namespace"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:217
msgid "Path to repo"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:217
msgid "Packages"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:219
msgid "``proto``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:219
msgid "``~/proto``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:219
msgid "``mpich``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:221
msgid "``llnl``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:221
msgid "``/usr/local/llnl``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:221
msgid "``hdf5``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:223
msgid "``builtin``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:223
msgid "``$spack/var/spack/repos/builtin``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:223
msgid "``mpich``, ``hdf5``, others"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:226
msgid "Suppose that ``hdf5`` depends on ``mpich``.  You can override the built-in ``hdf5`` by adding the ``llnl`` repo to ``repos.yaml``:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:235
msgid "``spack install hdf5`` will install ``llnl.hdf5 ^builtin.mpich``."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:237
msgid "If, instead, ``repos.yaml`` looks like this:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:246
msgid "``spack install hdf5`` will install ``llnl.hdf5 ^proto.mpich``."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:248
msgid "Any unqualified package name will be resolved by searching ``repos.yaml`` from the first entry to the last.  You can force a particular repository's package by using a fully qualified name.  For example, if your ``repos.yaml`` is as above, and you want ``builtin.mpich`` instead of ``proto.mpich``, you can write::"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:256
msgid "which will install ``llnl.hdf5 ^builtin.mpich``."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:258
msgid "Similarly, you can force the ``builtin.hdf5`` like this::"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:262
msgid "This will not search ``repos.yaml`` at all, as the ``builtin`` repo is specified in both cases.  It will install ``builtin.hdf5 ^builtin.mpich``."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:266
msgid "If you want to see which repositories will be used in a build *before* you install it, you can use ``spack spec -N``:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:296
msgid "You *can* use a fully qualified package name in a ``depends_on`` directive in a ``package.py`` file, like so::"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:301
msgid "This is *not* recommended, as it makes it very difficult for multiple repos to be composed and shared.  A ``package.py`` like this will fail if the ``proto`` repository is not registered in ``repos.yaml``."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:310
msgid "``spack repo``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:312
msgid "Spack's :ref:`configuration system <configuration>` allows repository settings to come from ``repos.yaml`` files in many locations.  If you want to see the repositories registered as a result of all configuration files, use ``spack repo list``."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:319
msgid "``spack repo list``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:328
msgid "Each repository is listed with its associated namespace.  To get the raw, merged YAML from all configuration files, use ``spack config get repos``:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:338
msgid "mNote that, unlike ``spack repo list``, this does not include the namespace, which is read from each repo's ``repo.yaml``."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:343
msgid "``spack repo create``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:345
msgid "To make your own repository, you don't need to construct a directory yourself; you can use the ``spack repo create`` command."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:362
msgid "By default, the namespace of a new repo matches its directory's name. You can supply a custom namespace with a second argument, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:378
msgid "``spack repo add``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:380
msgid "Once your repository is created, you can register it with Spack with ``spack repo add``:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:393
msgid "This simply adds the repo to your ``repos.yaml`` file."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:395
msgid "Once a repository is registered like this, you should be able to see its packages' names in the output of ``spack list``, and you should be able to build them using ``spack install <name>`` as you would with any built-in package."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:402
msgid "``spack repo remove``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:404
msgid "You can remove an already-registered repository with ``spack repo rm``. This will work whether you pass the repository's namespace *or* its path."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:408
msgid "By namespace:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:419
msgid "By path:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:432
msgid "Repo namespaces and Python"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:434
msgid "You may have noticed that namespace notation for repositories is similar to the notation for namespaces in Python.  As it turns out, you *can* treat Spack repositories like Python packages; this is how they are implemented."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:439
msgid "You could, for example, extend a ``builtin`` package in your own repository:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:449
msgid "Spack repo namespaces are actually Python namespaces tacked on under ``spack.pkg``.  The search semantics of ``repos.yaml`` are actually implemented using Python's built-in `sys.path <https://docs.python.org/2/library/sys.html#sys.path>`_ search.  The :py:mod:`spack.repo` module implements a custom `Python importer <https://docs.python.org/2/library/imp.html>`_."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:458
msgid "The mechanism for extending packages is not yet extensively tested, and extending packages across repositories imposes inter-repo dependencies, which may be hard to manage.  Use this feature at your own risk, but let us know if you have a use case for it."
msgstr ""

