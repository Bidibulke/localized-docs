# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2019, Lawrence Livermore National Laboratory.
# This file is distributed under the same license as the Spack package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Spack 0.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-23 00:42-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../spack/lib/spack/docs/repositories.rst:10
# 9eb283ce243d436fa51bd130f196ec33
msgid "Package Repositories"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:12
# 5b4bb1e84dfa41d5beda0ec048eceda4
msgid "Spack comes with over 1,000 built-in package recipes in ``var/spack/repos/builtin/``.  This is a **package repository** -- a directory that Spack searches when it needs to find a package by name. You may need to maintain packages for restricted, proprietary or experimental software separately from the built-in repository. Spack allows you to configure local repositories using either the ``repos.yaml`` or the ``spack repo`` command."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:20
# 4ec8c9cdcaaf44ef8783698d8f18e59b
msgid "A package repository a directory structured like this::"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:34
# 2b5eafc41c5d4a1a9c6cae78a2917c71
msgid "The top-level ``repo.yaml`` file contains configuration metadata for the repository, and the ``packages`` directory contains subdirectories for each package in the repository.  Each package directory contains a ``package.py`` file and any patches or other files needed to build the package."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:40
# 43c15bf7a6f945a4a571cce04cba85aa
msgid "Package repositories allow you to:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:42
# 365e8ed9bc2145a8bc548d005dedfd37
msgid "Maintain your own packages separately from Spack;"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:44
# 5509cb94bf9744ff86e6150858dcb647
msgid "Share your packages (e.g., by hosting them in a shared file system), without committing them to the built-in Spack package repository; and"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:47
# 5678be0de42a4de4b31fc293a6aa2366
msgid "Override built-in Spack packages with your own implementation."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:49
# 7355cff516604f60abd3c552fff1dc90
msgid "Packages in a separate repository can also *depend on* built-in Spack packages.  So, you can leverage existing recipes without re-implementing them in your own repository."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:55
# b005ae9537cb495698a57d102d25c4b0
msgid "``repos.yaml``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:57
# 126fc6d92c2f4f3393079de6dcf928e1
msgid "Spack uses the ``repos.yaml`` file in ``~/.spack`` (and :ref:`elsewhere <configuration>`) to find repositories. Note that the ``repos.yaml`` configuration file is distinct from the ``repo.yaml`` file in each repository.  For more on the YAML format, and on how configuration file precedence works in Spack, see :ref:`configuration <configuration>`."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:63
# 6b3fe2df9b174236a0e14d73ebdc0419
msgid "The default ``etc/spack/defaults/repos.yaml`` file looks like this:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:70
# 5fe7340dcab74d67a4e65f4f580a1fc3
msgid "The file starts with ``repos:`` and contains a single ordered list of paths to repositories. Each path is on a separate line starting with ``-``.  You can add a repository by inserting another path into the list:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:80
# ad2218f7b5ca4a608b5e9fdccc5d0b53
msgid "When Spack interprets a spec, e.g., ``mpich`` in ``spack install mpich``, it searches these repositories in order (first to last) to resolve each package name.  In this example, Spack will look for the following packages and use the first valid file:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:85
# 434ea0f499b546068c3fd9407191dff1
msgid "``/opt/local-repo/packages/mpich/package.py``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:86
# a41dc3e11cff496ea4cb9c8d936651c8
msgid "``$spack/var/spack/repos/builtin/packages/mpich/package.py``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:90
# bb3a0ff3005e4203b9ee950cfe78026d
msgid "Currently, Spack can only use repositories in the file system. We plan to eventually support URLs in ``repos.yaml``, so that you can easily point to remote package repositories, but that is not yet implemented."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:96
# c278730f708c4a0cb46cc81365592116
msgid "Namespaces"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:98
# fd72994f85324914b52a3c816c849305
msgid "Every repository in Spack has an associated **namespace** defined in its top-level ``repo.yaml`` file.  If you look at ``var/spack/repos/builtin/repo.yaml`` in the built-in repository, you'll see that its namespace is ``builtin``:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:109
# e833ca5284424e04a10f4d27bfe0ea55
msgid "Spack records the repository namespace of each installed package.  For example, if you install the ``mpich`` package from the ``builtin`` repo, Spack records its fully qualified name as ``builtin.mpich``.  This accomplishes two things:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:114
# ddde6d26e28d4c23a5be31fbf617b01d
msgid "You can have packages with the same name from different namespaces installed at once."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:117
# 06624ce4d1f34498b2e5912e0c4c3d0e
msgid "You can easily determine which repository a package came from after it is installed (more :ref:`below <namespace-example>`)."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:122
# b8d9e6882b77437f8e3c9ed37b810ec6
msgid "It may seem redundant for a repository to have both a namespace and a path, but repository *paths* may change over time, or, as mentioned above, a locally hosted repository path may eventually be hosted at some remote URL."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:127
# ebe0c96c75474202a48da3a65ff6278d
msgid "Namespaces are designed to allow *package authors* to associate a unique identifier with their packages, so that the package can be identified even if the repository moves. This is why the namespace is determined by the ``repo.yaml`` file in the repository rather than the local ``repos.yaml`` configuration: the *repository maintainer* sets the name."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:136
# 01dcd600297b4d09834e89b7b4e09853
msgid "Uniqueness"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:138
# 2db40c8f5b9b414191b3f3b771b82512
msgid "You should choose a namespace that uniquely identifies your package repository.  For example, if you make a repository for packages written by your organization, you could use your organization's name.  You can also nest namespaces using periods, so you could identify a repository by a sub-organization.  For example, LLNL might use a namespace for its internal repositories like ``llnl``. Packages from the Physical & Life Sciences directorate (PLS) might use the ``llnl.pls`` namespace, and packages created by the Computation directorate might use ``llnl.comp``."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:147
# 41894aec57c5464abdff92dfcc95ea58
msgid "Spack cannot ensure that every repository is named uniquely, but it will prevent you from registering two repositories with the same namespace at the same time.  If you try to add a repository that has the same name as an existing one, e.g., ``builtin``, Spack will print a warning message."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:156
# 6ad5a80d7d074b63bc1a5011672fc04e
msgid "Namespace example"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:158
# 7151c5fe02db47718cc032d3f2ac0d9d
msgid "Suppose that LLNL maintains its own version of ``mpich``, separate from Spack's built-in ``mpich`` package, and suppose you've installed both LLNL's and Spack's ``mpich`` packages.  If you just use ``spack find``, you won't see a difference between these two packages:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:170
# a05c83540b984d7f9932852b06b0baf4
msgid "However, if you use ``spack find -N``, Spack will display the packages with their namespaces:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:180
# 3e13f7930ea7478a8dda716f6b3dcb31
msgid "Now you know which one is LLNL's special version, and which one is the built-in Spack package.  As you might guess, packages that are identical except for their namespace will still have different hashes:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:191
# a75584347ae84d9aa1c35eb40a638d80
msgid "All Spack commands that take a package :ref:`spec <sec-specs>` can also accept a fully qualified spec with a namespace.  This means you can use the namespace to be more specific when designating, e.g., which package you want to uninstall:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:202
# 85c919c026584b0f88b18345615b960c
msgid "Overriding built-in packages"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:204
# b79359a908c544559dd3f37d00b01b1d
msgid "Spack's search semantics mean that you can make your own implementation of a built-in Spack package (like ``mpich``), put it in a repository, and use it to override the built-in package.  As long as the repository containing your ``mpich`` is earlier any other in ``repos.yaml``, any built-in package that depends on ``mpich`` will be use the one in your repository."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:211
# 199172b0ce424cd38c8a101d46d83d76
msgid "Suppose you have three repositories: the builtin Spack repo (``builtin``), a shared repo for your institution (e.g., ``llnl``), and a repo containing your own prototype packages (``proto``).  Suppose they contain packages as follows:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:217
# b0f1f1ea241945aaabd5f44f61654b4e
msgid "Namespace"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:217
# 348c2143e23c4b3fb9d1e1f666c00517
msgid "Path to repo"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:217
# 3cf939d214224fa5a75d5270ae4ce304
msgid "Packages"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:219
# 130675348a194be9a027d5c3a7052837
msgid "``proto``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:219
# a061c8c3b5ee4009b2bfda1cb5e00a38
msgid "``~/proto``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:219
# cc535f7bf8e94fdab47a2f3b8c072ff5
msgid "``mpich``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:221
# a5908144815a40f5a5504a3d20231af0
msgid "``llnl``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:221
# 4b3908b3f1a94261bbc808575b23e1ce
msgid "``/usr/local/llnl``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:221
# ce0c0ac1ce7d4bc9b3f14a1622c881bd
msgid "``hdf5``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:223
# 51ce0698b0774d83a5f702690ee68dc0
msgid "``builtin``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:223
# c934973ebafd404790097d98c933f775
msgid "``$spack/var/spack/repos/builtin``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:223
# 7498e1298ac9402495a8355f36008458
msgid "``mpich``, ``hdf5``, others"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:226
# e4f015530aa044edb723b6f31631f7d5
msgid "Suppose that ``hdf5`` depends on ``mpich``.  You can override the built-in ``hdf5`` by adding the ``llnl`` repo to ``repos.yaml``:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:235
# 96cac2e2f8754499b6d6b8de282c8915
msgid "``spack install hdf5`` will install ``llnl.hdf5 ^builtin.mpich``."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:237
# 35fa874b74d84c56b8a36612491f4d59
msgid "If, instead, ``repos.yaml`` looks like this:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:246
# a19939bbae7d4af59eb36ba58959ec8d
msgid "``spack install hdf5`` will install ``llnl.hdf5 ^proto.mpich``."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:248
# 95b39df547e840b38f84ea0e3a1706b5
msgid "Any unqualified package name will be resolved by searching ``repos.yaml`` from the first entry to the last.  You can force a particular repository's package by using a fully qualified name.  For example, if your ``repos.yaml`` is as above, and you want ``builtin.mpich`` instead of ``proto.mpich``, you can write::"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:256
# b4ef013cd3b847b79baf5afcb0d88098
msgid "which will install ``llnl.hdf5 ^builtin.mpich``."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:258
# 546a195403934d12984988fad6049f71
msgid "Similarly, you can force the ``builtin.hdf5`` like this::"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:262
# 8bc524ce2bcb40f79083889cdd291ca8
msgid "This will not search ``repos.yaml`` at all, as the ``builtin`` repo is specified in both cases.  It will install ``builtin.hdf5 ^builtin.mpich``."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:266
# 9bf48041db774281856d3e60087db939
msgid "If you want to see which repositories will be used in a build *before* you install it, you can use ``spack spec -N``:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:296
# 3c5edcf6362341ff8afc2f83cc606085
msgid "You *can* use a fully qualified package name in a ``depends_on`` directive in a ``package.py`` file, like so::"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:301
# f1bc22a52eba4697a16c012e43267f37
msgid "This is *not* recommended, as it makes it very difficult for multiple repos to be composed and shared.  A ``package.py`` like this will fail if the ``proto`` repository is not registered in ``repos.yaml``."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:310
# 34d1cf8174f5484dbc35343ea939e489
msgid "``spack repo``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:312
# 8d4391ba882f4a278e6e58049dcd5afb
msgid "Spack's :ref:`configuration system <configuration>` allows repository settings to come from ``repos.yaml`` files in many locations.  If you want to see the repositories registered as a result of all configuration files, use ``spack repo list``."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:319
# 4bb28907e56a4260a202b11caec84730
msgid "``spack repo list``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:328
# 7e51568187a649f5a3190e1b2225dc39
msgid "Each repository is listed with its associated namespace.  To get the raw, merged YAML from all configuration files, use ``spack config get repos``:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:338
# 900978ae2dd243adad4488b7af7b6d43
msgid "mNote that, unlike ``spack repo list``, this does not include the namespace, which is read from each repo's ``repo.yaml``."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:343
# 604d02d3b6f64d55bc57afb3637508da
msgid "``spack repo create``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:345
# 1a25d953b50c43a48da1ed429b91f070
msgid "To make your own repository, you don't need to construct a directory yourself; you can use the ``spack repo create`` command."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:362
# 5ebef0231d4d40ebb0e4a7df96367c07
msgid "By default, the namespace of a new repo matches its directory's name. You can supply a custom namespace with a second argument, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:378
# 7fc0a68d4d4542aebbcb0ee284212de7
msgid "``spack repo add``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:380
# d29c4311063047179e2da4568e701c80
msgid "Once your repository is created, you can register it with Spack with ``spack repo add``:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:393
# fe37c01096da4259b6f7bc67d5ce6ca8
msgid "This simply adds the repo to your ``repos.yaml`` file."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:395
# 484da03b10b542619d3591aa8a082abc
msgid "Once a repository is registered like this, you should be able to see its packages' names in the output of ``spack list``, and you should be able to build them using ``spack install <name>`` as you would with any built-in package."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:402
# e39a97b4dc3345398b966ef82b29c3b5
msgid "``spack repo remove``"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:404
# 22203e31fd3443cabc3b9aa2752db155
msgid "You can remove an already-registered repository with ``spack repo rm``. This will work whether you pass the repository's namespace *or* its path."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:408
# 7f4c0fd1ab0f46b8b91ad705addfe835
msgid "By namespace:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:419
# 8b33d7c358f04916a09326fc1955aad3
msgid "By path:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:432
# ab42fcbc38644baba9331b263975c3c2
msgid "Repo namespaces and Python"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:434
# 0643e729e15d40c089162f2b02e01862
msgid "You may have noticed that namespace notation for repositories is similar to the notation for namespaces in Python.  As it turns out, you *can* treat Spack repositories like Python packages; this is how they are implemented."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:439
# 2ec8595cbe5a44e697839af8352f2cd3
msgid "You could, for example, extend a ``builtin`` package in your own repository:"
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:449
# 9e4f08eb6a324f1288b1f9f725665b79
msgid "Spack repo namespaces are actually Python namespaces tacked on under ``spack.pkg``.  The search semantics of ``repos.yaml`` are actually implemented using Python's built-in `sys.path <https://docs.python.org/2/library/sys.html#sys.path>`_ search.  The :py:mod:`spack.repo` module implements a custom `Python importer <https://docs.python.org/2/library/imp.html>`_."
msgstr ""

#: ../spack/lib/spack/docs/repositories.rst:458
# 0f78ecbeb0c74916b256da9a39792ff3
msgid "The mechanism for extending packages is not yet extensively tested, and extending packages across repositories imposes inter-repo dependencies, which may be hard to manage.  Use this feature at your own risk, but let us know if you have a use case for it."
msgstr ""

