# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2019, Lawrence Livermore National Laboratory.
# This file is distributed under the same license as the Spack package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Spack 0.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-23 00:42-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../spack/lib/spack/docs/spack.rst:2
# 6fc1f12457c24d948e4f4651ede2d950
msgid "spack package"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:5
# 7571f7e4d5b14e29ab52793b1e4f50f2
msgid "Subpackages"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:22
# 4cf7ad0caf5a46c19fe10e0c68cc3b40
msgid "Submodules"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:25
# 09d0315b3b8842d3a80e9dbf17bda5c3
msgid "spack.abi module"
msgstr ""

#: ../spack/lib/spack/spack/abi.py:docstring of spack.abi.ABI:1
#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.Arch:1
#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.OperatingSystem:1
#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.Platform:1
#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.Target:1
#: ../spack/lib/spack/spack/caches.py:docstring of spack.caches.MirrorCache:1
#: ../spack/lib/spack/spack/compiler.py:docstring of spack.compiler.Compiler:1
#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer:1
#: ../spack/lib/spack/spack/config.py:docstring of spack.config.ConfigScope:1
#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration:1
#: ../spack/lib/spack/spack/database.py:docstring of spack.database.Database:1
#: ../spack/lib/spack/spack/database.py:docstring of spack.database.ForbiddenLock:1
#: ../spack/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:1
#: ../spack/lib/spack/spack/dependency.py:docstring of spack.dependency.Dependency:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout:1
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FsCache:1
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView:1
#: ../spack/lib/spack/spack/graph.py:docstring of spack.graph.AsciiGraph:1
#: ../spack/lib/spack/spack/main.py:docstring of spack.main.SpackCommand:1
#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod:1
#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.when:1
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.InstallPhase:1
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageViewMixin:1
#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs:1
#: ../spack/lib/spack/spack/parse.py:docstring of spack.parse.Lexer:1
#: ../spack/lib/spack/spack/parse.py:docstring of spack.parse.Parser:1
#: ../spack/lib/spack/spack/parse.py:docstring of spack.parse.Token:1
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.Patch:1
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache:1
#: ../spack/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Indexer:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoIndex:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath:1
#: ../spack/lib/spack/spack/report.py:docstring of spack.report.collect_info:1
#: ../spack/lib/spack/spack/reporter.py:docstring of spack.reporter.Reporter:1
#: ../spack/lib/spack/spack/resource.py:docstring of spack.resource.Resource:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec:1
#: ../spack/lib/spack/spack/spec_set.py:docstring of spack.spec_set.CombinatorialSpecSet:1
#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.DIYStage:1
#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage:1
#: ../spack/lib/spack/spack/store.py:docstring of spack.store.Store:1
#: ../spack/lib/spack/spack/tengine.py:docstring of spack.tengine.Context:1
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant:1
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant:1
#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version:1
#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionRange:1
#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionList:1
# 75fdd6c7f2294456a653b8c65084dc82
# fa955f68b9e9478d959abcc8c033223b
# dccbe45c2cb9419888d0bc43f395eccd
# 9abeeb4e41e044139ed89f7d69fb3563
# 2dd1f74b5b204808b4c7cc6b78ae3f10
# d2ddb7a206e94dbfb75403a00fc5b677
# 21a7840b74eb4f89b748360861ea6b88
# 0ca29abd06bf4ce39f999cda029f5638
# c05340d2c6d146f7b354f29853e7bccd
# 9de5351ee7e24b92a379eb9b475297ab
# 8576919c649a4276b9e3bf224998c82a
# 35ddd3d9a7204d6a91bd382eeda46067
# a4546752d6af47329cb374c44ae0ec11
# 8904bb6f8e9848e19260cecdfd84b116
# 620d4a0620b547b284b2f744a7f85837
# 4cfbf41763794866a0ee58eb6884b290
# 0d3ff3676f484701b7bb50cb75275e7a
# 39eeadb7d6b64c90aaaf270511b4311a
# 70f5ef728eee4700963c14b6131a89a1
# 24e0c3ccb4844efaadacd228bed7d843
# a1205f9b99aa403786f209fcd3814e87
# c124be3fe54b468abd8a64572891e1bb
# 61ab4b38bbec4f2c9b1583a48b441518
# 58a3308f77be4dbdb2d80428e0a4e0c8
# 4f24949356274da39e5ff5a4a6f6212a
# e0b7c286e1dd47f2b03240b2856f2f01
# 1690af98705c46e29d5b371fcd32936d
# 31ff2077f6f2482880ab9a0ecdd80aaf
# 3223385d662b4ae08393aba25330658c
# 91585e54c7654faaad7c59dae5492534
# dbe54c446dc046a697a5bfa2bea27950
# 9cc0d08d4e8544cebb6b662d7fbf5e9d
# 84e493ef47244ca59efd6ec0b94e2345
# 7b440a8ee6c940c5a86b5f28a86eec0f
# 3fa40ef59ad14ff6a1a1fc11626ea0cd
# 9113df6665814b1f932334f5c426937b
# 7f3fad3d2a45491fb385f333b2c515d2
# 35b3ca811bb2411abb8192f570f48ee1
# db029f9828f7453ca2556072612e1947
# a78bf5d4f82c4d0094bac04dd0188a34
# 350ba64633ad438c96a6a87b974831ec
# 29544516abb3416ca7596d63326eb262
# 19f1a363336d4816b8cc3e2eade35ebe
# 583c3f4a995840278789bb87d57369b3
# 4397b5ba3bc745e9acd6e811b96033e0
# 884ac004075443f395cf8fc4127e6b6c
# 4ddb72343120487fb42b32671a0bacd5
# cee3966cd9bb46a0ae128a6b845ec8da
# 2ef4b2d4b4aa4f17a6ae97e97e4ed2c8
# edf002ade6c847e6b01172382f964ef0
# b9d83ce0b9e840f68b83a663ca7964e0
msgid "Bases: :class:`object`"
msgstr ""

#: ../spack/lib/spack/spack/abi.py:docstring of spack.abi.ABI:1
# 9cada20b66ee474a8efbce87ad0f3dc0
msgid "This class provides methods to test ABI compatibility between specs. The current implementation is rather rough and could be improved."
msgstr ""

#: ../spack/lib/spack/spack/abi.py:docstring of spack.abi.ABI.architecture_compatible:1
# c6af5d516ac34f89a5e33d3b65be2e6c
msgid "Return true if parent and child have ABI compatible targets."
msgstr ""

#: ../spack/lib/spack/spack/abi.py:docstring of spack.abi.ABI.compatible:1
# 42c9a6105a344c63833924c1aa8d42cc
msgid "Returns true iff a parent and child spec are ABI compatible"
msgstr ""

#: ../spack/lib/spack/spack/abi.py:docstring of spack.abi.ABI.compiler_compatible:1
# 4fa59c05cd6f44198c8b5e7d0f6377b3
msgid "Return true if compilers for parent and child are ABI compatible."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:33
# 120929fc7347419abc108e4a9c57f28b
msgid "spack.architecture module"
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture:1
# 9fb1cae01d774ccc960cff951dee4698
msgid "This module contains all the elements that are required to create an architecture object. These include, the target processor, the operating system, and the architecture platform (i.e. cray, darwin, linux, bgq, etc) classes."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture:5
# 5769b5256e1a4b6191d2cc27c753ca2a
msgid "On a multiple architecture machine, the architecture spec field can be set to build a package against any target and operating system that is present on the platform. On Cray platforms or any other architecture that has different front and back end environments, the operating system will determine the method of compiler detection."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture:14
# 9b5d8fe1828647728bb2c8c571415e35
msgid "There are two different types of compiler detection:"
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture:13
# ad2a7216bd8e4c79abdf424d77cc318d
msgid "Through the $PATH env variable (front-end detection)"
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture:14
# b50b6001960d4ef89227435bd55f039a
msgid "Through the tcl module system. (back-end detection)"
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture:16
# 96f05d8b9a8a470a91ed0b4f72acb4b6
msgid "Depending on which operating system is specified, the compiler will be detected using one of those methods."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture:19
# 01780919764e4409ac299a8024c03177
msgid "For platforms such as linux and darwin, the operating system is autodetected and the target is set to be x86_64."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture:22
# 52d0f877beee49b185f2c683483f52c4
msgid "The command line syntax for specifying an architecture is as follows:"
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture:24
# 0e65cef11dd648a28ba3c1f9ac17d093
msgid "target=<Target name> os=<OperatingSystem name>"
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture:26
# 2fa1738771a741a3ad833de76cfbb180
msgid "If the user wishes to use the defaults, either target or os can be left out of the command line and Spack will concretize using the default. These defaults are set in the 'platforms/' directory which contains the different subclasses for platforms. If the machine has multiple architectures, the user can also enter front-end, or fe or back-end or be. These settings will concretize to their respective front-end and back-end targets and operating systems. Additional platforms can be added by creating a subclass of Platform and adding it inside the platform directory."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture:35
# 77762626c9254845a8c59aa18c8ace40
msgid "Platforms are an abstract class that are extended by subclasses. If the user wants to add a new type of platform (such as cray_xe), they can create a subclass and set all the class attributes such as priority, front_target, back_target, front_os, back_os. Platforms also contain a priority class attribute. A lower number signifies higher priority. These numbers are arbitrarily set and can be changed though often there isn't much need unless a new platform is added and the user wants that to be detected first."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture:43
# 63bc3728351c41969945865f64ee80a4
msgid "Targets are created inside the platform subclasses. Most architecture (like linux, and darwin) will have only one target (x86_64) but in the case of Cray machines, there is both a frontend and backend processor. The user can specify which targets are present on front-end and back-end architecture"
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture:48
# fc0700ef790c4b468eaea00419202bb9
msgid "Depending on the platform, operating systems are either auto-detected or are set. The user can set the front-end and back-end operating setting by the class attributes front_os and back_os. The operating system as described earlier, will be responsible for compiler detection."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.Arch:1
# 999fbc3d4ad543e39a9adcda55095f6e
msgid "Architecture is now a class to help with setting attributes."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.Arch:3
# 65eaea89b2d041ccb21f35134a845fa0
msgid "TODO: refactor so that we don't need this class."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.NoPlatformError:1
#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NewLayoutException:1
#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoChecksumException:1
#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoGpgException:1
#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoKeyException:1
#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoVerifyException:1
#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.PickKeyException:1
#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.InstallError:1
#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.InsufficientArchitectureInfoError:1
#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.NoBuildError:1
#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.NoCompilersForArchError:1
#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.NoValidVersionError:1
#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.UnavailableCompilerVersionError:1
#: ../spack/lib/spack/spack/config.py:docstring of spack.config.ConfigError:1
#: ../spack/lib/spack/spack/database.py:docstring of spack.database.CorruptDatabaseError:1
#: ../spack/lib/spack/spack/database.py:docstring of spack.database.ForbiddenLockError:1
#: ../spack/lib/spack/spack/database.py:docstring of spack.database.InvalidDatabaseVersionError:1
#: ../spack/lib/spack/spack/database.py:docstring of spack.database.MissingDependenciesError:1
#: ../spack/lib/spack/spack/database.py:docstring of spack.database.NonConcreteSpecAddError:1
#: ../spack/lib/spack/spack/database.py:docstring of spack.database.UpstreamDatabaseLockingError:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayoutError:1
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.SpackEnvironmentError:1
#: ../spack/lib/spack/spack/error.py:docstring of spack.error.NoHeadersError:1
#: ../spack/lib/spack/spack/error.py:docstring of spack.error.NoLibrariesError:1
#: ../spack/lib/spack/spack/error.py:docstring of spack.error.SpecError:1
#: ../spack/lib/spack/spack/error.py:docstring of spack.error.UnsupportedPlatformError:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchError:1
#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.MirrorError:1
#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.MultiMethodError:1
#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.NoSuchMethodError:1
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.DependencyConflictError:1
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.FetchError:1
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.InstallError:1
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageError:1
#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.VirtualInPackagesYAMLError:1
#: ../spack/lib/spack/spack/parse.py:docstring of spack.parse.ParseError:1
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.NoSuchPatchError:1
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.PatchDirectiveError:1
#: ../spack/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndexError:1
#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.InstallRootStringException:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoError:1
#: ../spack/lib/spack/spack/error.py:docstring of spack.spec.SpecError:1
#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.StageError:1
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.UrlParseError:1
# d27e72999e0348e499a0d71c4e5686f6
# 777abed986c5413ea5bdfdf16e03d87f
# bcb06aa9cce843d5be6f22f0f5127635
# 72a91e3b8608400eb0f893d2982ad09e
# 1e67989d74684095ba199db3f89b9f6a
# 0f74e1db1ad741d2af92d666f64a9c2f
# c4c373e47d624e4284c83eb11933a23b
# af058285937a4e35a3e291e02a665689
# 62270c2b4998434a9121343897f135b6
# 22f3b4e3d790468c8c21a2f5e9e90dfb
# 9e28ecb67c4a4486b785ed09eb574eea
# 067541d2601d402bb83a58ce7574e4e2
# 1a741629ca944ee2b2ca31f3d1deb5d7
# fd5f71e727aa4c93a0b81d626e84d735
# b69eb10c87944910a9ad78dd89a5b6a5
# 1360cef002a5437d9fd38cfd49421973
# eed5e7cf13f24a74bd174d536213f093
# eb3c7cb4edc649aab044d2c80aca25e2
# fae4b7e634574b7c8c4a983f543f0392
# 8b1a296144244c10911e0635536a10f7
# fe977cfb4de841a382638d40bb5c1223
# a008112cc3054f12b5983fc169570601
# 891c1918e2e24a2ab7991c511e448976
# ac362e9ecd554de59e7c72ec6d7e70f9
# cec2c677150345a0bd15b29682ac1b05
# 6f5d9b7d543645c7a6018fb4c6b6a728
# 02488c07105548e5b8a66cde1ac88b8a
# 9a85e24d30e64617a16fdb450547beab
# 683b77a548b4434683572a7a3570dd75
# db855216bddb44398847d0df2ed4dc47
# c7bd713b8ca64e2ba4ad3f99299fb75e
# c12b2114a77c404b8c96bc0f99eb401b
# 5043478e136649d5a9747eefb01bc7c3
# 68db2a6ac44c4a18b73b8a777a040d6d
# 51b5b8d1726d4235b4dd4dc11b078df5
# 2a31f9f3d95d42a9aeccca5fe1134452
# edaf18a5b9014a3baadbbe211c199f67
# 4996d939fab74a6e89c1d38bbeaafc12
# 88627aa853ef4de7a840e6e93d66d439
# c63012c48ba64a7994d29a78371544d4
# 00a7b0669fa74e15859b75bf9613f161
# fb63773b015e444fa2541d8c70b3b1d7
# 421dbe40cfce4c48bd5858a7b55e5d41
# b163e5bafd404d67b94e129344f09b1b
msgid "Bases: :class:`spack.error.SpackError`"
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.OperatingSystem:1
# aaac2cbd73a04ba588fbf3e2b15007d2
msgid "Operating System will be like a class similar to platform extended by subclasses for the specifics. Operating System will contain the compiler finding logic. Instead of calling two separate methods to find compilers we call find_compilers method for each operating system"
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.OperatingSystem.find_compiler:1
# 4e577f87416b4c06b4af8db62648b8a3
msgid "Try to find the given type of compiler in the user's environment. For each set of compilers found, this returns compiler objects with the cc, cxx, f77, fc paths and the version filled in."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.OperatingSystem.find_compiler:6
# c89a79fd45a84697be507684be3076d2
msgid "This will search for compilers with the names in cc_names, cxx_names, etc. and it will group them if they have common prefixes, suffixes, and versions.  e.g., gcc-mp-4.7 would be grouped with g++-mp-4.7 and gfortran-mp-4.7."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.OperatingSystem.find_compilers:1
# e6f3a6d9a76d480392b3fbc8627b9887
msgid "Return a list of compilers found in the supplied paths. This invokes the find() method for each Compiler class, and appends the compilers detected to a list."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.Platform:1
# 9fd5dd26463f471a912c1046f1be3aa9
msgid "Abstract class that each type of Platform will subclass. Will return a instance of it once it is returned."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.Platform.add_operating_system:1
# 3195578de8724c9eb46bbf597ba7df18
msgid "Add the operating_system class object into the platform.operating_sys dictionary"
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.Platform.add_target:1
# 69c827f44e434540882f8445b6eca7ef
msgid "Used by the platform specific subclass to list available targets. Raises an error if the platform specifies a name that is reserved by spack as an alias."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.Platform.detect:1
# cdbbc88a4be542a59f3d5e6b598ff416
msgid "Subclass is responsible for implementing this method. Returns True if the Platform class detects that it is the current platform and False if it's not."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.Platform.setup_platform_environment:1
# 8f5c65ece9734f018e242eb23b42e553
msgid "Subclass can override this method if it requires any platform-specific build environment modifications."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.Platform.target:1
# cd85819ea1a14044856b246e771e65b2
msgid "This is a getter method for the target dictionary that handles defaulting based on the values provided by default, front-end, and back-end. This can be overwritten by a subclass for which we want to provide further aliasing options."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.Target:1
# 96da7fb128e24a97920263164a92852c
msgid "Target is the processor of the host machine. The host machine may have different front-end and back-end targets, especially if it is a Cray machine. The target will have a name and also the module_name (e.g craype-compiler). Targets will also recognize which platform they came from using the set_platform method. Targets will have compiler finding strategies"
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.arch_for_spec:1
# 8a7c4130afd443c3870677e5bd62c038
msgid "Transforms the given architecture spec into an architecture objct."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.get_platform:1
# a3ae2c5bf5ac4b509c95fe3c390018ba
msgid "Returns a platform object that corresponds to the given name."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.platform:1
# cba814fc7bb84fe489d268dfa74d34e3
msgid "Detects the platform for this machine."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.platform:3
# 802fb933d6754fb6990b149efa39f142
msgid "Gather a list of all available subclasses of platforms. Sorts the list according to their priority looking. Priority is an arbitrarily set number. Detects platform either using uname or a file path (/opt/cray...)"
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.sys_type:1
# 9c1abed99f5b4c80abc16ce22f74be60
msgid "Print out the \"default\" platform-os-target tuple for this machine."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.sys_type:3
# f543c61ed6d44b2ab219bf4e7aee6cec
msgid "On machines with only one target OS/target, prints out the platform-os-target for the frontend.  For machines with a frontend and a backend, prints the default backend."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.sys_type:7
# 09f21e0b3d7844c483c855bf5fc2ef8c
msgid "TODO: replace with use of more explicit methods to get *all* the backends, as client code should really be aware of cross-compiled architectures."
msgstr ""

#: ../spack/lib/spack/spack/architecture.py:docstring of spack.architecture.verify_platform:1
# 9240d2c35e4f42febb645a621f481dc6
msgid "Determines whether or not the platform with the given name is supported in Spack.  For more information, see the 'spack.platforms' submodule."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:41
# a23b20963c964b38be6c82134ceac63c
msgid "spack.binary\\_distribution module"
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NewLayoutException:1
# fbdf60ed80d14583806d6d80a10e0797
msgid "Raised if directory layout is different from buildcache."
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoChecksumException:1
# 0424208585124baabc8777bac2ebcda4
msgid "Raised if file fails checksum verification."
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoGpgException:1
# 410c8fa9d2224be4b5cfb7d30b54078c
msgid "Raised when gpg2 is not in PATH"
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoKeyException:1
# f8defcda746840f792339c1ea630f5c1
msgid "Raised when gpg has no default key added."
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoOverwriteException:1
#: ../spack/lib/spack/spack/error.py:docstring of spack.error.SpackError:1
#: ../spack/lib/spack/spack/main.py:docstring of spack.main.SpackCommandError:1
# 7c5394c64e5b47ee94803654caa597cc
# 2afa787462cd486cb744d9591e5b85fe
# fd4b879134fe4a05991e9a9c30f4345a
msgid "Bases: :class:`Exception`"
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoOverwriteException:1
# d96dcf190a484c999555b9ed9fb6b785
msgid "Raised when a file exists and must be overwritten."
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoVerifyException:1
# 2041a0cec2f6461e94a772869bcd8b40
msgid "Raised if file fails signature verification."
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.PickKeyException:1
# 64b2f8c43726454d9a555c0c5792fc9e
msgid "Raised when multiple keys can be used to sign."
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.build_tarball:1
# dd518345c4d34b9fbf85a35353c2dc2f
msgid "Build a tarball from given spec and put it into the directory structure used at the mirror (following <tarball_directory_name>)."
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.buildinfo_file_name:1
# 79b0ff13cd7b4dea866ef3b24f1f385f
msgid "Filename of the binary package meta-data file"
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.check_specs_against_mirrors:1
# c3bd0e41104b42eb9b46cd353c95bae6
msgid "Check all the given specs against buildcaches on the given mirrors and determine if any of the specs need to be rebuilt.  Reasons for needing to rebuild include binary cache for spec isn't present on a mirror, or it is present but the full_hash has changed since last time spec was built."
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.check_specs_against_mirrors:0
#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.fork:0
#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_package_context:0
#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_cmake_args:0
#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_meson_args:0
#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.load_external_modules:0
#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.set_build_environment_variables:0
#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.concretize_specs_together:0
#: ../spack/lib/spack/spack/config.py:docstring of spack.config.override:0
#: ../spack/lib/spack/spack/config.py:docstring of spack.config.validate:0
#: ../spack/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:0
#: ../spack/lib/spack/spack/dependency.py:docstring of spack.dependency.canonical_deptype:0
#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.conflicts:0
#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.depends_on:0
#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.patch:0
#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.variant:0
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.concretize:0
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.activate:0
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.deactivate:0
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:0
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.get_env:0
#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.extension_name:0
#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.get_module:0
#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.load_command_extension:0
#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.path_for_extension:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:0
#: ../spack/lib/spack/spack/main.py:docstring of spack.main.SpackArgumentParser.format_help_sections:0
#: ../spack/lib/spack/spack/main.py:docstring of spack.main.main:0
#: ../spack/lib/spack/spack/main.py:docstring of spack.main.print_setup_info:0
#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.create:0
#: ../spack/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:0
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.check_for_unfinished_installation:0
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:0
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.possible_dependencies:0
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_environment:0
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:0
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:0
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.on_package_attributes:0
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.FilePatch:0
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.Patch:0
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.Patch.apply:0
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.Patch.fetch:0
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache.patch_for_package:0
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch:0
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch.fetch:0
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.apply_patch:0
#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.file_is_relocatable:0
#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.is_binary:0
#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.is_relocatable:0
#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.mime_type:0
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoIndex.add_indexer:0
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath:0
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.get_repo:0
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.TagIndex.update_package:0
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.additional_repository:0
#: ../spack/lib/spack/spack/report.py:docstring of spack.report.collect_info:0
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.concretize:0
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:0
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:0
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:0
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:0
#: ../spack/lib/spack/spack/store.py:docstring of spack.store.Store:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.color_url:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.find_list_url:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_and_version:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_version:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.compatible:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.constrain:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.satisfies:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.MultiValuedVariant.satisfies:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.compatible:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.constrain:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.satisfies:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_variant:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.validate_or_raise:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.constrain:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.satisfies:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.substitute:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.any_combination_of:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.auto_or_any_combination_of:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.disjoint_sets:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.implicit_variant_conversion:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.substitute_abstract_variants:0
# 2008467f3a4049c388269c489ed90533
# 1827b331cebf415a8ffe1338fb7c3e89
# 187c8d2700524bc5ba35404e9da3d492
# 85ebf6b4d9c049a0866b4af2c5471023
# ba018a17eefc4c5f95692069fd3afca4
# 9d7004446cf243248dd160ab9770a71f
# 1c8a7d2e893e4e678680abcfcbb97a60
# 2d1e3767fed044a291c861c6229f3cce
# 115c4e52ead44e249f72827e6ca5f67f
# 60d4221c78a949e1bb80bb480ae63c17
# ba4b4c4890c049e2ad6cc3a62b17f716
# 93ce8d6131d14bd08e76f301365dc436
# d452bc11b42b4e6b95b198ba1aeb3193
# abaf40ba000348c5b73e23d02e603872
# 5c29372593d64459848076f118e256fe
# 5dea68982c1846429b4381a31f8b09ae
# b869971ccb1f4ba9bd1db7f022480632
# 5f49f485565f43219f06c84907bf23e5
# 0d50313ad773453e8792cdc76a99d5c5
# a429c8b63bc6496ab675e5f227cd9e8c
# c988073ab830438f92352e5ed34e2ac5
# 970b19903fdd4028ad35d905f0070edf
# ea9b02d831c04d1999c17d693b1465ca
# 36bcb6eaab2e4dcab676b4a323cfbf71
# 911a12dcb3d64ea68a61f33f9bb52206
# 932b21818dd0406c92ccbec61cf8d0a1
# 924821b7d2d84c54b5b5b9b5e4514c7d
# 6c0ddfa31e3d45d59b6883b22ec2833f
# 08960e01ca964f098815e5a7f206301e
# 79fbf439cb9740258411e5f794f304cd
# 1f6f66464a424410be1932d8bf1f25e4
# 819ef05f007e42569096e67931899e70
# e2a8c033d32143fca71d0c3f5f06b179
# 535e7588a4a34c758a0c8f74cdabef9b
# 9a9a1e6f68c94b8198c12fa985f4e2a3
# feaceff1ba594f97916fcc82d082d45a
# a3e4f0dc5c6e4bb5ae8af03ffe5123fe
# fd8f06c3db7045dba7b3800f4d676a5a
# 5f43a23b505648b89af6b5d9fae70249
# 3240bbd890184a10814082aa3f7670b1
# 7688017cee994a11a156de38ace099f7
# b8bf035323d94eb48ebe542723630029
# ccee9b39af554fd991b233f45c2dc1b8
# a7052ec80918406ea6552995c6677b95
# 9504301bf0be4e75acc39321f44fa2ea
# 1c0d5f1019994373ba7f7521898fc23f
# 6293c3632b3a4c18b5e07fba2f862dc6
# 545fa8422356498b8d65532b4f38570a
# 33f7a22a152a4bf7b84f5a37e26a2559
# 816a7a225773459a9465890888777e54
# 1572c99f7d124ae29998443c6c3a5259
# bfe2030b03494607b355d2cb0ea841d7
# 47fbcce6abb443f0ac6c019d99e48a28
# 0c8cc9a1a3984d97857df47208eb0f67
# 57e557b36bd94cec96e35628b2053073
# 03323c5f2b53443e9959d3ea370548fd
# 32fa4e9b3c1245be8fd05dcd55403da2
# 60029c362e4047b8969c2ae12797f85d
# fb920e2df5484553a8cb5484d5b1e59c
# 669a90303784453fb4fe02c0aea3ffbd
# 65769d6603f046608e24fd71d8ed0e85
# a639089b9efd41f799199d60569b807b
# cebf68e93bdf418793b92c083b9f2f2d
# caebd50fa6ec4046b6f3cbb2e764d212
# d1e5f6f09014463ea4ad210a2023dc5e
# f0d432dd734447069482b06caa05f937
# d346c07c73664c798f5d76476faacbe1
# 3337f8157b264df292d56f70f345e721
# 952dfc94d4534f34857cce788f56b6ed
# af093f473604487e848014059ff09ea1
# 8374a6f689c149288d2cc864b8d465e6
# d3625a8453ac45b290631a453a2b2c44
# 6cbf2892f43c4e8d841b45bd2da8c515
# 51673ed7bb0c46108883f329f0d04f01
# 601cc84dbc6e4c34b86f7dbc2c68e0e4
# b4508321482948db8b55dc868c018e61
# 60a5bf59827d4ed6bf884b29c81b863e
# 7ca0e29185944b309a292d170d57e259
# 4cd1275c749242bf882f47693cabb8fb
# 435c2009e46d485cb0d74f8e8c292a54
# 7947b35e4c344767921257ca6ca5504c
# e3d5d5b11c414e8fac02e6f590ded520
# e12960d4a8534b8091559de4d09d565d
# de72fce229824d6b8afc6ea698437a5a
# 435d2432c7ef47a4b60452d9c418272a
# b4e8f0509c4b40a6a8049989f8b2f17c
# fea9b9d411a5413d936c1fd2d1831402
# 1f624ea994f34a42b1aafbcf8555afb9
# 167581af538c40729a789d30febce0eb
msgid "Parameters"
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.check_specs_against_mirrors:6
# 23082a456a6d48e5a6dd915441c48855
msgid "Mirrors to check against"
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.check_specs_against_mirrors:8
# 9992583c525e4892941641b0e29c260c
msgid "Specs to check against mirrors"
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.check_specs_against_mirrors:10
# 9207cfecadfa41638147042b0455397d
msgid "Path to output file to be written.  If provided, mirrors with missing or out-of-date specs will be formatted as a JSON object and written to this file."
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.check_specs_against_mirrors:14
# 80f69dbaae7d43e1ad5bc108199aa769
msgid "Treat any errors encountered while checking specs as a signal to rebuild package."
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.check_specs_against_mirrors:18
# 2f64f2b0f03c49e1a418f789ba77f8be
msgid "Returns: 1 if any spec was out-of-date on any mirror, 0 otherwise."
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.download_tarball:1
# 16eb0e499c37461289407e68a6ea8624
msgid "Download binary tarball for given package into stage area Return True if successful"
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.extract_tarball:1
# 54d2fefe42be4f3f947172990869abc2
msgid "extract binary tarball for given package into install area"
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.get_keys:1
# 09f4a4d610794f4b83f5a29b66449bb1
msgid "Get pgp public keys available on mirror"
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.get_specs:1
# d4959b1d952d4b8f9fa9c5bf54b6132f
msgid "Get spec.yaml's for build caches available on mirror"
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.make_package_placeholder:1
# c49b1b97c1a740299ba665d5a43e5563
msgid "Change paths in binaries to placeholder paths"
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.make_package_relative:1
# a3be06ac3ef6466f8ab62c8a941f6a72
msgid "Change paths in binaries to relative paths. Change absolute symlinks to relative symlinks."
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.read_buildinfo_file:1
# 5587884c96df4ab8b55162f1e3de811d
msgid "Read buildinfo file"
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.relocate_package:1
# 309622d0388d4ed987f4ade5339e5833
msgid "Relocate the given package"
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.tarball_directory_name:1
# 30bbb87a67694d6facbf87702cabc3d0
msgid "Return name of the tarball directory according to the convention <os>-<architecture>/<compiler>/<package>-<version>/"
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.tarball_name:1
# 2499007f083541f484cd7a958e3eb987
msgid "Return the name of the tarfile according to the convention <os>-<architecture>-<package>-<dag_hash><ext>"
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.tarball_path_name:1
# d8bdb16d4c324c74b437f37457247361
msgid "Return the full path+name for a given spec according to the convention <tarball_directory_name>/<tarball_name>"
msgstr ""

#: ../spack/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.write_buildinfo_file:1
# 3958b98556a2444ebb52cbac86551f60
msgid "Create a cache file containing information required for the relocation"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:49
# c8824bd86ffd4337a0bc141ff7a7025d
msgid "spack.build\\_environment module"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment:1
# 1979ffbb0a344a7a83bd778b3beb154a
msgid "This module contains all routines related to setting up the package build environment.  All of this is set up by package.py just before install() is called."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment:5
# 06902b747ca84c71ae35583a8a3d282e
msgid "There are two parts to the build environment:"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment:7
# 34cdba0daeb342b38c8637b616055915
msgid "Python build environment (i.e. install() method)"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment:9
# 96174ff57cd24eb2bbbfe005f76d9fd2
msgid "This is how things are set up when install() is called.  Spack takes advantage of each package being in its own module by adding a bunch of command-like functions (like configure(), make(), etc.) in the package's module scope.  Ths allows package writers to call them all directly in Package.install() without writing 'self.' everywhere.  No, this isn't Pythonic.  Yes, it makes the code more readable and more like the shell script from which someone is likely porting."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment:18
# 06c72cf3a7b14d4fa3d7119133dbd6c1
msgid "Build execution environment"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment:20
# bc01680830e446cc977c2a7727c0382f
msgid "This is the set of environment variables, like PATH, CC, CXX, etc. that control the build.  There are also a number of environment variables used to pass information (like RPATHs and other information about dependencies) to Spack's compiler wrappers. All of these env vars are also set up here."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment:26
# 55dac5fcb3ae465b9f1c666ab56d80a9
msgid "Skimming this module is a nice way to get acquainted with the types of calls you can make from within the install() function."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:1
# d9d582ed51444765b49dc12d9ab7e236
msgid "Bases: :class:`spack.build_environment.InstallError`"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:2
# 86c08f09541344b6af336006cf167a4e
msgid "Special exception class for wrapping exceptions from child processes"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:2
# 22754efb52174ba4b8eb40c345c31482
msgid "in Spack's build environment."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:4
# 5e72215005c4401b8f8e63453b9e74e0
msgid "The main features of a ChildError are:"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:6
# e6eedadebd4441818928695426416964
msgid "They're serializable, so when a child build fails, we can send one of these to the parent and let the parent report what happened."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:9
# 3426d06c5061400dbb14ffcaf0b12460
msgid "They have a ``traceback`` field containing a traceback generated on the child immediately after failure.  Spack will print this on failure in lieu of trying to run sys.excepthook on the parent process, so users will see the correct stack trace from a child."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:14
# 3549e37eeded486c85e1e0d45631bb3b
msgid "They also contain context, which shows context in the Package implementation where the error happened.  This helps people debug Python code in their packages.  To get it, Spack searches the stack trace for the deepest frame where ``self`` is in scope and is an instance of PackageBase.  This will generally find a useful spot in the ``package.py`` file."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:21
# 55b4ffe94ae34009a2e20321a88bcd2b
msgid "The long_message of a ChildError displays one of two things:"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:23
# 8b574b0523a54285b9901750cd388746
msgid "If the original error was a ProcessError, indicating a command died during the build, we'll show context from the build log."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:26
# 7162f88a330b4b7299d11c9a3ac66f98
msgid "If the original error was any other type of error, we'll show context from the Python code."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:29
# c0f0614b8c90487aa605ed6047be4bce
msgid "SpackError handles displaying the special traceback if we're in debug mode with spack -d."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.InstallError:1
# 72b044353cf045759dc5d30fc98753c3
msgid "Raised by packages when a package fails to install."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.InstallError:3
# f57ea130a24a40548474345967162607
msgid "Any subclass of InstallError will be annotated by Spack wtih a ``pkg`` attribute on failure, which the caller can use to get the package for which the exception was raised."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.MakeExecutable:1
# cab404f4b56d499d844ca97ed9bdd07c
msgid "Bases: :class:`spack.util.executable.Executable`"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.MakeExecutable:1
# e7ef835f96704078b14c286f594925c3
msgid "Special callable executable object for make so the user can specify parallelism options on a per-invocation basis.  Specifying 'parallel' to the call will override whatever the package's global setting is, so you can either default to true or false and override particular calls. Specifying 'jobs_env' to a particular call will name an environment variable which will be set to the parallelism level (without affecting the normal invocation with -j)."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.MakeExecutable:10
# 395d186c931342cf98ce7fc78e8f47d5
msgid "Note that if the SPACK_NO_PARALLEL_MAKE env var is set it overrides everything."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.fork:1
# a545decef84b45e998ae13c480181c3a
msgid "Fork a child process to do part of a spack build."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.fork:3
# c67d7c5c4366426f9ec8769b821946e3
msgid "package whose environment we should set up the forked process for."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.fork:6
# df8ff116f8894a648fc8e616a7882439
msgid "argless function to run in the child process."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.fork:9
# a3a4053b80e143a39f5ec651d4a7cd18
msgid "If True, do NOT clean the environment before building."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.fork:12
# 766bdf8892bf45ff9e772ac49b91955c
msgid "If True, skip package setup b/c it's not a real build"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.fork:15
# b6ddb245734848928c9244bcc02dea29
msgid "Usage::"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.fork:21
# e3f7c888717b4f33854be48be38681fd
msgid "Forked processes are run with the build environment set up by spack.build_environment.  This allows package authors to have full control over the environment, etc. without affecting other builds that might be executed in the same spack call."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.fork:26
# 18edb799f2614c038e5d502d20601070
msgid "If something goes wrong, the child process catches the error and passes it to the parent wrapped in a ChildError.  The parent is expected to handle (or re-raise) the ChildError."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_package_context:1
# 7f1ef4a030c94795b1faae303f910412
msgid "Return some context for an error message when the build fails."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_package_context:3
# 08c25d344caa4036b05f03d658cc891b
msgid "A traceback from some exception raised during install"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_package_context:6
# 96ff5b340cdc43ff85ef8136e924467f
msgid "Lines of context to show before and after the line where the error happened"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_package_context:10
# af267931b2774902892da10ee3a6b193
msgid "This function inspects the stack to find where we failed in the package file, and it adds detailed context to the long_message from there."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_rpath_deps:1
# 9171db02bd3f482093d6cb5c3ef2a4c5
msgid "Return immediate or transitive RPATHs depending on the package."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_rpaths:1
# f9e65aa199b04273be2747317873b92f
msgid "Get a list of all the rpaths for a package."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_cmake_args:1
# 27685e5e8c884cf19a316c53453a4456
msgid "List of standard arguments used if a package is a CMakePackage."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_cmake_args:0
#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_cmake_args:0
#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_meson_args:0
#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_meson_args:0
#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.concretize_specs_together:0
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.add:0
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.activate:0
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.deactivate:0
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:0
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.get_env:0
#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.extension_name:0
#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.load_command_extension:0
#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.path_for_extension:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.CacheURLFetchStrategy.fetch:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.cachable:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.fetch:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.cachable:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.fetch:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy.fetch:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.cachable:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.fetch:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.cachable:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.fetch:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.cachable:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.fetch:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:0
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.all_urls:0
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.check_for_unfinished_installation:0
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.fetch_remote_versions:0
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.installed:0
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.unit_test_check:0
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.version_urls:0
#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.file_is_relocatable:0
#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.is_binary:0
#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.is_relocatable:0
#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.mime_type:0
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.needs_update:0
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.needs_update:0
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.find_list_url:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_and_version:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_version:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.compatible:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.constrain:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.copy:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.satisfies:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.value:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.yaml_entry:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.MultiValuedVariant.satisfies:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.compatible:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.constrain:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.satisfies:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.yaml_entry:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.allowed_values:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_default:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_variant:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.concrete:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.constrain:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.copy:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.satisfies:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.any_combination_of:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.auto_or_any_combination_of:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.disjoint_sets:0
#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.dashed:0
#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.dotted:0
#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.joined:0
#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.underscored:0
#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.up_to:0
# 1ed7ea7557934a12bd3c5674d99c0d77
# 51a87e7d23494d0d83dacea463e3d652
# d9885c6b6917471a8785ca4c9e04044e
# 78e4f9bf35174bfba33a5ce99c768ffd
# d7224437c8924563a1cc3e9e48f5dc51
# 3fe02d2b929944e29f104291de37fad5
# 71b8e5c30e564544a1a65784d783e2f8
# 44a9022d07444442b5dfbf1818b24a98
# c3269a5f800a46f78c24ebdd21d8b714
# 5ebe2666523d4fe38c81410167530d4b
# c8b970b71aec499cb4e694e514de78f4
# a7fcb29f790a467ab66a9bbb887a5303
# 909ea22f3cd94b57a9685135b3591dc5
# da09e2fe3bf74a838d3766c292e20dfc
# f2cfb1e8de2a4d21bc81271fce9a2177
# 2d7227cbc69a435ebddf987a17bb3166
# 46bfeb771fb94b11ac99733ea4036e68
# 186701d74acf41f7a7a92a39fb4697ff
# 92479c0eb89b4e93b60ab58fe7a79abb
# 80d4052d31ec499998fd023ad8c5fe28
# 52ef9fc960af4a6caa6acfeb7cbf3952
# d95e6465986b4630948c72553568f087
# 8125b83781ae46e5af185fcf5ab82a3d
# 46a1abcd56cf46eca128b862ea03364f
# e9fc983da6804e0b9cf4e5a4520472e2
# 56177b8cdfc54c998d3912ddedfb8d40
# 632b6ba984224f91b323728b1744dcde
# 14a2c9a96c9f49f4b23e50ab0a03bc17
# af4be81e4043402ca1ad2ce80b2f1376
# d6e87f9750644749af69e8e6cd7fd5aa
# a6e2fc142baa4f7092a3b34eb40a6c7c
# 58b3756924f245368813170e9763a436
# 877b3684e26848e287aedfd941ccef32
# 818100031a0341f9a990c3843f207749
# 28d42e8a786d414494ba584f9ef9908d
# f0bf1a90b48e4ce4ae925d1af25c5428
# 07ed871b4e244fef813a71b9d4404827
# d48f55151c054241b753506b89b9a99d
# cbb87bd903f049cfa8046f99a6858972
# bfcc08e5891b47f29f945780e367d236
# 420cfb4c2dfa4a10a0faea49cfea0a8c
# 5b4b0d3551ef41b7a8f2419fbfdb035a
# f77746efa3714bf8b8ce40efe62f30ae
# e0c0dc0d8ca24ed8bd64944a5d965cff
# df411809f474463d92f75bdee9de4e24
# 690827fe1dad4d038ad21072c137e6ce
# 3951e596f2df4c3aa9d073a98cd8c90c
# 2e14ab08a04a4436adf9d24e1b8452e8
# ca7f8547742c49c0b50e6aa45e44dfb5
# 70ffc19cf99e4bfdb6118c008c88532e
# 10275dd1f44e4c64a2dab14e66ecf9ca
# 559bb526de51422c90d073ceae0534e2
# 1794a3f87f534ce28b482eadd7d66734
# e6bfa828098f48248d0ceaf235a20f39
# 5329316dd3cd49099fb334f376abe5c6
# e533aa03cd8f43769eef27881cbc115e
# 937c22e653ca416cada7f661583d7a87
# 4c9a6698b4af499dbfe0492eb36647c2
# d3528080b0f94f1fb8359bfb85f0a380
# db24d26328ac4af79f7c582c268b0231
# 0a0618a1f33f4ae688683b0f22a3d67b
# dbca4045d2404154a5e024f8ce41dfd2
# d4c731024cdf42d49b0bbf9c4414901f
# 00e195f9564c4db18e448f85367c3a75
# a5437443ff1a4d75a162efd2506085d6
# cf37989cb1414934815df7b4243bdadc
# 3fec59ba883544cf8209e1f36293e4ec
# 5ab56007906b4208a22d23f79ead5371
# dd9da813ce8f40cd97d3ccd1486d9f55
# 216083bc0604483d93caebc885569c50
# 41c388f92bcb4202b9c5dcca3a058301
# d4bc88346b12438a8a440d3802625b20
# c5490bf6c2504a39a03651b9064dd8e0
msgid "Returns"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_cmake_args:3
# e97367f5fcbb4b86ba38ab3791337846
msgid "standard arguments that would be used if this package were a CMakePackage instance."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_cmake_args:0
#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_cmake_args:0
#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_meson_args:0
#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_meson_args:0
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.add:0
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.activate:0
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.deactivate:0
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:0
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.get_env:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.CacheURLFetchStrategy.fetch:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.cachable:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.fetch:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.cachable:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.fetch:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy.fetch:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.cachable:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.fetch:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.cachable:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.fetch:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.cachable:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.fetch:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:0
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.all_urls:0
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.fetch_remote_versions:0
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.unit_test_check:0
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.needs_update:0
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.needs_update:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.find_list_url:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_and_version:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_version:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.compatible:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.constrain:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.copy:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.satisfies:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.value:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.yaml_entry:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.MultiValuedVariant.satisfies:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.compatible:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.constrain:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.satisfies:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.yaml_entry:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.allowed_values:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_default:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_variant:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.concrete:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.constrain:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.copy:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.satisfies:0
#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.dashed:0
#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.dotted:0
#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.joined:0
#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.underscored:0
#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.up_to:0
# fb65306ab7a04ceaaa9758cd84b61b61
# dd2dcd7c9d424297929cf346f67731f8
# 443cd5bdc84742ada6749cd11b208031
# 4756250e4ee44901b5aca4d4aa458a56
# acb3fcc07b044902b0cde67edacdda23
# 86a75f897b0a45aeb9187ae58c241ac4
# ac46587fb2264287935266dda3548d5e
# f5ec0782d3a9491e80b4f67645b57be0
# 064e7c648d7e4778b1e65098cccb5c67
# 39a53815b8bc44f1880b8ac5d2c14fd9
# fbf4d0f578c94ceca6467165ab2f5a35
# 46954e2317d44789b14b61a45843fb4e
# 387ecb853db94efeb44eb25882d086fc
# 0b91ddfed4064291857c52e29eeefa60
# 25c331d1a2644429a583bef9ff822407
# f085b3c180164081ae0ecb7bd39812fa
# 376c84293b9944e88f4ed11a36861eb1
# 8be4c30094274e1494cd0b4a02b29411
# f18fa7809f9a4f78ac190b84e99a9c43
# 6898fd6d1b044550adb1bf8711d2473b
# fba5a524900a47468b80a676e710796b
# 1e4c8c38ec804792b1c7c785d7f638e9
# 37f779862883415989211686f2c04306
# b564efa485c74d7fb116e2f214d22c9c
# a800ad936d6d4e21aa10f4b0c96da9e6
# 45cb3fd3cb29445f95146bba262b1c17
# ea0f632e0adc41b39a2b03d3ba4fb4e0
# 36030c0ff8bc4a5098bfbd58abb96559
# dca7006784e246e88ed714f9ea98ed18
# e09a0deb379d410299c8cf0da678f8d4
# de652dd66ec24eb58e6b94fbe955c23f
# 70d0e08901d34984aba6b5ed9b9e0e1c
# f4b181b007d642158984bcf6aa67f267
# 3027940776cf42bba951421d9fe416d6
# 367097c929d046499edd252975eab07b
# e9769d07cc9f4b9a9ac09576a6245a69
# 6eb9ac35f14c460a9052667280a55d33
# 76ac095bc43c4a5f94b06cb94e3082e1
# bbb8ae7e84fe426db0886725dd5834ff
# 7baae97d754a41c6b896f15d47068c71
# 9c93f56c4bf24639a1b20ee60d8240e6
# d92c3021079042618a5f5d10d02b48ee
# b0dc1cf723e3483b8e77da101695ae7c
# 37ff4d57d38d481ca863e6c958c0d606
# 46ca8b61ebc447eeb9e3d1afb50363c5
# 425fb708758f4afdaf24e23b9929628c
# 73042d4f1ca64d77a47238c1320a8070
# 2129120fd6d14b71ba4ce50ae7ed2c8f
# 01b22194a81547e88cc95b39634df8a6
# 04df8dedf6864b698835bc51e153a269
# 110a64d726c64f20bac69011dfafb9ed
# c856fb767980471f9e92baff07b0d936
# eb7848c848ef4ff88d5b2232f5b6cbbf
# eac7e3b4aaf64d4783cd7f6f19ea034f
# d8b2a66a4cad48299e71f0219750c417
# 70ebb5ba68c247e5952d7599278a59ad
# 52c105ebf47044deb3e9e015a8822257
# 2b93f56b36cf470c83569ab374634d08
msgid "Return type"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_cmake_args:7
#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_meson_args:7
# 1c2f89ebc3f94fcb9d2c08a4ff5d3108
# 07938ae1b27749e5ba9db32598e3c1d4
msgid "package under consideration"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_cmake_args:10
# 762e4b68ebfe4b7880c59bd35684604d
msgid "arguments for cmake"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_meson_args:1
# 6957865b10824d66892464df51cfdd16
msgid "List of standard arguments used if a package is a MesonPackage."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_meson_args:3
# 707562a2d9b2471fb264e15a03f24d5b
msgid "standard arguments that would be used if this package were a MesonPackage instance."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_meson_args:10
# 6a9cf17662eb433e9f45940861c87bce
msgid "arguments for meson"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.load_external_modules:1
# 83d693cffd304d71b5b3151e86a55cf4
msgid "Traverse a package's spec DAG and load any external modules."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.load_external_modules:3
# a540cf32093e46e89668b136a07ee4e3
msgid "Traverse a package's dependencies and load any external modules associated with them."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.load_external_modules:6
# 2bb11ca924914f3fa6f76238941e9f06
msgid "package to load deps for"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.parent_class_modules:1
# 2b9f09c26a0b4a1b8c5c07e065a45ef6
msgid "Get list of superclass modules that descend from spack.package.PackageBase"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.parent_class_modules:3
# 608e5082cb214658ae2c06d20dbeb7bf
msgid "Includes cls.__module__"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.set_build_environment_variables:1
# 482626d0d12b4a2bb6e61e14c7a596bc
msgid "Ensure a clean install environment when we build packages."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.set_build_environment_variables:3
# 5d10d28a7a8f429bb5d923334a3f1cf0
msgid "This involves unsetting pesky environment variables that may affect the build. It also involves setting environment variables used by Spack's compiler wrappers."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.set_build_environment_variables:7
# 6987d3072d3c4999821462ecab417a72
msgid "The package we are building"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.set_build_environment_variables:8
# 57e89c14f7804e728c0860798a149ac8
msgid "The build environment"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.set_build_environment_variables:9
# b7f2ddb8dc4f44a789180757b5ee7c8e
msgid "Skip unsetting the user's environment settings"
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.set_module_variables_for_package:1
# e6793109e56144dd981b3851ef62c218
msgid "Populate the module scope of install() with some useful functions. This makes things easier for package writers."
msgstr ""

#: ../spack/lib/spack/spack/build_environment.py:docstring of spack.build_environment.setup_package:1
# 764192aadb3e4f54bdce4bd9bf70f55d
msgid "Execute all environment setup routines."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:57
# b3238e02b8944a78844c9b4c4b8793a7
msgid "spack.caches module"
msgstr ""

#: ../spack/lib/spack/spack/caches.py:docstring of spack.caches:1
# 6cb1b2debe9b4146b237ca29a70a3bc1
msgid "Caches used by Spack to store data"
msgstr ""

#: ../spack/lib/spack/spack/caches.py:docstring of spack.caches.fetch_cache:1
# 7be28e0e7b354bacad33b84970408ff2
msgid "Spack's local cache for downloaded source archives"
msgstr ""

#: ../spack/lib/spack/spack/caches.py:docstring of spack.caches.misc_cache:1
# 57e9013015e944d2ac1ebac798891704
msgid "Spack's cache for small data"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:65
# dab99498ee7847fe9caeb68ee7483905
msgid "spack.compiler module"
msgstr ""

#: ../spack/lib/spack/spack/compiler.py:docstring of spack.compiler.Compiler:1
# 3c2e72b7e76b4eb6ad3ba632dc4ccc5b
msgid "This class encapsulates a Spack \"compiler\", which includes C, C++, and Fortran compilers.  Subclasses should implement support for specific compilers, their possible names, arguments, and how to identify the particular type of compiler."
msgstr ""

#: ../spack/lib/spack/spack/compiler.py:docstring of spack.compiler.Compiler.default_version:1
# f148a5ddd2c54e5cacddc140b170f0b6
msgid "Override just this to override all compiler version functions."
msgstr ""

#: ../spack/lib/spack/spack/compiler.py:docstring of spack.compiler.Compiler.extract_version_from_output:1
# 5b8b8676ba1745358ea128ccb567c2dc
msgid "Extracts the version from compiler's output."
msgstr ""

#: ../spack/lib/spack/spack/compiler.py:docstring of spack.compiler.Compiler.setup_custom_environment:1
# 075fb1e752704998956227f8bee92204
msgid "Set any environment variables necessary to use the compiler."
msgstr ""

#: ../spack/lib/spack/spack/compiler.py:docstring of spack.compiler.Compiler.version_argument:1
# 231b875801fb4589b7f14a43646e4ddc
msgid "Compiler argument that produces version information"
msgstr ""

#: ../spack/lib/spack/spack/compiler.py:docstring of spack.compiler.Compiler.version_regex:1
# f01f66a03531456a8a8db6dfc0fc3b78
msgid "Regex used to extract version from compiler's output"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:73
# 07ca6e5fb8ce40dbbd024c829b9605a2
msgid "spack.concretize module"
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize:1
# 86a2d278607041fd8f1128941a363ce1
msgid "Functions here are used to take abstract specs and make them concrete. For example, if a spec asks for a version between 1.8 and 1.9, these functions might take will take the most recent 1.9 version of the package available.  Or, if the user didn't specify a compiler for a spec, then this will assign a compiler to the spec based on defaults or user preferences."
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize:10
# 152d8a1ad3054bdeb0cf61a0a49df70b
msgid "TODO: make this customizable and allow users to configure"
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize:9
# 7520baa8723143ce81902695ef30fb5c
msgid "concretization  policies."
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer:1
# 4ed6ad8344e0482e9aaaaded67861352
msgid "You can subclass this class to override some of the default concretization strategies, or you can override all of them."
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer.choose_virtual_or_external:1
# f0c1a8da0d9b4573b10b79d9e7ac60f5
msgid "Given a list of candidate virtual and external packages, try to find one that is most ABI compatible."
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer.concretize_architecture:1
# 41d3bc2ae5754dff9c9fa56adf8f37d1
msgid "If the spec is empty provide the defaults of the platform. If the architecture is not a string type, then check if either the platform, target or operating system are concretized. If any of the fields are changed then return True. If everything is concretized (i.e the architecture attribute is a namedtuple of classes) then return False. If the target is a string type, then convert the string into a concretized architecture. If it has no architecture and the root of the DAG has an architecture, then use the root otherwise use the defaults on the platform."
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer.concretize_compiler:1
# ad763d9ffa244b34b7ca4a5004f1ddaa
msgid "If the spec already has a compiler, we're done.  If not, then take the compiler used for the nearest ancestor with a compiler spec and use that.  If the ancestor's compiler is not concrete, then used the preferred compiler as specified in spackconfig."
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer.concretize_compiler:7
# c576584bfd424c88a8897ac39223d5ef
msgid "Intuition: Use the spackconfig default if no package that depends on this one has a strict compiler requirement.  Otherwise, try to build with the compiler that will be used by libraries that link to this one, to maximize compatibility."
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer.concretize_compiler_flags:1
# 2ce1af8adca54af487dad9f99cb92893
msgid "The compiler flags are updated to match those of the spec whose compiler is used, defaulting to no compiler flags in the spec. Default specs set at the compiler level will still be added later."
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer.concretize_variants:1
# 9cd9ab40fff6471eaf92d62423183669
msgid "If the spec already has variants filled in, return.  Otherwise, add the user preferences from packages.yaml or the default variants from the package specification."
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer.concretize_version:1
# 5d95fecf1c2144d38c62babf9a88f994
msgid "If the spec is already concrete, return.  Otherwise take the preferred version from spackconfig, and default to the package's version if there are no available versions."
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer.concretize_version:11
# bd312b125b344b6d9670eabd66f7bd4d
msgid "TODO: In many cases we probably want to look for installed"
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer.concretize_version:6
# 0ea705c3e3a9417086e6e6b12bc9c5f3
msgid "versions of each package and use an installed version if we can link to it.  The policy implemented here will tend to rebuild a lot of stuff becasue it will prefer a compiler in the spec to any compiler already- installed things were built with.  There is likely some better policy that finds some middle ground between these two extremes."
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.InsufficientArchitectureInfoError:1
# a00f211e9b9e46ec96c686a838df311b
msgid "Raised when details on architecture cannot be collected from the system"
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.NoBuildError:1
# 25ea5c2770284317b1177caa63d0a66b
msgid "Raised when a package is configured with the buildable option False, but no satisfactory external versions can be found"
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.NoValidVersionError:1
# ae44cbce4af149b4a697399f069fdfb3
msgid "Raised when there is no way to have a concrete version for a particular spec."
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.UnavailableCompilerVersionError:1
# 49f09b172f6549cca2058a97ad6c8401
msgid "Raised when there is no available compiler that satisfies a compiler spec."
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.concretize_specs_together:1
# 93b09419dad64290909ccac370655d18
msgid "Given a number of specs as input, tries to concretize them together."
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.concretize_specs_together:3
# 9345b8f6ff8948c1a8ef291395ef1194
msgid "abstract specs to be concretized, given either as Specs or strings"
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.concretize_specs_together:6
# c7232526522b4eff8c153dbf91c73943
msgid "List of concretized specs"
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.concretizer:1
# 7e8f62ae497940b09d30ec79ca5dc714
msgid "Concretizer singleton"
msgstr ""

#: ../spack/lib/spack/spack/concretize.py:docstring of spack.concretize.find_spec:1
# 742b86f7f5be4914aea76d02f1c9e20e
msgid "Searches the dag from spec in an intelligent order and looks for a spec that matches a condition"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:81
# 6dde2e20f37347d698e5883733964561
msgid "spack.config module"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config:1
# 866f0c08dfff42c3b6a82228c82c257f
msgid "This module implements Spack's configuration file handling."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config:3
# 600c95cbf2814778a6ab903d2501b634
msgid "This implements Spack's configuration system, which handles merging multiple scopes with different levels of precedence.  See the documentation on :ref:`configuration-scopes` for details on how Spack's configuration system behaves.  The scopes are:"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config:8
# 1aeb03af598c4dd4a547e55ac5a7b87d
msgid "``default``"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config:9
# 57078d0bd60849149998f9502ac4c297
msgid "``system``"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config:10
# 95a1c95344394ccdb7e21ed81a2b6de0
msgid "``site``"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config:11
# 53518cbc9be94796adc77a97ebca59ef
msgid "``user``"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config:13
# bf99a0335edc4a0082e5f21a8eefb3c6
msgid "And corresponding :ref:`per-platform scopes <platform-scopes>`. Important functions in this module are:"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config:16
# f22131afcb0347f5b024f8c058a7d895
msgid ":py:func:`get_config`"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config:17
# 2b3513533afc47dcb49d6f0a77f7c28b
msgid ":py:func:`update_config`"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config:19
# e8062e7334734d62aee7454d69f74e1a
msgid "``get_config`` reads in YAML data for a particular scope and returns it. Callers can then modify the data and write it back with ``update_config``."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config:23
# 9056c647715e4b96a759257f3c18d651
msgid "When read in, Spack validates configurations with jsonschemas.  The schemas are in submodules of :py:mod:`spack.schema`."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.ConfigError:1
# 0994adc4144d46e8a34643343ea12b35
msgid "Superclass for all Spack config related errors."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.ConfigFileError:1
#: ../spack/lib/spack/spack/config.py:docstring of spack.config.ConfigFormatError:1
#: ../spack/lib/spack/spack/config.py:docstring of spack.config.ConfigSectionError:1
# abe98d91ccb841cdabe99ed1233efccb
# 8d0687d8a0484a8f9c549bf105efe0d3
# 2467bc0f0e214610a898303c5d5e4431
msgid "Bases: :class:`spack.config.ConfigError`"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.ConfigFileError:1
# f34c2b6ec18d43e3baf3b527e0cf4091
msgid "Issue reading or accessing a configuration file."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.ConfigFormatError:1
# 49d4c699b019409a84b6c9bef4f65aff
msgid "Raised when a configuration format does not match its schema."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.ConfigScope:1
# 8a321f4f96b0453bb2967e29d74fed94
msgid "This class represents a configuration scope."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.ConfigScope:3
# 7f83fa9f51094b7eaaff7101e89b860d
msgid "A scope is one directory containing named configuration files. Each file is a config \"section\" (e.g., mirrors, compilers, etc)."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.ConfigScope.clear:1
# baad6af0854b42efacb0f844c788b8aa
msgid "Empty cached config information."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.ConfigSectionError:1
# c3eebe70303649bcb36e90647afa915b
msgid "Error for referring to a bad config section name in a configuration."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration:1
# 16e69f2233eb461e853f29c4558ccd3d
msgid "A full Spack configuration, from a hierarchy of config files."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration:3
# 7c6ff99efd9e4e5cbf445da7b0b9b355
msgid "This class makes it easy to add a new scope on top of an existing one."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.clear_caches:1
# f24ead49a2fc4415ab25cca57dc3db91
msgid "Clears the caches for configuration files,"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.clear_caches:3
# a57f88958ae745feb8c67289155c1bee
msgid "This will cause files to be re-read upon the next request."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.file_scopes:1
# 78ea740d0dfb4b948ea0034c25bf68da
msgid "List of writable scopes with an associated file."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.get:1
# dd6b73060fd444d2bb75f8ec0986c7da
msgid "Get a config section or a single value from one."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.get:3
# 63e5271c2f784787950195f28e1842ad
msgid "Accepts a path syntax that allows us to grab nested config map entries.  Getting the 'config' section would look like::"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.get:8
# 315c24448a7b4adca69cb6c5a78e8fbc
msgid "and the ``dirty`` section in the ``config`` scope would be::"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.get:12
# 5be3ae0b1f4e42caba23adcf170c3a87
msgid "We use ``:`` as the separator, like YAML objects."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.get_config:1
# 35244b3d2eca4db69f76e7715b3aadf5
msgid "Get configuration settings for a section."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.get_config:3
# 183e632c809d4f59b7b8b54b78140150
msgid "If ``scope`` is ``None`` or not provided, return the merged contents of all of Spack's configuration scopes.  If ``scope`` is provided, return only the confiugration as specified in that scope."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.get_config:7
# 4aba70abcff64011b400f7dfb1ec394d
msgid "This off the top-level name from the YAML section.  That is, for a YAML config file that looks like this::"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.get_config:15
# 72288a2b6bea4845b24c9be14292afa0
msgid "``get_config('config')`` will return::"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.get_config_filename:1
# 782547bbde4842d7b5e5ad07beb8ff94
msgid "For some scope and section, get the name of the configuration file."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.highest_precedence_scope:1
# fab4342cac544b3181a648e3eb06063a
msgid "Non-internal scope with highest precedence."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.pop_scope:1
# 5cafc9f3245944a395e2d1761f8cfaa5
msgid "Remove the highest precedence scope and return it."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.print_section:1
# e4764fa971454ebabb884b4668abacca
msgid "Print a configuration to stdout."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.push_scope:1
# 38c8431b8e894584a1b6de6bcec68031
msgid "Add a higher precedence scope to the Configuration."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.set:1
# 6bf0672c40eb4c77b4407376597cb198
msgid "Convenience function for setting single values in config files."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.set:3
#: ../spack/lib/spack/spack/config.py:docstring of spack.config.set:3
# a9fb618d95f44cc9937a90e43f8d43f2
# a73ad452e5774fe78a0f8a45eb05d511
msgid "Accepts the path syntax described in ``get()``."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.update_config:1
# bd04fd1af7db4e95989c6d2ce57d8e4d
msgid "Update the configuration file for a particular scope."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.update_config:3
# c9782365b11d46b693ff4815ac967106
msgid "Overwrites contents of a section in a scope with update_data, then writes out the config file."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.Configuration.update_config:6
# 8a3d5534aa754507a1aad53dbe595f51
msgid "update_data should have the top-level section name stripped off (it will be re-added).  Data itself can be a list, dict, or any other yaml-ish structure."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.ImmutableConfigScope:1
#: ../spack/lib/spack/spack/config.py:docstring of spack.config.InternalConfigScope:1
#: ../spack/lib/spack/spack/config.py:docstring of spack.config.SingleFileScope:1
# c2aef2c44c89403db7d9aa9647923e0e
# 920669a569bb4097b85cf00121fedc4b
# 607cb53272234a17a11c65dd13f35abc
msgid "Bases: :class:`spack.config.ConfigScope`"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.ImmutableConfigScope:1
# 579ad987ed3440089ad83c7b911d6eba
msgid "A configuration scope that cannot be written to."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.ImmutableConfigScope:3
# 192c73ace6db412b837a0cd90e088472
msgid "This is used for ConfigScopes passed on the command line."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.InternalConfigScope:1
# e13cf8d8c7904feba2dc76aa15920b79
msgid "An internal configuration scope that is not persisted to a file."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.InternalConfigScope:3
# e997a17d01b4489b80e45109d05098c5
msgid "This is for spack internal use so that command-line options and config file settings are accessed the same way, and Spack can easily override settings from files."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.InternalConfigScope.get_section:1
# 91f18cd3022543efbc0145537671504f
msgid "Just reads from an internal dictionary."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.InternalConfigScope.write_section:1
# ee7a0fe386d5468abdb94c1e208ac1cf
msgid "This only validates, as the data is already in memory."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.SingleFileScope:1
# ea4bbac3035b440e8075aafc433e0075
msgid "This class represents a configuration scope in a single YAML file."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.command_line_scopes:1
# ca402757b3794a698b8e666a92fb0eda
msgid "configuration scopes added on the command line set by ``spack.main.main()``."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.config:1
# 8e6b3b54e11444cc96cb1987994448c2
msgid "This is the singleton configuration instance for Spack."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.config_defaults:1
# 193a9304cd844c39a0365ce791af7175
msgid "Hard-coded default values for some key configuration options. This ensures that Spack will still work even if config.yaml in the defaults scope is removed."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.configuration_paths:1
# 7a6a9c31c4094962a3c8a030c28419fb
msgid "Builtin paths to configuration files in Spack"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.default_list_scope:1
# 9eb481de1f4844e6b352a001ed640ab8
msgid "Return the config scope that is listed by default."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.default_list_scope:3
# 2823bf45480a467382b86209c7170b70
msgid "Commands that list configuration list *all* scopes (merged) by default."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.default_modify_scope:1
# 5bc305ea893545ecbcf0d9d99b22788b
msgid "Return the config scope that commands should modify by default."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.default_modify_scope:3
# cbff02ec265144e68096e35cc213135c
msgid "Commands that modify configuration by default modify the *highest* priority scope."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.first_existing:1
# 45253ba57814402ea1282bafd1e548c1
msgid "Get the value of the first key in keys that is in the dictionary."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.get:1
# 3016a54212cb4be98c4274104153342a
msgid "Module-level wrapper for ``Configuration.get()``."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.override:1
# 27943fd5ff364a7aa1a9f3b9bbd6891e
msgid "Simple way to override config settings within a context."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.override:3
# 355c19d716f84058997bc3f5e81d5ebd
msgid "scope or single option to override"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.override:5
# fa8562528f94479c8feea3017235c539
msgid "value for the single option"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.override:8
# e5dc5c3442554d36b13332fc75126e12
msgid "Temporarily push a scope on the current configuration, then remove it after the context completes. If a single option is provided, create an internal config scope for it and push/pop that scope."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.scopes:1
# 95506714c4cb402587e8d40cd81229c3
msgid "Convenience function to get list of configuration scopes."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.scopes_metavar:1
# feca84b1f22841ec985d04ce4102bd16
msgid "metavar to use for commands that accept scopes this is shorter and more readable than listing all choices"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.section_schemas:1
# 628570dc3a1e47cb9d69b1952d695097
msgid "Dict from section names -> schema for that section"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.set:1
# df0b35c945ac4400a86c033ab25e8a36
msgid "Convenience function for getting single values in config files."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.validate:1
# 51e3fdf5a4f64adfb3b176581b304f51
msgid "Validate data read in from a Spack YAML file."
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.validate:3
# f5e98088b6bf48d9a1e84e146589e41c
msgid "data read from a Spack YAML file"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.validate:5
# 2e794775ae4543919ad388780ed022d0
msgid "jsonschema to validate data"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.validate:7
# 9d9e1a6bdf994271a1f6883d5139d99b
msgid "whether to set defaults based on the schema"
msgstr ""

#: ../spack/lib/spack/spack/config.py:docstring of spack.config.validate:10
# 2b05fd763ddf4dc8be8f5d4525f33942
msgid "This leverages the line information (start_mark, end_mark) stored on Spack YAML structures."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:89
# 5a566c4154dc4d5196f596c285ff62be
msgid "spack.database module"
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database:1
# 1a1f37157e3c4865833464dda81f5004
msgid "Spack's installation tracking database."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database:3
# 7bf06e01659e40b696f0d8a5ce2409a3
msgid "The database serves two purposes:"
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database:5
# cde9d6f0de86497a8ad9422524494cec
msgid "It implements a cache on top of a potentially very large Spack directory hierarchy, speeding up many operations that would otherwise require filesystem access."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database:9
# 4f22c7220e8f4881bf9b6ceecd52ebd3
msgid "It will allow us to track external installations as well as lost packages and their dependencies."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database:12
# 7b1fd7a387c3418bbb1ce86b2311bb82
msgid "Prior to the implementation of this store, a directory layout served as the authoritative database of packages in Spack.  This module provides a cache and a sanity checking mechanism for what is in the filesystem."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.CorruptDatabaseError:1
# 0a28d35dbdf74f40af928d59a84e9cfa
msgid "Raised when errors are found while reading the database."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.Database:1
# fbdf942ea421481098ca62b820967386
msgid "Per-process lock objects for each install prefix."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.Database.prefix_lock:1
# e5b00b7eca684b1f81531510bad17f83
msgid "Get a lock on a particular spec's installation directory."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.Database.prefix_lock:3
# 00b982a55b2a42eaaf4c44f55db76b71
msgid "NOTE: The installation directory **does not** need to exist."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.Database.prefix_lock:5
# c09259ca6f09496d896fb951aa42dc15
msgid "Prefix lock is a byte range lock on the nth byte of a file."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.Database.prefix_lock:7
# f5297727669a4ff3b49f43fbe40c69be
msgid "The lock file is ``spack.store.db.prefix_lock`` -- the DB tells us what to call it and it lives alongside the install DB."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.Database.prefix_lock:10
# b61e5b4ff2914e78ac88bdbbb0f7f5f8
msgid "n is the sys.maxsize-bit prefix of the DAG hash.  This makes likelihood of collision is very low AND it gives us readers-writer lock semantics with just a single lockfile, so no cleanup required."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.Database.query_one:1
# 3cfbcae3722b455589157af0d81331a8
msgid "Query for exactly one spec that matches the query spec."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.Database.query_one:3
# 8300997a4b624cb0b19b231680aa21ba
msgid "Raises an assertion error if more than one spec matches the query. Returns None if no installed package matches."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.Database.read_transaction:1
# afb3d422be0040c785ad935114479ce1
msgid "Get a read lock context manager for use in a `with` block."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.Database.reindex:1
# dba9584c750b4ac88c7a1ed18c529f56
msgid "Build database index from scratch based on a directory layout."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.Database.reindex:3
# 21c5ec7756a24339993bcf53787595a1
msgid "Locks the DB if it isn't locked already."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.Database.write_transaction:1
# d5a6d55b057b4f42a0c9c59ec1707c9e
msgid "Get a write lock context manager for use in a `with` block."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.ForbiddenLockError:1
# afa4a327ee8543c285c953d351a745a2
msgid "Raised when an upstream DB attempts to acquire a lock"
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:1
# 4fb4435227dd4894a76a7b8c8448ba2b
msgid "A record represents one installation in the DB."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:3
# 7d0ed8de248e48c78041d2401f6414bc
msgid "The record keeps track of the spec for the installation, its install path, AND whether or not it is installed.  We need the installed flag in case a user either:"
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:7
# a57b7eea668c4da09544f3c05499113b
msgid "blew away a directory, or"
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:8
# 38bd3f152d5b44aea4890ce94796728c
msgid "used spack uninstall -f to get rid of it"
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:10
# 9fad9d0943dd47689d075dcbb318c3df
msgid "If, in either case, the package was removed but others still depend on it, we still need to track its spec, so we don't actually remove from the database until a spec has no installed dependents left."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:15
# 3f2e7af0b3b04bd790a442f56ee1fc3a
msgid "spec tracked by the install record"
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:17
# af2808ad75d94a3dabb6b839daaa2f24
msgid "path where the spec has been installed"
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:19
# ce7558d939d246a69f335a1125e0e9f4
msgid "whether or not the spec is currently installed"
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:21
# bae8c6c1e24244b9a83507161c132995
msgid "number of specs that depend on this one"
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:23
# cd37da5f4b7a440ca2b459827c3c775d
msgid "whether or not this spec was explicitly installed, or pulled-in as a dependency of something else"
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:26
# ffa15087876540128de862ed2fc77694
msgid "time of the installation"
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.MissingDependenciesError:1
# c2bce8e024304d7497782365ed9d1981
msgid "Raised when DB cannot find records for dependencies"
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.NonConcreteSpecAddError:1
# c0baceb2f4c749b0bd25f2e36b333981
msgid "Raised when attemptint to add non-concrete spec to DB."
msgstr ""

#: ../spack/lib/spack/spack/database.py:docstring of spack.database.UpstreamDatabaseLockingError:1
# a1789f1a815543679f7a0eb8fd981b77
msgid "Raised when an operation would need to lock an upstream database"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:97
# 8f30da9a07384df4a4f6830ca55f79d0
msgid "spack.dependency module"
msgstr ""

#: ../spack/lib/spack/spack/dependency.py:docstring of spack.dependency:1
# a5dbcb1585fa422897516928dc1c3a8b
msgid "Data structures that represent Spack's dependency relationships."
msgstr ""

#: ../spack/lib/spack/spack/dependency.py:docstring of spack.dependency.Dependency:1
# abf787ffef0b49a5a28a890667d38dcf
msgid "Class representing metadata for a dependency on a package."
msgstr ""

#: ../spack/lib/spack/spack/dependency.py:docstring of spack.dependency.Dependency:3
# 3b8ca218d649490fbf90e1da564a6b9e
msgid "This class differs from ``spack.spec.DependencySpec`` because it represents metadata at the ``Package`` level. ``spack.spec.DependencySpec`` is a descriptor for an actual package configuration, while ``Dependency`` is a descriptor for a package's dependency *requirements*."
msgstr ""

#: ../spack/lib/spack/spack/dependency.py:docstring of spack.dependency.Dependency:9
# 8898fe7364e844df987119e10de168ff
msgid "A dependency is a requirement for a configuration of another package that satisfies a particular spec.  The dependency can have *types*, which determine *how* that package configuration is required, e.g. whether it is required for building the package, whether it needs to be linked to, or whether it is needed at runtime so that Spack can call commands from it."
msgstr ""

#: ../spack/lib/spack/spack/dependency.py:docstring of spack.dependency.Dependency:16
# ff1f058a6d074214bb73eaee26e171b2
msgid "A package can also depend on another package with *patches*. This is for cases where the maintainers of one package also maintain special patches for their dependencies.  If one package depends on another with patches, a special version of that dependency with patches applied will be built for use by the dependent package.  The patches are included in the new version's spec hash to differentiate it from unpatched versions of the same package, so that unpatched versions of the dependency package can coexist with the patched version."
msgstr ""

#: ../spack/lib/spack/spack/dependency.py:docstring of spack.dependency.Dependency.merge:1
# 19a8ef87e233423983cab357ef2af1a5
msgid "Merge constraints, deptypes, and patches of other into self."
msgstr ""

#: ../spack/lib/spack/spack/dependency.py:docstring of spack.dependency.Dependency.name:1
# 1ccafe5ec1b6497dbf41a644228c642f
msgid "Get the name of the dependency package."
msgstr ""

#: ../spack/lib/spack/spack/dependency.py:docstring of spack.dependency.all_deptypes:1
# 17145ab181f3499b880ccef6643bdc48
msgid "The types of dependency relationships that Spack understands."
msgstr ""

#: ../spack/lib/spack/spack/dependency.py:docstring of spack.dependency.canonical_deptype:1
# 7a0fbc1e976640c6ae2f62800035179a
msgid "Convert deptype to a canonical sorted tuple, or raise ValueError."
msgstr ""

#: ../spack/lib/spack/spack/dependency.py:docstring of spack.dependency.canonical_deptype:3
# 882c942da4a04cb19f73b69d92e09532
msgid "string representing dependency type, or a list/tuple of such strings.  Can also be the builtin function ``all`` or the string 'all', which result in a tuple of all dependency types known to Spack."
msgstr ""

#: ../spack/lib/spack/spack/dependency.py:docstring of spack.dependency.default_deptype:1
# a5b794aa58df4913b7756dd79ff053f1
msgid "Default dependency type if none is specified"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:105
# 0874addc7a364504a4c4d1ddcafa7a0b
msgid "spack.directives module"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives:1
# 5d8ca8c36c984a95a07cb1fe0d34f126
msgid "This package contains directives that can be used within a package."
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives:3
# 3853d4c6e57e480490e0e48eba6e5f4b
msgid "Directives are functions that can be called inside a package definition to modify the package, for example:"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives:9
# 0fbf018920c044abbc106f5c5a461df4
msgid "class OpenMpi(Package):"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives:7
# 76e89d67087e4da3844ebdc3168e6923
msgid "depends_on(\"hwloc\") provides(\"mpi\") ..."
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives:11
# 1274f0d5fb2047539dc03f5fe10f9554
msgid "``provides`` and ``depends_on`` are spack directives."
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives:13
# 962b4e80ac214c2cb945a8906a5b0399
msgid "The available directives are:"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives:15
# ba40af41c761492584f7d98a640c3507
msgid "``version``"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives:16
# 4927153278674aed986c22fe7b4c41b1
msgid "``depends_on``"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives:17
# 3a31ff7a53ed4b528491a92aaa63d5d7
msgid "``provides``"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives:18
# 70558b4f1b574369bfde132e51d8d22f
msgid "``extends``"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives:19
# 103dc00502bb4b2eb71ba8c692168046
msgid "``patch``"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives:20
# 6bbafd97da004ff0be910ed3cf9d57ee
msgid "``variant``"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives:21
# fa4a8ce2c0664d54ab590c0d1a9846b5
msgid "``resource``"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.version:1
# c2e86ce686b249ae952006550ee9eb6a
msgid "Adds a version and metadata describing how to fetch its source code."
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.version:3
# 732037616d894793ad612fc635cd369e
msgid "Metadata is stored as a dict of ``kwargs`` in the package class's ``versions`` dictionary."
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.version:6
# 4dc3b110e0bc41979a556e78904532c0
msgid "The ``dict`` of arguments is turned into a valid fetch strategy later. See ``spack.fetch_strategy.for_package_version()``."
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.conflicts:1
# 9bbf0126105a410690313d60e1c7bc31
msgid "Allows a package to define a conflict."
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.conflicts:3
# 03b2d987ba534fb197dfaf4c01d144c8
msgid "Currently, a \"conflict\" is a concretized configuration that is known to be non-valid. For example, a package that is known not to be buildable with intel compilers can declare::"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.conflicts:9
# 61ce26ab6e39405898194be66def6ac7
msgid "To express the same constraint only when the 'foo' variant is activated::"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.conflicts:14
# 02dcc316108749d6a1a24122b2d6615b
msgid "constraint defining the known conflict"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.conflicts:16
# 43420b0f04384594909175c8e5b3481a
msgid "optional constraint that triggers the conflict"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.conflicts:18
# 787bb4e4ef15409bb4c0fc2864bdc63f
msgid "optional user defined message"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.depends_on:1
# 4364e993de7e4d5688221288e2b7551c
msgid "Creates a dict of deps with specs defining when they apply."
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.depends_on:3
# 49ad31158a244e138e3c160a9dfc0be8
msgid "the package and constraints depended on"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.depends_on:5
# 75dc898c4c0449a5a6758b34d9edb17c
msgid "when the dependent satisfies this, it has the dependency represented by ``spec``"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.depends_on:8
# 45b5178609e948ea959c279f0555a78b
msgid "str or tuple of legal Spack deptypes"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.depends_on:10
# ebe9907838e94affb582d779cc353e50
msgid "single result of ``patch()`` directive, a ``str`` to be passed to ``patch``, or a list of these"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.depends_on:14
# 2cd1f12c42c542078d4bd416101389e1
msgid "This directive is to be used inside a Package definition to declare that the package requires other packages to be built first. @see The section \"Dependency specs\" in the Spack Packaging Guide."
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.extends:1
# 18cad7e4c96a44d9b33970bb6bf79fb5
msgid "Same as depends_on, but allows symlinking into dependency's prefix tree."
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.extends:4
# 53b11e643b8840cab9c67571f9f8cde2
msgid "This is for Python and other language modules where the module needs to be installed into the prefix of the Python installation. Spack handles this by installing modules into their own prefix, but allowing ONE module version to be symlinked into a parent Python install at a time, using ``spack activate``."
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.extends:10
# 76d5de7846914ea6b8b69d028439b029
msgid "keyword arguments can be passed to extends() so that extension packages can pass parameters to the extendee's extension mechanism."
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.provides:1
# 0860732b79534fabb8c5765f94441b86
msgid "Allows packages to provide a virtual dependency.  If a package provides 'mpi', other packages can declare that they depend on \"mpi\", and spack can use the providing package to satisfy the dependency."
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.patch:1
# e895599e28a545c39cc7e5623cd7428b
msgid "Packages can declare patches to apply to source.  You can optionally provide a when spec to indicate that a particular patch should only be applied when the package's spec meets certain conditions (e.g. a particular version)."
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.patch:6
# 11dc05b6c29f4cffa4cd26d9f700d0f2
msgid "url or relative filename of the patch"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.patch:8
# ffd64c7515454d1c8943ea5458a03cbb
msgid "patch level (as in the patch shell command)"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.patch:10
# 65bf4f8a03c244af9da8a043dfed7208
msgid "optional anonymous spec that specifies when to apply the patch"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.patch:13
# b15625fe6e3345a99f819089951c01a3
msgid "dir to change to before applying"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.patch:0
#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.create:0
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:0
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:0
# bc0e71623a744cb5a63cb98969b20bfd
# 655131618f2d48d8a3bd5a7e92080660
# d7a1c80489d14919831cc627d92bb137
# 6a5c438d36f941e191db7f1852f54ade
msgid "Keyword Arguments"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.patch:16
# 19f82fbcc810406caff0292c6905cb54
msgid "sha256 sum of the patch, used to verify the patch (only required for URL patches)"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.patch:19
# 5659b34a983043fca98795da6f034763
msgid "sha256 sum of the *archive*, if the patch is compressed (only required for compressed URL patches)"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.variant:1
# 30cd139a1eb449d3b3dc8f3ea40c1056
msgid "Define a variant for the package. Packager can specify a default value as well as a text description."
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.variant:4
# 161f1365306a459089bf29163c8db45b
msgid "name of the variant"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.variant:6
# 8f7115f52c5740489383dfee63fe5c4f
msgid "default value for the variant, if not specified otherwise the default will be False for a boolean variant and 'nothing' for a multi-valued variant"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.variant:10
# 6c41bb7c2bfd4306bb8ae789aa192eb6
msgid "description of the purpose of the variant"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.variant:12
# 5c3e8cd0db704a43912ecec9c1afefe4
msgid "either a tuple of strings containing the allowed values, or a callable accepting one value and returning True if it is valid"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.variant:16
# 6c6b4867e521438094c68eaa2b029883
msgid "if False only one value per spec is allowed for this variant"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.variant:19
# 5c555d231ec4411484a463df3f14bfa5
msgid "optional group validator to enforce additional logic. It receives the package name, the variant name and a tuple of values and should raise an instance of SpackError if the group doesn't meet the additional constraints"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.variant:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:0
#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.suggest_archive_basename:0
#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.file_is_relocatable:0
#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.is_relocatable:0
#: ../spack/lib/spack/spack/report.py:docstring of spack.report.collect_info:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_and_version:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_version:0
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:0
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.validate_or_raise:0
# 978f36b33d534f65be2e808e3294144d
# 23f67609f4fd4089823a295d06e8f811
# 2e6c9d3a2eef4f0487dd5cd729ae22d7
# cbc78232f0274ca9b4a1b126946d2994
# 57366824d1254423ab60f81429ca349c
# 7ce9df03de794295a40018feb3633ee2
# faaf8f3dc263456b97bbb573de395530
# 8fb977bc0e1149c18d41ec8c622ae484
# 6fc493e425f440c3a9449fb9e746436d
# f27f07e7e63b40af8c6ba8cbae63799a
# ef3972eac7214208bd0bec3a867c7c38
# e95c8918951b4465893a2fbd272f829b
msgid "raises"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.variant:25
# 2af09473ea7943d38c749a814600f49d
msgid ":exc:`DirectiveError` -- if arguments passed to the directive are invalid"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.resource:1
# ed996ff3942d402480f710dd14a528bd
msgid "Define an external resource to be fetched and staged when building the package. Based on the keywords present in the dictionary the appropriate FetchStrategy will be used for the resource. Resources are fetched and staged in their own folder inside spack stage area, and then moved into the stage area of the package that needs them."
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.resource:7
# 7f64e2c7f87245d4bf068578cac66ed2
msgid "List of recognized keywords:"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.resource:9
# d95abb0b9c3b4f658a19987ca76f3459
msgid "'when' : (optional) represents the condition upon which the resource is needed"
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.resource:11
# dfce288c7c664afc87c9750d164e50bd
msgid "'destination' : (optional) path where to move the resource. This path must be relative to the main package stage area."
msgstr ""

#: ../spack/lib/spack/spack/directives.py:docstring of spack.directives.resource:13
# 178a99cafc794d0e94efa7f3186df7d9
msgid "'placement' : (optional) gives the possibility to fine tune how the resource is moved into the main package stage area."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:113
# d6162705621140cd8fb68251a5eaf11f
msgid "spack.directory\\_layout module"
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout:1
# de12447771434d4083d57a9f85bbaf06
msgid "A directory layout is used to associate unique paths with specs. Different installations are going to want differnet layouts for their install, and they can use this to customize the nesting structure of spack installs."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.all_specs:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.all_specs:1
# e7a46e1c64414005ad877be2789dae6d
# 9ddcfd988fa94a89ae6fb797c334d2bf
msgid "To be implemented by subclasses to traverse all specs for which there is a directory within the root."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.check_installed:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.check_installed:1
# a1cdf5a5761c4737af27495dd54cbe37
# 7330dca090064e128354e1e2741d302e
msgid "Checks whether a spec is installed."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.check_installed:3
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.check_installed:3
# 1b29173da093496fae33907844016258
# 0ce0d867afdd4c3a91e8bb416daf9bf8
msgid "Return the spec's prefix, if it is installed, None otherwise."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.check_installed:5
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.check_installed:5
# 73bba5b39ba34533ba8d71221d5384e7
# 680f8d7864354c0fa5f32ade3f4b3be7
msgid "Raise an exception if the install is inconsistent or corrupt."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.create_install_directory:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.create_install_directory:1
# f72688adc7644f37b0db542f9ca9d8c6
# b1633b4be31c490d94d5a5f12266aa75
msgid "Creates the installation directory for a spec."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.hidden_file_paths:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.hidden_file_paths:1
# 9040412e5c1f4843848fd1e6ff777c57
# 1ca1fd30a5ef4014b52300949c1e29ac
msgid "Return a list of hidden files used by the directory layout."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.hidden_file_paths:3
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.hidden_file_paths:3
# 68222a161b31402b95ed5aa4b7adab5c
# bfccc55065f14938a575fe4d5ebe8f0b
msgid "Paths are relative to the root of an install directory."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.hidden_file_paths:5
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.hidden_file_paths:5
# 7e403cd324d046fa900b01b6fca653ab
# 96f7467c3be84680891ab6ef92dd581b
msgid "If the directory layout uses no hidden files to maintain state, this should return an empty container, e.g. [] or (,)."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.path_for_spec:1
# ee678255b95f49dbad175c4501d663bc
msgid "Return absolute path from the root to a directory for the spec."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.relative_path_for_spec:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.relative_path_for_spec:1
# ae491c9eab3d4559972b4d4d79b87618
# b1f743018e1241ec8428f799d8121452
msgid "Implemented by subclasses to return a relative path from the install root to a unique location for the provided spec."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.remove_install_directory:1
# 55a1169b499f4296a75d7d1a7ea6e4a7
msgid "Removes a prefix and any empty parent directories from the root. Raised RemoveFailedError if something goes wrong."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayoutError:1
# 94db472458e84ccd971324ed768e98e4
msgid "Superclass for directory layout errors."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionAlreadyInstalledError:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionConflictError:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.InconsistentInstallDirectoryError:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.InstallDirectoryAlreadyExistsError:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.InvalidDirectoryLayoutParametersError:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.InvalidExtensionSpecError:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.NoSuchExtensionError:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.RemoveFailedError:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.SpecHashCollisionError:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.SpecReadError:1
# 3b7d78b09b3843ce8b804620ba052113
# 8f6f8a182b3f4c869f87619aae68ae74
# d51f6d500a554e40a0bb083caeec0be2
# 2dfd76c6669e4382880a90cd0d7df34b
# 0d1b733b44f5441397f0fbb2fa64e4fa
# 1a49f1f35d1542e88f0aaddbcb171b1a
# 248cc3111a8d49cb9fa4e194c1387373
# d1fa0ee9a72241e69b626845e3cd0bab
# ab61030a138c449ba495b6e9a71dfc7c
# 4ef6c2a5eade4950bd6fd3d7efe25266
msgid "Bases: :class:`spack.directory_layout.DirectoryLayoutError`"
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionAlreadyInstalledError:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionConflictError:1
# be698960202b4b74be8320bef2ddb24e
# ad633691f2c449aebf34fc4d42d16a08
msgid "Raised when an extension is added to a package that already has it."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout:1
# 8fde654541f4479490c8cdc6ed1ee6e4
msgid "A directory layout is used to associate unique paths with specs for package extensions. Keeps track of which extensions are activated for what package. Depending on the use case, this can mean globally activated extensions directly in the installation folder - or extensions activated in filesystem views."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout.add_extension:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout.add_extension:1
# 3a7ef55af304471090d6c60c4b786c99
# 2e77d0367f044e3699cd6b77004fc990
msgid "Add to the list of currently installed extensions."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout.check_activated:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout.check_activated:1
# dfceae45325d4b97a19b9295401b4533
# affa8bb83e90445189336cc17b1e8b9e
msgid "Ensure that ext_spec can be removed from spec."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout.check_activated:3
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout.check_activated:3
# 161aaf4b75144c7eb6cadbff8d348bff
# b89476698768445a93ac264fed21c3ff
msgid "If not, raise NoSuchExtensionError."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout.check_extension_conflict:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout.check_extension_conflict:1
# 81f071393c884bc58e7c09ddb5ccbae7
# f78a02aa868d4973baae886d677db448
msgid "Ensure that ext_spec can be activated in spec."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout.check_extension_conflict:3
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout.check_extension_conflict:3
# c305fef917704899807f2a4c7afa8aed
# df9d5d7ad98e41f0b473946ee8dffa85
msgid "If not, raise ExtensionAlreadyInstalledError or ExtensionConflictError."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout.extendee_target_directory:1
# 228f47040b25404eb60e5566cf3b436c
msgid "Specify to which full path extendee should link all files from extensions."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout.extension_map:1
# 1fd964967c0640bdaed2ccaf394fe071
msgid "Get a dict of currently installed extension packages for a spec."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout.extension_map:3
# abf53fc6607543b4bcb996b5530436a1
msgid "Dict maps { name : extension_spec } Modifying dict does not affect internals of this layout."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout.remove_extension:1
#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout.remove_extension:1
# 9f06c26f1aae44478f3b243922c17f11
# e8d7743cd25944e98dcbed359ca85388
msgid "Remove from the list of currently installed extensions."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.InconsistentInstallDirectoryError:1
# 9e76706cc5014c8b8b8781b27ea96398
msgid "Raised when a package seems to be installed to the wrong place."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.InstallDirectoryAlreadyExistsError:1
# 0d07cf23ff284b1e8572818d14d0903e
msgid "Raised when create_install_directory is called unnecessarily."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.InvalidDirectoryLayoutParametersError:1
# 15957e54f54240bf8dc937a3ca3a4ecc
msgid "Raised when a invalid directory layout parameters are supplied"
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.InvalidExtensionSpecError:1
# 910cbef7ecc5425f9b786fe7ff0bc809
msgid "Raised when an extension file has a bad spec in it."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.NoSuchExtensionError:1
# c0b932edc52743e287c040ed9f63272b
msgid "Raised when an extension isn't there on deactivate."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.RemoveFailedError:1
# 3182cd8eb9f040d19a39f5a44a94c48b
msgid "Raised when a DirectoryLayout cannot remove an install prefix."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.SpecHashCollisionError:1
# b8f8d02e153a40cb9cc39e60cfdae2d8
msgid "Raised when there is a hash collision in an install layout."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.SpecReadError:1
# 04811bf1484a47fe84a28e8691dd9141
msgid "Raised when directory layout can't read a spec."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout:1
# 480faa8aca524c9ea5dd6dfc8615791f
msgid "Bases: :class:`spack.directory_layout.DirectoryLayout`"
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout:5
# 3e3089e225214ef4919899454a0c7116
msgid "By default lays out installation directories like this::"
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout:5
# 38ecc623bfb043e1a7712693455f9957
msgid "<install root>/"
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout:5
# 22429760e2244899b6bade796e849837
msgid "<platform-os-target>/"
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout:5
# 305e5d69a96f433ab86e1958b649b4b1
msgid "<compiler>-<compiler version>/"
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout:5
# aaeb443becd948649d161f235821c18c
msgid "<name>-<version>-<hash>"
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout:7
# 9c46694ca5704399ac7d37edace7ebc5
msgid "The hash here is a SHA-1 hash for the full DAG plus the build spec.  TODO: implement the build spec."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout:10
# c7767af121064318b33f25a5ce9cc033
msgid "The installation directory scheme can be modified with the arguments hash_len and path_scheme."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.read_spec:1
# 6c6ea9188f114600a02a638515c66208
msgid "Read the contents of a file and parse them as a spec"
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.spec_file_path:1
# 7527e660c41c41ff860e0df1fd386f95
msgid "Gets full path to spec file"
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.write_spec:1
# d07553a395c048ba82971ee918ddeb85
msgid "Write a spec out to a file."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout:1
# ce181bbd50e24e7ea4e17cb61e817bc9
msgid "Bases: :class:`spack.directory_layout.ExtensionsLayout`"
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout:1
# eb65018f923c4352ab62c1ccd2472c0c
msgid "Maintain extensions within a view."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout.extension_file_path:1
# 31622f4d0b304b778e65e819185bd484
msgid "Gets full path to an installed package's extension file, which keeps track of all the extensions for that package which have been added to this view."
msgstr ""

#: ../spack/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout.extension_map:1
# 44923b855a2c448f852d5a85c19634e0
msgid "Defensive copying version of _extension_map() for external API."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:121
# 03bf535e6ea1449baf9e3bb16d5296f5
msgid "spack.environment module"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.active:1
# 92496af749a140b08392e46e197c5c4d
msgid "True if this environment is currently active."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.add:1
# 7fc0e11fec1e474e82a45d149a0f3eca
msgid "Add a single user_spec (non-concretized) to the Environment"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.add:3
# ccb940ee6afb4878b04d9c2a18d3fc23
msgid "True if the spec was added, False if it was already     present and did not need to be added"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.add:5
# c3fc2ce9c18544dea9b002808f6a9090
msgid "True if the spec was added, False if it was already"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.add:6
# 3162232615bb4699bb755ac2ebbd2b2e
msgid "present and did not need to be added"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.added_specs:1
# 53253900af614f269601acb41f4a5a9b
msgid "Specs that are not yet installed."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.added_specs:3
# d221bc992a2e411db782fc3f48fddbff
msgid "Yields the user spec for non-concretized specs, and the concrete spec for already concretized but not yet installed specs."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.all_hashes:1
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.all_specs:1
# f0c6974294134a0fa292e50b75b95129
# 8a381a5ea84c4b8f93a0a10800908d85
msgid "Return all specs, even those a user spec would shadow."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.all_specs_by_hash:1
# 635d8da0884d47f79eab7070b224816f
msgid "Map of hashes to spec for all specs in this environment."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.concretize:1
# 7ea32bf20bb14d038d12d34e46457d2e
msgid "Concretize user_specs in this environment."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.concretize:3
# 5c19c280dc074c0fafc49b6c17f0ee83
msgid "Only concretizes specs that haven't been concretized yet unless force is ``True``."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.concretize:6
# 0b2382f9866b4ee5a57a85082768f1d1
msgid "This only modifies the environment in memory. ``write()`` will write out a lockfile containing concretized specs."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.concretize:9
# 77a15637126a4c63b3e06e24b2e16e62
msgid "re-concretize ALL specs, even those that were already concretized"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.concretized_specs:1
# 0bf6f41039d44bb7b85b45db37ac1017
msgid "Tuples of (user spec, concrete spec) for all concrete specs."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.config_scopes:1
# 4a63568faad044d28f0099b466c74fc1
msgid "A list of all configuration scopes for this environment."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.destroy:1
# 3b6c267d172f477fab1834f02ee6f037
msgid "Remove this environment from Spack entirely."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.env_file_config_scope:1
# 68c7ab53147d415f981f43908d9eaec2
msgid "Get the configuration scope for the environment's manifest file."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.env_file_config_scope_name:1
# 77cf26cb72b046bb931d1270007c64f6
msgid "Name of the config scope of this environment's manifest file."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.env_subdir_path:1
# 5473cbac73f34981b9b837fa7e5cf1ed
msgid "Path to directory where the env stores repos, logs, views."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.included_config_scopes:1
# 91106eaed7094613b1ede4f03eddc285
msgid "List of included configuration scopes from the environment."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.included_config_scopes:3
# 71eb0353999a4df1a1531b8122370d57
msgid "Scopes are listed in the YAML file in order from highest to lowest precedence, so configuration from earlier scope will take precedence over later ones."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.included_config_scopes:7
# fea2875322524defaca4d8cb0067903d
msgid "This routine returns them in the order they should be pushed onto the internal scope stack (so, in reverse, from lowest to highest)."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.install:1
# fa32cc1fd7fc42a386252e2dd64a5940
msgid "Install a single spec into an environment."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.install:3
# 0816264c9ea2491f878006d3e0a0d12a
msgid "This will automatically concretize the single spec, but it won't affect other as-yet unconcretized specs."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.install_all:1
# 975ce158f0164647bc9859b241a66bf6
msgid "Install all concretized specs in an environment."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.internal:1
# 9105c4b936b0407db2756f807c717ba2
msgid "Whether this environment is managed by Spack."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.lock_path:1
# 3f76dc5d953347829121d3f55422792b
msgid "Path to spack.lock file in this environment."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.manifest_path:1
# a8043a0db4f14b48aa7a8d7218262b04
msgid "Path to spack.yaml file in this environment."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.name:1
# cd3b33a86f0747fabc5c88be6371452f
msgid "Human-readable representation of the environment."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.name:3
# 427bf6afd9e84dcdb602575e1d1b9608
msgid "This is the path for directory environments, and just the name for named environments."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.remove:1
# 920a9a74c42c483c92bc04b5ef8150ed
msgid "Remove specs from an environment that match a query_spec"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.removed_specs:1
# b6235e342b794827b254ff15e03b00c3
msgid "Tuples of (user spec, concrete spec) for all specs that will be removed on nexg concretize."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.roots:1
# 7722929cfb594373b0c5a4d19117b8cf
msgid "Specs explicitly requested by the user *in this environment*."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.roots:3
# 58005ce5c0b24ade9169e2bffeada8c3
msgid "Yields both added and installed specs that have user specs in `spack.yaml`."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.write:1
# 339e5dcd475b4a3a84f08dd19873fdb8
msgid "Writes an in-memory environment to its location on disk."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.Environment.write:3
# e38ceb46887f47da962bb9f85e4515c9
msgid "This will also write out package files for each newly concretized spec."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.SpackEnvironmentError:1
# 311c263115c34991926a3014e7786d57
msgid "Superclass for all errors to do with Spack environments."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.activate:1
# 488aee44745c42ff80735b959120ef6e
msgid "Activate an environment."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.activate:3
# f107f896a8304f639bae5635eb81e882
msgid "To activate an environment, we add its configuration scope to the existing Spack configuration, and we set active to the current environment."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.activate:7
# 91982bb86f2d492d881820d9af792c63
msgid "the environment to activate"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.activate:9
# 01475931f6a84180a3f124eb6513df21
msgid "use the packages exactly as they appear in the environment's repository"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.activate:12
# c8637697da024d52ac8a782e15f07c98
msgid "generate commands to add view to path variables"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.activate:14
# a88c2bd3f9934703aea5f4182c0ace9b
msgid "One of `sh`, `csh`."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.activate:16
# e8ca66e387fc4d3483003bac5dcd5b79
msgid "string to add to the users prompt, or None"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.activate:19
# a5ffda8a97e2489bb79a76ee624e4275
msgid "Shell commands to activate environment."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.activate:22
# 93a6fc25cbe742329cc12615d818db2f
msgid "TODO: environment to use the activated spack environment."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.active:1
# 2cdef768796341949d7316728383316d
msgid "True if the named environment is active."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.all_environment_names:1
# e42bb84236824a199524a5b716362664
msgid "List the names of environments that currently exist."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.all_environments:1
# efcf64714ef94eb796991955550edc37
msgid "Generator for all named Environments."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.config_dict:1
# 02a5a79eb5a24bbbbee801d2f4ea6b6f
msgid "Get the configuration scope section out of an spack.yaml"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.create:1
# dc0cc09455444f39b6fb2a1a342083b1
msgid "Create a named environment in Spack."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.deactivate:1
# bb7793010cd14a9e882abcf70922bae5
msgid "Undo any configuration or repo settings modified by ``activate()``."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.deactivate:3
# 7d4d0f18d31e4fadbd45f5ef766b75d7
msgid "One of `sh`, `csh`. Shell style to use."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.deactivate:6
# f3be369150ee4ba1973a75fbf4e8d19a
msgid "shell commands for `shell` to undo environment variables"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.deactivate_config_scope:1
# b37fac39722042e5a59985051a7ecb87
msgid "Remove any scopes from env from the global config path."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.default_manifest_yaml:1
# 8a272b8279d2495bae581f4e2aafa5c5
msgid "default spack.yaml file to put in new environments"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.env_path:1
# f1d74fbf504e4a60a842a1ba8823ed41
msgid "path where environments are stored in the spack tree"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.env_schema_keys:1
# 8ab77628aa7e4dba9d683cac31c756c3
msgid "legal first keys in the spack.yaml manifest file"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.env_subdir_name:1
# f7a2700c656d4dfba0cfcc3517c1b23b
msgid "Name of the directory where environments store repos, logs, views"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.exists:1
# 56adf1ea29384f3086f346a3c55f5c9e
msgid "Whether an environment with this name exists or not."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:1
# 0d56f8cd44094e759e1a8421272ac61f
msgid "Find active environment from args, spack.yaml, or environment variable."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:3
# 54ecf857d5654397b23d4b6ec145cbed
msgid "This is called in ``spack.main`` to figure out which environment to activate."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:9
# e6a7b07caa314d46849d182f73cfb157
msgid "Check for an environment in this order:"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:7
# 0ef0d821188543539c3c2a0e1c354e82
msgid "via ``spack -e ENV`` or ``spack -D DIR`` (arguments)"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:8
# caddef3dd8ad456db7bddb75072bd9fb
msgid "as a spack.yaml file in the current directory, or"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:9
# f0113de7160e4f6d92ad4b8d162b9fd3
msgid "via a path in the SPACK_ENV environment variable."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:11
# b1d7433bcbec4fea89da2e6210011575
msgid "If an environment is found, read it in.  If not, return None."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:13
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.get_env:15
# a8499d41dd9e48f390f85794ad4309f3
# a8a18f8f824543a9a388526df63e761b
msgid "argparse namespace wtih command arguments"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:16
# e8f3b51aa4a84669aedb4b6e6ba51ce9
msgid "a found environment, or ``None``"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.get_env:1
# e229c33e43ee4013b5022e634df15c96
msgid "Used by commands to get the active environment."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.get_env:3
# 60a2f619806b4091a16d7d7fd33fbed0
msgid "This first checks for an ``env`` argument, then looks at the ``active`` environment.  We check args first because Spack's subcommand arguments are parsed *after* the ``-e`` and ``-D`` arguments to ``spack``.  So there may be an ``env`` argument that is *not* the active environment, and we give it precedence."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.get_env:9
# ecf583798e5d4d98b073a0a72f27a819
msgid "This is used by a number of commands for determining whether there is an active environment."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.get_env:12
# a7c6bb46db6f4d16834d7ddd17986e5c
msgid "If an environment is not found *and* is required, print an error message that says the calling command *needs* an active environment."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.get_env:17
# 1d39542a46394d54a90f8b7985c96a36
msgid "name of calling command"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.get_env:19
# bdce94b300ed416989c8cf3e138a27e5
msgid "if ``True``, raise an exception when no environment is found; if ``False``, just return ``None``"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.get_env:23
# 4cec1a3ee4f249379a6521cf9e7e9120
msgid "if there is an arg or active environment"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.is_env_dir:1
# 1169c00c3db649a7880c8435fc5da43e
msgid "Whether a directory contains a spack environment."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.lockfile_format_version:1
# d06f5e9b05a94d1a94d1f5e88ced3f3e
msgid "version of the lockfile format. Must increase monotonically."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.lockfile_name:1
#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.manifest_name:1
# 9f2a7c365f59479d8f2e776b4e4e2f7b
# 1a88bd96182b4fd889b644d7c6f03846
msgid "Name of the input yaml file for an environment"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.make_repo_path:1
# 3707c48ae025486d878020b92d3b0c7f
msgid "Make a RepoPath from the repo subdirectories in an environment."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.prepare_config_scope:1
# 412d6c97830748beb065a8d0a7a47180
msgid "Add env's scope to the global configuration search path."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.read:1
# 333f04f8834644fba533cfb5d761212c
msgid "Get an environment with the supplied name."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.root:1
# 0b5a701ac824479c96124146e55b62e9
msgid "Get the root directory for an environment by name."
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.spack_env_var:1
# 49012ae02fdd4c54a4923c7cfd5cb027
msgid "environment variable used to indicate the active environment"
msgstr ""

#: ../spack/lib/spack/spack/environment.py:docstring of spack.environment.valid_environment_name_re:1
# 2afbd63be0a946bfa818de124001727b
msgid "regex for validating enviroment names"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:129
# d1ba305493a24a38b4f83b6827993b45
msgid "spack.error module"
msgstr ""

#: ../spack/lib/spack/spack/error.py:docstring of spack.error.NoHeadersError:1
# 6224e734ad99436f8df577a272f1ca88
msgid "Raised when package headers are requested but cannot be found"
msgstr ""

#: ../spack/lib/spack/spack/error.py:docstring of spack.error.NoLibrariesError:1
# 6bf9083933c04a858f3ee16bf83bbc2e
msgid "Raised when package libraries are requested but cannot be found"
msgstr ""

#: ../spack/lib/spack/spack/error.py:docstring of spack.error.SpackError:1
# 9c0fdc8092f941cc8a60e44e15668183
msgid "This is the superclass for all Spack errors. Subclasses can be found in the modules they have to do with."
msgstr ""

#: ../spack/lib/spack/spack/error.py:docstring of spack.error.SpackError.print_context:1
# 822a34ab54894672a6fc4521b4619a46
msgid "Print extended debug information about this exception."
msgstr ""

#: ../spack/lib/spack/spack/error.py:docstring of spack.error.SpackError.print_context:3
# 0738973f5df942f88b96222a1eeeb432
msgid "This is usually printed when the top-level Spack error handler calls ``die()``, but it can be called separately beforehand if a lower-level error handler needs to print error context and continue without raising the exception to the top level."
msgstr ""

#: ../spack/lib/spack/spack/error.py:docstring of spack.error.SpecError:1
#: ../spack/lib/spack/spack/error.py:docstring of spack.spec.SpecError:1
# 88e6e4653ad44904a9358ff01dacd118
# ea4fe7c49b0743e08a361fd36fff9900
msgid "Superclass for all errors that occur while constructing specs."
msgstr ""

#: ../spack/lib/spack/spack/error.py:docstring of spack.error.UnsatisfiableSpecError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.SpecParseError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.DuplicateDependencyError:1
#: ../spack/lib/spack/spack/variant.py:docstring of spack.spec.DuplicateVariantError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.DuplicateCompilerSpecError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.UnsupportedCompilerError:1
#: ../spack/lib/spack/spack/variant.py:docstring of spack.spec.UnknownVariantError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.DuplicateArchitectureError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.InconsistentSpecError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.InvalidDependencyError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.NoProviderError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.MultipleProviderError:1
#: ../spack/lib/spack/spack/error.py:docstring of spack.spec.UnsatisfiableSpecError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.AmbiguousHashError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.InvalidHashError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.NoSuchHashError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.RedundantSpecError:1
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.DuplicateVariantError:1
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.InconsistentValidationError:1
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.InvalidVariantValueError:1
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.UnknownVariantError:1
# f198191b47f249a797c39f747b39e4e1
# c815ca8ba3d8400ab237c2d1d0b24d1c
# 55d0253f3ffe4f9688d95f18a0c20f40
# e7f37e2aa7c94e32a8a19b4c0ba0e51e
# 5310aafa58fd4246a29fa076d82119c2
# 4b4223955c9844f4bb4bbc6d87b66dfe
# 8384342c89bf4483ac982d4392a91a81
# 034adba728124355a7558ff76e4830db
# ac69ead744e7499abba6f06a684f5bca
# 8583eaef7efc4aca856620f833982e56
# dbd9882f5526473cbb496cc656669c29
# 7113314c8e2b446a92508437c5219822
# 26fe3fb72d5b4b9a8a133e6443029dba
# 5a21f7bebfbe4536b9a5bb1ec847ad6c
# 23507fb86d884f5ab4302e011c2e5bae
# 5a2fcbeba65c4102b491367ae63b845f
# 2be6628c05bd48ea8c1a5345e537e5fb
# ffd8c33638594a5383101472683f6bf2
# 091736ae781f47daa5fbdba5cb04fb91
# 6e3062af9ac14a518ddfcea27baecf22
# 6d582831b711426c824e7880603fc0ae
msgid "Bases: :class:`spack.error.SpecError`"
msgstr ""

#: ../spack/lib/spack/spack/error.py:docstring of spack.error.UnsatisfiableSpecError:1
#: ../spack/lib/spack/spack/error.py:docstring of spack.spec.UnsatisfiableSpecError:1
# be6d98a218364beab1cc4b5867d3b90b
# 779b3007caa3430f97929152baa608e5
msgid "Raised when a spec conflicts with package constraints. Provide the requirement that was violated when raising."
msgstr ""

#: ../spack/lib/spack/spack/error.py:docstring of spack.error.UnsupportedPlatformError:1
# 75891a9c5fce4da1b3d43a4767c4f6f1
msgid "Raised by packages when a platform is not supported"
msgstr ""

#: ../spack/lib/spack/spack/error.py:docstring of spack.error.debug:1
# 1d8f3f3549204951a82e73edc46b11ff
msgid "whether we should write stack traces or short error messages this is module-scoped because it needs to be set very early"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:137
# 8b1e70145df14f45ad05398e5783fe15
msgid "spack.extensions module"
msgstr ""

#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions:1
# 0f6aeb0e30b94ec4aff1c6fc4e9d8b03
msgid "Service functions and classes to implement the hooks for Spack's command extensions."
msgstr ""

#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.extension_name:1
# e15b5c7d86294ed5b83e03dd5786a506
msgid "Returns the name of the extension in the path passed as argument."
msgstr ""

#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.extension_name:3
# 27d45f71a3e04e52bc6b2e536807dfa1
msgid "path where the extension resides"
msgstr ""

#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.extension_name:6
# 05bec038681849f58f53850bd03f26c8
msgid "The extension name or None if path doesn't match the format for Spack's extension."
msgstr ""

#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.get_command_paths:1
# 9a9c313c4799436b8d4ba7dc39a33a6d
msgid "Return the list of paths where to search for command files."
msgstr ""

#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.get_module:1
# 0ee8fe5216744f22aaaf995fcbbd5e4b
msgid "Imports the extension module for a particular command name and returns it."
msgstr ""

#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.get_module:4
# 3f60e44908b84be790d5a1801270f981
msgid "name of the command for which to get a module (contains ``-``, not ``_``)."
msgstr ""

#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.get_template_dirs:1
# 8a0d564252824d71bc2b9c49e04e9378
msgid "Returns the list of directories where to search for templates in extensions."
msgstr ""

#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.load_command_extension:1
# a4bec96257124ebfb004fa20f6d0d6df
msgid "Loads a command extension from the path passed as argument."
msgstr ""

#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.load_command_extension:3
# 6937bbdb4f9a490999c9e3e16c517737
msgid "name of the command"
msgstr ""

#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.load_command_extension:5
# 1a78aff885bf40369f9049133f898365
msgid "base path of the command extension"
msgstr ""

#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.load_command_extension:8
# 20596d2558af4ad9b381f7bd0305df23
msgid "A valid module object if the command is found or None"
msgstr ""

#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.path_for_extension:1
# 9166662b0c594baba6c346cf0d3809c5
msgid "Return the test root dir for a given extension."
msgstr ""

#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.path_for_extension:3
# fad69ef3b23e4caaa74c774234536240
msgid "name of the extension to test"
msgstr ""

#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.path_for_extension:5
# 647501b036cb40a28d36f51deb5fe20f
msgid "paths where the extensions reside"
msgstr ""

#: ../spack/lib/spack/spack/extensions.py:docstring of spack.extensions.path_for_extension:7
# 60848855b0d549e795e57a4f45defaa1
msgid "Root directory where tests should reside or None"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:145
# f13515c4516e433cbb235697972cf773
msgid "spack.fetch\\_strategy module"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:1
# 380d983295014366b1e94f732ec5cb18
msgid "Fetch strategies are used to download source code into a staging area in order to build it.  They need to define the following methods:"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:4
# aec62fa8f39143c399adc4f98b876f59
msgid "fetch()"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:5
# f6973cf517cb430f9a30bb7b71cd7140
msgid "This should attempt to download/check out source from somewhere."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:7
# ec1c9481ad614d0492892697a912fe37
msgid "check()"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:7
# c29132a9662a4749b48c610a05a16b0a
msgid "Apply a checksum to the downloaded source code, e.g. for an archive. May not do anything if the fetch method was safe to begin with."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:9
# 9057e82ff62c44329ce053cea62671d5
msgid "expand()"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:10
# 8b726c0ba6b644038416217a4d87810a
msgid "Expand (e.g., an archive) downloaded file to source."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:13
# 27a5754dd06d48039f8d039dea4f8f1c
msgid "reset()"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:12
# 33867ed116304ab2b8f0ac8b130423d0
msgid "Restore original state of downloaded code.  Used by clean commands. This may just remove the expanded source and re-expand an archive, or it may run something like git reset --hard."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:17
# 541bd7cd800640f9a47d7870eec5c16a
msgid "archive()"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:16
# 8f17adcf702b4ed389b87ee63ed3d9be
msgid "Archive a source directory, e.g. for creating a mirror."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.CacheURLFetchStrategy:1
# b257f8f35d3c4846bcba4339f44f6a75
msgid "Bases: :class:`spack.fetch_strategy.URLFetchStrategy`"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.CacheURLFetchStrategy:1
# 4f42f7832c2d481ba5a05ca651f68625
msgid "The resource associated with a cache URL may be out of date."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.CacheURLFetchStrategy.fetch:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.fetch:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.fetch:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy.fetch:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.fetch:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.fetch:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.fetch:1
# 1f604a2b31a8428693125dd581c1c206
# 132e24f52953494e8c07d0cd19315266
# c2e8543a38b2475d82b965d68aa48dc9
# 0a34372e389949878a2ebc889affe5a6
# 8e90a76394964561ad6708a3935818c7
# 22445d92b8664ee4b121fc7bfb61e599
# efd4c54e741f4e929788ad170f347ab0
msgid "Fetch source code archive or repo."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.CacheURLFetchStrategy.fetch:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.fetch:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.fetch:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy.fetch:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.fetch:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.fetch:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.fetch:3
# 0080a2466ea34772a3b5666012020360
# c4584952f482475a96d935ddffeb3024
# eef469dc29d7445b8114a83e44a3c126
# 4d34fa3825ef40c7bc63f6fb557b2e97
# 1d9ea49f3cce4080ad6a402227995250
# 864e3618c6e246779c3eda6df933b507
# 19030436e71a4cfb8eea84c6e82c15c7
msgid "True on success, False on failure."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.ChecksumError:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.ExtrapolationError:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FailedDownloadError:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetcherConflict:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.InvalidArgsError:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.NoArchiveFileError:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.NoCacheError:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.NoDigestError:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.NoStageError:1
# 9e6f954aff9e4c81b2705ee926955c0d
# c8fd8c21618b4278be268b48947a6b70
# c61517c48b1642a18f013d7d42071ac9
# 02ab58b276284ad9970328f88308e62c
# a3bdde9b06ac460084e6fe629564291e
# 89b2a76af171431595099e137840d8c9
# ecc61693503545b08a1426f2739e7971
# 6cb71aaf3b354239848c1b0c0061d0ed
# dcc7fccd2964428985bdd2f305b5f19f
msgid "Bases: :class:`spack.fetch_strategy.FetchError`"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.ChecksumError:1
# 8ff65d39286441b8bf1312befa1be15a
msgid "Raised when archive fails to checksum."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.ExtrapolationError:1
# 7b7f6e01360f414d89407dfc4c57e506
msgid "Raised when we can't extrapolate a version for a package."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FSMeta:1
#: ../spack/lib/spack/spack/tengine.py:docstring of spack.tengine.ContextMeta:1
# 51408a0851654e2d90876d49ce4f1d8f
# 250f1e08968b4280bfb08605894bb558
msgid "Bases: :class:`type`"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FSMeta:1
# 4b26873c281940639d7bc5c0ad7fdd33
msgid "This metaclass registers all fetch strategies in a list."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FailedDownloadError:1
# d61e4e9dcf314c11855e4ebab85fdd13
msgid "Raised wen a download fails."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchError:1
# 482b3ee3c2f64c4cb8eb5e5c158cb655
msgid "Superclass fo fetcher errors."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy:1
# ae6fb8b57f7a4ef8a0af4d7daeb72856
msgid "Superclass of all fetch strategies."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.archive:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.archive:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy.archive:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.archive:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.archive:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.VCSFetchStrategy.archive:1
# c0a775291d134888854d16969d74ea15
# 8b482121c60445d6a07a42598e61250c
# 66f9c8539579450696247cee0212724a
# 24b9b989630c47de8a86379ac4bf3429
# b60c75ebf11f4023b37245461f57235f
# e0b907063dfe4792bb019cee0099fd34
msgid "Create an archive of the downloaded data for a mirror."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.archive:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.archive:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy.archive:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.archive:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.archive:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.VCSFetchStrategy.archive:3
# 27ff6c4ddcb345a8a4e4e15fe0208af6
# fef7a241c347490387f7e621fea2e6a0
# b54b5433fc0a426cae1e789a87f7e40f
# d56c5ecfd6864592b37f064b378d26a4
# 27feeb366a2a4b61be34ac5cd1340824
# bae0bb33d789400ea8d289220ca7c2da
msgid "For downloaded files, this should preserve the checksum of the original file. For repositories, it should just create an expandable tarball out of the downloaded repository."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.cachable:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.cachable:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.cachable:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.cachable:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.cachable:1
# 6e1fbe2c8c3a4ed79b41b497f44d27ce
# 7aa866c828714923a9cfe7794766f26c
# 0ea0aa88bb4448aa8d725fe1c482e1cd
# 8290339370ef493a9c062e85ed545e18
# 6af057402538486184fa5fac4023a964
msgid "Whether fetcher is capable of caching the resource it retrieves."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.cachable:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.cachable:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.cachable:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.cachable:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.cachable:3
# 6baa93ff687046d88a74e233419ccd21
# 3eae10c7600545e2a35aaadb60b0bb26
# dc9fdcc84942405aa37eb730ca3224fd
# ce1c683ba8884c769f562a5d0b5c28a3
# 714eb14a3e184385933c7b394ee4fb96
msgid "This generally is determined by whether the resource is identifiably associated with a specific package version."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.cachable:6
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.cachable:6
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.cachable:6
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.cachable:6
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.cachable:6
# 9dd3773b1fdf4b49881e6b15e66d2451
# 1fcf4077bcf54612a7c92b2f811e48db
# 8bf90519d1cf42a9afde0acebd7317ae
# 8351181e73cb4c1b91254b8a41b3ad37
# bbb5e124dc89477f9543222fec1f0cd9
msgid "True if can cache, False otherwise."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.check:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.VCSFetchStrategy.check:1
# 7a3e80020d45438fa399d52c13ab6e1d
# 49296de8c0524e029212474217d7f5ee
msgid "Checksum the archive fetched by this FetchStrategy."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.expand:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.expand:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.VCSFetchStrategy.expand:1
# 5ac984e1db77418bab3b4be9f30f4c10
# 1fb1feeed93a4ff9968404ba83b202a5
# 623d30eee1484013b58393591ea5306e
msgid "Expand the downloaded archive."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.optional_attrs:1
# 840011d4161b4855a737a67b29bff4ab
msgid "classes have multiple ``url_attrs`` at the top-level."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.optional_attrs:0
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.hg:0
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.fullname:0
# 53bc57cd069b45aa92affccb4267e8a6
# a3b6e40baec54b2fa21681ba246cce50
# 8850274dabc149c59cf2949fc1af3e1d
msgid "type"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.optional_attrs:3
# fe0d7e8ad5ee4708a6db63c0bc2c19ce
msgid "Optional attributes can be used to distinguish fetchers when"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.reset:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.reset:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy.reset:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.reset:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.reset:1
# acd83b5f82e6455a86f747fd7f503c2c
# 66c6f0ba449d43a5b9b34c7558380f69
# 01f077fd6f884c1a9bf0c44c15cf7a50
# 1cda04724dbc4bd98cafe5f933d0a238
# a619ceb67e1544839faa96070f252c6b
msgid "Revert to freshly downloaded state."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.reset:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.reset:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy.reset:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.reset:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.reset:3
# 0a4b91ffb8f14ccf9d3a3bd565a23745
# 55185875bfc143838b43f076a22bfb7f
# f734fd8f04a647d080475d62a0b9b6bc
# c9faf47f97624f358dcb4ea94d157dae
# b93088d67fd64e66abb86d8e2b73931b
msgid "For archive files, this may just re-expand the archive."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.set_stage:1
# 2d84e751e34a4f4b9b0b0ee243c05884
msgid "This is called by Stage before any of the fetching methods are called on the stage."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.source_id:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.source_id:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.source_id:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.source_id:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.source_id:1
# b3f8c136509b4049a180974a691a9d8e
# 102b59c4b4784ca886155c768a18cb59
# 7e0cbc01499a485896e5674c3a21f452
# ccae262f010e4eacb5637737bbbb7a2c
# ae3ba0e1999644cf943de993a676c66d
msgid "A unique ID for the source."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.source_id:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.source_id:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.source_id:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.source_id:3
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.source_id:3
# 34b53c8518ea4cb180b1c2fa2b6ff31d
# f4dce86a15fb4b1d9c7600fd42a3f60d
# 4bd0345896344fe6accd008bc8d7de43
# 850e95ef19394f17a6f9a5d93075cf9f
# 0b902fa5db45409d857249433e94fb8b
msgid "The returned value is added to the content which determines the full hash for a package using `str()`."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.url_attr:1
# b64e205ab122457385eba5d0df3ce773
msgid "The URL attribute must be specified either at the package class level, or as a keyword argument to ``version()``.  It is used to distinguish fetchers for different versions in the package DSL."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetcherConflict:1
# d50d49f117d24b33a1b3912e9a1e3353
msgid "Raised for packages with invalid fetch attributes."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy:1
# 3609d51c5bfe496cbe5bf4ca588db4b5
# ad66f23e04fb4e3eb28ba0523dc86bb9
# 3b76374ae06b4d1f87aa992d2644ddf7
# 2c2b09e4acc34fc2822885e9f91267e7
msgid "Bases: :class:`spack.fetch_strategy.VCSFetchStrategy`"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:1
# 286bda1fad134b968bd18f383d95dd7e
msgid "Fetch strategy that gets source code from a git repository. Use like this in a package:"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:4
# 6b8a96996c56406f9031a206e21ed16a
msgid "version('name', git='https://github.com/project/repo.git')"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:6
# 0ae36f0c89e14c6f8c779699b201291d
msgid "Optionally, you can provide a branch, or commit to check out, e.g.:"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:8
# 6dff96eeabb14de7a004380964128665
msgid "version('1.1', git='https://github.com/project/repo.git', tag='v1.1')"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:10
# 4c320dc7528d4594839f80432e7b5ca2
msgid "You can use these three optional attributes in addition to ``git``:"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:12
# 591409ac3a214faeae466b007bbf78a3
msgid "``branch``: Particular branch to build from (default is the"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:13
# e3c2c0533b604798a2e9d48e30cbcd1f
msgid "repository's default branch)"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:14
# ed1bcaf4e8b54168b69976d919e97367
msgid "``tag``: Particular tag to check out"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:15
# cc8d27380a7a4b9e946329a4e439025d
msgid "``commit``: Particular commit hash in the repo"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy:1
# 19d062d6d98d4d50a76da680d3e71319
msgid "Fetch strategy that employs the `go get` infrastructure."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy:3
# f32e5545832d435087d3d97f254eb5e6
msgid "Use like this in a package:"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy:6
# d30b14e41238465fb60fe42f94ff4ec5
msgid "version('name',"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy:6
# c3e086f54c3840faaa4de8215e66ed3d
msgid "go='github.com/monochromegane/the_platinum_searcher/...')"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy:8
# 52e59319c48c499aa492a155ff9fb968
msgid "Go get does not natively support versions, they can be faked with git"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy:1
# c3e36bd5d9444b40932cc91d55671dc0
msgid "Fetch strategy that gets source code from a Mercurial repository. Use like this in a package:"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy:4
# df600c128f574556a5f51c8c7ce8fcb0
msgid "version('name', hg='https://jay.grs.rwth-aachen.de/hg/lwm2')"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy:6
# d85f12e3bac04f0c814afc6ee0bb0ccd
msgid "Optionally, you can provide a branch, or revision to check out, e.g.:"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy:9
# 6a47973af36e4f41aa72bc71c3e4817d
msgid "version('torus',"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy:9
# 13692c5c3541425a81b54d1d487592eb
msgid "hg='https://jay.grs.rwth-aachen.de/hg/lwm2', branch='torus')"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy:11
# 144485446f0743d8a8debacca09381bf
msgid "You can use the optional 'revision' attribute to check out a branch, tag, or particular revision in hg.  To prevent non-reproducible builds, using a moving target like a branch is discouraged."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy:16
# 76818788f1574091b849e846252b25bd
msgid "``revision``: Particular revision, branch, or tag."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.hg:1
# 169355ece1244856a5304cd2d687bc65
msgid "The hg executable :rtype: Executable"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.hg:4
# fd671be69e56479bba377f4671720890
msgid "returns"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.InvalidArgsError:1
# aee6b043a43e4b9a8a15ce4f8ca0b925
msgid "Raised when a version can't be deduced from a set of arguments."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.NoArchiveFileError:1
# 5c795f456e174b8ea75dca9759621c4a
msgid "\"Raised when an archive file is expected but none exists."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.NoCacheError:1
# 25bfca410605428abf67462e1424acbd
msgid "Raised when there is no cached archive for a package."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.NoDigestError:1
# d22e407258aa47fe8dc404393eb7d3f8
msgid "Raised after attempt to checksum when URL has no digest."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.NoStageError:1
# 83e2f2fe52874854961f8dfe7e277dcf
msgid "Raised when fetch operations are called before set_stage()."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy:1
# bdad47cc2df34dab8f8825af862bc086
msgid "Fetch strategy that gets source code from a subversion repository. Use like this in a package:"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy:4
# c020f178245f4344b13b6d8ecd2b684f
msgid "version('name', svn='http://www.example.com/svn/trunk')"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy:6
# ee0b7f6ce7214c7aacbb1b69eb8470c4
msgid "Optionally, you can provide a revision for the URL:"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy:10
# 71e47e1070c443c7bcbd0b038d696644
msgid "version('name', svn='http://www.example.com/svn/trunk',"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy:9
# a1a5286435254ab7a6110ef9e79ead5f
msgid "revision='1641')"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy:1
#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.VCSFetchStrategy:1
# 5c04db67a153467da2c8c9be6fa9a7a0
# 2cb49745a9a942c291937269b58da98d
msgid "Bases: :class:`spack.fetch_strategy.FetchStrategy`"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy:1
# e76af269e3804b5b83e8e8d618b92b2c
msgid "FetchStrategy that pulls source code from a URL for an archive, checks the archive against a checksum,and decompresses the archive."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.archive:1
# 125d7e5c8e1c475ab8da6b21aee78ae9
msgid "Just moves this archive to the destination."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.archive_file:1
#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage.archive_file:1
# 65d86a85d84b4e8caaadf992ded96d6d
# 7f9cd075b6814781a8ff9dc14c09f2f1
msgid "Path to the source archive within this stage directory."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.check:1
#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage.check:1
# bf5ff5d09403486c8dc740b2ca222054
# 303bfce47ccf45019217f2d90d019680
msgid "Check the downloaded archive against a checksum digest. No-op if this stage checks code out of a repository."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.reset:1
# c1c3d51625814dc58892438a2e961b99
msgid "Removes the source path if it exists, then re-expands the archive."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.VCSFetchStrategy:1
# aca6bd1d03504edbabca353d5970dfb4
msgid "Superclass for version control system fetch strategies."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.VCSFetchStrategy:3
# 8e4ffedf126e474d92e116116198f8e1
msgid "Like all fetchers, VCS fetchers are identified by the attributes passed to the ``version`` directive.  The optional_attrs for a VCS fetch strategy represent types of revisions, e.g. tags, branches, commits, etc."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.VCSFetchStrategy:8
# 52500257d0bc4a8b9fa79460d75a5f3d
msgid "The required attributes (git, svn, etc.) are used to specify the URL and to distinguish a VCS fetch strategy from a URL fetch strategy."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.all_strategies:1
# d8e21a5877924c53960acf24de86e4af
msgid "List of all fetch strategies, created by FetchStrategy metaclass."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.check_pkg_attributes:1
# 798c53e149a5492aadbb1038ee34f6b8
msgid "Find ambiguous top-level fetch attributes in a package."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.check_pkg_attributes:3
# b6d6b44355ad4b50a10428ea109a6a20
msgid "Currently this only ensures that two or more VCS fetch strategies are not specified at once."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.for_package_version:1
# 01e83832666c455d8023ecbd41ee1c64
msgid "Determine a fetch strategy based on the arguments supplied to version() in the package description."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:1
# 3796894710114e00941ee1914c3454ac
msgid "Construct an appropriate FetchStrategy from the given keyword arguments."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:3
# 200266d37fb84ce3801348c82905b03b
msgid "dictionary of keyword arguments, e.g. from a ``version()`` directive in a package."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:6
# fb70099bc2f54476861ef92f6e286825
msgid "The fetch strategy that matches the args, based     on attribute names (e.g., ``git``, ``hg``, etc.)"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:8
# d05826b8e6194453aa31b4546e2c895f
msgid "The fetch strategy that matches the args, based"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:9
# 105f85a0442842d7b67c7d58ba4d7067
msgid "on attribute names (e.g., ``git``, ``hg``, etc.)"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:12
# f39ca308c7854c79914b062d9d732aca
msgid ":exc:`FetchError` -- If no ``fetch_strategy`` matches the args."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_list_url:1
# 442220ddbf6448f5bb36844258680019
msgid "If a package provides a URL which lists URLs for resources by version, this can can create a fetcher for a URL discovered for the specified package's version."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_url:1
# bd54cee72d364fbdb7313dbbfc7bec33
msgid "Given a URL, find an appropriate fetch strategy for it. Currently just gives you a URLFetchStrategy that uses curl."
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_url:4
# 5ceff1bce87a456ab720e134c8ea4903
msgid "TODO: make this return appropriate fetch strategies for other"
msgstr ""

#: ../spack/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_url:5
# e9b8f72f77b84b8e8dfd825813a5e44d
msgid "types of URLs."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:153
# d3366abb4aca4204a9ff15b7b539c0c3
msgid "spack.filesystem\\_view module"
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView:1
# b9b927ea5b8746a4b4c8724acf1b527b
msgid "Governs a filesystem view that is located at certain root-directory."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView:3
# 86b6a0d152de45d7a022a67248f4f7bb
msgid "Packages are linked from their install directories into a common file hierachy."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView:6
# 0385e53d09964202ace36601e2bcc3c6
msgid "In distributed filesystems, loading each installed package seperately can lead to slow-downs due to too many directories being traversed. This can be circumvented by loading all needed modules into a common directory structure."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.add_extension:1
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.add_extension:1
# b9c2e0f525cc47268ab0911279fd2391
# f5402067df3e4b46aa50552c69bdd5f8
msgid "Add (link) an extension in this view. Does not add dependencies."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.add_specs:1
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.add_specs:1
# 6d2b167ccfb14329a96ee56dcfb24b3c
# 4ddf93501dfd44d28ed2f8e2c2647170
msgid "Add given specs to view."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.add_specs:3
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.add_specs:3
# 0f5993d958e5453a9733ea23e55c369d
# 2393487cee594c9ab1d3e394589e1a9c
msgid "The supplied specs might be standalone packages or extensions of other packages."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.add_specs:6
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.add_specs:6
# 745a59d69820401497648585a48f3c75
# 4abc9736f2b74ee4810b693c7865021d
msgid "Should accept `with_dependencies` as keyword argument (default True) to indicate wether or not dependencies should be activated as well."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.add_specs:10
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.remove_specs:14
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.add_specs:10
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.remove_specs:14
# 305147944a16444d80a5425f97938677
# b88e11f14ffe4424ad7647773c707de9
# 17874d36f04448b385b32f34c036f12f
# 0b21069567244fbcaf3701eb543828a2
msgid "Should except an `exclude` keyword argument containing a list of regexps that filter out matching spec names."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.add_specs:13
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.add_specs:13
# c5b00499403a437595f76dd4e1dbf46c
# bf4d99e9509d42d2b75c7123835fea76
msgid "This method should make use of `activate_{extension,standalone}`."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.add_standalone:1
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.add_standalone:1
# 4eeeee81335c40bba51ebc6b6b4a37d9
# 66fd989c146e4d87baad5151aac5b6cd
msgid "Add (link) a standalone package into this view."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.check_added:1
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.check_added:1
# 2be585e4b81d433799e020b10e1e83b3
# a1c696200e2a475c9db2956aa07bc7a6
msgid "Check if the given concrete spec is active in this view."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.get_all_specs:1
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.get_all_specs:1
# fbc9cf1382864da1b4b5817ce0031df6
# f73e3b232f2440b79b19b0397163dd48
msgid "Get all specs currently active in this view."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.get_projection_for_spec:1
# 3ee3c387b7c74d61a1648664891b8c52
msgid "Get the projection in this view for a spec."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.get_spec:1
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.get_spec:1
# 643e02e1380445cca91b648fe9fb1ce0
# 89f2c1a4bf3a499db0df3366960359a3
msgid "Return the actual spec linked in this view (i.e. do not look it up in the database by name)."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.get_spec:4
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.get_spec:4
# ada39719534543f2ab7a2cf03d4fa37b
# 1ac82135069041bbb08a230416873201
msgid "`spec` can be a name or a spec from which the name is extracted."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.get_spec:6
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.get_spec:6
# 2bb4f7bf18b746a1acb05ac27ffd4287
# 03b8a21993d743dcaec18e2cfbf0c2c2
msgid "As there can only be a single version active for any spec the name is enough to identify the spec in the view."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.get_spec:9
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.get_spec:9
# 212e1d8adf9f41d48c15e2809d468719
# a5261dad16434818885306baf53f977b
msgid "If no spec is present, returns None."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.print_status:4
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.print_status:4
# 3f3efe1f0e364c89b736699a943c1f07
# 52ccf5747b2c4f1bb9462e346b82377b
msgid "Print a short summary about the given specs, detailing whether.."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.print_status:2
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.print_status:2
# a493cadcb68643c5b2fc2bd046f436fa
# 9f0feeeec7fa46ae9009268f031bca9c
msgid "..they are active in the view."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.print_status:3
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.print_status:3
# 5a4dbfdf29284f0486c6c07fd9805f2c
# 14d043c3129044189756c2da6499c7eb
msgid "..they are active but the activated version differs."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.print_status:4
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.print_status:4
# 9272596141324d89b797705ba33a87bf
# 90327f9194614fc78e46a2723116c5ba
msgid "..they are not activte in the view."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.print_status:6
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.print_status:6
# 276ef7f200714395a79869d89b09b208
# d1b529e57d924f30ad9084a5a991855f
msgid "Takes `with_dependencies` keyword argument so that the status of dependencies is printed as well."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.remove_extension:1
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.remove_extension:1
# fe957c25cc6240f0a145f1d5f68bd378
# 62a2eba499614e87ae756da83626f1ea
msgid "Remove (unlink) an extension from this view."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.remove_specs:1
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.remove_specs:1
# 1264c58e5161450cb753496abedb40f1
# f534ad825e2f4d368fc672582bebe79e
msgid "Removes given specs from view."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.remove_specs:3
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.remove_specs:3
# 8ca72d15088d452f859e55b98eb36ba0
# 613c71ce394f4e4aa391a753cb91fb0c
msgid "The supplied spec might be a standalone package or an extension of another package."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.remove_specs:6
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.remove_specs:6
# f61f1e57328548bf9fd1eecf78f3a77c
# 9edb99c11ca740458f8148faff6ce6c4
msgid "Should accept `with_dependencies` as keyword argument (default True) to indicate wether or not dependencies should be deactivated as well."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.remove_specs:10
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.remove_specs:10
# 351c6146532b44ad9dd0dd92e442a77c
# c7bf4e39440041e98088f6e5759fa3c3
msgid "Should accept `with_dependents` as keyword argument (default True) to indicate wether or not dependents on the deactivated specs should be removed as well."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.remove_specs:17
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.remove_specs:17
# dd66e4edfe6844acaf2efbab0870cb0b
# df6bff5bb2504c2f87fc13d2a09501ea
msgid "This method should make use of `deactivate_{extension,standalone}`."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.remove_standalone:1
#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.remove_standalone:1
# b41be31a865c4c959ca498a2a5a535c7
# 2878e65ef0bc4395b3d11f4a4e32fe96
msgid "Remove (unlink) a standalone package from this view."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView:1
# d2cf5b320079494f95403f829e312509
msgid "Bases: :class:`spack.filesystem_view.FilesystemView`"
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView:1
# 2381830ff19c4e5b987d17446c793f30
msgid "Filesystem view to work with a yaml based directory layout."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.get_conflicts:1
# a600ad7f895b4027b87b7c55aa16e269
msgid "Return list of tuples (<spec>, <spec in view>) where the spec active in the view differs from the one to be activated."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.get_path_meta_folder:1
# 1263b6211e8a4bb7b2af3f94cdfd098c
msgid "Get path to meta folder for either spec or spec name."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.get_projection_for_spec:1
# 130826b7081a44ab9ef273d502ade619
msgid "Return the projection for a spec in this view."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.get_projection_for_spec:3
# 45df7c9afb334a359f040720a2366c8b
msgid "Relies on the ordering of projections to avoid ambiguity."
msgstr ""

#: ../spack/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.print_conflict:1
# 7ff613a3935e40178b0af3f3a045e986
msgid "Singular print function for spec conflicts."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:161
# 6f56662e4422428bbae4c9c88db55497
msgid "spack.graph module"
msgstr ""

#: ../spack/lib/spack/spack/graph.py:docstring of spack.graph:1
# 9d3ba0a2221e45958c98037e54c290b7
msgid "Functions for graphing DAGs of dependencies."
msgstr ""

#: ../spack/lib/spack/spack/graph.py:docstring of spack.graph:3
# c1131167b57d486c88559d913bc356e8
msgid "This file contains code for graphing DAGs of software packages (i.e. Spack specs).  There are two main functions you probably care about:"
msgstr ""

#: ../spack/lib/spack/spack/graph.py:docstring of spack.graph:7
# 23840318f1f14f6d905dae9d938b016f
msgid "graph_ascii() will output a colored graph of a spec in ascii format, kind of like the graph git shows with \"git log --graph\", e.g.::"
msgstr ""

#: ../spack/lib/spack/spack/graph.py:docstring of spack.graph:33
# 475979a74226424db89401754cb1ae6c
msgid "graph_dot() will output a graph of a spec (or multiple specs) in dot format."
msgstr ""

#: ../spack/lib/spack/spack/graph.py:docstring of spack.graph:36
# fc783fff6060460294555169207faca9
msgid "Note that ``graph_ascii`` assumes a single spec while ``graph_dot`` can take a number of specs as input."
msgstr ""

#: ../spack/lib/spack/spack/graph.py:docstring of spack.graph.topological_sort:1
# c5f6810996af4b7d9565af9cf982f708
msgid "Topological sort for specs."
msgstr ""

#: ../spack/lib/spack/spack/graph.py:docstring of spack.graph.topological_sort:3
# 5c7e891ecc2b40dcab0676cd20a0b8e7
msgid "Return a list of dependency specs sorted topologically.  The spec argument is not modified in the process."
msgstr ""

#: ../spack/lib/spack/spack/graph.py:docstring of spack.graph.AsciiGraph.write:1
# b7a3f2c4178f4431940d401408100e90
msgid "Write out an ascii graph of the provided spec."
msgstr ""

#: ../spack/lib/spack/spack/graph.py:docstring of spack.graph.AsciiGraph.write:3
# 7b7f2da5762a41e5ba5b41875abc2410
msgid "Arguments: spec -- spec to graph.  This only handles one spec at a time."
msgstr ""

#: ../spack/lib/spack/spack/graph.py:docstring of spack.graph.AsciiGraph.write:6
# c567e1e8b2de437aa5bcef5353a919d8
msgid "Optional arguments:"
msgstr ""

#: ../spack/lib/spack/spack/graph.py:docstring of spack.graph.AsciiGraph.write:8
# f5d1e7cb3bc74d8cb2cf035acb9553e2
msgid "out -- file object to write out to (default is sys.stdout)"
msgstr ""

#: ../spack/lib/spack/spack/graph.py:docstring of spack.graph.AsciiGraph.write:10
# c4160e6b01c9415892826b818317fdcd
msgid "color -- whether to write in color.  Default is to autodetect"
msgstr ""

#: ../spack/lib/spack/spack/graph.py:docstring of spack.graph.AsciiGraph.write:11
# 6873424f7efb45c39f5fc6b6c110740b
msgid "based on output file."
msgstr ""

#: ../spack/lib/spack/spack/graph.py:docstring of spack.graph.graph_dot:1
# 1ed4ffe2ec6f46aa9103c11ced3973a8
msgid "Generate a graph in dot format of all provided specs."
msgstr ""

#: ../spack/lib/spack/spack/graph.py:docstring of spack.graph.graph_dot:3
# fe581281965a463aa1ea8e2922e353c1
msgid "Print out a dot formatted graph of all the dependencies between package.  Output can be passed to graphviz, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:169
# 33fdc8a329be492fbf623500f159714b
msgid "spack.main module"
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main:1
# 7fe059feff2b42faa7b7b3b2fd15e09e
msgid "This is the implementation of the Spack command line executable."
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main:3
# 71ab19121af548c39036855b68465401
msgid "In a normal Spack installation, this is invoked from the bin/spack script after the system path is set up."
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.SpackArgumentParser:1
# 5a3b61815eeb4102b952fa87b7c3de96
msgid "Bases: :class:`argparse.ArgumentParser`"
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.SpackArgumentParser.add_command:1
# 1dc5540619b94742b821bba85d1450a7
msgid "Add one subcommand to this parser."
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.SpackArgumentParser.add_subparsers:1
# 2b84d47db62245809c8030c95c353018
msgid "Ensure that sensible defaults are propagated to subparsers"
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.SpackArgumentParser.format_help_sections:1
# 589fc9c1e54e4cee90dc43cd0b088140
msgid "Format help on sections for a particular verbosity level."
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.SpackArgumentParser.format_help_sections:3
# b205c784c2054b79a79b56a025b7bd9c
msgid "'short' or 'long' (more commands shown for long)"
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.SpackCommand:1
# 7e15124ed0304ab49ed563c2b0db667d
msgid "Callable object that invokes a spack command (for testing)."
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.SpackCommand:3
# 3295bd7392534bc88e0d4098357ec793
msgid "Example usage::"
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.SpackCommand:8
# 893359f1bc194f239506d0d5e7a1efe5
msgid "Use this to invoke Spack commands directly from Python and check their output."
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.SpackCommandError:1
# 19a6a7cd247945fc85c5a14db5628943
msgid "Raised when SpackCommand execution fails."
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.SpackHelpFormatter:1
# 46006d2942bf4ae5a4df4a3f66bd1dad
msgid "Bases: :class:`argparse.RawTextHelpFormatter`"
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.add_all_commands:1
# 1310110e39b443d586bcf2b9817dceb5
msgid "Add all spack subcommands to the parser."
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.aliases:1
# fabca0e552264749baca3c4c1bab594b
msgid "top-level aliases for Spack commands"
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.allows_unknown_args:1
# 9a451299d13e4111a90e675212aacdd2
msgid "Implements really simple argument injection for unknown arguments."
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.allows_unknown_args:3
# 16626b21bedd4ea18eafcf2a8f2f16f2
msgid "Commands may add an optional argument called \"unknown args\" to indicate they can handle unknonwn args, and we'll pass the unknown args in."
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.index_commands:1
# 23ad022ca8c047fdb65a93d4490f58a1
msgid "create an index of commands by section for this help level"
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.intro_by_level:1
# cdcbebe5684a4b468bbb99cd069e6e61
msgid "intro text for help at different levels"
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.levels:1
# ad1b5797f50d4023a2225e186e11ebca
msgid "help levels in order of detail (i.e., number of commands shown)"
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.main:1
# 9a2edabaa2bf446095e2eb1b22814b45
msgid "This is the entry point for the Spack command."
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.main:3
# d4b885b1a3ef49ac92039e307e6e80ce
msgid "command line arguments, NOT including the executable name. If None, parses from sys.argv."
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.make_argument_parser:1
# 42a45aa0ade14c408bfde35803690b40
msgid "Create an basic argument parser without any subcommands added."
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.options_by_level:1
# 7394a390131146cfbef7ca8177f785eb
msgid "control top-level spack options shown in basic vs. advanced help"
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.print_setup_info:1
# 3d1f65788cf34481b33a4eb7949b7c81
msgid "Print basic information needed by setup-env.[c]sh."
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.print_setup_info:3
# 7358e0b5494542daad8e07dfaa210aef
msgid "list of things to print: comma-separated list of 'csh', 'sh', or 'modules'"
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.print_setup_info:7
# 0b9d465d5baa4d658286ea379f7bb0f3
msgid "This is in ``main.py`` to make it fast; the setup scripts need to invoke spack in login scripts, and it needs to be quick."
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.required_command_properties:1
# 5b1143e90a394e5c963d2820be949cb5
msgid "Properties that commands are required to set."
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.section_descriptions:1
# d8d5803e8dbf4adc881473a2414f6dff
msgid "Longer text for each section, to show in help"
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.section_order:1
# cf31a91b15bc45859cdf686be5255e1f
msgid "preferential command order for some sections (e.g., build pipeline is in execution order, not alphabetical)"
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.set_working_dir:1
# e414a28ce93c4725a766ffbdb0a6d0df
msgid "Change the working directory to getcwd, or spack prefix if no cwd."
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.setup_main_options:1
# 32ea2d018e734b50a3a7018ef0a496c6
msgid "Configure spack globals based on the basic options."
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.spack_working_dir:1
# e8d83f2e2ae24fe281371a16a3fa4280
msgid "Recorded directory where spack command was originally invoked"
msgstr ""

#: ../spack/lib/spack/spack/main.py:docstring of spack.main.stat_names:1
# 408aa0895b364c7690686adaff83f337
msgid "names of profile statistics"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:177
# e4956a6f1a164859a0da1a984b7b0985
msgid "spack.mirror module"
msgstr ""

#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror:1
# c88c47c52d574f558200dca5b98d5344
msgid "This file contains code for creating spack mirror directories.  A mirror is an organized hierarchy containing specially named archive files.  This enabled spack to know where to find files in a mirror if the main server for a particular package is down.  Or, if the computer where spack is run is not connected to the internet, it allows spack to download packages directly from a mirror (e.g., on an intranet)."
msgstr ""

#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.MirrorError:1
# e2f2873198104675b8e3f7e69f43731f
msgid "Superclass of all mirror-creation related errors."
msgstr ""

#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.create:1
# ef358f9bdb7042d296a5813aa6393d53
msgid "Create a directory to be used as a spack mirror, and fill it with package archives."
msgstr ""

#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.create:4
# d1d7048ff15145c5bbb52e20ae8880da
msgid "Path to create a mirror directory hierarchy in."
msgstr ""

#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.create:5
# 52b8b75ae9d44e23958bd6d35950bcfc
msgid "Any package versions matching these specs will be added             to the mirror."
msgstr ""

#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.create:7
# 329c96ec20694df6a979a1741c739be9
msgid "Max number of versions to fetch per spec,             (default is 1 each spec)"
msgstr ""

#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.create:14
# a03d0652de0242cf8960a305d3fdf3e7
msgid "Return Value:"
msgstr ""

#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.create:10
# 4eb35c0d735348a5866b6a68398311a3
msgid "Returns a tuple of lists: (present, mirrored, error)"
msgstr ""

#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.create:12
# b7284ee7b09141b082b2712f053ba48b
msgid "present:  Package specs that were already present."
msgstr ""

#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.create:13
# 3fbff7f049da4d469cf8f4f4394cc5d7
msgid "mirrored: Package specs that were successfully mirrored."
msgstr ""

#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.create:14
# c2a7e7f6bf4b41549f719093cefc6292
msgid "error:    Package specs that failed to mirror due to some error."
msgstr ""

#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.create:16
# 2e9eb2de4ab24150bbbf5682c22a5550
msgid "This routine iterates through all known package versions, and it creates specs for those versions.  If the version satisfies any spec in the specs list, it is downloaded and added to the mirror."
msgstr ""

#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.get_matching_versions:1
# 4dab6c0cb15c42a197626bb09c719e2d
msgid "Get a spec for EACH known version matching any spec in the list. For concrete specs, this retrieves the concrete version and, if more than one version per spec is requested, retrieves the latest versions of the package."
msgstr ""

#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.mirror_archive_filename:1
# 7f20d74643ef486e9a5a30819783d99a
msgid "Get the name of the spec's archive in the mirror."
msgstr ""

#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.mirror_archive_path:1
# 079ff51642a746be9d661ba5069aaab5
msgid "Get the relative path to the spec's archive within a mirror."
msgstr ""

#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.suggest_archive_basename:1
# 4063a6d5d7d2464483694dd716a8b0db
msgid "Return a tentative basename for an archive."
msgstr ""

#: ../spack/lib/spack/spack/mirror.py:docstring of spack.mirror.suggest_archive_basename:3
# 21d03a8d19bf450d80c36549a0c3ea80
msgid ":exc:`RuntimeError` -- if the name is not an allowed archive type."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:185
# 794fa96f835e4d778f45f1c48fd1b015
msgid "spack.mixins module"
msgstr ""

#: ../spack/lib/spack/spack/mixins.py:docstring of spack.mixins:1
# a282d536dec543c3a2405ce042c1c7c7
msgid "This module contains additional behavior that can be attached to any given package."
msgstr ""

#: ../spack/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:1
# 321db6701ed94cc5b7e53b29fd36918c
msgid "Substitutes any path referring to a Spack compiler wrapper with the path of the underlying compiler that has been used."
msgstr ""

#: ../spack/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:4
# 664c52f9641e4eec984de07978cb513b
msgid "If this isn't done, the files will have CC, CXX, F77, and FC set to Spack's generic cc, c++, f77, and f90. We want them to be bound to whatever compiler they were built with."
msgstr ""

#: ../spack/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:8
# 92c3f9315f93474788fd5e1cebf96311
msgid "files to be filtered relative to the search root (which is, by default, the installation prefix)"
msgstr ""

#: ../spack/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:10
# e2fda3f7b411435c8d52f8ae76e56dd3
msgid "allowed keyword arguments  after     specifies after which phase the files should be     filtered (defaults to 'install')  relative_root     path relative to prefix where to start searching for     the files to be filtered. If not set the install prefix     wil be used as the search root. **It is highly recommended     to set this, as searching from the installation prefix may     affect performance severely in some cases**.  ignore_absent, backup     these two keyword arguments, if present, will be forwarded     to ``filter_file`` (see its documentation for more information     on their behavior)  recursive     this keyword argument, if present, will be forwarded to     ``find`` (see its documentation for more information on the     behavior)"
msgstr ""

#: ../spack/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:10
# 98d45cf2f8b9478083fdd5c2c000c56e
msgid "allowed keyword arguments"
msgstr ""

#: ../spack/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:14
# bc6ec4277a5e45f791f9662dfec9f68e
msgid "after"
msgstr ""

#: ../spack/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:13
# 65a415ff820744dba7fbb410d0a04d17
msgid "specifies after which phase the files should be filtered (defaults to 'install')"
msgstr ""

#: ../spack/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:21
# a2bd9043e81b409695aa7ec7e43b7f73
msgid "relative_root"
msgstr ""

#: ../spack/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:17
# 3be3935453314dff98f13977dd386cd2
msgid "path relative to prefix where to start searching for the files to be filtered. If not set the install prefix wil be used as the search root. **It is highly recommended to set this, as searching from the installation prefix may affect performance severely in some cases**."
msgstr ""

#: ../spack/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:26
# 8100d869da3940d1b758a78efa92f4b6
msgid "ignore_absent, backup"
msgstr ""

#: ../spack/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:24
# b10c264d058546f6ba346acdb1089988
msgid "these two keyword arguments, if present, will be forwarded to ``filter_file`` (see its documentation for more information on their behavior)"
msgstr ""

#: ../spack/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:30
# f674b1357cc44ff7aac5febebdbef941
msgid "recursive"
msgstr ""

#: ../spack/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:29
# 25a47abcd4444a80949aeb5226ff14f7
msgid "this keyword argument, if present, will be forwarded to ``find`` (see its documentation for more information on the behavior)"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:193
# e37f410a11fb48aba97b44df6f9e3a53
msgid "spack.multimethod module"
msgstr ""

#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod:1
# 9fa208a9b4b545e0ad963e9ab4bc544d
msgid "This module contains utilities for using multi-methods in spack. You can think of multi-methods like overloaded methods -- they're methods with the same name, and we need to select a version of the method based on some criteria.  e.g., for overloaded methods, you would select a version of the method to call based on the types of its arguments."
msgstr ""

#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod:8
# 32c07e676a934c8ea879a4abf106cd0c
msgid "In spack, multi-methods are used to ease the life of package authors.  They allow methods like install() (or other methods called by install()) to declare multiple versions to be called when the package is instantiated with different specs.  e.g., if the package is built with OpenMPI on x86_64,, you might want to call a different install method than if it was built for mpich2 on BlueGene/Q.  Likewise, you might want to do a different type of install for different versions of the package."
msgstr ""

#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod:17
# 5d8c9e3555b94c7a9fefd6531a4ac354
msgid "Multi-methods provide a simple decorator-based syntax for this that avoids overly complicated rat nests of if statements.  Obviously, depending on the scenario, regular old conditionals might be clearer, so package authors should use their judgement."
msgstr ""

#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.MultiMethodError:1
# 00b11555a20e46389acd8966e3d0d040
msgid "Superclass for multimethod dispatch errors"
msgstr ""

#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.NoSuchMethodError:1
# 59990d8de0a84152962b12b38d156f9d
msgid "Raised when we can't find a version of a multi-method."
msgstr ""

#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod:1
# 92005730862744758df72d10a45dc968
msgid "This implements a multi-method for Spack specs.  Packages are instantiated with a particular spec, and you may want to execute different versions of methods based on what the spec looks like.  For example, you might want to call a different version of install() for one platform than you call on another."
msgstr ""

#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod:7
# dffa4e5bf60449c2ae9f8016b9ccf644
msgid "The SpecMultiMethod class implements a callable object that handles method dispatch.  When it is called, it looks through registered methods and their associated specs, and it tries to find one that matches the package's spec.  If it finds one (and only one), it will call that method."
msgstr ""

#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod:13
# 163c3d83015347baa836008154e83aae
msgid "This is intended for use with decorators (see below).  The decorator (see docs below) creates SpecMultiMethods and registers method versions with them."
msgstr ""

#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod:19
# 6e5b87aba83c400b95b13b5298fefbac
msgid "To register a method, you can do something like this:"
msgstr ""

#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod:18
# a3a80c4c1e1940bcaa4965850cfc0ff4
msgid "mm = SpecMultiMethod() mm.register(\"^chaos_5_x86_64_ib\", some_method)"
msgstr ""

#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod:21
# b8b411d632e64678a2ee4bf04750bdec
msgid "The object registered needs to be a Spec or some string that will parse to be a valid spec."
msgstr ""

#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod:24
# f37ee88f27ca4a6b9e11f2561e0b52e9
msgid "When the mm is actually called, it selects a version of the method to call based on the sys_type of the object it is called on."
msgstr ""

#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod:28
# f7b81fca48474270a771436b81dfb408
msgid "See the docs for decorators below for more details."
msgstr ""

#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod.register:1
# 5577b1033f2e4a04bb37bf3a025ed283
msgid "Register a version of a method for a particular spec."
msgstr ""

#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.when:1
# aeff633dcc4643d7a4d8d70d8c69c2b8
msgid "This annotation lets packages declare multiple versions of methods like install() that depend on the package's spec. For example:"
msgstr ""

#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.when:22
# 42020943e3b7426994023182de3fb342
msgid "This allows each package to have a default version of install() AND specialized versions for particular platforms.  The version that is called depends on the architecutre of the instantiated package."
msgstr ""

#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.when:26
# b305467de47244229939c79526ec8b5e
msgid "Note that this works for methods other than install, as well.  So, if you only have part of the install that is platform specific, you could do this:"
msgstr ""

#: ../spack/lib/spack/spack/multimethod.py:docstring of spack.multimethod.when:53
# d0c418db608f465d8fe738ecface3ec4
msgid "Note that the default version of decorated methods must *always* come first.  Otherwise it will override all of the platform-specific versions.  There's not much we can do to get around this because of the way decorators work."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:201
# 427efa031099484296ebdb3d3ae00537
msgid "spack.package module"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package:1
# f86bc93de20b4398bc924d4cd02f5f96
msgid "This is where most of the action happens in Spack."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package:3
# 6ab920ba6da74725a3d165a133e76559
msgid "The spack package class structure is based strongly on Homebrew (http://brew.sh/), mainly because Homebrew makes it very easy to create packages."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.ActivationError:1
# c4dc4d857940413396e58be52260529f
msgid "Bases: :class:`spack.package.ExtensionError`"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.ActivationError:1
# 9ff597e8cd434de19cc65d94aa7be7e2
msgid "Raised when there are problems activating an extension."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.DependencyConflictError:1
# b69f15ded51641e789e1497f6b2449c1
msgid "Raised when the dependencies cannot be flattened as asked for."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.ExtensionError:1
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.NoURLError:1
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageVersionError:1
# 4345268b91fa4049be8548e74a57d9c1
# 1490af9579a640c6adddfafc1416cb4e
# 050cd092c31f41c3b72f6a8004dd3792
msgid "Bases: :class:`spack.package.PackageError`"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.ExtensionError:1
# 5e7e429a800943be9b5523b8e471eec4
msgid "Superclass for all errors having to do with extension packages."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.ExternalPackageError:1
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageStillNeededError:1
# df7ea43dd18543cdbd7712f42b3dca71
# 7676aba9c6e04eb6b5d4742bd8ed02ab
msgid "Bases: :class:`spack.package.InstallError`"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.ExternalPackageError:1
# aea61f815245442d9198f0d5145e466b
msgid "Raised by install() when a package is only for external use."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.FetchError:1
# c3b37062ed2340709c05846dfcb5e49c
msgid "Raised when something goes wrong during fetch."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.InstallError:1
# b5dab76d4efc42f3aa7343f1d35a37f6
msgid "Raised when something goes wrong during install or uninstall."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.InstallPhase:1
# dfb3ef9a450e4891aeaa0dfb7fb04296
msgid "Manages a single phase of the installation."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.InstallPhase:3
# 96b33ddc46694d29bfc8eeacbcd761dd
msgid "This descriptor stores at creation time the name of the method it should search for execution. The method is retrieved at __get__ time, so that it can be overridden by subclasses of whatever class declared the phases."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.InstallPhase:7
# 49b457a62489493699a8ecb257e774c9
msgid "It also provides hooks to execute arbitrary callbacks before and after the phase."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.NoURLError:1
# db086183e1ba41369e664881ff12db94
msgid "Raised when someone tries to build a URL for a package with no URLs."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.Package:1
# a82a0a6f9605439c97219d6fd13f7572
msgid "Bases: :class:`spack.package.PackageBase`"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.Package:1
# c451c7800cc14752876c59b6b0ca0572
msgid "General purpose class with a single ``install`` phase that needs to be coded by packagers."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.Package.build_system_class:1
# afcac5e5d23647dcbd164aad8cd0d1bd
msgid "This attribute is used in UI queries that require to know which build-system class we are using"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.Package.phases:1
# b7fb1b8def024bc4818572e85c9b684f
msgid "The one and only phase"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase:1
# 70789c8df1aa4dcb96907c0f4a934879
msgid "Bases: :class:`spack.package.PackageViewMixin`, :class:`object`"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase:1
# 342f47a336cc4845b898cfd2811a4413
msgid "This is the superclass for all spack packages."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase:3
# 4c0e6e19e122460c929deb9304debfd1
msgid "***The Package class***"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase:5
# 251ab2d6aeab48539f40bfafbfc3d8ea
msgid "A package defines how to fetch, verify (via, e.g., sha256), build, and install a piece of software.  A Package also defines what other packages it depends on, so that dependencies can be installed along with the package itself.  Packages are written in pure python by users of Spack."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase:11
# a96a04a03c3b4e8092d8214ab84fb1e8
msgid "There are two main parts of a Spack package:"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase:13
# bcf3cbfedaa34c5c809ce234e5c805e1
msgid "**The package class**.  Classes contain ``directives``, which are special functions, that add metadata (versions, patches, dependencies, and other information) to packages (see ``directives.py``). Directives provide the constraints that are used as input to the concretizer."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase:19
# 09285637af9e4c128d923845ea269903
msgid "**Package instances**. Once instantiated, a package is essentially an installer for a particular piece of software. Spack calls methods like ``do_install()`` on the ``Package`` object, and it uses those to drive user-implemented methods like ``patch()``, ``install()``, and other build steps. To install software, An instantiated package needs a *concrete* spec, which guides the behavior of the various install methods."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase:27
# 2eeccec3821a4335958bc72b787e13bc
msgid "Packages are imported from repos (see ``repo.py``)."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase:29
# 6ff87476e66741ffba454b5caee0ee02
msgid "**Package DSL**"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase:31
# 7f27160a396944ddad52329eb98899ba
msgid "Look in ``lib/spack/docs`` or check https://spack.readthedocs.io for the full documentation of the package domain-specific language.  That used to be partially documented here, but as it grew, the docs here became increasingly out of date."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase:36
# 8d75bdfdb933483a95dd3f98db129590
msgid "**Package Lifecycle**"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase:38
# 609e5e4c6b0d47d39c1e3d37213b20b2
msgid "A package's lifecycle over a run of Spack looks something like this:"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase:50
# 40e370135c7944de9e21a5d0fa58fd93
msgid "There are also some other commands that clean the build area:"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase:58
# cfcb2f410ab34dd28d41088c1f130fa9
msgid "The convention used here is that a ``do_*`` function is intended to be called internally by Spack commands (in spack.cmd).  These aren't for package writers to override, and doing so may break the functionality of the Package class."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase:63
# 3ca9ae995f874de19f3d9e2c41f30bd4
msgid "Package creators have a lot of freedom, and they could technically override anything in this class.  That is not usually required."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase:66
# 7d33f9a68f284be2ae1c5f7474f3f5fb
msgid "For most use cases.  Package creators typically just add attributes like ``url`` and ``homepage``, or functions like ``install()``. There are many custom ``Package`` subclasses in the ``spack.build_systems`` package that make things even easier for specific build systems."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.activate:1
# 87b140c20e4f460d82bac60908fddb01
msgid "Add the extension to the specified view."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.activate:3
# fd44e3475719413aa5f661934a8ec9eb
msgid "Package authors can override this function to maintain some centralized state related to the set of activated extensions for a package."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.activate:7
# 12d5634ad510418c8436605117a0d1c4
msgid "Spack internals (commands, hooks, etc.) should call do_activate() method so that proper checks are always executed."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.all_urls:1
# ad81f4ad72fd4dad9544fc087f9d972c
msgid "A list of all URLs in a package."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.all_urls:3
# 2f0f1ae0e519482ea73e74ac6fb72104
msgid "Check both class-level and version-specific URLs."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.all_urls:5
# 201c61ac59f24b39bfcf0fc821a3b4b2
msgid "a list of URLs"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.architecture:1
# 268a8f150e104936acb6124b8d7ff323
msgid "Get the spack.architecture.Arch object that represents the environment in which this package will be built."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.archive_files:1
# f3fd038ae8a84612bc2863428f9519e0
msgid "List of glob expressions. Each expression must either be absolute or relative to the package source path. Matching artifacts found at the end of the build process will be copied in the same directory tree as build.env and build.out."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.bootstrap_compiler:1
# 56a3e1dcfa984d04bbbb295af73f2dbe
msgid "Called by do_install to setup ensure Spack has the right compiler."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.bootstrap_compiler:3
# 37eda06d589e4b0d9a30f782e60f7248
msgid "Checks Spack's compiler configuration for a compiler that matches the package spec. If none are configured, installs and adds to the compiler configuration the compiler matching the CompilerSpec object."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.build_system_flags:1
# 079a123207914e1d9bdb427adee0a4e2
msgid "flag_handler that passes flags to the build system arguments.  Any package using `build_system_flags` must also implement `flags_to_build_system_args`, or derive from a class that implements it.  Currently, AutotoolsPackage and CMakePackage implement it."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.check_for_unfinished_installation:1
# 60e34c414b2946a886cd7cb5951c7829
msgid "Check for leftover files from partially-completed prior install to prepare for a new install attempt."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.check_for_unfinished_installation:4
# 5cc1ee84140547d3b8186daab5e4c894
msgid "Options control whether these files are reused (vs. destroyed)."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.check_for_unfinished_installation:6
# 5a6bc6ef588641e18435ceea9c65fd15
msgid "True if the installation prefix needs to be kept, False otherwise"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.check_for_unfinished_installation:9
# f3a46c78ba3a4c5e8139a33fdec464bf
msgid "False if the stage has to be kept, True otherwise"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.check_for_unfinished_installation:12
# 2a3b9e575f9c46d693088d8ff9b940b4
msgid "True if the prefix exists but the install is not complete, False otherwise."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.compiler:1
# ca0c9f66eedd47c9b1bedceedd5c0482
msgid "Get the spack.compiler.Compiler object used to build this package"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.content_hash:1
# c85bff4f1c0f4d1abd660e6023ea8f92
msgid "Create a hash based on the sources and logic used to build the package. This includes the contents of all applied patches and the contents of applicable functions in the package subclass."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.deactivate:1
# a9cbd03f68c742669eed157bd3f30f8a
msgid "Remove all extension files from the specified view."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.deactivate:3
# fb8935c704754decbf1cb3d4bc797554
msgid "Package authors can override this method to support other extension mechanisms.  Spack internals (commands, hooks, etc.) should call do_deactivate() method so that proper checks are always executed."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.dependencies_of_type:1
# 51bf61e2af7b4a9997ebb2f50635af1f
msgid "Get dependencies that can possibly have these deptypes."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.dependencies_of_type:3
# 7405589fa0b04bdb8c4f8ea7ce0d40af
msgid "This analyzes the package and determines which dependencies *can* be a certain kind of dependency. Note that they may not *always* be this kind of dependency, since dependencies can be optional, so something may be a build dependency in one configuration and a run dependency in another."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_activate:1
# e2a4aad47c1f4a2895de932236f43eea
msgid "Called on an extension to invoke the extendee's activate method."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_activate:3
# a18b51d784f44491af37a246f32fdbb9
msgid "Commands should call this routine, and should not call activate() directly."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_clean:1
# 9b1b3dc723e5464e82b2bf9830ed9f9b
msgid "Removes the package's build stage and source tarball."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_deactivate:1
# f249082d56174325b675f91f5d9c60fb
msgid "Remove this extension package from the specified view. Called on the extension to invoke extendee's deactivate() method."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_deactivate:4
# cc3dc77401924436a9b4711286f74440
msgid "`remove_dependents=True` deactivates extensions depending on this package instead of raising an error."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_fake_install:1
# d331d9654ecd49a6a698ba238d8d99ca
msgid "Make a fake install directory containing fake executables, headers, and libraries."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_fetch:1
# 9de39aeba2e643a5985b9531b1006d94
msgid "Creates a stage directory and downloads the tarball for this package. Working directory will be set to the stage directory."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:1
# c979fc2cbd6d4b2c82882c671b772d19
msgid "Called by commands to install a package and its dependencies."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:3
# 2df5e9201ed3401f8f6a6a1859ee2778
msgid "Package implementations should override install() to describe their build process."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:6
# 68f030c88e3842ee90063989970cfd7d
msgid "Keep install prefix on failure. By default, destroys it."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:9
# 01360c4138f845ecac189886d664e551
msgid "By default, stage is destroyed only if there are no exceptions during build. Set to True to keep the stage even with exceptions."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:13
# a0479d737d8546b0b0a2713edc9909e5
msgid "By default, source is not installed, but for debugging it might be useful to keep it around."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:16
# def289b3e0394127b2af0a4da321838d
msgid "Install dependencies before installing this package"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:19
# 70d970896cd44730b7623a846826346a
msgid "Skip patch stage of build if True."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:21
# b366009ce58045329ed1822cef968925
msgid "Display verbose build output (by default, suppresses it)"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:24
# ac40586223a1429fa3d3e967028c1ff5
msgid "Number of make jobs to use for install. Default is ncpus"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:27
# ae2974bc069a4d6ebb4b34d29fb55290
msgid "Don't really build; install fake stub files instead."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:29
# b01ea6f3b94740fc88bebf5f0f55dcc2
msgid "True if package was explicitly installed, False if package was implicitly installed (as a dependency)."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:32
# bca6710096e44d16969fc81010bffa8e
msgid "False to run no tests, True to test all packages, or a list of package names to run tests for some"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:35
# 58a33918f94d4406b8d1fb4e3851cf01
msgid "Don't clean the build environment before installing."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:37
# b8606be0ad41456b876590119ecde131
msgid "Force spack to restage the package source."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:39
# 8fd1556c12114b30824379aae0d26aa1
msgid "Install again, even if already installed."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:41
# f067aa33d79448c8911609b18f3e0778
msgid "Install from binary package, if available."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:43
# 71f40a22dec0499ebf47939d817f2f06
msgid "last installation phase to be executed (or None)"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_patch:1
# 6fe4bf1600e54b0fac312963db682ee3
msgid "Applies patches if they haven't been applied already."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_restage:1
# 23dcac04a2dd42cd8521c01fa9624055
msgid "Reverts expanded/checked out source to a pristine state."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_stage:1
# f27f15c3cd2f4126a7641cb140b5195d
msgid "Unpacks and expands the fetched tarball."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_uninstall:1
# 7accdc1c953a4c6b996b12fcb6d0161e
msgid "Uninstall this package by spec."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.env_flags:1
# 27fb2f93e1124353b284e12dc9b47e3b
msgid "flag_handler that adds all flags to canonical environment variables."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.extendable:1
# fc3063d84078425d9d8fcc1773f295f6
msgid "Most packages are NOT extendable. Set to True if you want extensions."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.extendee_args:1
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.extendee_spec:1
# e91102dba42d46ed9df67fa2684ba5f3
# c12dd1703eba47418c7ce0b58af41fa7
msgid "Spec of the extendee of this package, or None if it is not an extension"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.extends:1
# 309b21a6665046af8bbc7b5f60d61b6e
msgid "Returns True if this package extends the given spec."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.extends:3
# 922a903522f04ee2b43dc35856d52f4f
msgid "If ``self.spec`` is concrete, this returns whether this package extends the given spec."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.extends:6
# 7fa23c9b9d1f4326af88e27f91a63098
msgid "If ``self.spec`` is not concrete, this returns whether this package may extend the given spec."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.fetch_remote_versions:1
# 008e397da7074207841def87608e84a9
msgid "Find remote versions of this package."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.fetch_remote_versions:3
# 5479029445da476cba9763baf83109d7
msgid "Uses ``list_url`` and any other URLs listed in the package file."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.fetch_remote_versions:5
# ad60c592426f4393a7142b8ded82bc17
msgid "a dictionary mapping versions to URLs"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.flag_handler:1
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.inject_flags:1
# 88b7ec62d4ec45139cd6e1bf242d52f9
# 48fd706f56bd442f87636c2e9ba1c0bb
msgid "flag_handler that injects all flags through the compiler wrapper."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.format_doc:1
# 761cefeba6424ca0b3d35de68d3b6cce
msgid "Wrap doc string at 72 characters and format nicely"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.fullname:1
# 28ca8ac3b063453f890aef6785b576d4
msgid "namespace.name."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.fullname:3
# 5ade6f4b747848f690f48efaa9307ee7
msgid "Name of this package, including namespace"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.global_license_dir:1
# fc2a29a4274d4db381932aeadc8e7a0f
msgid "Returns the directory where global license files for all packages are stored."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.global_license_file:1
# 2f8dd1ef825a4753abe1bd902c2ff97f
msgid "Returns the path where a global license file for this particular package should be stored."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.installed:1
# d685b3fce1f44d619ecac5fee338583b
msgid "Installation status of a package."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.installed:3
# 7cb5d9aa8be540818982bba69bc5a62b
msgid "True if the package has been installed, False otherwise."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.is_activated:1
# fed60a9349f042eeb6d943707c37a1be
msgid "Return True if package is activated."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.license_comment:1
# 758d2df82d294a40a83dfb9fece48a98
msgid "String. Contains the symbol used by the license manager to denote a comment. Defaults to ``#``."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.license_files:1
# c29bed9869f64dedb9b456ee75153fb5
msgid "List of strings. These are files that the software searches for when looking for a license. All file paths must be relative to the installation directory. More complex packages like Intel may require multiple licenses for individual components. Defaults to the empty list."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.license_required:1
# 092e1b5d49924b199ce8156494727b9e
msgid "Boolean. If set to ``True``, this software requires a license. If set to ``False``, all of the ``license_*`` attributes will be ignored. Defaults to ``False``."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.license_url:1
# 03cd98c915d74bd097c27735d3ca616c
msgid "String. A URL pointing to license setup instructions for the software. Defaults to the empty string."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.license_vars:1
# 191ed0a76a6745cb9b9e289ac7f32c2b
msgid "List of strings. Environment variables that can be set to tell the software where to look for a license if it is not in the usual location. Defaults to the empty list."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.maintainers:1
# 8faba2b2e3644ad7ad01dffb7ea900ee
msgid "List of strings which contains GitHub usernames of package maintainers. Do not include @ here in order not to unnecessarily ping the users."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.make_jobs:1
# d6b4cb33dc9e43598922a4057823abfa
msgid "# jobs to use for parallel make. If set, overrides default of ncpus."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.metadata_attrs:1
# 4dae3b92631b43bba9f8119f92b19bfc
msgid "List of attributes which affect do not affect a package's content."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.nearest_url:1
# cb8c43bd80e347ec8a12165b867a73c0
msgid "Finds the URL with the \"closest\" version to ``version``."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.nearest_url:3
# 98fbac9e99fb4485b2ec2867e899b659
msgid "This uses the following precedence order:"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.nearest_url:5
# 2866e8e78f464cf3a34dd33bd9c4ab13
msgid "Find the next lowest or equal version with a URL."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.nearest_url:6
# b35c84fa66674b9fb3bf27cf48b38c09
msgid "If no lower URL, return the next *higher* URL."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.nearest_url:7
# 735af2197e6c454cb824abef9815f313
msgid "If no higher URL, return None."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.parallel:1
# 40cdef2cf6a14f78a607b106c9a7278a
msgid "By default we build in parallel.  Subclasses can override this."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.possible_dependencies:1
# 4509a21ba39744e087f94a3f2ed7cc99
msgid "Return set of possible dependencies of this package."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.possible_dependencies:3
# f9d4302d6438475a83a1f19048815f3d
msgid "Note: the set returned *includes* the package itself."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.possible_dependencies:5
# e2e1748766c4420c8752eb14da51270e
msgid "return all transitive dependencies if True, only direct dependencies if False."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.possible_dependencies:8
# ea66e003c14440b8aedad7b9787dd733
msgid "expand virtual dependencies into all possible implementations."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.possible_dependencies:11
# 991a6edf91a5444e8a02017cdd4714e3
msgid "set of names of dependencies visited so far."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.prefix:1
# 18d05c4fad7c41b09c84052da2f7c869
msgid "Get the prefix into which this package should be installed."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.provides:1
# 3fcddedac57c46deb52cee756ea85138
msgid "True if this package provides a virtual package with the specified name"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.remove_prefix:1
# e485b3dde1624a118d2a36c2cbe207a4
msgid "Removes the prefix for a package along with any empty parent directories"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.rpath:1
# 97a5f2bc87fe4c8aa9e17c8d5689c0d4
msgid "Get the rpath this package links with, as a list of paths."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.rpath_args:1
# e030af14eec34908bcd62bd42c1902fb
msgid "Get the rpath args as a string, with -Wl,-rpath, for each element"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.run_tests:1
# cf10b05fc9fa489f9ca70c314cafcab9
msgid "By default do not run tests within package's install()"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.sanity_check_is_dir:1
# e6a4b15049af4afe910c9e580d10d6ce
msgid "List of prefix-relative directory paths (or a single path). If these do not exist after install, or if they exist but are not directories, sanity checks will fail."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.sanity_check_is_file:1
# 26860770dd104854ba7342c9696a9392
msgid "List of prefix-relative file paths (or a single path). If these do not exist after install, or if they exist but are not files, sanity checks fail."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.sanity_check_prefix:1
# 656f0df4688543ae8f65799f51777e71
msgid "This function checks whether install succeeded."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_environment:1
# 68f90a94aed442dea83d708534855411
msgid "Set up the environment of packages that depend on this one."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_environment:3
# d90cb760b5874d27a2f0399167e7266f
msgid "This is similar to ``setup_environment``, but it is used to modify the compile and runtime environments of packages that *depend* on this one. This gives packages like Python and others that follow the extension model a way to implement common environment or compile-time settings for dependencies."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_environment:9
# 0ed4be7a80e840579c5a5f8650dfbef7
msgid "This is useful if there are some common steps to installing all extensions for a certain package."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_environment:12
#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:16
# 740488887e50437eb71eb16b233a83cf
# 12e0df05c04b43eab41098a2e0de1e6e
msgid "Example:"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_environment:14
# 287d5108d03e408a9baf7581ad01ad48
msgid "Installing python modules generally requires ``PYTHONPATH`` to point to the ``lib/pythonX.Y/site-packages`` directory in the module's install prefix. This method could be used to set that variable."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_environment:18
# 125bd93bffbc4c4a9462c4707f7e0d98
msgid "List of environment modifications to be applied when the dependent package is built within Spack."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_environment:22
# c3dad1efacf1474e82b1d313b98ab34d
msgid "List of environment modifications to be applied when the dependent package is run outside of Spack. These are added to the resulting module file."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_environment:27
# 61532e9d98fb4ba19667a0ab76b10328
msgid "The spec of the dependent package about to be built. This allows the extendee (self) to query the dependent's state. Note that *this* package's spec is available as ``self.spec``."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:1
# 418b630ee8184d8fbb61cb466c7892ac
msgid "Set up Python module-scope variables for dependent packages."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:3
# 20d79ac6b7c64c54b4d6144c9efdcb87
msgid "Called before the install() method of dependents."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:5
# 0ee86b4b73404deda44298ad4738c028
msgid "Default implementation does nothing, but this can be overridden by an extendable package to set up the module of its extensions. This is useful if there are some common steps to installing all extensions for a certain package."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:10
# cc5515f4897646b48e4a5aa2d87c9433
msgid "Examples:"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:12
# ed5b0cce35f64d3cbc0463a497f22a0e
msgid "Extensions often need to invoke the ``python`` interpreter from the Python installation being extended. This routine can put a ``python()`` Executable object in the module scope for the extension package to simplify extension installs."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:17
# b6178aa70e1e44c8ab15bc865f340e3c
msgid "MPI compilers could set some variables in the dependent's scope that point to ``mpicc``, ``mpicxx``, etc., allowing them to be called by common name regardless of which MPI is used."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:21
# b573594890f2407791932171281631dc
msgid "BLAS/LAPACK implementations can set some variables indicating the path to their libraries, since these paths differ by BLAS/LAPACK implementation."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:25
# 7b9f12051d2d436c936f1bdb5f75e6ab
msgid "The Python ``module`` object of the dependent package. Packages can use this to set module-scope variables for the dependent to use."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:29
# b745972ef6d440cdab7eb65a4a187fb5
msgid "The spec of the dependent package about to be built. This allows the extendee (self) to query the dependent's state.  Note that *this* package's spec is available as ``self.spec``."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:1
# 141887f294be4996905089f15fd2bc26
msgid "Set up the compile and runtime environments for a package."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:3
# e5abf0bcf56b457fad26a455207b691f
msgid "``spack_env`` and ``run_env`` are ``EnvironmentModifications`` objects. Package authors can call methods on them to alter the environment within Spack and at runtime."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:7
# a6cea12b41b744db98c1db0628c998f4
msgid "Both ``spack_env`` and ``run_env`` are applied within the build process, before this package's ``install()`` method is called."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:10
# b1d03d234c9d47359f3f7379cee1f456
msgid "Modifications in ``run_env`` will *also* be added to the generated environment modules for this package."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:13
# a9adafcfba924f7197ee09043c834249
msgid "Default implementation does nothing, but this can be overridden if the package needs a particular environment."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:18
# 2bccb70d1c50401aa91eff73619925d4
msgid "Qt extensions need ``QTDIR`` set."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:20
# a66c99069fb64bafadcc940a55fda54a
msgid "List of environment modifications to be applied when this package is built within Spack."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:24
# 7abb304cf2bf40aba4f294594ab8c19e
msgid "List of environment modifications to be applied when this package is run outside of Spack. These are added to the resulting module file."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.stage:1
# 281223472ee94bebb3584f46e87dc48b
msgid "Get the build staging area for this package."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.stage:3
# eeceda00a3ad4f9094429c405298d16f
msgid "This automatically instantiates a ``Stage`` object if the package doesn't have one yet, but it does not create the Stage directory on the filesystem."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.transitive_rpaths:1
# 5f190540e26d46ceb53566320d3d0ed8
msgid "When True, add RPATHs for the entire DAG. When False, add RPATHs only for immediate dependencies."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.unit_test_check:1
# 27ebec7c007b4946b809b15223d3d006
msgid "Hook for unit tests to assert things about package internals."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.unit_test_check:3
# 2b21971104be49259ea7dc5779683f09
msgid "Unit tests can override this function to perform checks after ``Package.install`` and all post-install hooks run, but before the database is updated."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.unit_test_check:7
# 6c0dadcb84df4541b42aa0335aa9301e
msgid "The overridden function may indicate that the install procedure should terminate early (before updating the database) by returning ``False`` (or any value such that ``bool(result)`` is ``False``)."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.unit_test_check:12
# 508ad858365c4358aa9f0553461063c6
msgid "``True`` to continue, ``False`` to skip ``install()``"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.url_for_version:1
# c2f4b64c5a374a849f1147081c4cfaeb
msgid "Returns a URL from which the specified version of this package may be downloaded."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.url_for_version:5
# 5782f822424248ddbd7aa335682f739c
msgid "version: class Version"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.url_for_version:5
# 950ace20511a46bc8399fb29e54d83bf
msgid "The version for which a URL is sought."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.url_for_version:7
# a1c910c704064df78388c8cf495b8517
msgid "See Class Version (version.py)"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.url_version:1
# 608413ade49146f58eb62bde5e6fb800
msgid "Given a version, this returns a string that should be substituted into the package's URL to download that version."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.url_version:4
# 603f0b6f2c8648d9a0bf133581cb8287
msgid "By default, this just returns the version string. Subclasses may need to override this, e.g. for boost versions where you need to ensure that there are _'s in the download URL."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.use_xcode:1
# bf5a7ea6bbe945d79b59758cb3e88637
msgid "By default do not setup mockup XCode on macOS with Clang"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.version_urls:1
# aece95b4af4445bab96c1a3be03a2f46
msgid "OrderedDict of explicitly defined URLs for versions of this package."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.version_urls:3
# 18c5aa03b89b449d8d904231ab27831a
msgid "An OrderedDict (version -> URL) different versions of this package, sorted by version."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.version_urls:6
# bab4429f3ea54611861fcd9471a90c03
msgid "A version's URL only appears in the result if it has an an explicitly defined ``url`` argument. So, this list may be empty if a package only defines ``url`` at the top level."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageBase.view:1
# b2cee494979d4ef6801bbfad4778317a
msgid "Create a view with the prefix of this package as the root. Extensions added to this view will modify the installation prefix of this package."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageError:1
# 8a08de54d11e4be188a793396ec3cc53
msgid "Raised when something is wrong with a package definition."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageMeta:1
# 9f514b965f9345dca949e59398be289a
msgid "Bases: :class:`spack.directives.DirectiveMeta`, :class:`spack.mixins.PackageMixinsMeta`"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageMeta:1
# 59dd3b63efa8404791d1849eb64ef6aa
msgid "Conveniently transforms attributes to permit extensible phases"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageMeta:3
# 4a7ae572922345bb9d0384781e13b824
msgid "Iterates over the attribute 'phases' and creates / updates private InstallPhase attributes in the class that is being initialized"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageMeta.fullname:1
# 35974dfee6e548319f1f96381f29d8a7
msgid "Name of this package, including the namespace"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageMeta.module:1
# 0ce5f6a54cf34832b99a912beb00114d
msgid "Module object (not just the name) that this package is defined in."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageMeta.module:3
# 5527d0fd000b4e3b9a500398cd7eca29
msgid "We use this to add variables to package modules.  This makes install() methods easier to write (e.g., can call configure())"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageMeta.namespace:1
# 83a3598a9b79461baa9ed1a9314ea9d8
msgid "Spack namespace for the package, which identifies its repo."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageMeta.package_dir:1
# 84e5b751df0b4baebf624e9d9acb85b9
msgid "Directory where the package.py file lives."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageStillNeededError:1
# f67ec54374d3481ea082ecc8bbc80727
msgid "Raised when package is still needed by another on uninstall."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageVersionError:1
# d219110fc02d48ee999eea660af26936
msgid "Raised when a version URL cannot automatically be determined."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageViewMixin:1
# e52886465c014c87b881c9b1d6669cc9
msgid "This collects all functionality related to adding installed Spack package to views. Packages can customize how they are added to views by overriding these functions."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageViewMixin.add_files_to_view:1
# 9d87feadb1704bb5ac3531bd4b3cf33e
msgid "Given a map of package files to destination paths in the view, add the files to the view. By default this adds all files. Alternative implementations may skip some files, for example if other packages linked into the view already include the file."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageViewMixin.remove_files_from_view:1
# f99dc30cde3044839bc65f35109a0f49
msgid "Given a map of package files to files currently linked in the view, remove the files from the view. The default implementation removes all files. Alternative implementations may not remove all files. For example if two packages include the same file, it should only be removed when both packages are removed."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageViewMixin.view_destination:1
# e8bbf8cce7c648a0be142a7d0a47e2a4
msgid "The target root directory: each file is added relative to this directory."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageViewMixin.view_file_conflicts:1
# d4ed3c26382d4105ab3bbae21b5cb7f2
msgid "Report any files which prevent adding this package to the view. The default implementation looks for any files which already exist. Alternative implementations may allow some of the files to exist in the view (in this case they would be omitted from the results)."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.PackageViewMixin.view_source:1
# 24fd4b5ff93545ee92703f5a5381230e
msgid "The source root directory that will be added to the view: files are added such that their path relative to the view destination matches their path relative to the view source."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.dump_packages:1
# 289a8a62b1de43cfbb914a995c27dd71
msgid "Dump all package information for a spec and its dependencies."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.dump_packages:3
# 0ae322816d22404492bdfb3f0633152e
msgid "This creates a package repository within path for every namespace in the spec DAG, and fills the repos wtih package files and patch files for every node in the DAG."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.flatten_dependencies:1
# 978e143e6482447f9a9c3ea4dd5b9059
msgid "Make each dependency of spec present in dir via symlink."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.install_dependency_symlinks:1
# de6ca0c874f541a4b2aa93a2298af0ec
msgid "Execute a dummy install and flatten dependencies"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.on_package_attributes:1
# 6eaca12c1f2645eabf1342d8de3d14f7
msgid "Decorator: executes instance function only if object has attr valuses."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.on_package_attributes:3
# 8b436216f9254e54890ac512e51f2331
msgid "Executes the decorated method only if at the moment of calling the instance has attributes that are equal to certain values."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.on_package_attributes:6
# 6ab728200f2d42408e1ae62def09751d
msgid "dictionary mapping attribute names to their required values"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.print_pkg:1
# f7239972a7b943cbb388bbc5b5b2b820
msgid "Outputs a message with a package icon."
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.run_after:1
# 6ecf47ac4b614297b12a5d14d6cf2166
msgid "Registers a method of a package to be run after a given phase"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.run_before:1
# 1a7a72f6e0c04c969a8a113a516430aa
msgid "Registers a method of a package to be run before a given phase"
msgstr ""

#: ../spack/lib/spack/spack/package.py:docstring of spack.package.use_cray_compiler_names:1
# 9b0a2195e5eb47a789a957e187e759aa
msgid "Compiler names for builds that rely on cray compiler names."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:209
# b8c01a20fc0f407a8652e0a2c00a7eda
msgid "spack.package\\_prefs module"
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs:1
# 0672fba257314096a6930c47ec7d2924
msgid "Defines the sort order for a set of specs."
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs:3
# 8101509788a84268862f2cca6127c16b
msgid "Spack's package preference implementation uses PackagePrefss to define sort order. The PackagePrefs class looks at Spack's packages.yaml configuration and, when called on a spec, returns a key that can be used to sort that spec in order of the user's preferences."
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs:9
# 3191837fb16e4bb98a7a1c6a21f73dbf
msgid "You can use it like this:"
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs:11
# d0b2a2633c774c6daff4668625f5ed78
msgid "# key function sorts CompilerSpecs for `mpich` in order of preference kf = PackagePrefs('mpich', 'compiler') compiler_list.sort(key=kf)"
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs:15
# 580e97aec849448a8dba29d3d5d4a432
msgid "Or like this:"
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs:17
# 1de7f0fccfc8472fb13541fda77f32c0
msgid "# key function to sort VersionLists for OpenMPI in order of preference. kf = PackagePrefs('openmpi', 'version') version_list.sort(key=kf)"
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs:21
# 5849d95ab38a4c68ad8719c0e987af03
msgid "Optionally, you can sort in order of preferred virtual dependency providers.  To do that, provide 'providers' and a third argument denoting the virtual package (e.g., ``mpi``):"
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs:25
# 81f02b80b9284a5bacda477174156d17
msgid "kf = PackagePrefs('trilinos', 'providers', 'mpi') provider_spec_list.sort(key=kf)"
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs.has_preferred_providers:1
# bd3cfb486c094a01a708b3faa2f4ff79
msgid "Whether specific package has a preferred vpkg providers."
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs.order_for_package:1
# 9d640e57977d4d90a23c27973813d155
msgid "Given a package name, sort component (e.g, version, compiler, ...), and an optional vpkg, return the list from the packages config."
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs.preferred_variants:1
# 4eee0cd7ebf9445192bc6321142748d6
msgid "Return a VariantMap of preferred variants/values for a spec."
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.VirtualInPackagesYAMLError:1
# 5a1dcfdb63fa46149974d3a9250eb85f
msgid "Raised when a disallowed virtual is found in packages.yaml"
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.get_package_dir_permissions:1
#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.get_package_permissions:1
# aee533f1762f48b4b34015d203dd6a2b
# c0c650b044f04be89e79b73af1d66ce6
msgid "Return the permissions configured for the spec."
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.get_package_dir_permissions:3
# 064f5fab940a4b54ae4886777961b595
msgid "Include the GID bit if group permissions are on. This makes the group attribute sticky for the directory. Package-specific settings take precedent over settings for ``all``"
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.get_package_group:1
# 7ac8bc5c24f8465292c2db6cb72e0ae2
msgid "Return the unix group associated with the spec."
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.get_package_group:3
#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.get_package_permissions:3
# 879895370cca4f88b7530db44a86a961
# 4d2f3ec1f2fc48f2a5d49e7f5be46477
msgid "Package-specific settings take precedence over settings for ``all``"
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.get_packages_config:1
# 761bda6987984208bcf782e03cbc8458
msgid "Wrapper around get_packages_config() to validate semantics."
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.is_spec_buildable:1
# 58e5d7de2e9848a09409f9dd6603734d
msgid "Return true if the spec pkgspec is configured as buildable"
msgstr ""

#: ../spack/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.spec_externals:1
# aead7ba021174562846f661839308c85
msgid "Return a list of external specs (w/external directory path filled in), one for each known external installation."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:217
# a5379ce7d269441c8bc9d78c495bce7c
msgid "spack.package\\_test module"
msgstr ""

#: ../spack/lib/spack/spack/package_test.py:docstring of spack.package_test.compare_output:1
# 730cc8356bc64c848df32264d6c1bc44
msgid "Compare blessed and current output of executables."
msgstr ""

#: ../spack/lib/spack/spack/package_test.py:docstring of spack.package_test.compare_output_file:1
# 563e48edf1bf40feb672e778de556684
msgid "Same as above, but when the blessed output is given as a file."
msgstr ""

#: ../spack/lib/spack/spack/package_test.py:docstring of spack.package_test.compile_c_and_execute:1
# c81b2051c7664173b036f913a5f1fbc2
msgid "Compile C @p source_file with @p include_flags and @p link_flags, run and return the output."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:225
# 41aabeac6e494c1299a627c9e4b25ad3
msgid "spack.parse module"
msgstr ""

#: ../spack/lib/spack/spack/parse.py:docstring of spack.parse.LexError:1
# 0663c5a589f245cbab69999876e38166
msgid "Bases: :class:`spack.parse.ParseError`"
msgstr ""

#: ../spack/lib/spack/spack/parse.py:docstring of spack.parse.LexError:1
# ff25ac81162846d4a8f01df57929a97d
msgid "Raised when we don't know how to lex something."
msgstr ""

#: ../spack/lib/spack/spack/parse.py:docstring of spack.parse.Lexer:1
# c1d7e6fb2d2d4803a3175c6dc9029a13
msgid "Base class for Lexers that keep track of line numbers."
msgstr ""

#: ../spack/lib/spack/spack/parse.py:docstring of spack.parse.ParseError:1
# 548c4c55886042d6838c81b093d3b050
msgid "Raised when we don't hit an error while parsing."
msgstr ""

#: ../spack/lib/spack/spack/parse.py:docstring of spack.parse.Parser:1
# 5257a03669844faab4e4ed5e517a4101
msgid "Base class for simple recursive descent parsers."
msgstr ""

#: ../spack/lib/spack/spack/parse.py:docstring of spack.parse.Parser.accept:1
# 6e06b6dc419d430fa5c57a05730d910c
msgid "Put the next symbol in self.token if accepted, then call gettok()"
msgstr ""

#: ../spack/lib/spack/spack/parse.py:docstring of spack.parse.Parser.expect:1
# b3ccc83babe8480cad2e3b229cc8b3c6
msgid "Like accept(), but fails if we don't like the next token."
msgstr ""

#: ../spack/lib/spack/spack/parse.py:docstring of spack.parse.Parser.gettok:1
# 2a412329caf14ae89e444f27e3c31f98
msgid "Puts the next token in the input stream into self.next."
msgstr ""

#: ../spack/lib/spack/spack/parse.py:docstring of spack.parse.Parser.last_token_error:1
# 12467f0f37e242658e1dfc2dcf6198e1
msgid "Raise an error about the previous token in the stream."
msgstr ""

#: ../spack/lib/spack/spack/parse.py:docstring of spack.parse.Parser.next_token_error:1
# 5a9a70e546f84a5098e9b384276920e0
msgid "Raise an error about the next token in the stream."
msgstr ""

#: ../spack/lib/spack/spack/parse.py:docstring of spack.parse.Parser.push_tokens:1
# a82a8e915c0e4aedb4beae48b9e4e16e
msgid "Adds all tokens in some iterable to the token stream."
msgstr ""

#: ../spack/lib/spack/spack/parse.py:docstring of spack.parse.Token:1
# 750974b4c35340e0aeacc61a6494c55b
msgid "Represents tokens; generated from input by lexer and fed to parse()."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:233
# 4bd53369280e43418db2834ea4200781
msgid "spack.patch module"
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.FilePatch:1
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch:1
# 759d74510c2343a79c9c5d88bb762fdc
# ea1b304938ac4e8e889b3c9a9949b250
msgid "Bases: :class:`spack.patch.Patch`"
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.FilePatch:1
# 321761fece524204b7f20b0765416782
msgid "Describes a patch that is retrieved from a file in the repository."
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.FilePatch:3
# e0f93cc4f0b348ecba34ce5a197f9f58
msgid "the class object for the package that owns the patch"
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.FilePatch:5
# d67bf7786519438995da12a5ea9830d2
msgid "path to patch, relative to the repository directory for a package."
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.FilePatch:8
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch:7
# 1beeae3570c341aaae047773e1808cd9
# 2edd33b24e344d78ad1d054dd7a18565
msgid "level to pass to patch command"
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.FilePatch:10
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch:9
# f5053546e0bc4ef9b4e42f315b4caab1
# c463f2cb44b04516919eddd51ce87a4f
msgid "path within the source directory where patch should be applied"
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.FilePatch.to_dict:1
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.Patch.to_dict:1
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch.to_dict:1
# f66d0375b099439eb17d43c058dc8fbe
# dd31c38b4bc24687af21a2049d6c566f
# 006a50ec109342189addc40502f44557
msgid "Partial dictionary -- subclases should add to this."
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.NoSuchPatchError:1
# 43ce199af43a461e8d2bdc6d64ca8ae4
msgid "Raised when a patch file doesn't exist."
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.Patch:1
# ed03a7db86094be3bd9d4c38afcc4050
msgid "Base class for patches."
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.Patch:3
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch:3
# 773d549d8e9c49088e4c637f9bf7e5c9
# 2583c42b3ce0405291022eba18596009
msgid "the package that owns the patch"
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.Patch:6
# 484880aae53a4e3e89b24d7157e2a4b9
msgid "The owning package is not necessarily the package to apply the patch to -- in the case where a dependent package patches its dependency, it is the dependent's fullname."
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.Patch.apply:1
# 7a23c9926bba477c9cc42ce3499bd2cb
msgid "Apply a patch to source in a stage."
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.Patch.apply:3
# 36247931158a43ff97f5dc53f55b0e34
msgid "stage where source code lives"
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.Patch.clean:1
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch.clean:1
# d5bc855f8c7140d296a2ff43259b3add
# a2531c4764a34ffb93bd7f8f07a38b82
msgid "Clean up the patch stage in case of a UrlPatch"
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.Patch.fetch:1
# dd01cfd9f3434f6f8526e1b2236f6764
msgid "Fetch the patch in case of a UrlPatch"
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.Patch.fetch:3
#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch.fetch:3
# 7b517c9d79674d0ba9bde957d3f5bde1
# 6f1b370306a24fdabac141b506d841ba
msgid "stage for the package that needs to be patched"
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache:1
# 6db3deab9b2c4004963faa4bfe34b0e0
msgid "Index of patches used in a repository, by sha256 hash."
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache:3
# 1a7b1c742c5b40ee966cbe958155f040
msgid "This allows us to look up patches without loading all packages.  It's also needed to properly implement dependency patching, as need a way to look up patches that come from packages not in the Spec sub-DAG."
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache:7
# 7a1f7d0dd6ee466e892f426fd798796b
msgid "The patch index is structured like this in a file (this is YAML, but we write JSON)::"
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache.patch_for_package:1
# 7001779a929f4d0e96f995baa6113c48
msgid "Look up a patch in the index and build a patch object for it."
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache.patch_for_package:3
# 12e722a0ded44bca8146c2f51badaf0b
msgid "sha256 hash to look up"
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache.patch_for_package:5
# 0e80f8076a654ec49bce33c600e5e1d8
msgid "Package object to get patch for."
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache.patch_for_package:8
# 49e4a905a496436b85404bf3be032a20
msgid "We build patch objects lazily because building them requires that we have information about the package's location in its repo."
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache.update:1
# 4242acc126814b50ba5828bbef33d5a6
msgid "Update this cache with the contents of another."
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.PatchDirectiveError:1
# aba26bbf22fc46f3b2faff14510713a9
msgid "Raised when the wrong arguments are suppled to the patch directive."
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch:1
# b9089a886c684356aee1d0bd4a3095e4
msgid "Describes a patch that is retrieved from a URL."
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch:5
# e970506be6fe41b4978aa891f2261377
msgid "URL where the patch can be fetched"
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch.fetch:1
# c858e3eab7c34121963a8e4758d7f989
msgid "Retrieve the patch in a temporary stage and compute self.path"
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.apply_patch:1
# bfe2bf37a2e04d75b99ff9351bae113d
msgid "Apply the patch at patch_path to code in the stage."
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.apply_patch:3
# aabc788cb11f4c7b99edb7c55c6cf0f7
msgid "stage with code that will be patched"
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.apply_patch:5
# ca02379e39e449adaf1cb886afec528b
msgid "filesystem location for the patch to apply"
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.apply_patch:7
# 72829dd80db1434aafc3d524a6f83112
msgid "patch level (default 1)"
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.apply_patch:9
# 62161393cb6a472b8e6b428d94ea59d3
msgid "relative path *within* the stage to change to (default '.')"
msgstr ""

#: ../spack/lib/spack/spack/patch.py:docstring of spack.patch.from_dict:1
# fa41a6c987d740a69a8f17cfeda11883
msgid "Create a patch from json dictionary."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:241
# b05077d0e53b4c97859657e1674f5b6b
msgid "spack.paths module"
msgstr ""

#: ../spack/lib/spack/spack/paths.py:docstring of spack.paths:1
# 2837b79556b1463e91daef94ab9af4c8
msgid "Defines paths that are part of Spack's directory structure."
msgstr ""

#: ../spack/lib/spack/spack/paths.py:docstring of spack.paths:3
# 5dda5023af3d44f89fde9897fe8e2b92
msgid "Do not import other ``spack`` modules here. This module is used throughout Spack and should bring in a minimal number of external dependencies."
msgstr ""

#: ../spack/lib/spack/spack/paths.py:docstring of spack.paths.bin_path:1
# 375204e00c0044a0810c4fb345fd4878
msgid "bin directory in the spack prefix"
msgstr ""

#: ../spack/lib/spack/spack/paths.py:docstring of spack.paths.prefix:1
# 9a5f615ee36e4564a4eb98faeed7276e
msgid "This file lives in $prefix/lib/spack/spack/__file__"
msgstr ""

#: ../spack/lib/spack/spack/paths.py:docstring of spack.paths.spack_root:1
# 34ff25264ca0498f88d718735badb56b
msgid "synonym for prefix"
msgstr ""

#: ../spack/lib/spack/spack/paths.py:docstring of spack.paths.spack_script:1
# d413fab8f0d247d29b44423a7dc7f8a5
msgid "The spack script itself"
msgstr ""

#: ../spack/lib/spack/spack/paths.py:docstring of spack.paths.user_config_path:1
# e0e27b536dea4803b23567f9dc0573a2
msgid "User configuration location"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:249
# 98bc13f13e91451a9787d04ad44b691e
msgid "spack.pkgkit module"
msgstr ""

#: ../spack/lib/spack/spack/pkgkit.py:docstring of spack.pkgkit:1
# 63e27a7623c140c3b0cf90e77c9467df
msgid "pkgkit is a set of useful build tools and directives for packages."
msgstr ""

#: ../spack/lib/spack/spack/pkgkit.py:docstring of spack.pkgkit:3
# 798383b742904f7b8f0254bd30927905
msgid "Everything in this module is automatically imported into Spack package files."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:257
# e81d4ed8f30a486aa4d2d387a9eaf2bf
msgid "spack.provider\\_index module"
msgstr ""

#: ../spack/lib/spack/spack/provider_index.py:docstring of spack.provider_index:1
# 489dd5f1d173404da15d3057d077702c
msgid "The ``virtual`` module contains utility classes for virtual dependencies."
msgstr ""

#: ../spack/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:1
# 5d25be6da836418db00e3754e042a8e6
msgid "This is a dict of dicts used for finding providers of particular virtual dependencies. The dict of dicts looks like:"
msgstr ""

#: ../spack/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:5
# 07ab05d1bafa416f90c33870daa3a98e
msgid "{ vpkg name :"
msgstr ""

#: ../spack/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:5
# 43686b4d407344f390032e528856b9e9
msgid "{ full vpkg spec : set(packages providing spec) } }"
msgstr ""

#: ../spack/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:7
# 1c5c16cc33554f869bf538c02b9500bb
msgid "Callers can use this to first find which packages provide a vpkg, then find a matching full spec.  e.g., in this scenario:"
msgstr ""

#: ../spack/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:12
# 9a511d17fcef4eab9e21459bfee68254
msgid "{ 'mpi' :"
msgstr ""

#: ../spack/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:12
# 341bf38583d44e75955d61b91dd57ee6
msgid "{ mpi@:1.1"
msgstr ""

#: ../spack/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:11
# 45a7df15138041d5a47baaa7e8b23ffb
msgid "set([mpich]),"
msgstr ""

#: ../spack/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:12
# 0cd6c63f12f249048d829e5b0836c65d
msgid "mpi@:2.3 : set([mpich2@1.9:]) } }"
msgstr ""

#: ../spack/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:14
# 6d076aadf2414b36baa44cefce226f94
msgid "Calling providers_for(spec) will find specs that provide a matching implementation of MPI."
msgstr ""

#: ../spack/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex.copy:1
# 440a3bf3881e40f389f405d8c7b5aeeb
msgid "Deep copy of this ProviderIndex."
msgstr ""

#: ../spack/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex.merge:1
# 1c1d79b2680f4f6995e4c6feffce4ef3
msgid "Merge `other` ProviderIndex into this one."
msgstr ""

#: ../spack/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex.providers_for:1
# 0af78ef1f208402f8b51c408631880fb
msgid "Gives specs of all packages that provide virtual packages with the supplied specs."
msgstr ""

#: ../spack/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex.remove_provider:1
# 1ea7338362b645d5916497ae2ed5de09
msgid "Remove a provider from the ProviderIndex."
msgstr ""

#: ../spack/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex.satisfies:1
# 2e00856a75c64012bffb03215ac6bded
msgid "Check that providers of virtual specs are compatible."
msgstr ""

#: ../spack/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndexError:1
# 34b7f6dbe4ae4ad1bf6e9c3a139843a5
msgid "Raised when there is a problem with a ProviderIndex."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:265
# 1a830a6bce774d709b5d32c4d4ed0a4f
msgid "spack.relocate module"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.InstallRootStringException:1
# e3669d19664a4a23990e740044f8dfa5
msgid "Raised when the relocated binary still has the install root string."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.file_is_relocatable:1
# 8d0e1ef31d024b66b8ef685dac43f0a4
msgid "Returns True if the file passed as argument is relocatable."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.file_is_relocatable:3
# 4aac910d74ce4baead8f123315723336
msgid "absolute path of the file to be analyzed"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.file_is_relocatable:5
# 8c103626412b4656bb9217988745a3dc
msgid "True or false"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.file_is_relocatable:7
# 7bee87367a16400eb0ebb95ccbc6f821
msgid ":exc:`ValueError` -- if the file does not exist or the path is not absolute"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.get_existing_elf_rpaths:1
# d10bcf9fbb2246a6b99110957384ec9d
msgid "Return the RPATHS returned by patchelf --print-rpath path_name as a list of strings."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.get_patchelf:1
# d686eef6fbfa42d8b03e6aafc1fb763a
msgid "Builds and installs spack patchelf package on linux platforms using the first concretized spec. Returns the full patchelf binary path."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.get_placeholder_rpaths:1
# 8f5b52828d524e19a957f5c69fb6bfa3
msgid "Replaces original layout root dir with a placeholder string in all rpaths."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.get_relative_rpaths:1
# 05eedc4075f04cbebf2a7aa83e67cc8d
msgid "Replaces orig_dir with relative path from dirname(path_name) if an rpath in orig_rpaths contains orig_path. Prefixes $ORIGIN to relative paths and returns replacement rpaths."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.is_binary:1
# cf260d1d2a9b430d93f8af278e17b7e5
msgid "Returns true if a file is binary, False otherwise"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.is_binary:3
# 00f73a36242f4191a7bc30e2201086a0
msgid "file to be tested"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.is_binary:5
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.compatible:8
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.constrain:7
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.satisfies:6
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.MultiValuedVariant.satisfies:6
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.compatible:8
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.constrain:7
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.satisfies:6
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.concrete:3
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.constrain:8
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.satisfies:11
# e9e38ce1bec349d9b2a32a726c284eae
# e5b1264de6c0487a9c966651a06b60fa
# 0631427cf7b24345befc5b1c1075dacc
# f897c33fb86f40278f15ce741d61a46e
# 1b7a4bf0eb0e4c35b3a7f4d8c6f3d654
# 38e39e65381848dd9d76ad0eb5cdcbc5
# a3d2133e3f0640339cd42c6b914c5bc3
# 2da82516037a4ee88c08838c2a367536
# 34b4100a336a44459be9c4a6718811c8
# 11a710cd2d114f21b16f8b470e5c0f82
# ee65ed88eae1448cb646f3abfc0165c9
msgid "True or False"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.is_relocatable:1
# d4e88ab56c3940feb2e5a29a980f50d2
msgid "Returns True if an installed spec is relocatable."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.is_relocatable:3
# 4723234c5d03482f8276de0e6967b9e9
msgid "spec to be analyzed"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.is_relocatable:6
# 968fee7a8f7040528f9f0fd21416d206
msgid "True if the binaries of an installed spec are relocatable and False otherwise."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.is_relocatable:9
# c7e2707fe8bd4bb4b3b590d18e2a3a00
msgid ":exc:`ValueError` -- if the spec is not installed"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.macho_get_paths:1
# 4ca3c862e51d4080a1b2791f3b3df2b7
msgid "Examines the output of otool -l path_name for these three fields: LC_ID_DYLIB, LC_LOAD_DYLIB, LC_RPATH and parses out the rpaths, dependiencies and library id. Returns these values."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.macho_make_paths_placeholder:1
# 9fb72fcaffa24cb5980889aeb223a110
msgid "Replace old_dir with a placeholder of the same length in rpaths and deps and idpaths is needed. replacement are returned."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.macho_make_paths_relative:1
# 1b989a7dc98744108aab141cbdd6aa76
msgid "Replace old_dir with relative path from dirname(path_name) in rpaths and deps; idpaths are replaced with @rpath/libname as needed; replacement are returned."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.macho_replace_paths:1
# e71cd95b728b4a18b779aa7c35fa40ae
msgid "Replace old_dir with new_dir in rpaths, deps and idpath and return replacements"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.make_binary_placeholder:1
# 5be236c8553940e4b7d30b3207ec3476
msgid "Replace old install root in RPATHs with placeholder in binary files"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.make_binary_relative:1
# 8cff8a76d69e45c59f88b0fbb24e3f38
msgid "Replace old RPATHs with paths relative to old_dir in binary files"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.make_link_placeholder:1
# 8000115b9ed447f6a41a53726a02018c
msgid "Replace old install path with placeholder in absolute links."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.make_link_placeholder:3
# e7f3b0564f404c459b2b1cde20e230ee
msgid "Links in ``cur_path_names`` must link to absolute paths."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.make_link_relative:1
# 1edccb3cd97c48e9b4e5c0faed3c5c77
msgid "Change absolute links to be relative."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.mime_type:1
# 5002873b61f04f6abd8870c4846d4ec0
msgid "Returns the mime type and subtype of a file."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.mime_type:3
# dfb5614469594f4ea9595ae51c5d1ca3
msgid "file to be analyzed"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.mime_type:5
# 1a332ed7b82d4cc2a3bd15c42ee02c8d
msgid "Tuple containing the MIME type and subtype"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.modify_elf_object:1
# a49c852ba18a412abc59a154668a5998
msgid "Replace orig_rpath with new_rpath in RPATH of elf object path_name"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.modify_macho_object:1
# 995f1ca63fc843d2b6f48fb9032b666f
msgid "Modify MachO binary path_name by replacing old_dir with new_dir or the relative path to spack install root. The old install dir in LC_ID_DYLIB is replaced with the new install dir using install_name_tool -id newid binary The old install dir in LC_LOAD_DYLIB is replaced with the new install dir using install_name_tool -change old new binary The old install dir in LC_RPATH is replaced with the new install dir using install_name_tool  -rpath old new binary"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.needs_binary_relocation:1
# 96a7c9394e1f44ac9513378c1f001820
msgid "Check whether the given filetype is a binary that may need relocation."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.needs_text_relocation:1
# 5ddf89c988394929b7f1542437486d63
msgid "Check whether the given filetype is text that may need relocation."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.relocate_binary:1
# 9f96ecb42aec4f86bb95bc2cd9b46171
msgid "Change old_dir to new_dir in RPATHs of elf or mach-o files Account for the case where old_dir is now a placeholder"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.relocate_links:1
# 9f807502ff5b4e55b99bc42fdb915e1b
msgid "Replace old path with new path in link sources."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.relocate_links:3
# 2a72e1b45d39412f9771ef9da859ea7d
msgid "Links in ``path_names`` must link to absolute paths or placeholders."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.relocate_text:1
# 83cf99bbb6ac4474b9b296c1eba3f957
msgid "Replace old path with new path in text file path_name"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.set_placeholder:1
# fbc5da8f75b840db89db45f4f05e9464
msgid "return string of @'s with same length"
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.strings_contains_installroot:1
# 502015b1f3d64555ba863a68e5882706
msgid "Check if the file contain the install root string."
msgstr ""

#: ../spack/lib/spack/spack/relocate.py:docstring of spack.relocate.substitute_rpath:1
# b66765a2df974f1298259c6a0277238a
msgid "Replace topdir with new_root_path RPATH list orig_rpath"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:273
# d1f90d0429b14da2ac8623ab39ccf78b
msgid "spack.repo module"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.BadRepoError:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.FailedConstructorError:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.IndexError:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.InvalidNamespaceError:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.NoRepoConfiguredError:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.UnknownEntityError:1
# baf37acdf3d0444daf82d9676e20b504
# 2973a1cf05d94980b88f750e472eefc8
# 74d4cdca908a4d28afcbec05c021afe8
# cef395b9de0d41669a423e44e7553808
# 92fb9e6c3c924057b5d3266143fd255f
# 8550e37c7bfe44c4afcb5c561d124b3e
msgid "Bases: :class:`spack.repo.RepoError`"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.BadRepoError:1
# d0ef5186aaa5440481f4715790de1cc1
msgid "Raised when repo layout is invalid."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.FailedConstructorError:1
# 82b4013396964eecad902dc8ed375c6a
msgid "Raised when a package's class constructor fails."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.FastPackageChecker:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.TagIndex:1
# 8e0508c45b7345cd83f0aaa1fd12addf
# 3c284d144df34f29a304a5c31dc095af
msgid "Bases: :class:`collections.abc.Mapping`"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.FastPackageChecker:1
# fb8b873f43904834a61b7d533a75f2b5
msgid "Cache that maps package names to the stats obtained on the 'package.py' files associated with them."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.FastPackageChecker:4
# e422ed0b8b87478f8be98ec713fbf6e4
msgid "For each repository a cache is maintained at class level, and shared among all instances referring to it. Update of the global cache is done lazily during instance initialization."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.IndexError:1
# 067c2e746daa4037956acd939c1c852c
msgid "Raised when there's an error with an index."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Indexer:1
# ac4d21031dec4ee9905ad6fa01311e67
msgid "Adaptor for indexes that need to be generated when repos are updated."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.needs_update:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.needs_update:1
# 612e47ff220d439aa133f0b077eeefe9
# e3f324406dec4b06bc65500b73149e9e
msgid "Whether an update is needed when the package file hasn't changed."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.needs_update:3
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.needs_update:3
# d3e56ca798ce4aa5ad6ad838fe6e1314
# 5aca3b65af954a02828e4178a8019f95
msgid "``True`` if this package needs its index     updated, ``False`` otherwise."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.needs_update:5
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.needs_update:5
# f462ac0d062649788a2f11a0bb66787d
# 40194d616dbf45aba9d5a190ca756859
msgid "``True`` if this package needs its index"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.needs_update:6
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.needs_update:6
# a776963b164248d6b2853e73f4a284d7
# 6261bc4fa39243c9a9dd7a6b2eb5fb44
msgid "updated, ``False`` otherwise."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.needs_update:9
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.needs_update:9
# db6708039c564450b7c43b930757dc56
# 96085e4658d54ef391b9a4262f5e8d57
msgid "We already automatically update indexes when package files change, but other files (like patches) may change underneath the package file. This method can be used to check additional package-specific files whenever they're loaded, to tell the RepoIndex to update the index *just* for that package."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.read:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.read:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.ProviderIndexer.read:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.TagIndexer.read:1
# c1beadcef9a9428dbd0be1c22dfb382e
# f1ecc50795a54dc8a418ce4d62a99c01
# 07b589d479844a1ab30aa2f557ddfdd3
# 447655724f3b4a069ec909141123a4b1
msgid "Read this index from a provided file object."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.update:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.update:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.ProviderIndexer.update:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.TagIndexer.update:1
# a3dd9d1a1d7d410080efa351b893f668
# f706692668344bcdb087263d992e73ff
# 3dcb574387a8491ebcd29ff2c87a4166
# 516e169778e5470990e75a69407c9295
msgid "Update the index in memory with information about a package."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.write:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.write:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.ProviderIndexer.write:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.TagIndexer.write:1
# f611c0cf81a94b8fb5e78890346a25e6
# db6b08a2d4564f89b755c4690040382c
# 0be0195441a04cb2bb8dc45a8d41f811
# 05503d0fea9747408311a5f3d71c9f49
msgid "Write the index to a file object."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.InvalidNamespaceError:1
# bd3f379b7fbc48acb59ae2ab1d164a70
msgid "Raised when an invalid namespace is encountered."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.NOT_PROVIDED:1
# 9a83e0958fe24f9ba0df1fb84c20fd11
msgid "Guaranteed unused default value for some functions."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.NoRepoConfiguredError:1
# 1d5bec67185a47cb88651ffe6d54d251
msgid "Raised when there are no repositories configured."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.ProviderIndexer:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.TagIndexer:1
# 77551d2bb87646898be50b247cff3464
# 6eb642e204cd4ab49a7aa6aeb473094f
# 07ec9caa22c746e7ae0bda7c377b5b08
msgid "Bases: :class:`spack.repo.Indexer`"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer:1
# 7d52a9b6adb8432cb13f779245f5afbd
msgid "Lifecycle methods for patch cache."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.ProviderIndexer:1
# 7f699b3992f0463d97fb9035532b1380
msgid "Lifecycle methods for virtual package providers."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo:1
# 9d189c5076794cb4baa918859cfefa08
msgid "Class representing a package repository in the filesystem."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo:3
# a155b73db0b94e569896452d6eb37f37
msgid "Each package repository must have a top-level configuration file called `repo.yaml`."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo:6
# 49e74ddd421a4f1d91556cd8361c6ddd
msgid "Currently, `repo.yaml` this must define:"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo:11
# 0257e7fe2f5a4c46a05aaf1618e0e69b
msgid "`namespace`:"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo:9
# ed7e0ca63de1400393989a0d91ece0cf
msgid "A Python namespace where the repository's packages should live."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.all_package_names:1
# 2e52d7b1f43c441dbdd807ad6f835f84
msgid "Returns a sorted list of all package names in the Repo."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.all_packages:1
# 1bd47c59721b41e8bde23d978e2329ac
msgid "Iterator over all packages in the repository."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.all_packages:3
# 18d66c7ba6c548d183e28d4864cc9f19
msgid "Use this with care, because loading packages is slow."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.dirname_for_package_name:1
# a5932437620c491e8f3f811ebb007085
msgid "Get the directory name for a particular package.  This is the directory that contains its package.py file."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.dump_provenance:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.dump_provenance:1
# 64d9378b67cd44819d1c0ec45ba22bd4
# d8d38c5bc1d440d495dcf1afa18dc607
msgid "Dump provenance information for a spec to a particular path."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.dump_provenance:3
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.dump_provenance:3
# edc32ba6586344cbb41430b743b7a489
# d17040d329824868a5bbef9f341848d1
msgid "This dumps the package file and any associated patch files. Raises UnknownPackageError if not found."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.exists:1
# 9f6591e873cf471f98575cd033b220d6
msgid "Whether a package with the supplied name exists."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.filename_for_package_name:1
# 8970910079c54d39a9eb99e2fa68e65f
msgid "Get the filename for the module we should load for a particular package.  Packages for a Repo live in ``$root/<package_name>/package.py``"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.filename_for_package_name:5
# a45caf50bbdc439ab7f3e06fabfe3e99
msgid "This will return a proper package.py path even if the package doesn't exist yet, so callers will need to ensure the package exists before importing."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.find_module:1
# ac7f5af7bc734a0a8e19cb640e8c911f
msgid "Python find_module import hook."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.find_module:3
# 8e3210f366044aa3800f2a7d0370a947
msgid "Returns this Repo if it can load the module; None if not."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.get:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.get:1
# 97df1d10f1e4442fbdd4ecf8190532d0
# f561397bc4cc46878f2889bd3834b12f
msgid "Returns the package associated with the supplied spec."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.get_pkg_class:1
# e97202e3c0c54049aa64c051f7c9c367
msgid "Get the class for the package out of its module."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.get_pkg_class:3
# ef22c3da93904b17857ba08705b62a93
msgid "First loads (or fetches from cache) a module for the package. Then extracts the package class from the module according to Spack's naming convention."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.index:1
# c8f7ecff587146a6a7f9e1faa01a7a36
msgid "Construct the index for this repo lazily."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.is_prefix:1
# c68c190c7e124d479a01ec448dd86b51
msgid "True if fullname is a prefix of this Repo's namespace."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.is_virtual:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.is_virtual:1
# 485e63e98f74460e8fb6fe8ddda35666
# b79b2674f0c74e3ea24c6ff7cd25a8f6
msgid "True if the package with this name is virtual, False otherwise."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.last_mtime:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.last_mtime:1
# c3e578019fc642e9a4e8252050564469
# 4e55ceffa761428db71c9e6894a80e11
msgid "Time a package file in this repo was last updated."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.load_module:1
# f0772f242ff0489483fc65dcd7b4482e
msgid "Python importer load hook."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.load_module:3
# 29d14ebc75f44215bf05ee30fb716b05
msgid "Tries to load the module; raises an ImportError if it can't."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.patch_index:1
# 2960ffb70d004e96944455143f5ca10f
msgid "Index of patches and packages they're defined on."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.provider_index:1
# 28074fbbc9f24bd4bfc3a0e419dfc15f
msgid "A provider index with names *specific* to this repo."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.purge:1
# c12eb053a1ff4193958285abcb460a88
msgid "Clear entire package instance cache."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.real_name:1
# 97dc8ebccaf84e0c863e2844a7139e98
msgid "Allow users to import Spack packages using Python identifiers."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.real_name:3
# be3f306f4aa848d08f7687d60d3d8d51
msgid "A python identifier might map to many different Spack package names due to hyphen/underscore ambiguity."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.real_name:7
# f8d186150c9a478183f67cd9da826027
msgid "Easy example:"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.real_name:7
# 76f72a15093647cc8b9a74a1c6f20f9a
msgid "num3proxy   -> 3proxy"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.real_name:10
# 8f1d4f6e4763497685271d013ae15ebf
msgid "Ambiguous:"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.real_name:10
# e73f575b2c4d453d9b9d3aa0d241c55b
msgid "foo_bar -> foo_bar, foo-bar"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.real_name:12
# ab4afb352fe94e688232679b38bf8f19
msgid "More ambiguous:"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.real_name:13
# 9e9980abc8174cee816afae1b52e8c73
msgid "foo_bar_baz -> foo_bar_baz, foo-bar-baz, foo_bar-baz, foo-bar_baz"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.Repo.tag_index:1
# 29bf72af6b1347dbbf1053e48034fb38
msgid "Index of tags and which packages they're defined on."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoError:1
# ea2d5047005948f591a1857d2dd80b81
msgid "Superclass for repository-related errors."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoIndex:1
# c5daafc212984f3b984a8a563eeeb0d3
msgid "Container class that manages a set of Indexers for a Repo."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoIndex:3
# 4ac9f87c62ff4b4182795ca64b880652
msgid "This class is responsible for checking packages in a repository for updates (using ``FastPackageChecker``) and for regenerating indexes when they're needed."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoIndex:7
# 7457ca3611a34f6fbddff775f7d04d15
msgid "``Indexers`` should be added to the ``RepoIndex`` using ``add_index(name, indexer)``, and they should support the interface defined by ``Indexer``, so that the ``RepoIndex`` can read, generate, and update stored indices."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoIndex:12
# f686fa7bdeec4bcaa04595bef989b4bf
msgid "Generated indexes are accessed by name via ``__getitem__()``."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoIndex.add_indexer:1
# 3859d4f417cc41c89807022cf34e3967
msgid "Add an indexer to the repo index."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoIndex.add_indexer:3
# 5e4c103deefe4888b9c351278dbf2592
msgid "name of this indexer"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoIndex.add_indexer:5
# ddaf3ee515014acd9380f584269d1767
msgid "an object that supports create(), read(), write(), and get_index() operations"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath:1
# 173dd703f8914403bea0030f7cf04b91
msgid "A RepoPath is a list of repos that function as one."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath:3
# aff39698ee43497db84050f99ae17a29
msgid "It functions exactly like a Repo, but it operates on the combined results of the Repos in its list instead of on a single package repository."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath:7
# a804773c988342869bcf653c6ba310c6
msgid "list Repo objects or paths to put in this RepoPath"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.all_package_names:1
# 8c36e29a051649338578b26a400f0d0f
msgid "Return all unique package names in all repositories."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.exists:1
# d360ee4d2a724eaf964205df9076f988
msgid "Whether package with the give name exists in the path's repos."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.exists:3
# ef05a71d16c2452cb7ec66c776ecf753
msgid "Note that virtual packages do not \"exist\"."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.find_module:1
# f5ba30c61429496a9112a75811b65c23
msgid "Implements precedence for overlaid namespaces."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.find_module:3
# e4885ccc144444599f1b4d841ca0e44e
msgid "Loop checks each namespace in self.repos for packages, and also handles loading empty containing namespaces."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.first_repo:1
# 61330f6bb48f4526a30b61c6caaee182
msgid "Get the first repo in precedence order."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.get_pkg_class:1
# c9315a8f177141d49680eddfa391334a
msgid "Find a class for the spec's package and return the class object."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.get_repo:1
# f37f71fe0ed146968e84991afcf4dc2b
msgid "Get a repository by namespace."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.get_repo:3
# f65746b66f6d4dee954774f877d7e6a2
msgid "Look up this namespace in the RepoPath, and return it if found."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.get_repo:5
# 8e947e55753d4114987e177d0961b59b
msgid "Optional Arguments:"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.get_repo:7
# 65bd474432c749f6b1488ff0fbba49d2
msgid "default:"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.get_repo:9
# 011f5374e29b48b9abf7b0742e0241e9
msgid "If default is provided, return it when the namespace isn't found.  If not, raise an UnknownNamespaceError."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.load_module:1
# 31a088aaae9f40f8a44a859225d0acb5
msgid "Handles loading container namespaces when necessary."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.load_module:3
# 16e39e7dee174bbf8cc1d2aa273b99b7
msgid "See ``Repo`` for how actual package modules are loaded."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.patch_index:1
# da8d8b19aa5b459d841898ed14bb7d24
msgid "Merged PatchIndex from all Repos in the RepoPath."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.provider_index:1
# 6dba18f727504b1498c6188edd37c809
msgid "Merged ProviderIndex from all Repos in the RepoPath."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.put_first:1
# 44d704443a534ca1897db9c3493d0300
msgid "Add repo first in the search path."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.put_last:1
# ce61bc7402f54dfb9dc25084c6a09973
msgid "Add repo last in the search path."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.remove:1
# f9b66581128247d3b6e2c0835c7fb8e2
msgid "Remove a repo from the search path."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.repo_for_pkg:1
# 5de9703947a145cb84f4cdf4a3cc8fef
msgid "Given a spec, get the repository for its package."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.SpackNamespace:1
# abb85bff1e3d4bfe9463bf24b921bc0c
msgid "Bases: :class:`module`"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.SpackNamespace:1
# fe0c5f4fd2a649cabfc8c3f00f0e2d4e
msgid "Allow lazy loading of modules."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.TagIndex:1
# 7f3c0aafa9a14a7cb8ce027e34946bdb
msgid "Maps tags to list of packages."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.TagIndex.update_package:1
# 7e97cb116bdc4d838bd65ad15434ebe0
msgid "Updates a package in the tag index."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.TagIndex.update_package:3
# f43db29560f846008ae66f0345fa9703
msgid "name of the package to be removed from the index"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.TagIndexer:1
# 44ab7e02da724d7a9ea47a97e5d5dd03
msgid "Lifecycle methods for a TagIndex on a Repo."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.UnknownEntityError:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.UnknownPackageError:1
# 02c0a8fe93784f30958e1a18422cad24
# a53d0308df9d4ef7ac33d7af8f7129aa
msgid "Raised when we encounter a package spack doesn't have."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.UnknownNamespaceError:1
#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.UnknownPackageError:1
# 13cceced749649bcbd55ae9179c23120
# 54f58add7c654201b7b05db552390d6f
msgid "Bases: :class:`spack.repo.UnknownEntityError`"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.UnknownNamespaceError:1
# d557c573730b4101a5909fe04bb23773
msgid "Raised when we encounter an unknown namespace"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.additional_repository:1
# 18eabfbf25e2494f8b4dc7afde40d612
msgid "Adds temporarily a repository to the default one."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.additional_repository:3
# 951476c37ffa4019a5555295c85bc41c
msgid "repository to be added"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.all_package_names:1
# c8558245331641059bb4f4cf726aca34
msgid "Convenience wrapper around ``spack.repo.all_package_names()``."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.autospec:1
# 9c681490988f4b0bb9d7d1aba5d262f8
msgid "Decorator that automatically converts the first argument of a function to a Spec."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.create_or_construct:1
# 0c7b4e1f72574fba9b2fe8897d28472b
msgid "Create a repository, or just return a Repo if it already exists."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.create_repo:1
# f0f506ce23e24f3bab7fafbbfe847bd4
msgid "Create a new repository in root with the specified namespace."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.create_repo:3
# c9ca3967512b4a6b9a344251f34ea588
msgid "If the namespace is not provided, use basename of root. Return the canonicalized path and namespace of the created repository."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.get:1
# 8d1fb5b637734bbdb0e0219ea2830024
msgid "Convenience wrapper around ``spack.repo.get()``."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.get_full_namespace:1
# 1b6d9fdb9afa4609ac8d9a90a72f6521
msgid "Returns the full namespace of a repository, given its relative one."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.path:1
# 1be875bb30674533a8bdfa6f5bd926bb
msgid "Singleton repo path instance"
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.repo_namespace:1
# e5038223c6cf4702b041d918b8d5da26
msgid "Super-namespace for all packages. Package modules are imported as spack.pkg.<namespace>.<pkg-name>."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.set_path:1
# 88315df32e894168b65ada70f4523607
msgid "Set the path singleton to a specific value."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.set_path:3
# f06e3726ac8a4124ae943f5180dacafe
msgid "Overwrite ``path`` and register it as an importer in ``sys.meta_path`` if it is a ``Repo`` or ``RepoPath``."
msgstr ""

#: ../spack/lib/spack/spack/repo.py:docstring of spack.repo.swap:1
# 60f9c05bbb9e463291a37f60a4216922
msgid "Temporarily use another RepoPath."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:281
# 9d0bce0695f24946983b4e51920649f0
msgid "spack.report module"
msgstr ""

#: ../spack/lib/spack/spack/report.py:docstring of spack.report:1
# debe700997104b8f86966a4706b5fa41
msgid "Tools to produce reports of spec installations"
msgstr ""

#: ../spack/lib/spack/spack/report.py:docstring of spack.report.valid_formats:1
# b73654e3386f4bb9896807fb3a8d0517
msgid "Allowed report formats"
msgstr ""

#: ../spack/lib/spack/spack/report.py:docstring of spack.report.collect_info:1
# ffbe2de3f9234009941ef8adff3b8aae
msgid "Collects information to build a report while installing and dumps it on exit."
msgstr ""

#: ../spack/lib/spack/spack/report.py:docstring of spack.report.collect_info:4
# 5a51f2d7d7c64206a45a534738d322df
msgid "If the format name is not ``None``, this context manager decorates PackageBase.do_install when entering the context and unrolls the change when exiting."
msgstr ""

#: ../spack/lib/spack/spack/report.py:docstring of spack.report.collect_info:8
# cc7defea79ce45fbbfd424d88197b4be
msgid "Within the context, only the specs that are passed to it on initialization will be recorded for the report. Data from other specs will be discarded."
msgstr ""

#: ../spack/lib/spack/spack/report.py:docstring of spack.report.collect_info:13
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:13
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:16
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:59
# c69f9265a3384d1ea4756e5990c5106d
# 2aefcb3278294316892c16562b5cd9ce
# 0a88a4358be74fdeb14049a539bc553f
# 305ab238eae04e15bbe8d2adbbd10178
msgid "Examples"
msgstr ""

#: ../spack/lib/spack/spack/report.py:docstring of spack.report.collect_info:26
# c4a2347016ac483086a6dce74bbba633
msgid "one of the supported formats"
msgstr ""

#: ../spack/lib/spack/spack/report.py:docstring of spack.report.collect_info:28
# fb8a0fb4cc9541988855ca73b65fa958
msgid "args passed to spack install"
msgstr ""

#: ../spack/lib/spack/spack/report.py:docstring of spack.report.collect_info:31
# b3f28e1d50c847ca8ba1a9d568350672
msgid ":exc:`ValueError` -- when ``format_name`` is not in ``valid_formats``"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:289
# c09e1424faa4443db2f4cc11867c8abb
msgid "spack.reporter module"
msgstr ""

#: ../spack/lib/spack/spack/reporter.py:docstring of spack.reporter.Reporter:1
# 48e3c245d1eb490eb326056e632fc50e
msgid "Base class for report writers."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:297
# 708610939a3c4b579600db39396b7830
msgid "spack.resource module"
msgstr ""

#: ../spack/lib/spack/spack/resource.py:docstring of spack.resource:1
# 82d9c3f150a5445bae60994742426ee2
msgid "Describes an optional resource needed for a build."
msgstr ""

#: ../spack/lib/spack/spack/resource.py:docstring of spack.resource:3
# a1e5d7f0daaf4b21a55f327dd1a89a49
msgid "Typically a bunch of sources that can be built in-tree within another package to enable optional features."
msgstr ""

#: ../spack/lib/spack/spack/resource.py:docstring of spack.resource.Resource:1
# 0dcee4ee7027419598f45db46c465d18
msgid "Represents an optional resource to be fetched by a package."
msgstr ""

#: ../spack/lib/spack/spack/resource.py:docstring of spack.resource.Resource:3
# 41d7eb69490f4774958c0ae4f380335e
msgid "Aggregates a name, a fetcher, a destination and a placement."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:305
# 4bcf99d119df444589228668484bee90
msgid "spack.spec module"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec:1
# 5416dac6d2574c6492e4c12bac1151ad
msgid "Spack allows very fine-grained control over how packages are installed and over how they are built and configured.  To make this easy, it has its own syntax for declaring a dependence.  We call a descriptor of a particular package configuration a \"spec\"."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec:6
# 213bbeaf4e374dee9963ac10f76e2287
msgid "The syntax looks like this:"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec:13
# e1d7813e8c474749b53794e237f88a6d
msgid "The first part of this is the command, 'spack install'.  The rest of the line is a spec for a particular installation of the mpileaks package."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec:16
# 4deeec65f70d495eaf6ccb4f2e4aaca9
msgid "The package to install"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec:18
# 81ad0014d47142b98449f3f36fd4f555
msgid "A dependency of the package, prefixed by ^"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec:20
# 61752c31a0c14a64937731b155239eb6
msgid "A version descriptor for the package.  This can either be a specific version, like \"1.2\", or it can be a range of versions, e.g. \"1.2:1.4\". If multiple specific versions or multiple ranges are acceptable, they can be separated by commas, e.g. if a package will only build with versions 1.0, 1.2-1.4, and 1.6-1.8 of mavpich, you could say:"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec:26
# a8da363d471e45cb849f95911599a3d2
msgid "depends_on(\"mvapich@1.0,1.2:1.4,1.6:1.8\")"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec:28
# fd0bf069302e4fad9f13b06d884c3e9c
msgid "A compile-time variant of the package.  If you need openmpi to be built in debug mode for your package to work, you can require it by adding +debug to the openmpi spec when you depend on it.  If you do NOT want the debug option to be enabled, then replace this with -debug."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec:33
# e558c2a4b4be4fd9812ba7f2b7715fd1
msgid "The name of the compiler to build with."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec:35
# 4c68e6bf404742dd9f435ca4e8222d5a
msgid "The versions of the compiler to build with.  Note that the identifier for a compiler version is the same '@' that is used for a package version. A version list denoted by '@' is associated with the compiler only if if it comes immediately after the compiler name.  Otherwise it will be associated with the current package spec."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec:41
# 00abda3e5ba04227b0ac2dc1070980cf
msgid "The architecture to build with.  This is needed on machines where cross-compilation is required"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec:44
# 3f310a0721804b918b21e0fc18dabef2
msgid "Here is the EBNF grammar for a spec::"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec:60
# 2193eff4b2ef43eda76990319ff9ae8a
msgid "Identifiers using the <name>=<value> command, such as architectures and compiler flags, require a space before the name."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec:63
# 358cefe2a4914abd856e4551efba2d86
msgid "There is one context-sensitive part: ids in versions may contain '.', while other ids may not."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec:66
# f2a1682e2e0f496dabb8f65bf2d11c14
msgid "There is one ambiguity: since '-' is allowed in an id, you need to put whitespace space before -variant for it to be tokenized properly.  You can either use whitespace, or you can just use ~variant since it means the same thing.  Spack uses ~variant in directory names and in the canonical form of specs to avoid ambiguity.  Both are provided because ~ can cause shell expansion when it is the first character in an id typed on the command line."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.cformat:1
# c5e01ae9e23f417ca260fad20c7a9472
msgid "Same as format, but color defaults to auto instead of False."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.common_dependencies:1
# 5e0ddf4299584d778ee1b0fa3e298046
msgid "Return names of dependencies that self an other have in common."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.concrete:1
# cc882ca08d10497db8dd2034203c715d
msgid "A spec is concrete if it describes a single build of a package."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.concrete:3
# 5a4711c0dd954b8083eb592a239d28c8
msgid "More formally, a spec is concrete if concretize() has been called on it and it has been marked `_concrete`."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.concrete:6
# 8961b39c485646ed8c407c20ec83ac22
msgid "Concrete specs either can be or have been built. All constraints have been resolved, optional dependencies have been added or removed, a compiler has been chosen, and all variants have values."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.concretize:1
# e613cc25845544c7aff2f5f4f78a6d6c
msgid "A spec is concrete if it describes one build of a package uniquely. This will ensure that this spec is concrete."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.concretize:4
# c0783d671c0c494fa1112d703e50aa54
msgid "list of packages that will need test dependencies, or True/False for test all/none"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.concretize:8
# ce37866979a44ee5b1497caf0562cd24
msgid "If this spec could describe more than one version, variant, or build of a package, this will add constraints to make it concrete."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.concretize:11
# 2a8a237725cd432c89ccfa6eeee30487
msgid "Some rigorous validation and checks are also performed on the spec. Concretizing ensures that it is self-consistent and that it's consistent with requirements of its packages. See flatten() and normalize() for more details on this."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.concretized:1
# df5161257af74b729073fe2485752c86
msgid "This is a non-destructive version of concretize().  First clones, then returns a concrete version of this package without modifying this package."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.constrain:1
# 28f81d77081444539d5d205b8346a3d6
msgid "Merge the constraints of other with self."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.constrain:3
# ef8d32d5fe1a4fccac44df5c665acde9
msgid "Returns True if the spec changed as a result, False if not."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.constrained:1
# 5166d6fbb49a4e048ed5459c65ef8373
msgid "Return a constrained copy without modifying this spec."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:1
# 65571a6153be49b4b9dc17a36621071e
msgid "Make a copy of this spec."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:3
# b0c21c01c27e4461a77e28dbc48f2f22
msgid "Defaults to True. If boolean, controls whether dependencies are copied (copied if True). If a tuple is provided, *only* dependencies of types matching those in the tuple are copied."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:8
# be6a6661fef04637b082e0dc4ba1622c
msgid "additional arguments for internal use (passed to ``_dup``)."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:10
# 2db574f414de4c57960f9025a3c79a48
msgid "A copy of this spec."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:14
# 59b6248044fa44ba8c5c54aeeb039560
msgid "Deep copy with dependnecies::"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:19
# 912d49e771cf4365b33ff002335b0580
msgid "Shallow copy (no dependencies)::"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:23
# 8793a60ed0944e38b0e75eab8f660f59
msgid "Only build and run dependencies::"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.cshort_spec:1
# dc79a9e1778f43f1b3a2f6c2dc06bdcd
msgid "Returns an auto-colorized version of ``self.short_spec``."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.dag_hash:1
# 80cb4d02c9ac4f12a32b53f82a215d0c
msgid "Return a hash of the entire spec DAG, including connectivity."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.dag_hash_bit_prefix:1
# b169ddaf49054dd083202921454fa4ac
msgid "Get the first <bits> bits of the DAG hash as an integer type."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.dep_difference:1
# 44304e478e8e400ba528569bafc6ed84
msgid "Returns dependencies in self that are not in other."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.eq_dag:1
# 25d2896742104364882a4bdba54faa4c
msgid "True if the full dependency DAGs of specs are equal."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.eq_node:1
# b1d448127b03492381d8dbfb752f211f
msgid "Equality with another spec, not including dependencies."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.flat_dependencies:1
# 7f1626f779c5472d9d32e058d1e40149
msgid "Return a DependencyMap containing all of this spec's dependencies with their constraints merged."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.flat_dependencies:4
# b382ce4768174a95b89acc51198f399a
msgid "If copy is True, returns merged copies of its dependencies without modifying the spec it's called on."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.flat_dependencies:7
# 9628636060a648fea5ce775be1c22a90
msgid "If copy is False, clears this spec's dependencies and returns them."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:1
# d5fb050bc9b14123bce9c48ec40abc4a
msgid "Prints out particular pieces of a spec, depending on what is in the format string."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:4
# 91f7c09b6e7c4483bd0692be6ffb7299
msgid "Using the ``{attribute}`` syntax, any field of the spec can be selected.  Those attributes can be recursive. For example, ``s.format({compiler.version})`` will print the version of the compiler."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:9
# 61d720e03f154071b3b76c2c05394fa5
msgid "Commonly used attributes of the Spec for format strings include::"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:24
# 40b67c1dd7a6433aa465d414442423bc
msgid "Some additional special-case properties can be added::"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:30
# f8a52ec781054478ae9b3fbe535982aa
msgid "The ``^`` sigil can be used to access dependencies by name. ``s.format({^mpi.name})`` will print the name of the MPI implementation in the spec."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:34
# 2a4d0f7abc9644d5855cabd53db17179
msgid "The ``@``, ``%``, ``arch=``, and ``/`` sigils can be used to include the sigil with the printed string. These sigils may only be used with the appropriate attributes, listed below::"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:44
# 095638ce305e4a189876572267a6918f
msgid "The ``@`` sigil may also be used for any other property named ``version``. Sigils printed with the attribute string are only printed if the attribute string is non-empty, and are colored according to the color of the attribute."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:49
# bf1c33ff5a2c44f582edbee6719fa48a
msgid "Sigils are not used for printing variants. Variants listed by name naturally print with their sigil. For example, ``spec.format('{variants.debug}')`` would print either ``+debug`` or ``~debug`` depending on the name of the variant. Non-boolean variants print as ``name=value``. To print variant names or values independently, use ``spec.format('{variants.<name>.name}')`` or ``spec.format('{variants.<name>.value}')``."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:58
# 40b0319ea60047d284f211ed459115bc
msgid "Spec format strings use ``\\`` as the escape character. Use ``\\{`` and ``\\}`` for literal braces, and ``\\\\`` for the literal ``\\`` character. Also use ``\\$`` for the literal ``$`` to differentiate from previous, deprecated format string syntax."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:64
# 7d578bba82aa433ab79bf7e4e7343c4a
msgid "The previous format strings are deprecated. They can still be accessed by the ``old_format`` method. The ``format`` method will call ``old_format`` if the character ``$`` appears unescaped in the format string."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:70
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:50
# defc0c548c0644b3b7b56f161446265a
# 03b62006ab7a4d5bbaf0a66281dc9f35
msgid "string containing the format to be expanded"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:73
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:53
# ce6d8c23fd164d8bb4c04bce91553023
# a3ff2a88b70b4f6393a86b8a1ebf77b8
msgid "True if returned string is colored"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:75
# f44bcef21db8465d86f8ddbb5ced3a53
msgid "maps full-string formats to a callable \\ that accepts a string and returns another one"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_dict:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_yaml:1
# 2eccbc06c0b04c4298587ac713d9a404
# 608d6c56164044b78629c2dfe5a64839
msgid "Construct a spec from YAML."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_dict:3
# 527994e475fe4cd19dc21ea6d28a8fe0
msgid "Parameters: data -- a nested dict/list data structure read from YAML or JSON."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_json:1
# 08fb8ece802348e4b9e07178a382e821
msgid "Construct a spec from JSON."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_json:3
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_yaml:3
# 8b5de58adb2647dc85301d73a8823bf1
# 5bda2fdc0edf48fc940cc5345536a7f6
msgid "Parameters: stream -- string or file object to read from."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:1
# f4853b6672714c09a89172a22e1bdfd8
msgid "Builds a Spec from a dictionary containing the spec literal."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:3
# 17af81df6abc4cfabc72bdb6e7c01a20
msgid "The dictionary must have a single top level key, representing the root, and as many secondary level keys as needed in the spec."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:6
# 7998bbdfe4fd4ec499a56a81f886f9a8
msgid "The keys can be either a string or a Spec or a tuple containing the Spec and the dependency types."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:9
# 5386be19dcc74d6ea82f459b725a6e7e
msgid "the dictionary containing the spec literal"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:11
# 503607054b304ab7af340b2af5f38328
msgid "if True the same key appearing at different levels of the ``spec_dict`` will map to the same object in memory."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:17
# 07480fe4595f42a0a9886152649298d4
msgid "A simple spec ``foo`` with no dependencies:"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:23
# 8f321bc4150249d69d95a0e070b5479c
msgid "A spec ``foo`` with a ``(build, link)`` dependency ``bar``:"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:30
# 3d3cb8cc1a1941b4b7ff39387216a66e
msgid "A spec with a diamond dependency and various build types:"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:43
# 93a76abe63864ed1b5beeeae6d1e5234
msgid "The same spec with a double copy of ``dt-diamond-bottom`` and no diamond structure:"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:57
# a85ab0c80c374aa5817bed5f4ae09dc5
msgid "Constructing a spec using a Spec object as key:"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.index:1
# b65df7ef52c54e808364c4e481128d06
msgid "Return DependencyMap that points to all the dependencies in this spec."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.install_status:1
# e4474291dc5948ce8155f712e82ba9c3
msgid "Helper for tree to print DB install status."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.is_virtual:1
# 4048c9bfced84272ae1a7499f2aaa796
msgid "Test if a name is virtual without requiring a Spec."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.ne_dag:1
# 7a6164aac20345b381188e7d03bd58ea
msgid "True if the full dependency DAGs of specs are not equal."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.ne_node:1
# ecb4315ba7b649b4a9134fdd457db010
msgid "Inequality with another spec, not including dependencies."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.normalize:1
# 36e393c72eef43eeaa848496be226ecb
msgid "When specs are parsed, any dependencies specified are hanging off the root, and ONLY the ones that were explicitly provided are there. Normalization turns a partial flat spec into a DAG, where:"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.normalize:5
# 6fd27fd1e535479ab0d761595010ddc1
msgid "Known dependencies of the root package are in the DAG."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.normalize:6
# c1baece12dc04db4b0dab3dd1d761503
msgid "Each node's dependencies dict only contains its known direct deps."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.normalize:8
# e2a3cc4d4d814c5ebef0e071153fab5f
msgid "There is only ONE unique spec for each package in the DAG."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.normalize:10
# 08de9464148948588fc5ea5f6c7378b3
msgid "This includes virtual packages.  If there a non-virtual package that provides a virtual package that is in the spec, then we replace the virtual package with the non-virtual one."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.normalize:14
# dfdb3e6a1c56436da125d62d320dea1d
msgid "TODO: normalize should probably implement some form of cycle detection, to ensure that the spec is actually a DAG."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.normalized:1
# 5179a6e6fcd740e0a06bacfd29df5df7
msgid "Return a normalized copy of this spec without modifying this spec."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:1
# 9704e9a599864e54bcee0c3589226f01
msgid "The format strings you can provide are::"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:16
# 5f1ab6385b7c4e89ba01d6d6f39a02fd
msgid "You can also use full-string versions, which elide the prefixes::"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:41
# ffc0e52cc2d24aa18010f65239d8d3d6
msgid "Note these are case-insensitive: for example you can specify either ``${PACKAGE}`` or ``${package}``."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:44
# 09cf04b8fdf04cafbf9fc878b71b519c
msgid "Optionally you can provide a width, e.g. ``$20_`` for a 20-wide name. Like printf, you can provide '-' for left justification, e.g. ``$-20_`` for a left-justified name."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:48
# efee431542da4d9e8a03e94a8ca4219e
msgid "Anything else is copied verbatim into the output stream."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:55
# d9c8cacee1e546a1826ef064976d3d7a
msgid "maps full-string formats to a callable                 that accepts a string and returns another one"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:60
# 2d7ae9b5b99b424abe5db97d17fe736c
msgid "The following line:"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:66
# a20259ab126345d88191c40aa7a7a479
msgid "translates to the name, version, and options of the package, but no dependencies, arch, or compiler."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:69
# c988cee564ec4ddda8fe36c66f13ae19
msgid "TODO: allow, e.g., ``$6#`` to customize short hash length TODO: allow, e.g., ``$//`` for full hash."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.package_class:1
# 8641aeceea13430eb37f72e6f9c0b12c
msgid "Internal package call gets only the class object for a package. Use this to just get package metadata."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.patches:1
# 8628dd9eb8cc4823952bc29fbd781744
msgid "Return patch objects for any patch sha256 sums on this Spec."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.patches:3
# 6b75ac5530444483aa9a68224f4a7195
msgid "This is for use after concretization to iterate over any patches associated with this spec."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.patches:6
# 9cf4ab2f1c48463aa7b7a62655078f5f
msgid "TODO: this only checks in the package; it doesn't resurrect old patches from install directories, but it probably should."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.read_yaml_dep_specs:1
# 606596b0461b428bb0cdc25da428a923
msgid "Read the DependencySpec portion of a YAML-formatted Spec."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.read_yaml_dep_specs:3
# 112f4b5744984ca889036e3c66bf9026
msgid "This needs to be backward-compatible with older spack spec formats so that reindex will work on old specs/databases."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.root:1
# 5a0ed94e5e4841cd9abd27d836c12345
msgid "Follow dependent links and find the root of this spec's DAG."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.root:3
# 6b2f8eb948e5421c9778aeb78c5bfc7a
msgid "Spack specs have a single root (the package being installed)."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.satisfies:1
# 39911bcffb4742d4b1125caccca053bd
msgid "Determine if this spec satisfies all constraints of another."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.satisfies:3
# 632a615c94274a06b90aaca47f154e4c
msgid "There are two senses for satisfies:"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.satisfies:5
# 0b08bc63d12848caa2e24692acea9167
msgid "`loose` (default): the absence of a constraint in self implies that it *could* be satisfied by other, so we only check that there are no conflicts with other for constraints that this spec actually has."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.satisfies:10
# 1d421f65a310496e8cdd5282265e4ffc
msgid "`strict`: strict means that we *must* meet all the constraints specified on other."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.satisfies_dependencies:1
# e7f76cc736d948ac958b829cf039b94c
msgid "This checks constraints on common dependencies against each other."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.short_spec:1
# 5e814f1b3b58479eac2f8860160bcc28
msgid "Returns a version of the spec with the dependencies hashed instead of completely enumerated."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.sorted_deps:1
# f4aca44a3f6b45319b073588dc7ff971
msgid "Return a list of all dependencies sorted by name."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:1
# d6e9d262d8f44f48856a11b5954e3d08
msgid "Generic traversal of the DAG represented by this spec. This will yield each node in the spec.  Options:"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:11
# 5749fba4e4cd44309133e8de32b9049f
msgid "order    [=pre|post]"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:5
# ed0fb5306f9f452689d64f2e7044b6b4
msgid "Order to traverse spec nodes. Defaults to preorder traversal. Options are:"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:8
# 0dea4917fbf847ea877354710c175fab
msgid "'pre':  Pre-order traversal; each node is yielded before its"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:9
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:11
# 4f39a9f2943f4256af41f10ba16a08f2
# fd4df5e1cd5f477aa8d54170cb9c513d
msgid "children in the dependency DAG."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:11
# 2892d8fdb4814788985e92bcd6960a74
msgid "'post': Post-order  traversal; each node is yielded after its"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:23
# ad8f6f151aa64202ab91eac8041ab4d6
msgid "cover    [=nodes|edges|paths]"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:14
# 93485aa0fe4b4a65880b80864f298c63
msgid "Determines how extensively to cover the dag.  Possible values:"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:16
# e1597595b68b498ca6373749edc466e7
msgid "'nodes': Visit each node in the dag only once.  Every node"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:17
# 67f4b981af394f0e8d2977e359208eee
msgid "yielded by this function will be unique."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:19
# 9f9baa7ddb0d46ed9956d1304e65b964
msgid "'edges': If a node has been visited once but is reached along a"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:19
# 449d10c6deb045de968ed90c6f5ca5c4
msgid "new path from the root, yield it but do not descend into it.  This traverses each 'edge' in the DAG once."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:23
# f6b5073a3cda438bae65526d42cddbd8
msgid "'paths': Explore every unique path reachable from the root."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:22
# 5a2623b7591e44968622c256e526c469
msgid "This descends into visited subtrees and will yield nodes twice if they're reachable by multiple paths."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:28
# 3805c845faa041f2af63c68c751ded80
msgid "depth    [=False]"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:26
# 358c915b72924727a1e09ad051e522cb
msgid "Defaults to False.  When True, yields not just nodes in the spec, but also their depth from the root in a (depth, node) tuple."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:32
# a1d1897a82a449059f6f2e88ef162ebf
msgid "key   [=id]"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:31
# b28a1b83cc6d4445946a5da7d0d1c5af
msgid "Allow a custom key function to track the identity of nodes in the traversal."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:35
# fa577b39a1e741609adc1106cf3381d3
msgid "root     [=True]"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:35
# ae59b0b9d7294acf825d6a144e83fe91
msgid "If False, this won't yield the root node, just its descendents."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:38
# f7e52dae000b44d09156b1c4a0eccf9f
msgid "direction [=children|parents]"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:38
# faebed9064e74715b746c207ea9e33d7
msgid "If 'children', does a traversal of this spec's children.  If 'parents', traverses upwards in the DAG towards the root."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.tree:1
# 5ee7eb06671d4787bd400cd8c9a8269e
msgid "Prints out this spec and its dependencies, tree-formatted with indentation."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.validate_or_raise:1
# 7ee8f0664fea4327a5ab803a37de92f5
msgid "Checks that names and values in this spec are real. If they're not, it will raise an appropriate exception."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.virtual:1
# 4a4ed5ba5f0c4a418d805a5936da4f30
msgid "Right now, a spec is virtual if no package exists with its name."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.virtual:3
# 5962505ce11542f5bb3198fc20d1d92d
msgid "TODO: revisit this -- might need to use a separate namespace and be more explicit about this. Possible idea: just use conventin and make virtual deps all caps, e.g., MPI vs mpi."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.Spec.virtual_dependencies:1
# 56762c4dc5be4a108269d59c82be22fa
msgid "Return list of any virtual deps in this spec."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.parse:1
# 5996287d59c1413ca033e574fcb0e7c0
msgid "Returns a list of specs from an input string. For creating one spec, see Spec() constructor."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.parse_anonymous_spec:1
# 49964a732b4e4503881c33e982a040a4
msgid "Allow the user to omit the package name part of a spec if they know what it has to be already."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.parse_anonymous_spec:4
# 525cef0b5ebc49d2b6b9e44e894ac8d9
msgid "e.g., provides('mpi@2', when='@1.9:') says that this package provides MPI-3 when its version is higher than 1.9."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.SpecParseError:1
# 6a57980cab6a4ca992d51b3c3ca4431a
msgid "Wrapper for ParseError for when we're parsing specs."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.DuplicateDependencyError:1
# 73bb7665ca0e472486703f0a8627905c
msgid "Raised when the same dependency occurs in a spec twice."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.spec.DuplicateVariantError:1
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.DuplicateVariantError:1
# 9ac7f281e6614ec0afbd2b188b261fc4
# 0d830c40a79447f889bfe398aad8e884
msgid "Raised when the same variant occurs in a spec twice."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.DuplicateCompilerSpecError:1
# c3b1b330f8ef46b3baa7a5e227ba5ea7
msgid "Raised when the same compiler occurs in a spec twice."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.UnsupportedCompilerError:1
# 67f2b7a2ce484c6bab8e70d6b37bf02a
msgid "Raised when the user asks for a compiler spack doesn't know about."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.spec.UnknownVariantError:1
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.UnknownVariantError:1
# 365046fd67344ffe8d2b4ec8b9fe87e0
# 2bb87d968edc4ba99f521eb8476a284e
msgid "Raised when an unknown variant occurs in a spec."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.DuplicateArchitectureError:1
# bf15aaed2cde40178c051feae801272e
msgid "Raised when the same architecture occurs in a spec twice."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.InconsistentSpecError:1
# a8c06b3795d6418baa18a0da4b4f3f1c
msgid "Raised when two nodes in the same spec DAG have inconsistent constraints."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.InvalidDependencyError:1
# 1f66622be0fa4f35b57f3305188546d4
msgid "Raised when a dependency in a spec is not actually a dependency of the package."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.NoProviderError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.MultipleProviderError:1
# 69ca12240250408494548815bafb429f
# 041549fa077642d1a4f020efc4a3b519
msgid "Raised when there is no package that provides a particular virtual dependency."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableSpecNameError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableVersionSpecError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableCompilerSpecError:1
#: ../spack/lib/spack/spack/variant.py:docstring of spack.spec.UnsatisfiableVariantSpecError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableCompilerFlagSpecError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableArchitectureSpecError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableProviderSpecError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableDependencySpecError:1
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.UnsatisfiableVariantSpecError:1
# 0bb7f4439f4649ef84a73a7708614511
# 50c0f2c88b944ce7a857af5ec2442635
# 3e3983daf9384658bc4016c2b915e182
# 14214e11435346c6be3a4c9438d7303c
# 41845f97df634024b0343db568ce205f
# 17a68dc055524756891efe5123dfc6ef
# add5d53002754560b5962244ab1a4391
# cdc5d2d1eaf24141825b36122ea64132
# 551b1fcb42f74d00b8543471eb0e975d
msgid "Bases: :class:`spack.error.UnsatisfiableSpecError`"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableSpecNameError:1
# 6eb087ff9d024725aa8cdb1922d92ff1
msgid "Raised when two specs aren't even for the same package."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableVersionSpecError:1
# e9c8dd25218a4b0695097585d05c60a3
msgid "Raised when a spec version conflicts with package constraints."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableCompilerSpecError:1
# b513d10b320447faa835c38f29d51188
msgid "Raised when a spec comiler conflicts with package constraints."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.spec.UnsatisfiableVariantSpecError:1
#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableCompilerFlagSpecError:1
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.UnsatisfiableVariantSpecError:1
# 5fd0c8b07560495986720b10b9b3290e
# aafc767e4aca495dbc42785f7da2b822
# 54fe04555f86434cbcc6f5ee86a3e1e0
msgid "Raised when a spec variant conflicts with package constraints."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableArchitectureSpecError:1
# 5c54f9cca3a2408fb00824bc430f3cac
msgid "Raised when a spec architecture conflicts with package constraints."
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableProviderSpecError:1
# 787f4bc2e49c401fbdd516995a248b4a
msgid "Raised when a provider is supplied but constraints don't match a vpkg requirement"
msgstr ""

#: ../spack/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableDependencySpecError:1
# 1af6145eb9114dab924c40b89ff421f6
msgid "Raised when some dependency of constrained specs are incompatible"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:313
# 5347ed79c78c475faaa65a676e4fab4f
msgid "spack.spec\\_set module"
msgstr ""

#: ../spack/lib/spack/spack/spec_set.py:docstring of spack.spec_set.CombinatorialSpecSet:1
# 0ca5918cac064a7bb3448f1f8d7a9e89
msgid "Set of combinatorial Specs constructed from YAML file."
msgstr ""

#: ../spack/lib/spack/spack/spec_set.py:docstring of spack.spec_set.CombinatorialSpecSet.all_package_versions:1
# 6c04169161494c34b9c6f91a7bfee44a
msgid "Get package/version combinations for all spack packages."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:321
# c7cb5851c8844cc5845a0899dca95492
msgid "spack.stage module"
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.DIYStage:1
# fc90f31aede74b43a2241a653d5827af
msgid "Simple class that allows any directory to be a spack stage."
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.ResourceStage:1
# 9b0794cc87ea4cad8f6e9aa687930b8d
msgid "Bases: :class:`spack.stage.Stage`"
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.ResourceStage.expand_archive:1
#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage.expand_archive:1
# 412b9b43dbd0420f9df411ab0d3cccbf
# eb127340a4e54dbeb3b6777b9ad9eead
msgid "Changes to the stage directory and attempt to expand the downloaded archive.  Fail if the stage is not set up or if the archive is not yet downloaded."
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.ResourceStage.restage:1
#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage.restage:1
# bf33ff934f64449797bc160235dd3d8c
# 63242289e86b488cb3964922d720432f
msgid "Removes the expanded archive path if it exists, then re-expands the archive."
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.RestageError:1
# 64733099a8c54661994473b1c44b111e
msgid "Bases: :class:`spack.stage.StageError`"
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.RestageError:1
# 3d0926e2e9eb41258347d56a8fd4c9d8
msgid "\"Error encountered during restaging."
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage:1
# 6a652edb74f241c3b7dfcb23bff9a704
msgid "Manages a temporary stage directory for building."
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage:3
# 3bdbf182ce744604b6e2897788c722a7
msgid "A Stage object is a context manager that handles a directory where some source code is downloaded and built before being installed. It handles fetching the source code, either as an archive to be expanded or by checking it out of a repository.  A stage's lifecycle looks like this::"
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage:16
# 7eb2426421fa4cab98c8ca39e5ec8c8f
msgid "When used as a context manager, the stage is automatically destroyed if no exception is raised by the context. If an excpetion is raised, the stage is left in the filesystem and NOT destroyed, for potential reuse later."
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage:21
# ab0b87dcac0e49079c276f42f3dec622
msgid "You can also use the stage's create/destroy functions manually, like this::"
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage:34
# 99a29073fc58485e8a532afe3ad36bb8
msgid "There are two kinds of stages: named and unnamed.  Named stages can persist between runs of spack, e.g. if you fetched a tarball but didn't finish building it, you won't have to fetch it again."
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage:38
# a9871e655b9940f8b018a47f3b3392f6
msgid "Unnamed stages are created using standard mkdtemp mechanisms or similar, and are intended to persist for only one run of spack."
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage.create:1
# ea8c0815659a4e38aa339cabccb14b9c
msgid "Creates the stage directory."
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage.create:3
# 04dcc88ce98645e18fd9b06da447e588
msgid "If get_tmp_root() is None, the stage directory is created directly under spack.paths.stage_path, otherwise this will attempt to create a stage in a temporary directory and link it into spack.paths.stage_path."
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage.destroy:1
# 28f1e036fa504b72b3928c3da74d3341
msgid "Removes this stage directory."
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage.expected_archive_files:1
# 3ef2b045fb7a4efc89764e8ce6d16324
msgid "Possible archive file paths."
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage.fetch:1
# 7252da3f72374872a2f20b2550a172ee
msgid "Downloads an archive or checks out code from a repository."
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage.source_path:1
# c4ff0f14c87741348f65eaad28f62e11
msgid "Returns the path to the expanded/checked out source code."
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage.source_path:3
# 07da6a3ad36e46ebb5d70480a28792b6
msgid "To find the source code, this method searches for the first subdirectory of the stage that it can find, and returns it. This assumes nothing besides the archive file will be in the stage path, but it has the advantage that we don't need to know the name of the archive or its contents."
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.Stage.source_path:9
# 038a33baf27e43ee822bd06ff69e1df4
msgid "If the fetch strategy is not supposed to expand the downloaded file, it will just return the stage path. If the archive needs to be expanded, it will return None when no archive is found."
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.StageError:1
# d8b76d1ebfc64ca380dc1a986b643f61
msgid "\"Superclass for all errors encountered during staging."
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.ensure_access:1
# 06763a90c0e54b01960eaaf87946da15
msgid "Ensure we can access a directory and die with an error if we can't."
msgstr ""

#: ../spack/lib/spack/spack/stage.py:docstring of spack.stage.purge:1
# 52da2250f0f3413388ce5305d827897d
msgid "Remove all build directories in the top-level stage path."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:329
# 9d2b7508d2d640aaa3e5a9a05555c161
msgid "spack.store module"
msgstr ""

#: ../spack/lib/spack/spack/store.py:docstring of spack.store:1
# 5dc40e95a1604e40b7e1e23356b1fe7e
msgid "Components that manage Spack's installation tree."
msgstr ""

#: ../spack/lib/spack/spack/store.py:docstring of spack.store:3
# 466a6d41afd94101a07851a629a3ce48
msgid "An install tree, or \"build store\" consists of two parts:"
msgstr ""

#: ../spack/lib/spack/spack/store.py:docstring of spack.store:5
# a254648ba5924d86a1ca84487117148e
msgid "A package database that tracks what is installed."
msgstr ""

#: ../spack/lib/spack/spack/store.py:docstring of spack.store:6
# 8ede8488bf1240dc81388d00d3105dec
msgid "A directory layout that determines how the installations are laid out."
msgstr ""

#: ../spack/lib/spack/spack/store.py:docstring of spack.store:9
# 248c24e6357e42d2bc59227ab33d74ac
msgid "The store contains all the install prefixes for packages installed by Spack.  The simplest store could just contain prefixes named by DAG hash, but we use a fancier directory layout to make browsing the store and debugging easier."
msgstr ""

#: ../spack/lib/spack/spack/store.py:docstring of spack.store:14
# fb28f4bef8414a6cacdcae58a91e275f
msgid "The directory layout is currently hard-coded to be a YAMLDirectoryLayout, so called because it stores build metadata within each prefix, in `spec.yaml` files. In future versions of Spack we may consider allowing install trees to define their own layouts with some per-tree configuration."
msgstr ""

#: ../spack/lib/spack/spack/store.py:docstring of spack.store.Store:1
# 9daabcbee47e4b2d88a70c6a42d4e61e
msgid "A store is a path full of installed Spack packages."
msgstr ""

#: ../spack/lib/spack/spack/store.py:docstring of spack.store.Store:3
# baa414cfca344aaf9fb19989c28062e6
msgid "Stores consist of packages installed according to a ``DirectoryLayout``, along with an index, or _database_ of their contents.  The directory layout controls what paths look like and how Spack ensures that each uniqe spec gets its own unique directory (or not, though we don't recommend that). The database is a signle file that caches metadata for the entire Spack installation.  It prevents us from having to spider the install tree to figure out what's there."
msgstr ""

#: ../spack/lib/spack/spack/store.py:docstring of spack.store.Store:11
# 4e1f9bd3124943bdb788cf3885619190
msgid "path to the root of the install tree"
msgstr ""

#: ../spack/lib/spack/spack/store.py:docstring of spack.store.Store:13
# b06e8d52da614f6aa27cb9415bc1d09d
msgid "expression according to guidelines in ``spack.util.path`` that describes how to construct a path to a package prefix in this store"
msgstr ""

#: ../spack/lib/spack/spack/store.py:docstring of spack.store.Store:17
# 6e868471671c43a582d8ef08c5bc2288
msgid "length of the hashes used in the directory layout; spec hash suffixes will be truncated to this length"
msgstr ""

#: ../spack/lib/spack/spack/store.py:docstring of spack.store.Store.reindex:1
# f4b54757979740e1aac7333e665b5b54
msgid "Convenience function to reindex the store DB with its own layout."
msgstr ""

#: ../spack/lib/spack/spack/store.py:docstring of spack.store.default_root:1
# 129d0075c86c4206a997fc1a412a9b80
msgid "default installation root, relative to the Spack install path"
msgstr ""

#: ../spack/lib/spack/spack/store.py:docstring of spack.store.store:1
# 49043b557bc94f75b4c7fe92c995c072
msgid "Singleton store instance"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:337
# a0947dfa58094fb28f7f2cb9400a498e
msgid "spack.tengine module"
msgstr ""

#: ../spack/lib/spack/spack/tengine.py:docstring of spack.tengine.Context:1
# 12022eaf46f94369b3af6151222faaf9
msgid "Base class for context classes that are used with the template engine."
msgstr ""

#: ../spack/lib/spack/spack/tengine.py:docstring of spack.tengine.Context.to_dict:1
# c78b0246455d4730856f99a78e7f5691
msgid "Returns a dictionary containing all the context properties."
msgstr ""

#: ../spack/lib/spack/spack/tengine.py:docstring of spack.tengine.ContextMeta:1
# a3583052ebac41ca8d13e1e0b880e5c1
msgid "Meta class for Context. It helps reducing the boilerplate in client code."
msgstr ""

#: ../spack/lib/spack/spack/tengine.py:docstring of spack.tengine.ContextMeta.context_property:1
# 1fd5ae883a364b9595b2cfe269ffb86e
msgid "Decorator that adds a function name to the list of new context properties, and then returns a property."
msgstr ""

#: ../spack/lib/spack/spack/tengine.py:docstring of spack.tengine.context_property:1
# fea1783fe97143e59f9f02f8d6eeb07d
msgid "A saner way to use the decorator"
msgstr ""

#: ../spack/lib/spack/spack/tengine.py:docstring of spack.tengine.make_environment:1
# 4439558a0e784746be89cb3e3fee723b
msgid "Returns an configured environment for template rendering."
msgstr ""

#: ../spack/lib/spack/spack/tengine.py:docstring of spack.tengine.prepend_to_line:1
# cb1953f46653407e887a5d9a33a1cb57
msgid "Prepends a token to each line in text"
msgstr ""

#: ../spack/lib/spack/spack/tengine.py:docstring of spack.tengine.quote:1
# 564e29e8d70b4ee8a894b4811c2b6724
msgid "Quotes each line in text"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:345
# cca8af7cbc61405d9d46f3d2b4b11bf9
msgid "spack.url module"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url:1
# cbdc3fab940941e79dead65529f49648
msgid "This module has methods for parsing names and versions of packages from URLs. The idea is to allow package creators to supply nothing more than the download location of the package, and figure out version and name information from there."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url:6
# 56ba3e06b0104553ac1aa4e760b93e4f
msgid "**Example:** when spack is given the following URL:"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url:8
# b0332b1a7e9841ccb020184681a2d3c4
msgid "https://www.hdfgroup.org/ftp/HDF/releases/HDF4.2.12/src/hdf-4.2.12.tar.gz"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url:10
# e0d8894e618f4baea605f3ca04ea0f09
msgid "It can figure out that the package name is ``hdf``, and that it is at version ``4.2.12``. This is useful for making the creation of packages simple: a user just supplies a URL and skeleton code is generated automatically."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url:14
# db1ef6c7105541f0bf9848840d4d97cc
msgid "Spack can also figure out that it can most likely download 4.2.6 at this URL:"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url:16
# a6904d28a53147e49c99f95166efd565
msgid "https://www.hdfgroup.org/ftp/HDF/releases/HDF4.2.6/src/hdf-4.2.6.tar.gz"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url:18
# 4cde127151c645c880d2804d09dde602
msgid "This is useful if a user asks for a package at a particular version number; spack doesn't need anyone to tell it where to get the tarball even though it's never been told about that version before."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.UndetectableNameError:1
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.UndetectableVersionError:1
# 8b6adba22e24440db89a27bc1c4cecc0
# aaa6c016992646afb02cddf1b7afac30
msgid "Bases: :class:`spack.url.UrlParseError`"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.UndetectableNameError:1
# 3be7e76d2dd14a92883fe28497557820
msgid "Raised when we can't parse a package name from a string."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.UndetectableVersionError:1
# 3bd3f717d04f4ef596ee73ad598be418
msgid "Raised when we can't parse a version from a string."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.UrlParseError:1
# 18a514baf8da4844a83d100ff88a8d23
msgid "Raised when the URL module can't parse something correctly."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.color_url:1
# 9c058f716a9841f99b16309bdf5b1396
msgid "Color the parts of the url according to Spack's parsing."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.color_url:8
# d322b9e1bcd645ee9a84fab3939270f9
msgid "Colors are:"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.color_url:0
# 441b3ba4d42348aa82730cbc8d8d7fd4
msgid "Cyan: The version found by :func:`parse_version_offset`."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.color_url:0
# f43c45038e4946789bc471d7c01fb054
msgid "Red:  The name found by :func:`parse_name_offset`."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.color_url:0
# e2fa0ebf0d4147e9a07995d0dea2768c
msgid "Green:   Instances of version string from :func:`substitute_version`."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.color_url:0
# 5f5ad0c49e3c4db2bcf9decc1578bef1
msgid "Magenta: Instances of the name (protected from substitution)."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.color_url:10
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name:3
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_and_version:4
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:3
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_version:3
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:3
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:18
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:15
# 09f6f46bf03342d19eaa63b0732e9624
# 5ecc419b61284af5af531af29ed1c373
# 2796658b62f64f22927f6b4a010d8178
# f2174db00d874dee8df67533aa93d9b7
# 5e182cca827f42e4844735b9507d07da
# 18240321b79a4a1b8fcb86597b18c9a1
# 8aee775dd8854ee3b76d4091888ec978
# 6d24cf718bfd4bc198f4bf470023531e
msgid "The filename or URL for the package"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.color_url:12
# de154bbffcda4b948d73f326cebff71f
msgid "Append parse errors at end of string."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.color_url:14
# 38cb8a18b95a49ba8479856a4d4a51ff
msgid "Color substitutions as well as parsed name/version."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.cumsum:1
# 2d1a4086a3fa45399de6aa714b309422
msgid "Return cumulative sum of result of fn on each element in elts."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.determine_url_file_extension:1
# 4aceb68a0b30471594124de4fec6f5f1
msgid "This returns the type of archive a URL refers to.  This is sometimes confusing because of URLs like:"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.determine_url_file_extension:4
# f7547a08b3eb433f85a52f4fca261bff
msgid "https://github.com/petdance/ack/tarball/1.93_02"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.determine_url_file_extension:6
# fd5e32a8b3d442ada49ce1e609d57a2b
msgid "Where the URL doesn't actually contain the filename.  We need to know what type it is so that we can appropriately name files in mirrors."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.find_all:1
# e2f5e182b8f74bc3b32ed87141ee4817
msgid "Returns a list containing the indices of every occurrence of substring in string."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.find_list_url:1
# c6cf4005483a4b32a915abf65fb7a050
msgid "Finds a good list URL for the supplied URL."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.find_list_url:3
# 36846215d29e4754bcd8ef23237e000f
msgid "By default, returns the dirname of the archive path."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.find_list_url:5
# 218a491b369e430d89f26ac2833a406e
msgid "Provides special treatment for the following websites, which have a unique list URL different from the dirname of the download URL:"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.find_list_url:9
# ddac5575663745d28e0c87b12a9da143
msgid "GitHub"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.find_list_url:9
# 4f952b5bdc9340e1836eed5c970b0ad8
msgid "https://github.com/<repo>/<name>/releases"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.find_list_url:10
# 2558c3feff374a1bbecd0e52052ccbcc
msgid "GitLab"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.find_list_url:10
# 3f36d213c6064eba83979e3acb7a517e
msgid "https://gitlab.\\*/<repo>/<name>/tags"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.find_list_url:11
# d30b82e5d6874e3aa100b26f762b3a78
msgid "BitBucket"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.find_list_url:11
# 74e0b5fb5e64438a837e05da12388d28
msgid "https://bitbucket.org/<repo>/<name>/downloads/?tab=tags"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.find_list_url:12
# 3f44179122c24e71b2214a8a86d824f0
msgid "CRAN"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.find_list_url:12
# fa69cc65a6cb4797b92386ad7cfe2d6a
msgid "https://\\*.r-project.org/src/contrib/Archive/<name>"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.find_list_url:15
# bda1ece1a0e54785914fe6610c817083
msgid "The download URL for the package"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.find_list_url:18
# 4d935eadd1b14b89bae191eaa0405080
msgid "The list URL for the package"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.insensitize:1
# 9e922ff3e492462a8e75adde5227a526
msgid "Change upper and lowercase letters to be case insensitive in the provided string.  e.g., 'a' becomes '[Aa]', 'B' becomes '[bB]', etc.  Use for building regexes."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name:1
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:1
# dd0e9456b7094ea4a126966128027ad6
# 51b60ca3c02f4673b3ffefa475da44ec
msgid "Try to determine the name of a package from its filename or URL."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name:5
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:5
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_version:6
# 319c66f215fe43deadfc93989fd4a071
# 4f8306e07c8a43b790b93aa72429d913
# 7fdd70d1d21b4755ac4d68e52cc543fc
msgid "The version of the package"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name:8
# 16e4e41b96aa49da9ea32bfc575461ec
msgid "The name of the package"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name:11
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_and_version:12
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:18
# 178a856c2a2e4af59e57557dde31542a
# 8c45ba47ff774aa9ab624be79ddd2234
# ee870fb6eb3446bcb5db7feed25bc750
msgid ":exc:`UndetectableNameError` -- If the URL does not match any regexes"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_and_version:1
# b2fc8a0ab1244716a0ac0b87e01b9ac5
msgid "Try to determine the name of a package and extract its version from its filename or URL."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_and_version:7
# 672687507f3e403195e49bf991bea95f
msgid "The name of the package The version of the package"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_and_version:11
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_version:9
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:16
# a633728b3236493f8d4549ef483d0ffa
# dad6568c0e2e4a7c8c89f9e49b63284e
# bda1e69602894d979702038ce4ae702c
msgid ":exc:`UndetectableVersionError` -- If the URL does not match any regexes"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:8
# ea9ce3aa2f4f4c6d98bb9e814851aab1
msgid "A tuple containing:     name of the package,     first index of name,     length of name,     the index of the matching regex     the matching regex"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:14
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:12
# 50a3ec299e6b45e3a0b0c865facd648b
# 8665d8671e6a4de39fa2d151f9c00712
msgid "A tuple containing:"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:11
# f9d5af2f77a94f508b5d0af32e868f95
msgid "name of the package, first index of name, length of name, the index of the matching regex the matching regex"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_version:1
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:1
# 2b69faece2d14e56a376f2fb6b302cfa
# 1554fea1f30945878528bcb8b1e5c750
msgid "Try to extract a version string from a filename or URL."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:6
# b6490895c1024df0a68df65e578e7292
msgid "A tuple containing:     version of the package,     first index of version,     length of version string,     the index of the matching regex     the matching regex"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:9
# 68d31d1e3f504233b0057b537ca70a2c
msgid "version of the package, first index of version, length of version string, the index of the matching regex the matching regex"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.split_url_extension:1
# f463a17954124002b8b44970418bc9e6
msgid "Some URLs have a query string, e.g.:"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.split_url_extension:3
# 5147336d93a140d19bf139945eb11a09
msgid "https://github.com/losalamos/CLAMR/blob/packages/PowerParser_v2.0.7.tgz?raw=true"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.split_url_extension:4
# c48fb32f10084fb8b55edbcdaad32047
msgid "http://www.apache.org/dyn/closer.cgi?path=/cassandra/1.2.0/apache-cassandra-1.2.0-rc2-bin.tar.gz"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.split_url_extension:5
# b76efa431c97430cb86e7a8074b9c31f
msgid "https://gitlab.kitware.com/vtk/vtk/repository/archive.tar.bz2?ref=v7.0.0"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.split_url_extension:7
# 42a9507a1a7e4eb09348e54f6ba6e9e3
msgid "In (1), the query string needs to be stripped to get at the extension, but in (2) & (3), the filename is IN a single final query argument."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.split_url_extension:11
# a522cf53a8f14591a06c650be9b1586a
msgid "This strips the URL into three pieces: ``prefix``, ``ext``, and ``suffix``. The suffix contains anything that was stripped off the URL to get at the file extension.  In (1), it will be ``'?raw=true'``, but in (2), it will be empty. In (3) the suffix is a parameter that follows after the file extension, e.g.:"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.split_url_extension:17
# 03dd6df389014a338300da4ddc1680f8
msgid "``('https://github.com/losalamos/CLAMR/blob/packages/PowerParser_v2.0.7', '.tgz', '?raw=true')``"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.split_url_extension:18
# fcff0a3a5f124b16afb4fc5b4bd697b7
msgid "``('http://www.apache.org/dyn/closer.cgi?path=/cassandra/1.2.0/apache-cassandra-1.2.0-rc2-bin', '.tar.gz', None)``"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.split_url_extension:19
# 3ce01a99e597414b8401d212c23775f6
msgid "``('https://gitlab.kitware.com/vtk/vtk/repository/archive', '.tar.bz2', '?ref=v7.0.0')``"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:1
# 636d24c7cd7747609f717367a30e9944
msgid "Most tarballs contain a package name followed by a version number. However, some also contain extraneous information in-between the name and version:"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:5
# d767a6c9bc3d465cbe6d136b74c24615
msgid "``rgb-1.0.6``"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:6
# 65beef6f2818434e8be43bbcb8811403
msgid "``converge_install_2.3.16``"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:7
# 2e71acaa05294812b6a2dd062d3ed7d2
msgid "``jpegsrc.v9b``"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:9
# 6ed7c55574644f20b7aed814312e48fc
msgid "These strings are not part of the package name and should be ignored. This function strips the version number and any extraneous suffixes off and returns the remaining string. The goal is that the name is always the last thing in ``path``:"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:14
# e11720dac5c24ac6a8dfd18230ce9b36
msgid "``rgb``"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:15
# 1c802049d7644e069befd56f353cc5a2
msgid "``converge``"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:16
# 6a3e52a753724e43aa8990195605dace
msgid "``jpeg``"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:20
# cc308f9d77a3461591b9a4053a33c0aa
msgid "The version detected for this URL"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:23
#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:18
# 80a53efe0f0847f88f3179350896195c
# 9331d429a79948169253d5def45cd85f
msgid "The ``path`` with any extraneous suffixes removed"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:1
# 49cf0b2e80294630940e37217cc404b3
msgid "Some tarballs contain extraneous information after the version:"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:3
# 8482f7ccf05642039342332ee35ef6b1
msgid "``bowtie2-2.2.5-source``"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:4
# 9274ca0be3914ec0ab9da75a82ad82f6
msgid "``libevent-2.0.21-stable``"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:5
# 642574a4cd1e44af8e09ed49eb5920b3
msgid "``cuda_8.0.44_linux.run``"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:7
# b7187ff87ffa45e9a07db367990ef9c1
msgid "These strings are not part of the version number and should be ignored. This function strips those suffixes off and returns the remaining string. The goal is that the version is always the last thing in ``path``:"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:11
# 59c5ddabec7e460b93f5db172e35160d
msgid "``bowtie2-2.2.5``"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:12
# f504a688f4884e3687e7badad99c1380
msgid "``libevent-2.0.21``"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:13
# 6d7d6ff7361d45f4899a9d5b4e01c084
msgid "``cuda_8.0.44``"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.substitute_version:1
# 106ec62b397745ed8d3858b14c8f9182
msgid "Given a URL or archive name, find the version in the path and substitute the new version for it.  Replace all occurrences of the version *if* they don't overlap with the package name."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.substitute_version:5
# 47ff43c0758c4747baa9496caed09f42
msgid "Simple example:"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.substitute_version:12
# 26fd4720d8c94cfc8537ca1e23eca867
msgid "Complex example:"
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.substitution_offsets:1
# 8349a066b1364ffe9bad8e67cb08ee7c
msgid "This returns offsets for substituting versions and names in the provided path.  It is a helper for :func:`substitute_version`."
msgstr ""

#: ../spack/lib/spack/spack/url.py:docstring of spack.url.wildcard_version:1
# d3e2d0e44a0046c99ed7817fa0fec786
msgid "Find the version in the supplied path, and return a regular expression that will match this path with any version in its place."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:353
# 7721c62090b044c4b7a652ad14569541
msgid "spack.variant module"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant:1
# 245ddd5b43a341f491e5b785c8c5a5bd
msgid "The variant module contains data structures that are needed to manage variants both in packages and in specs."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant:1
# 8f880e9e26b84ababe30d1cde73025f4
msgid "A variant that has not yet decided who it wants to be. It behaves like a multi valued variant which **could** do things."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant:4
# cb4f5c002c78435188a79b408072a54f
msgid "This kind of variant is generated during parsing of expressions like ``foo=bar`` and differs from multi valued variants because it will satisfy any other variant with the same name. This is because it **could** do it if it grows up to be a multi valued variant with the right set of values."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.compatible:1
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.compatible:1
# 53d2f0f1766e48f39bdfa299ffc1c037
# 27262926a35b4f689853974a4fb4c74e
msgid "Returns True if self and other are compatible, False otherwise."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.compatible:3
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.compatible:3
# 530d18148a524e50ab446d57fb8695e4
# 5c92a958b5c5489a9e189f628c933878
msgid "As there is no semantic check, two VariantSpec are compatible if either they contain the same value or they are both multi-valued."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.compatible:6
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.compatible:6
# e64357d494fe48bbadd8df0d72300846
# 377e1617b2f44e7aae3c11e0b1125879
msgid "instance against which we test compatibility"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.constrain:1
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.constrain:1
# 8d5f3703fa4941e9b361f6b142fdbcbd
# 7a92802b869646b88e4f6fe63ffadb51
msgid "Modify self to match all the constraints for other if both instances are multi-valued. Returns True if self changed, False otherwise."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.constrain:5
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.constrain:5
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.constrain:5
# 1cb472f387c4461c8ba68586743127fa
# ede29e07eacf4f63a469ca2142892d37
# 9941c5ef276f4e9088ada50063d1efc0
msgid "instance against which we constrain self"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.copy:1
# bcb599b913364c8d9b8be23c8962672a
msgid "Returns an instance of a variant equivalent to self"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.copy:3
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.copy:3
# bb3f9d3e73de446280bee8a582060ab8
# 7c122e7b84a2411f88822f44e1499501
msgid "a copy of self"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.from_node_dict:1
# d21d050bd424475ea737f976db1693d5
msgid "Reconstruct a variant from a node dict."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.satisfies:1
# 95b29d8c404545aeab499d9b974b01c6
msgid "Returns true if ``other.name == self.name``, because any value that other holds and is not in self yet **could** be added."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.satisfies:4
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.MultiValuedVariant.satisfies:4
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.satisfies:4
# d84f63ce91f245c68be9ab2f8df97a17
# a38fd26d8c8b4f79a00f57adf0d94e3c
# 85a58ee6861f41dead81086b3751805e
msgid "constraint to be met for the method to return True"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.value:1
# f629a7aa656e4eed9ed5a13b6cbd162c
msgid "Returns a tuple of strings containing the values stored in the variant."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.value:4
# 1b2604f8086746db8bee13ab0b1426b7
msgid "values stored in the variant"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.yaml_entry:1
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.yaml_entry:1
# 9734a54a3f164a2ab0575f5b037d0009
# cdc511e772554b96935111fd6817c946
msgid "Returns a key, value tuple suitable to be an entry in a yaml dict."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.yaml_entry:3
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.yaml_entry:3
# 6a4b7ce738cb44969fcd1520676e8286
# 893b0276a0a64d40b3445a166f5cd2ea
msgid "(name, value_representation)"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.BoolValuedVariant:1
# 8ddbe15b94d949b9a6529c058b908872
msgid "Bases: :class:`spack.variant.SingleValuedVariant`"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.BoolValuedVariant:1
# 13acfc34444643a1a8b1c9620b720b7d
msgid "A variant that can hold either True or False."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues:1
# 89a59860870d4065bf0510586893634e
msgid "Bases: :class:`collections.abc.Sequence`"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues:1
# 0db029a57492427aadc191c1bb91e977
msgid "Allows combinations from one of many mutually exclusive sets."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues:3
# 3044570e280f4568baa7865ff0ec6162
msgid "The value ``('none',)`` is reserved to denote the empty set and therefore no other set can contain the item ``'none'``."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues:6
# 549cf06459944c46bfbc6bcf61cc92b0
msgid "mutually exclusive sets of values"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues.allow_empty_set:1
# 12c0e54691a148c0b7939bf381bd916d
msgid "Adds the empty set to the current list of disjoint sets."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues.feature_values:1
# 7e1c1913e35349b9a12e5c09db71fb02
msgid "Attribute used to track values which correspond to features which can be enabled or disabled as understood by the package's build system."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues.prohibit_empty_set:1
# 437721d97d184c6c8d528c5342e9abba
msgid "Removes the empty set from the current list of disjoint sets."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues.with_default:1
# 04ce7e33b3f54a06810d3d68f34dfe49
msgid "Sets the default value and returns self."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues.with_error:1
# 2675b8dc3a3e4abfa0310fdf776582b8
msgid "Sets the error message format and returns self."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues.with_non_feature_values:1
# 5a6bdd4b5b4046b3a184c1c7727d661e
msgid "Marks a few values as not being tied to a feature."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.InconsistentValidationError:1
# a2c297b0e80943e392040b0a3c60f760
msgid "Raised if the wrong validator is used to validate a variant."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.InvalidVariantValueError:1
# 89258238fad549d987aa7f880d08d47d
msgid "Raised when a valid variant has at least an invalid value."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.MultiValuedVariant:1
# e8dee00e802d43a38cc2bfc76da49e2b
msgid "Bases: :class:`spack.variant.AbstractVariant`"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.MultiValuedVariant:1
# 893a5e794056444bbbb974d5f058b1ac
msgid "A variant that can hold multiple values at once."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.MultiValuedVariant.satisfies:1
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.satisfies:1
# e448f114f0b64cab87a800f22ec57b02
# 65afcf1f91dc4ac38823b2da8a836dd1
msgid "Returns true if ``other.name == self.name`` and ``other.value`` is a strict subset of self. Does not try to validate."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.MultipleValuesInExclusiveVariantError:1
# c821b018335e4337a2e65cefe2610c92
msgid "Bases: :class:`spack.error.SpecError`, :class:`ValueError`"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.MultipleValuesInExclusiveVariantError:1
# 4a457a154908406aa908df649b67b582
msgid "Raised when multiple values are present in a variant that wants only one."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant:1
# 8fdfecbd5b9d4d3fbda4dd1aa61fab80
msgid "Bases: :class:`spack.variant.MultiValuedVariant`"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant:1
# c7aa2d7083b54e928eadffa6af86fc0d
msgid "A variant that can hold multiple values, but one at a time."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant:1
# c486160076224168a37ca494e14d4039
msgid "Represents a variant in a package, as declared in the variant directive."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.allowed_values:1
# 55222419179d4d8696bfa695f2b09858
msgid "Returns a string representation of the allowed values for printing purposes"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.allowed_values:4
# ea9df1ef34c04836ba0c296641ed0c08
msgid "representation of the allowed values"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_default:1
# ec982a7500654ea78dc54f3ef3e9a61c
msgid "Factory that creates a variant holding the default value."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_default:3
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_variant:6
# 0482c46a56814c65b1f168157583bfb7
# 33df049729c14a84919b16b8980ea19c
msgid "instance of the proper variant"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_variant:1
# c353555aa6104299836a4947c92d9f30
msgid "Factory that creates a variant holding the value passed as a parameter."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_variant:4
# 967a96a2b7ae4d2cb980bfef42846910
msgid "value that will be hold by the variant"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.validate_or_raise:1
# 258bd700bd144a2eadb3143c8ddb2d62
msgid "Validate a variant spec against this package variant. Raises an exception if any error is found."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.validate_or_raise:4
# a3f23684b8c445c0af3c587e27ef4084
msgid "instance to be validated"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.validate_or_raise:6
# 4ceef0d96f064c64b8e443bb536691a7
msgid "the package that required the validation, if available"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.validate_or_raise:10
# 78939d24555345c5865fd6197a0d5f62
msgid ":exc:`InconsistentValidationError` -- if ``vspec.name != self.name``"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.validate_or_raise:11
# e31a767e082b49508f6b050caba97f23
msgid ":exc:`MultipleValuesInExclusiveVariantError` -- if ``vspec`` has multiple values but ``self.multi == False``"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.validate_or_raise:13
# 61063dbffa1c47a68b32174e9c358214
msgid ":exc:`InvalidVariantValueError` -- if ``vspec.value`` contains invalid values"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.Variant.variant_cls:1
# 989b75dd65f5473fad868ab3cf476171
msgid "Proper variant class to be used for this configuration."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap:1
# 45d3b3ec117143e084fb7c4ced7c4afd
msgid "Bases: :class:`llnl.util.lang.HashableMap`"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap:1
# b0279f17765f4a60bbca70e5b19d0597
msgid "Map containing variant instances. New values can be added only if the key is not already present."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.concrete:1
# 17d13c264b2b4a268784063aa1a68ccf
msgid "Returns True if the spec is concrete in terms of variants."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.constrain:1
# 08b7b4fb26094759a4c16b3cd5c169cc
msgid "Add all variants in other that aren't in self to self. Also constrain all multi-valued variants that are already present. Return True if self changed, False otherwise"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.copy:1
# cefe5198264f465ab2f6b14cca042fa7
msgid "Return an instance of VariantMap equivalent to self."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.satisfies:1
# 7fdae0b524af43ed9067b055af6d4f4b
msgid "Returns True if this VariantMap is more constrained than other, False otherwise."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.satisfies:4
# 8bf3df58ff5948408d39c4f83adef44d
msgid "VariantMap instance to satisfy"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.satisfies:6
# 21831b22f2b5479eb1fb281177fe7023
msgid "if True return False if a key is in other and not in self, otherwise discard that key and proceed with evaluation"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.substitute:1
# 6a45c467a1bb412dac48269faecb6cbe
msgid "Substitutes the entry under ``vspec.name`` with ``vspec``."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.substitute:3
# b130bc0e5b1d4cca985acc2cfb6ff8ff
msgid "variant spec to be substituted"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.any_combination_of:1
# 14cfd406b9374aec968c2a97bf926ec8
msgid "Multi-valued variant that allows any combination of the specified values, and also allows the user to specify 'none' (as a string) to choose none of them."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.any_combination_of:5
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.disjoint_sets:5
# ea972311a72d4954bd45eb79c7004fc9
# b74b962d7f814013a0cdc10b593a3269
msgid "It is up to the package implementation to handle the value 'none' specially, if at all."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.any_combination_of:8
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.auto_or_any_combination_of:4
# bc0a27d188234777a2262698434c8885
# d8f358d583f84454944815c439a6d32c
msgid "allowed variant values"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.any_combination_of:10
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.auto_or_any_combination_of:6
#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.disjoint_sets:10
# 516e6dabb7f0416ea6b5839525cabae3
# 48a62f62fff74ee3bd189680a6647d7b
# 9039676635fa4198884698c254b1a035
msgid "a properly initialized instance of DisjointSetsOfValues"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.auto_or_any_combination_of:1
# bf153258624e42d7a91232f750d219fa
msgid "Multi-valued variant that allows any combination of a set of values (but not the empty set) or 'auto'."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.disjoint_sets:1
# eea644ed2ba5440cbf40cf5b44744923
msgid "Multi-valued variant that allows any combination picking from one of multiple disjoint sets of values, and also allows the user to specify 'none' (as a string) to choose none of them."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.implicit_variant_conversion:1
# e70ec308673e49819bad24945ff28f24
msgid "Converts other to type(self) and calls method(self, other)"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.implicit_variant_conversion:3
# f94eeaa0e25149468a206fca38cddd9c
msgid "any predicate method that takes another variant as an argument"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.implicit_variant_conversion:5
# 498a5b81ae364771881886f5666bf7ba
msgid "Returns: decorated method"
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.substitute_abstract_variants:1
# eea0447ca9cb43748da074913c96e46e
msgid "Uses the information in `spec.package` to turn any variant that needs it into a SingleValuedVariant."
msgstr ""

#: ../spack/lib/spack/spack/variant.py:docstring of spack.variant.substitute_abstract_variants:4
# 4f603fc78f654111a5635f2824e3d4e9
msgid "spec on which to operate the substitution"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:361
# 3c37d081008c475aa532035698efc32d
msgid "spack.version module"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version:1
# 0d39a488144c4e6c97ad005c9075c870
msgid "This module implements Version and version-ish objects.  These are:"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version:3
# c2479992fa724039bd04598c7d54bd6e
msgid "Version"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version:4
# 012b63827a9249f1808d148ca9ecb4d2
msgid "A single version of a package."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version:5
# 84e0887d2eea49678c34c2dd54bf0ea3
msgid "VersionRange"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version:6
# 016c9fedac3c4a3f962ccb5a6ee57c20
msgid "A range of versions of a package."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version:8
# 9d7486a51ddc47ad85c681b361668508
msgid "VersionList"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version:8
# 17e003e047bc4d008c32f41b76a18a42
msgid "A list of Versions and VersionRanges."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version:10
# f3cf03e237d74a59829b9a2c4b042993
msgid "All of these types support the following operations, which can be called on any of the types::"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version:1
# bad1016c69d4492284f810e2293f5e6d
msgid "Class to represent versions"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.dashed:1
# dce2c271d8c3433b85e296d35e246426
msgid "The dashed representation of the version."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.dashed:3
# 220d4c90aaf94fe684da51be9b7b120f
msgid "Example: >>> version = Version('1.2.3b') >>> version.dashed Version('1-2-3b')"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.dashed:8
# b97be431f1e847ebabbf7dc483bebb08
msgid "The version with separator characters replaced by dashes"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.dotted:1
# f3c51185a4e841e594f4a7595a9dba2f
msgid "The dotted representation of the version."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.dotted:3
# eb852b4183744b4682a98a5b51a1c59b
msgid "Example: >>> version = Version('1-2-3b') >>> version.dotted Version('1.2.3b')"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.dotted:8
# 963631054fa8475bb8305a0109924ab1
msgid "The version with separator characters replaced by dots"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.is_predecessor:1
# 678a85784b784876bd11cbd89ffebb0a
msgid "True if the other version is the immediate predecessor of this one. That is, NO versions v exist such that: (self < v < other and v not in self)."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.isdevelop:1
# 73f2da10e29b4b31974b468abc6ac584
msgid "Triggers on the special case of the `@develop-like` version."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.joined:1
# 3d65ca90619249ab9ffb4f6ef3c1e80b
msgid "The joined representation of the version."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.joined:3
# bde3f010548b4614af86f63be18f676e
msgid "Example: >>> version = Version('1.2.3b') >>> version.joined Version('123b')"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.joined:8
# 701b373c364b414c8b95a76f119cf92e
msgid "The version with separator characters removed"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.satisfies:1
# 4814520707b74ff49196e209852c3f3f
msgid "A Version 'satisfies' another if it is at least as specific and has a common prefix.  e.g., we want gcc@4.7.3 to satisfy a request for gcc@4.7 so that when a user asks to build with gcc@4.7, we can find a suitable compiler."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.underscored:1
# c1f73095dc9e41b4bf3a56e747f752d9
msgid "The underscored representation of the version."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.underscored:3
# 96a066e8fed14eec9fc3b6594f436f22
msgid "Example: >>> version = Version('1.2.3b') >>> version.underscored Version('1_2_3b')"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.underscored:8
# d18318afa4844de6913fc3aa976a2b48
msgid "The version with separator characters replaced by     underscores"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.underscored:10
# 349d39c6667d47f8bed2eb391b490c25
msgid "The version with separator characters replaced by"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.underscored:11
# 21a3f11186cc4cbb907908f1df1b08bb
msgid "underscores"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.up_to:1
# 8047741ef3614ec7b2e093b922945520
msgid "The version up to the specified component."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.up_to:3
# bd6a3ab6eaa5443d8d29fe92631c9b8a
msgid "Examples: >>> version = Version('1.23-4b') >>> version.up_to(1) Version('1') >>> version.up_to(2) Version('1.23') >>> version.up_to(3) Version('1.23-4') >>> version.up_to(4) Version('1.23-4b') >>> version.up_to(-1) Version('1.23-4') >>> version.up_to(-2) Version('1.23') >>> version.up_to(-3) Version('1')"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.Version.up_to:20
# 110951da76c840d09dee9e785b11d9da
msgid "The first index components of the version"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionRange.satisfies:1
# 00822bc66c514b3e805c4cc999d774a2
msgid "A VersionRange satisfies another if some version in this range would satisfy some version in the other range.  To do this it must either:"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionRange.satisfies:5
# 589b2f39291b4351829a032db9b31bf1
msgid "Overlap with the other range"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionRange.satisfies:6
# b55a70ceacc341cb8d2ba74db6eb6605
msgid "The start of this range satisfies the end of the other range."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionRange.satisfies:8
# 1634ef222d1347e487e612425ab9a9c8
msgid "This is essentially the same as overlaps(), but overlaps assumes that its arguments are specific.  That is, 4.7 is interpreted as 4.7.0.0.0.0... .  This function assumes that 4.7 would be satisfied by 4.7.3.5, etc."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionRange.satisfies:13
# 29026e8f6f2d435baaf7c0c71e95eff8
msgid "Rationale:"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionRange.satisfies:15
# b4f8e62b02b847c78f704586e6d8d216
msgid "If a user asks for gcc@4.5:4.7, and a package is only compatible with gcc@4.7.3:4.8, then that package should be able to build under the constraints.  Just using overlaps() would not work here."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionRange.satisfies:19
# 71ffe146f8c046568f27a100e03df14b
msgid "Note that we don't need to check whether the end of this range would satisfy the start of the other range, because overlaps() already covers that case."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionRange.satisfies:23
# 47baa98722464540879f8bc48ad1e12e
msgid "Note further that overlaps() is a symmetric operation, while satisfies() is not."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionList:1
# 1a6da495f935405581a6792ebe308623
msgid "Sorted, non-redundant list of Versions and VersionRanges."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionList.from_dict:1
# 7527e0913c1c4d22aa167aa276933117
msgid "Parse dict from to_dict."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionList.highest:1
# 095918fb208d48f995aa9b659bc8b489
msgid "Get the highest version in the list."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionList.intersect:1
# 40c57e37b77a44ef95190f83e3677f27
msgid "Intersect this spec's list with other."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionList.intersect:3
# 845819642ed74e3aa447d8feb05ccdbf
msgid "Return True if the spec changed as a result; False otherwise"
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionList.lowest:1
# d9d6ca26dd2247888e4c27c2e368ca3f
msgid "Get the lowest version in the list."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionList.satisfies:1
# b08b311f10e6444ab935c4b0958b6400
msgid "A VersionList satisfies another if some version in the list would satisfy some version in the other list.  This uses essentially the same algorithm as overlaps() does for VersionList, but it calls satisfies() on member Versions and VersionRanges."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionList.satisfies:7
# df250b9eba684c57aa0cbddd9dc7d73c
msgid "If strict is specified, this version list must lie entirely *within* the other in order to satisfy it."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.VersionList.to_dict:1
# fac12b67abd44c8ab88445f92b0a2dcc
msgid "Generate human-readable dict for YAML."
msgstr ""

#: ../spack/lib/spack/spack/version.py:docstring of spack.version.ver:1
# 2ea9740c19bc453eaba9ec6e350f18ee
msgid "Parses a Version, VersionRange, or VersionList from a string or list of strings."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:370
# 282e669da7ab4e908eb5c31cee3c6141
msgid "Module contents"
msgstr ""

#: ../spack/lib/spack/spack/__init__.py:docstring of spack.spack_version_info:1
# c68f69d35e3e4bd9829283d789abba60
msgid "major, minor, patch version for Spack, in a tuple"
msgstr ""

#: ../spack/lib/spack/spack/__init__.py:docstring of spack.spack_version:1
# 2918f04cabc3401f8616cdb217094584
msgid "String containing Spack version joined with .'s"
msgstr ""

