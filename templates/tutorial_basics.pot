# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2019, Lawrence Livermore National Laboratory.
# This file is distributed under the same license as the Spack package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Spack 0.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-23 08:25-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../spack/lib/spack/docs/tutorial_basics.rst:10
# 942f9107c4df47e395578c57b32e9cc3
msgid "Basic Installation Tutorial"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:12
# 7b59f0af47444447998c7b501ea0dae5
msgid "This tutorial will guide you through the process of installing software using Spack. We will first cover the `spack install` command, focusing on the power of the spec syntax and the flexibility it gives to users. We will also cover the `spack find` command for viewing installed packages and the `spack uninstall` command. Finally, we will touch on how Spack manages compilers, especially as it relates to using Spack-built compilers within Spack. We will include full output from all of the commands demonstrated, although we will frequently call attention to only small portions of that output (or merely to the fact that it succeeded). The provided output is all from an AWS instance running Ubuntu 16.04"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:28
# ee894ee02b484d1b95beacb2de135cec
msgid "Installing Spack"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:30
# 027ee065a8774421a2678a21ba289f1b
msgid "Spack works out of the box. Simply clone spack and get going. We will clone Spack and immediately checkout the most recent release, v0.12."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:50
# 0b88eb5b10344f038d47fdc85bd2ad74
msgid "Next add Spack to your path. Spack has some nice command line integration tools, so instead of simply appending to your ``PATH`` variable, source the spack setup script.  Then add Spack to your path."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:58
# 9b5d9529f1404b839f06be8cbf88f877
msgid "You're good to go!"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:62
# a38352ce044c44048e46230218855aa4
msgid "What is in Spack?"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:64
# 0c2b5af3863c40cb9e3f8ee73d54056a
msgid "The ``spack list`` command shows available packages."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:75
# 530204253c0e4a8f9122d233c48eee50
msgid "The ``spack list`` command can also take a query string. Spack automatically adds wildcards to both ends of the string. For example, we can view all available python packages."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:90
# 96a25178c44c41a683e2830591eab07a
msgid "Installing Packages"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:92
# da3fd58fe1fc4c9a8a1b748b15b67781
msgid "Installing a package with Spack is very simple. To install a piece of software, simply type ``spack install <package_name>``."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:113
# 8f306ae98d3340c693ae22c5200d041d
msgid "Spack can install software either from source or from a binary cache. Packages in the binary cache are signed with GPG for security. For the tutorial we have prepared a binary cache so you don't have to wait on slow compilation from source. To be able to install from the binary cache, we will need to configure Spack with the location of the binary cache and trust the GPG key that the binary cache was signed with."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:131
# 80eef53310a0494bac8778e2229c52e6
msgid "You'll learn more about configuring Spack later in the tutorial, but for now you will be able to install the rest of the packages in the tutorial from a binary cache using the same ``spack install`` command. By default this will install the binary cached version if it exists and fall back on installing from source."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:137
# c53556004fcb4631b6df3588fed3d8fa
msgid "Spack's spec syntax is the interface by which we can request specific configurations of the package. The ``%`` sigil is used to specify compilers."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:166
# 1a8156b9e9ee4d0b8d4c4a7b1b774b04
msgid "Note that this installation is located separately from the previous one. We will discuss this in more detail later, but this is part of what allows Spack to support arbitrarily versioned software."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:170
# 8b786f6ea985470885a7c4a098348beb
msgid "You can check for particular versions before requesting them. We will use the ``spack versions`` command to see the available versions, and then install a different version of ``zlib``."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:183
# 5cf722510b8049fd8b37a660454af640
msgid "The ``@`` sigil is used to specify versions, both of packages and of compilers."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:218
# 41e8052326a34a4997cf108e43b7d215
msgid "The spec syntax also includes compiler flags. Spack accepts ``cppflags``, ``cflags``, ``cxxflags``, ``fflags``, ``ldflags``, and ``ldlibs`` parameters.  The values of these fields must be quoted on the command line if they include spaces. These values are injected into the compile line automatically by the Spack compiler wrappers."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:241
# 852e853ee1774662b676ce15e0136681
msgid "The ``spack find`` command is used to query installed packages. Note that some packages appear identical with the default output. The ``-l`` flag shows the hash of each package, and the ``-f`` flag shows any non-empty compiler flags of those packages."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:277
# 3b3c8af5cc974a96bbfcea83c3a0b7d5
msgid "Spack generates a hash for each spec. This hash is a function of the full provenance of the package, so any change to the spec affects the hash. Spack uses this value to compare specs and to generate unique installation directories for every combinatorial version. As we move into more complicated packages with software dependencies, we can see that Spack reuses existing packages to satisfy a dependency only when the existing package's hash matches the desired spec."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:303
# 6fd27b3ebf334204990172f0ebe1ac70
msgid "Dependencies can be explicitly requested using the ``^`` sigil. Note that the spec syntax is recursive. Anything we could specify about the top-level package, we can also specify about a dependency using ``^``."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:336
# caf79efe908f488dabfeed512e1e444f
msgid "Packages can also be referred to from the command line by their package hash. Using the ``spack find -lf`` command earlier we saw that the hash of our optimized installation of zlib (``cppflags=\"-O3\"``) began with ``64mns5m``. We can now explicitly build with that package without typing the entire spec, by using the ``/`` sigil to refer to it by hash. As with other tools like git, you do not need to specify an *entire* hash on the command line.  You can specify just enough digits to identify a hash uniquely.  If a hash prefix is ambiguous (i.e., two or more installed packages share the prefix) then spack will report an error."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:364
# 889c455bd9ad4e0fbfc07cb5f1843a2d
msgid "The ``spack find`` command can also take a ``-d`` flag, which can show dependency information. Note that each package has a top-level entry, even if it also appears as a dependency."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:399
# c5d12506162b4e64bcbae051e7a18437
msgid "Let's move on to slightly more complicated packages. ``HDF5`` is a good example of a more complicated package, with an MPI dependency. If we install it \"out of the box,\" it will build with ``openmpi``."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:625
# 5378e53179a344ed9e68cbbfc5243080
msgid "Spack packages can also have build options, called variants. Boolean variants can be specified using the ``+`` and ``~`` or ``-`` sigils. There are two sigils for ``False`` to avoid conflicts with shell parsing in different situations. Variants (boolean or otherwise) can also be specified using the same syntax as compiler flags.  Here we can install HDF5 without MPI support."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:650
# e36d59677f0a4c029b162bc673596723
msgid "We might also want to install HDF5 with a different MPI implementation. While MPI is not a package itself, packages can depend on abstract interfaces like MPI. Spack handles these through \"virtual dependencies.\" A package, such as HDF5, can depend on the MPI interface. Other packages (``openmpi``, ``mpich``, ``mvapich``, etc.) provide the MPI interface.  Any of these providers can be requested for an MPI dependency. For example, we can build HDF5 with MPI support provided by mpich by specifying a dependency on ``mpich``. Spack also supports versioning of virtual dependencies. A package can depend on the MPI interface at version 3, and provider packages specify what version of the interface *they* provide. The partial spec ``^mpi@3`` can be safisfied by any of several providers."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:727
# d61a93c94354465a8e2312ccd8209189
msgid "We'll do a quick check in on what we have installed so far."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:850
# 29c0d9510d084ef79b5cb8ff6473c745
msgid "Spack models the dependencies of packages as a directed acyclic graph (DAG). The ``spack find -d`` command shows the tree representation of that graph.  We can also use the ``spack graph`` command to view the entire DAG as a graph."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:888
# ff888267f6b24df898c4378a56d7e9a4
msgid "You may also have noticed that there are some packages shown in the ``spack find -d`` output that we didn't install explicitly. These are dependencies that were installed implicitly. A few packages installed implicitly are not shown as dependencies in the ``spack find -d`` output. These are build dependencies. For example, ``libpciaccess`` is a dependency of openmpi and requires ``m4`` to build. Spack will build ``m4`` as part of the installation of ``openmpi``, but it does not become a part of the DAG because it is not linked in at run time. Spack handles build dependencies differently because of their different (less strict) consistency requirements. It is entirely possible to have two packages using different versions of a dependency to build, which obviously cannot be done with linked dependencies."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:901
# 59d2db16eebd4639803c0c88f00bbb25
msgid "``HDF5`` is more complicated than our basic example of zlib and openssl, but it's still within the realm of software that an experienced HPC user could reasonably expect to install given a bit of time. Now let's look at an even more complicated package."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1132
# b5475fd495774b0880ddfc3a282eabd8
msgid "Now we're starting to see the power of Spack. Trilinos in its default configuration has 23 top level dependecies, many of which have dependencies of their own. Installing more complex packages can take days or weeks even for an experienced user. Although we've done a binary installation for the tutorial, a source installation of trilinos using Spack takes about 3 hours (depending on the system), but only 20 seconds of programmer time."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1140
# a8fd62638e494a858fff480b449b2188
msgid "Spack manages constistency of the entire DAG. Every MPI dependency will be satisfied by the same configuration of MPI, etc. If we install ``trilinos`` again specifying a dependency on our previous HDF5 built with ``mpich``:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1259
# e77e93725ce14ac381b565e99643b0ab
msgid "We see that every package in the trilinos DAG that depends on MPI now uses ``mpich``."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1307
# f56839b43e29404bb2d26a7d92d1c541
msgid "As we discussed before, the ``spack find -d`` command shows the dependency information as a tree. While that is often sufficient, many complicated packages, including trilinos, have dependencies that cannot be fully represented as a tree. Again, the ``spack graph`` command shows the full DAG of the dependency information."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1436
# 976fb42a3b604d64a31c8054b8389aac
msgid "You can control how the output is displayed with a number of options."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1438
# ac7696f5b36e464399f7442d1e88ff1c
msgid "The ASCII output from ``spack graph`` can be difficult to parse for complicated packages. The output can be changed to the ``graphviz`` ``.dot`` format using the ``--dot`` flag."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1450
# 6d5904b904d64709b52994224201227f
msgid "Uninstalling Packages"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1452
# 94710337f846420f9d2409a7acd9c606
msgid "Earlier we installed many configurations each of zlib and tcl. Now we will go through and uninstall some of those packages that we didn't really need."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1484
# aaa05b8e0a474c5a903c684c82c334a8
msgid "We can uninstall packages by spec using the same syntax as install."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1509
# 4ebe6a6452724c259f3b577579920585
msgid "We can also uninstall packages by referring only to their hash."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1511
# 0224e34ba9484fa599690334e3e91586
msgid "We can use either ``-f`` (force) or ``-R`` (remove dependents as well) to remove packages that are required by another installed package."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1535
# 4694cd0bcec9448fb6862d4de79237a5
msgid "Spack will not uninstall packages that are not sufficiently specified. The ``-a`` (all) flag can be used to uninstall multiple packages at once."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1563
# 38fd5d496d204976b026013bd137664a
msgid "Advanced ``spack find`` Usage"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1565
# ec73ae173eac4fdda20c616677c29dd0
msgid "We will go over some additional uses for the ``spack find`` command not already covered in the :ref:`basics-tutorial-install` and :ref:`basics-tutorial-uninstall` sections."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1569
# abbeb1aa5bf14a44b08191a504b05a72
msgid "The ``spack find`` command can accept what we call \"anonymous specs.\" These are expressions in spec syntax that do not contain a package name. For example, ``spack find ^mpich`` will return every installed package that depends on mpich, and ``spack find cppflags=\"-O3\"`` will return every package which was built with ``cppflags=\"-O3\"``."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1588
# ed0c11d266f44922aaedff17950f5832
msgid "The ``find`` command can also show which packages were installed explicitly (rather than pulled in as a dependency) using the ``-x`` flag. The ``-X`` flag shows implicit installs only. The ``find`` command can also show the path to which a spack package was installed using the ``-p`` command."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1614
# 1e8e260137c04a62a802651602c4dfba
msgid "Customizing Compilers"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1617
# 28c9046d01334403bc940a5e73396056
msgid "Spack manages a list of available compilers on the system, detected automatically from from the user's ``PATH`` variable. The ``spack compilers`` command is an alias for the command ``spack compiler list``."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1631
# f28f7268e6ca41b7977331f4631a91c3
msgid "The compilers are maintained in a YAML file. Later in the tutorial you will learn how to configure compilers by hand for special cases. Spack also has tools to add compilers, and compilers built with Spack can be added to the configuration."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1719
# 80ffdf256f874ddaa1390504f36fe447
msgid "We can add gcc to Spack as an available compiler using the ``spack compiler add`` command. This will allow future packages to build with gcc@7.2.0."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1731
# 1ec42a3898714c4983fe40e0b2cdbec2
msgid "We can also remove compilers from our configuration using ``spack compiler remove <compiler_spec>``"
msgstr ""

