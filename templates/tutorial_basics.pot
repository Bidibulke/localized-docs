# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2019, Lawrence Livermore National Laboratory.
# This file is distributed under the same license as the Spack package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Spack 0.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-23 00:42-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../spack/lib/spack/docs/tutorial_basics.rst:10
# 23f390aca40644e084f5fdf8696a80e4
msgid "Basic Installation Tutorial"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:12
# b82e2fdf46014545bdda3126eb86a41a
msgid "This tutorial will guide you through the process of installing software using Spack. We will first cover the `spack install` command, focusing on the power of the spec syntax and the flexibility it gives to users. We will also cover the `spack find` command for viewing installed packages and the `spack uninstall` command. Finally, we will touch on how Spack manages compilers, especially as it relates to using Spack-built compilers within Spack. We will include full output from all of the commands demonstrated, although we will frequently call attention to only small portions of that output (or merely to the fact that it succeeded). The provided output is all from an AWS instance running Ubuntu 16.04"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:28
# 445f79f627114370b6b491ed3329645c
msgid "Installing Spack"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:30
# 277c00e02c0948f5b2a14ca8e703fb75
msgid "Spack works out of the box. Simply clone spack and get going. We will clone Spack and immediately checkout the most recent release, v0.12."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:50
# acd115fe5eb441939d8d0be61d538a21
msgid "Next add Spack to your path. Spack has some nice command line integration tools, so instead of simply appending to your ``PATH`` variable, source the spack setup script.  Then add Spack to your path."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:58
# d00b67665f53462eaba67c36a03a9d72
msgid "You're good to go!"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:62
# 3391b207e0b946bc9a0b0796fd909db7
msgid "What is in Spack?"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:64
# 711517874afc4184866de5d010a9bb12
msgid "The ``spack list`` command shows available packages."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:75
# ef974a92d3664f1b99ed1b50af484ce4
msgid "The ``spack list`` command can also take a query string. Spack automatically adds wildcards to both ends of the string. For example, we can view all available python packages."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:90
# 0dae37387a77470298bb82dc60ddb976
msgid "Installing Packages"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:92
# 953987415bfe423e804ce6bba958d0fc
msgid "Installing a package with Spack is very simple. To install a piece of software, simply type ``spack install <package_name>``."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:113
# 49852a424488405cbfe6f1b2611903c8
msgid "Spack can install software either from source or from a binary cache. Packages in the binary cache are signed with GPG for security. For the tutorial we have prepared a binary cache so you don't have to wait on slow compilation from source. To be able to install from the binary cache, we will need to configure Spack with the location of the binary cache and trust the GPG key that the binary cache was signed with."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:131
# 566bd2075c6a46cca17f0e05eff4944e
msgid "You'll learn more about configuring Spack later in the tutorial, but for now you will be able to install the rest of the packages in the tutorial from a binary cache using the same ``spack install`` command. By default this will install the binary cached version if it exists and fall back on installing from source."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:137
# ac69e80232c146209a0db0d91e9961f7
msgid "Spack's spec syntax is the interface by which we can request specific configurations of the package. The ``%`` sigil is used to specify compilers."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:166
# 730442e4c1ab497da6ebd2cb24a71902
msgid "Note that this installation is located separately from the previous one. We will discuss this in more detail later, but this is part of what allows Spack to support arbitrarily versioned software."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:170
# 7a38492b71a14712871c18fc381fef21
msgid "You can check for particular versions before requesting them. We will use the ``spack versions`` command to see the available versions, and then install a different version of ``zlib``."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:183
# 909cada0f7bb42a5a8ca91e65d5b4481
msgid "The ``@`` sigil is used to specify versions, both of packages and of compilers."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:218
# d97f3703b7a14a1898cea300cf2dab70
msgid "The spec syntax also includes compiler flags. Spack accepts ``cppflags``, ``cflags``, ``cxxflags``, ``fflags``, ``ldflags``, and ``ldlibs`` parameters.  The values of these fields must be quoted on the command line if they include spaces. These values are injected into the compile line automatically by the Spack compiler wrappers."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:241
# d39b96ae95ce45dc91f071d2ff51db44
msgid "The ``spack find`` command is used to query installed packages. Note that some packages appear identical with the default output. The ``-l`` flag shows the hash of each package, and the ``-f`` flag shows any non-empty compiler flags of those packages."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:277
# f1c7735915ce41b9b6948bf58961a8fc
msgid "Spack generates a hash for each spec. This hash is a function of the full provenance of the package, so any change to the spec affects the hash. Spack uses this value to compare specs and to generate unique installation directories for every combinatorial version. As we move into more complicated packages with software dependencies, we can see that Spack reuses existing packages to satisfy a dependency only when the existing package's hash matches the desired spec."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:303
# 76d4080ba88545c8a3625e0801e42b1e
msgid "Dependencies can be explicitly requested using the ``^`` sigil. Note that the spec syntax is recursive. Anything we could specify about the top-level package, we can also specify about a dependency using ``^``."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:336
# 50dc539cb4b74ba080f657b04b8f430a
msgid "Packages can also be referred to from the command line by their package hash. Using the ``spack find -lf`` command earlier we saw that the hash of our optimized installation of zlib (``cppflags=\"-O3\"``) began with ``64mns5m``. We can now explicitly build with that package without typing the entire spec, by using the ``/`` sigil to refer to it by hash. As with other tools like git, you do not need to specify an *entire* hash on the command line.  You can specify just enough digits to identify a hash uniquely.  If a hash prefix is ambiguous (i.e., two or more installed packages share the prefix) then spack will report an error."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:364
# c4bb426b9bf24b009b4669c3bda65ddc
msgid "The ``spack find`` command can also take a ``-d`` flag, which can show dependency information. Note that each package has a top-level entry, even if it also appears as a dependency."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:399
# 8f10b92ff4364bbf9d06b0145a37530b
msgid "Let's move on to slightly more complicated packages. ``HDF5`` is a good example of a more complicated package, with an MPI dependency. If we install it \"out of the box,\" it will build with ``openmpi``."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:625
# d0325bc89985412da7fa928f18f83281
msgid "Spack packages can also have build options, called variants. Boolean variants can be specified using the ``+`` and ``~`` or ``-`` sigils. There are two sigils for ``False`` to avoid conflicts with shell parsing in different situations. Variants (boolean or otherwise) can also be specified using the same syntax as compiler flags.  Here we can install HDF5 without MPI support."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:650
# 451f6877a50447f68780d4ee93be1400
msgid "We might also want to install HDF5 with a different MPI implementation. While MPI is not a package itself, packages can depend on abstract interfaces like MPI. Spack handles these through \"virtual dependencies.\" A package, such as HDF5, can depend on the MPI interface. Other packages (``openmpi``, ``mpich``, ``mvapich``, etc.) provide the MPI interface.  Any of these providers can be requested for an MPI dependency. For example, we can build HDF5 with MPI support provided by mpich by specifying a dependency on ``mpich``. Spack also supports versioning of virtual dependencies. A package can depend on the MPI interface at version 3, and provider packages specify what version of the interface *they* provide. The partial spec ``^mpi@3`` can be safisfied by any of several providers."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:727
# c08082f1213044f6bbe29546ecb5418d
msgid "We'll do a quick check in on what we have installed so far."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:850
# 8267a9ba7c5f419197b3d657030b8b3c
msgid "Spack models the dependencies of packages as a directed acyclic graph (DAG). The ``spack find -d`` command shows the tree representation of that graph.  We can also use the ``spack graph`` command to view the entire DAG as a graph."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:888
# cfe04e19827f449ca814dd4f84cd110e
msgid "You may also have noticed that there are some packages shown in the ``spack find -d`` output that we didn't install explicitly. These are dependencies that were installed implicitly. A few packages installed implicitly are not shown as dependencies in the ``spack find -d`` output. These are build dependencies. For example, ``libpciaccess`` is a dependency of openmpi and requires ``m4`` to build. Spack will build ``m4`` as part of the installation of ``openmpi``, but it does not become a part of the DAG because it is not linked in at run time. Spack handles build dependencies differently because of their different (less strict) consistency requirements. It is entirely possible to have two packages using different versions of a dependency to build, which obviously cannot be done with linked dependencies."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:901
# 66bf050059de4b94bcec924b2334f0d8
msgid "``HDF5`` is more complicated than our basic example of zlib and openssl, but it's still within the realm of software that an experienced HPC user could reasonably expect to install given a bit of time. Now let's look at an even more complicated package."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1132
# 7223bb372e9d4af5bc2bae0122e6aaee
msgid "Now we're starting to see the power of Spack. Trilinos in its default configuration has 23 top level dependecies, many of which have dependencies of their own. Installing more complex packages can take days or weeks even for an experienced user. Although we've done a binary installation for the tutorial, a source installation of trilinos using Spack takes about 3 hours (depending on the system), but only 20 seconds of programmer time."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1140
# b406de4540e64285948dc2ae160a5177
msgid "Spack manages constistency of the entire DAG. Every MPI dependency will be satisfied by the same configuration of MPI, etc. If we install ``trilinos`` again specifying a dependency on our previous HDF5 built with ``mpich``:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1259
# c3903cac1c1a4252a5a5bf9728d4abe3
msgid "We see that every package in the trilinos DAG that depends on MPI now uses ``mpich``."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1307
# 1d7eb4569679451491db0127105a3048
msgid "As we discussed before, the ``spack find -d`` command shows the dependency information as a tree. While that is often sufficient, many complicated packages, including trilinos, have dependencies that cannot be fully represented as a tree. Again, the ``spack graph`` command shows the full DAG of the dependency information."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1436
# 4cb5dc36fffd405490db7e459a8f0b8a
msgid "You can control how the output is displayed with a number of options."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1438
# 8ba55d1cc0354b78b84641c3e693d5c7
msgid "The ASCII output from ``spack graph`` can be difficult to parse for complicated packages. The output can be changed to the ``graphviz`` ``.dot`` format using the ``--dot`` flag."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1450
# 062baf222e34407e969391b5c42d00bd
msgid "Uninstalling Packages"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1452
# a48376aa8e0547978107168f10a4959e
msgid "Earlier we installed many configurations each of zlib and tcl. Now we will go through and uninstall some of those packages that we didn't really need."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1484
# 77b78422c515439d825fc80b3dcf37c7
msgid "We can uninstall packages by spec using the same syntax as install."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1509
# 8018ae7ad037455f840f6e4176984e3e
msgid "We can also uninstall packages by referring only to their hash."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1511
# 3192d025955b4801965df1ec2b82624f
msgid "We can use either ``-f`` (force) or ``-R`` (remove dependents as well) to remove packages that are required by another installed package."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1535
# 39f0b73a082a48ab95d2efb0c89127f0
msgid "Spack will not uninstall packages that are not sufficiently specified. The ``-a`` (all) flag can be used to uninstall multiple packages at once."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1563
# 9a8689e87b1244898b0942795c6381e1
msgid "Advanced ``spack find`` Usage"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1565
# e361c5d850a242609954138fc2c0b32c
msgid "We will go over some additional uses for the ``spack find`` command not already covered in the :ref:`basics-tutorial-install` and :ref:`basics-tutorial-uninstall` sections."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1569
# 171eac0cef99457eb52fde0608e2f5c5
msgid "The ``spack find`` command can accept what we call \"anonymous specs.\" These are expressions in spec syntax that do not contain a package name. For example, ``spack find ^mpich`` will return every installed package that depends on mpich, and ``spack find cppflags=\"-O3\"`` will return every package which was built with ``cppflags=\"-O3\"``."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1588
# 9ef614e238804df8ab6d9943f93caaae
msgid "The ``find`` command can also show which packages were installed explicitly (rather than pulled in as a dependency) using the ``-x`` flag. The ``-X`` flag shows implicit installs only. The ``find`` command can also show the path to which a spack package was installed using the ``-p`` command."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1614
# d2a739027eae475d920a31ec22f0e2f8
msgid "Customizing Compilers"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1617
# 29eebdada4914b10b0470ee7d4005274
msgid "Spack manages a list of available compilers on the system, detected automatically from from the user's ``PATH`` variable. The ``spack compilers`` command is an alias for the command ``spack compiler list``."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1631
# 245e94ab11594230b4015209ea85179b
msgid "The compilers are maintained in a YAML file. Later in the tutorial you will learn how to configure compilers by hand for special cases. Spack also has tools to add compilers, and compilers built with Spack can be added to the configuration."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1719
# f9a999cc3fe2449d9e9d9f930fee0e33
msgid "We can add gcc to Spack as an available compiler using the ``spack compiler add`` command. This will allow future packages to build with gcc@7.2.0."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_basics.rst:1731
# ff5a405ddb9941d2b802bafe93cd90f8
msgid "We can also remove compilers from our configuration using ``spack compiler remove <compiler_spec>``"
msgstr ""

