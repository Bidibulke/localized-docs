# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2019, Lawrence Livermore National Laboratory.
# This file is distributed under the same license as the Spack package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Spack 0.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-27 13:31-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../spack/lib/spack/docs/getting_started.rst:10
msgid "Getting Started"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:14
msgid "Prerequisites"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:16
msgid "Spack has the following minimum requirements, which must be installed before Spack is run:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:19
msgid "Python 2 (2.6 or 2.7) or 3 (3.4 - 3.7) to run Spack"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:20
msgid "A C/C++ compiler for building"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:21
msgid "The ``make`` executable for building"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:22
msgid "The ``git`` and ``curl`` commands for fetching"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:23
msgid "If using the ``gpg`` subcommand, ``gnupg2`` is required"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:25
msgid "These requirements can be easily installed on most modern Linux systems; on Macintosh, XCode is required.  Spack is designed to run on HPC platforms like Cray and BlueGene/Q.  Not all packages should be expected to work on all platforms.  A build matrix showing which packages are working on which systems is planned but not yet available."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:33
msgid "Installation"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:35
msgid "Getting Spack is easy.  You can clone it from the `github repository <https://github.com/spack/spack>`_ using this command:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:42
msgid "This will create a directory called ``spack``."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:46
msgid "Add Spack to the Shell"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:48
msgid "We'll assume that the full path to your downloaded Spack directory is in the ``SPACK_ROOT`` environment variable.  Add ``$SPACK_ROOT/bin`` to your path and you're ready to go:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:57
msgid "For a richer experience, use Spack's shell support:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:70
msgid "This automatically adds Spack to your ``PATH`` and allows the ``spack`` command to be used to execute spack :ref:`commands <shell-support>` and :ref:`useful packaging commands <packaging-shell-support>`."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:74
msgid "If :ref:`environment-modules or dotkit <InstallEnvironmentModules>` is installed and available, the ``spack`` command can also load and unload :ref:`modules <modules>`."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:80
msgid "Clean Environment"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:82
msgid "Many packages' installs can be broken by changing environment variables.  For example, a package might pick up the wrong build-time dependencies (most of them not specified) depending on the setting of ``PATH``.  ``GCC`` seems to be particularly vulnerable to these issues."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:87
msgid "Therefore, it is recommended that Spack users run with a *clean environment*, especially for ``PATH``.  Only software that comes with the system, or that you know you wish to use with Spack, should be included.  This procedure will avoid many strange build errors."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:95
msgid "Check Installation"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:97
msgid "With Spack installed, you should be able to run some basic Spack commands.  For example:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:105
msgid "Optional: Alternate Prefix"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:107
msgid "You may want to run Spack out of a prefix other than the git repository you cloned.  The ``spack clone`` command provides this functionality.  To install spack in a new directory, simply type:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:115
msgid "This will install a new spack script in ``/my/favorite/prefix/bin``, which you can use just like you would the regular spack script.  Each copy of spack installs packages into its own ``$PREFIX/opt`` directory."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:123
msgid "Next Steps"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:125
msgid "In theory, Spack doesn't need any additional installation; just download and run!  But in real life, additional steps are usually required before Spack can work in a practical sense.  Read on..."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:134
msgid "Compiler configuration"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:136
msgid "Spack has the ability to build packages with multiple compilers and compiler versions. Spack searches for compilers on your machine automatically the first time it is run. It does this by inspecting your ``PATH``."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:145
msgid "``spack compilers``"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:147
msgid "You can see which compilers spack has found by running ``spack compilers`` or ``spack compiler list``:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:169
msgid "Any of these compilers can be used to build Spack packages.  More on how this is done is in :ref:`sec-specs`."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:176
msgid "``spack compiler add``"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:178
msgid "An alias for ``spack compiler find``."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:184
msgid "``spack compiler find``"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:186
msgid "If you do not see a compiler in this list, but you want to use it with Spack, you can simply run ``spack compiler find`` with the path to where the compiler is installed.  For example:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:196
msgid "Or you can run ``spack compiler find`` with no arguments to force auto-detection.  This is useful if you do not know where compilers are installed, but you know that new compilers have been added to your ``PATH``.  For example, you might load a module, like this:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:208
msgid "This loads the environment module for gcc-4.9.0 to add it to ``PATH``, and then it adds the compiler to Spack."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:213
msgid "By default, spack does not fill in the ``modules:`` field in the ``compilers.yaml`` file.  If you are using a compiler from a module, then you should add this field manually. See the section on :ref:`compilers-requiring-modules`."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:222
msgid "``spack compiler info``"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:224
msgid "If you want to see specifics on a particular compiler, you can run ``spack compiler info`` on it:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:240
msgid "This shows which C, C++, and Fortran compilers were detected by Spack. Notice also that we didn't have to be too specific about the version. We just said ``intel@15``, and information about the only matching Intel compiler was displayed."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:247
msgid "Manual compiler configuration"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:249
msgid "If auto-detection fails, you can manually configure a compiler by editing your ``~/.spack/compilers.yaml`` file.  You can do this by running ``spack config edit compilers``, which will open the file in your ``$EDITOR``."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:253
msgid "Each compiler configuration in the file looks like this:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:268
msgid "For compilers that do not support Fortran (like ``clang``), put ``None`` for ``f77`` and ``fc``:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:284
msgid "Once you save the file, the configured compilers will show up in the list displayed by ``spack compilers``."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:287
msgid "You can also add compiler flags to manually configured compilers. These flags should be specified in the ``flags`` section of the compiler specification. The valid flags are ``cflags``, ``cxxflags``, ``fflags``, ``cppflags``, ``ldflags``, and ``ldlibs``. For example:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:309
msgid "These flags will be treated by spack as if they were entered from the command line each time this compiler is used. The compiler wrappers then inject those flags into the compiler command. Compiler flags entered from the command line will be discussed in more detail in the following section."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:317
msgid "Build Your Own Compiler"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:319
msgid "If you are particular about which compiler/version you use, you might wish to have Spack build it for you.  For example:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:326
msgid "Once that has finished, you will need to add it to your ``compilers.yaml`` file.  You can then set Spack to use it by default by adding the following to your ``packages.yaml`` file:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:340
msgid "Compilers Requiring Modules"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:342
msgid "Many installed compilers will work regardless of the environment they are called with.  However, some installed compilers require ``$LD_LIBRARY_PATH`` or other environment variables to be set in order to run; this is typical for Intel and other proprietary compilers."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:347
msgid "In such a case, you should tell Spack which module(s) to load in order to run the chosen compiler (If the compiler does not come with a module file, you might consider making one by hand).  Spack will load this module into the environment ONLY when the compiler is run, and NOT in general for a package's ``install()`` method.  See, for example, this ``compilers.yaml`` file:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:367
msgid "Some compilers require special environment settings to be loaded not just to run, but also to execute the code they build, breaking packages that need to execute code they just compiled.  If it's not possible or practical to use a better compiler, you'll need to ensure that environment settings are preserved for compilers like this (i.e., you'll need to load the module or source the compiler's shell script)."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:374
msgid "By default, Spack tries to ensure that builds are reproducible by cleaning the environment before building.  If this interferes with your compiler settings, you CAN use ``spack install --dirty`` as a workaround. Note that this MAY interfere with package builds."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:383
msgid "Licensed Compilers"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:385
msgid "Some proprietary compilers require licensing to use.  If you need to use a licensed compiler (eg, PGI), the process is similar to a mix of build your own, plus modules:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:389
msgid "Create a Spack package (if it doesn't exist already) to install your compiler.  Follow instructions on installing :ref:`license`."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:392
msgid "Once the compiler is installed, you should be able to test it by using Spack to load the module it just created, and running simple builds (eg: ``cc helloWorld.c && ./a.out``)"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:396
msgid "Add the newly-installed compiler to ``compilers.yaml`` as shown above."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:403
msgid "Mixed Toolchains"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:405
msgid "Modern compilers typically come with related compilers for C, C++ and Fortran bundled together.  When possible, results are best if the same compiler is used for all languages."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:409
msgid "In some cases, this is not possible.  For example, starting with macOS El Capitan (10.11), many packages no longer build with GCC, but XCode provides no Fortran compilers.  The user is therefore forced to use a mixed toolchain: XCode-provided Clang for C/C++ and GNU ``gfortran`` for Fortran."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:415
msgid "You need to make sure that Xcode is installed. Run the following command:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:422
msgid "If the Xcode command-line tools are already installed, you will see an error message:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:430
msgid "For most packages, the Xcode command-line tools are sufficient. However, some packages like ``qt`` require the full Xcode suite. You can check to see which you have installed by running:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:439
msgid "If the output is:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:446
msgid "you already have the full Xcode suite installed. If the output is:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:453
msgid "you only have the command-line tools installed. The full Xcode suite can be installed through the App Store. Make sure you launch the Xcode application and accept the license agreement before using Spack. It may ask you to install additional components. Alternatively, the license can be accepted through the command line:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:464
msgid "Note: the flag is ``-license``, not ``--license``."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:466
msgid "Run ``spack compiler find`` to locate Clang."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:468
msgid "There are different ways to get ``gfortran`` on macOS. For example, you can install GCC with Spack (``spack install gcc``) or with Homebrew (``brew install gcc``)."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:472
msgid "The only thing left to do is to edit ``~/.spack/compilers.yaml`` to provide the path to ``gfortran``:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:485
msgid "If you used Spack to install GCC, you can get the installation prefix by ``spack location -i gcc`` (this will only work if you have a single version of GCC installed). Whereas for Homebrew, GCC is installed in ``/usr/local/Cellar/gcc/x.y.z``."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:492
msgid "Compiler Verification"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:494
msgid "You can verify that your compilers are configured properly by installing a simple package.  For example:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:506
msgid "Vendor-Specific Compiler Configuration"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:508
msgid "With Spack, things usually \"just work\" with GCC.  Not so for other compilers.  This section provides details on how to get specific compilers working."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:514
msgid "Intel Compilers"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:516
msgid "Intel compilers are unusual because a single Intel compiler version can emulate multiple GCC versions.  In order to provide this functionality, the Intel compiler needs GCC to be installed. Therefore, the following steps are necessary to successfully use Intel compilers:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:522
msgid "Install a version of GCC that implements the desired language features (``spack install gcc``)."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:525
msgid "Tell the Intel compiler how to find that desired GCC.  This may be done in one of two ways:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:528
msgid "\"By default, the compiler determines which version of ``gcc`` or ``g++`` you have installed from the ``PATH`` environment variable."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:531
msgid "If you want use a version of ``gcc`` or ``g++`` other than the default version on your system, you need to use either the ``-gcc-name`` or ``-gxx-name`` compiler option to specify the path to the version of ``gcc`` or ``g++`` that you want to use.\""
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:538
msgid "Intel compilers may therefore be configured in one of two ways with Spack: using modules, or using compiler flags."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:543
msgid "Configuration with Modules"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:545
msgid "One can control which GCC is seen by the Intel compiler with modules. A module must be loaded both for the Intel Compiler (so it will run) and GCC (so the compiler can find the intended GCC).  The following configuration in ``compilers.yaml`` illustrates this technique:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:566
msgid "The version number on the Intel compiler is a combination of the \"native\" Intel version number and the GNU compiler it is targeting."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:572
msgid "Command Line Configuration"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:574
msgid "One can also control which GCC is seen by the Intel compiler by adding flags to the ``icc`` command:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:577
msgid "Identify the location of the compiler you just installed:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:584
msgid "Set up ``compilers.yaml``, for example:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:605
msgid "PGI"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:607
msgid "PGI comes with two sets of compilers for C++ and Fortran, distinguishable by their names.  \"Old\" compilers:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:617
msgid "\"New\" compilers:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:626
msgid "Older installations of PGI contains just the old compilers; whereas newer installations contain the old and the new.  The new compiler is considered preferable, as some packages (``hdf``) will not build with the old compiler."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:631
msgid "When auto-detecting a PGI compiler, there are cases where Spack will find the old compilers, when you really want it to find the new compilers.  It is best to check this ``compilers.yaml``; and if the old compilers are being used, change ``pgf77`` and ``pgf90`` to ``pgfortran``."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:637
msgid "Other issues:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:639
msgid "There are reports that some packages will not build with PGI, including ``libpciaccess`` and ``openssl``.  A workaround is to build these packages with another compiler and then use them as dependencies for PGI-build packages.  For example:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:649
msgid "PGI requires a license to use; see :ref:`licensed-compilers` for more information on installation."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:654
msgid "It is believed the problem with HDF 4 is that everything is compiled with the ``F77`` compiler, but at some point some Fortran 90 code slipped in there. So compilers that can handle both FORTRAN 77 and Fortran 90 (``gfortran``, ``pgfortran``, etc) are fine.  But compilers specific to one or the other (``pgf77``, ``pgf90``) won't work."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:664
msgid "NAG"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:666
msgid "The Numerical Algorithms Group provides a licensed Fortran compiler. Like Clang, this requires you to set up a :ref:`mixed-toolchains`. It is recommended to use GCC for your C/C++ compilers."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:670
msgid "The NAG Fortran compilers are a bit more strict than other compilers, and many packages will fail to install with error messages like:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:677
msgid "In order to convince the NAG compiler not to be too picky about calling conventions, you can use ``FFLAGS=-mismatch`` and ``FCFLAGS=-mismatch``. This can be done through the command line:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:685
msgid "Or it can be set permanently in your ``compilers.yaml``:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:704
msgid "System Packages"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:706
msgid "Once compilers are configured, one needs to determine which pre-installed system packages, if any, to use in builds.  This is configured in the file ``~/.spack/packages.yaml``.  For example, to use an OpenMPI installed in /opt/local, one would use:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:719
msgid "In general, Spack is easier to use and more reliable if it builds all of its own dependencies.  However, there are two packages for which one commonly needs to use system versions:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:725
msgid "MPI"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:727
msgid "On supercomputers, sysadmins have already built MPI versions that take into account the specifics of that computer's hardware.  Unless you know how they were built and can choose the correct Spack variants, you are unlikely to get a working MPI from Spack.  Instead, use an appropriate pre-installed MPI."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:733
msgid "If you choose a pre-installed MPI, you should consider using the pre-installed compiler used to build that MPI; see above on ``compilers.yaml``."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:739
msgid "OpenSSL"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:741
msgid "The ``openssl`` package underlies much of modern security in a modern OS; an attacker can easily \"pwn\" any computer on which they can modify SSL. Therefore, any ``openssl`` used on a system should be created in a \"trusted environment\" --- for example, that of the OS vendor."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:746
msgid "OpenSSL is also updated by the OS vendor from time to time, in response to security problems discovered in the wider community.  It is in everyone's best interest to use any newly updated versions as soon as they come out.  Modern Linux installations have standard procedures for security updates without user involvement."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:752
msgid "Spack running at user-level is not a trusted environment, nor do Spack users generally keep up-to-date on the latest security holes in SSL.  For these reasons, a Spack-installed OpenSSL should likely not be trusted."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:756
msgid "As long as the system-provided SSL works, you can use it instead.  One can check if it works by trying to download an ``https://``.  For example:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:764
msgid "To tell Spack to use the system-supplied OpenSSL, first determine what version you have:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:772
msgid "Then add the following to ``~/.spack/packages.yaml``:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:785
msgid "BLAS / LAPACK"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:787
msgid "The recommended way to use system-supplied BLAS / LAPACK packages is to add the following to ``packages.yaml``:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:804
msgid "Above we pretend that the system-provided BLAS / LAPACK is ``netlib-lapack`` only because it is the only BLAS / LAPACK provider which use standard names for libraries (as opposed to, for example, ``libopenblas.so``)."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:808
msgid "Although we specify external package in ``/usr``, Spack is smart enough not to add ``/usr/lib`` to RPATHs, where it could cause unrelated system libraries to be used instead of their Spack equivalents. ``usr/bin`` will be present in PATH, however it will have lower precedence compared to paths from other dependencies. This ensures that binaries in Spack dependencies are preferred over system binaries."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:817
msgid "Git"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:819
msgid "Some Spack packages use ``git`` to download, which might not work on some computers.  For example, the following error was encountered on a Macintosh during ``spack install julia-master``:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:832
msgid "This problem is related to OpenSSL, and in some cases might be solved by installing a new version of ``git`` and ``openssl``:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:835
msgid "Run ``spack install git``"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:836
msgid "Add the output of ``spack module tcl loads git`` to your ``.bashrc``."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:838
msgid "If this doesn't work, it is also possible to disable checking of SSL certificates by using:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:845
msgid "Using ``--insecure`` makes Spack disable SSL checking when fetching from websites and from git."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:850
msgid "This workaround should be used ONLY as a last resort!  Wihout SSL certificate verification, spack and git will download from sites you wouldn't normally trust.  The code you download and run may then be compromised!  While this is not a major issue for archives that will be checksummed, it is especially problematic when downloading from name Git branches or tags, which relies entirely on trusting a certificate for security (no verification)."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:856
msgid "certificate for security (no verification)."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:860
msgid "Utilities Configuration"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:862
msgid "Although Spack does not need installation *per se*, it does rely on other packages to be available on its host system.  If those packages are out of date or missing, then Spack will not work.  Sometimes, an appeal to the system's package manager can fix such problems.  If not, the solution is have Spack install the required packages, and then have Spack use them."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:869
msgid "For example, if ``curl`` doesn't work, one could use the following steps to provide Spack a working ``curl``:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:877
msgid "or alternately:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:883
msgid "or if environment modules don't work:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:890
msgid "External commands are used by Spack in two places: within core Spack, and in the package recipes. The bootstrapping procedure for these two cases is somewhat different, and is treated separately below."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:896
msgid "Core Spack Utilities"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:898
msgid "Core Spack uses the following packages, mainly to download and unpack source code, and to load generated environment modules: ``curl``, ``env``, ``git``, ``go``, ``hg``, ``svn``, ``tar``, ``unzip``, ``patch``, ``environment-modules``."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:903
msgid "As long as the user's environment is set up to successfully run these programs from outside of Spack, they should work inside of Spack as well.  They can generally be activated as in the ``curl`` example above; or some systems might already have an appropriate hand-built environment module that may be loaded.  Either way works."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:909
msgid "If you find that you are missing some of these programs, ``spack`` can build some of them for you with ``spack bootstrap``. Currently supported programs are ``environment-modules``."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:913
msgid "A few notes on specific programs in this list:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:917
msgid "cURL, git, Mercurial, etc."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:919
msgid "Spack depends on cURL to download tarballs, the format that most Spack-installed packages come in.  Your system's cURL should always be able to download unencrypted ``http://``.  However, the cURL on some systems has problems with SSL-enabled ``https://`` URLs, due to outdated / insecure versions of OpenSSL on those systems.  This will prevent Spack from installing any software requiring ``https://`` until a new cURL has been installed, using the technique above."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:929
msgid "remember that if you install ``curl`` via Spack that it may rely on a user-space OpenSSL that is not upgraded regularly.  It may fall out of date faster than your system OpenSSL."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:933
msgid "Some packages use source code control systems as their download method: ``git``, ``hg``, ``svn`` and occasionally ``go``.  If you had to install a new ``curl``, then chances are the system-supplied version of these other programs will also not work, because they also rely on OpenSSL. Once ``curl`` has been installed, you can similarly install the others."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:944
msgid "Environment Modules"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:946
msgid "In order to use Spack's generated module files, you must have installed ``environment-modules`` or ``lmod``. The simplest way to get the latest version of either of these tools is installing it as part of Spack's bootstrap procedure:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:956
msgid "At the moment ``spack bootstrap`` is only able to install ``environment-modules``. Extending its capabilities to prefer ``lmod`` where possible is in the roadmap, and likely to happen before the next release."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:960
msgid "Alternatively, on many Linux distributions, you can install a pre-built binary from the vendor's repository. On Fedora/RHEL/CentOS, for example, this can be done with the command:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:968
msgid "Once you have the tool installed and available in your path, you can source Spack's setup file:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:975
msgid "This activates :ref:`shell support <shell-support>` and makes commands like ``spack load`` available for use."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:981
msgid "Package Utilities"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:983
msgid "Spack may also encounter bootstrapping problems inside a package's ``install()`` method.  In this case, Spack will normally be running inside a *sanitized build environment*.  This includes all of the package's dependencies, but none of the environment Spack inherited from the user: if you load a module or modify ``$PATH`` before launching Spack, it will have no effect."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:990
msgid "In this case, you will likely need to use the ``--dirty`` flag when running ``spack install``, causing Spack to **not** sanitize the build environment.  You are now responsible for making sure that environment does not do strange things to Spack or its installs."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:995
msgid "Another way to get Spack to use its own version of something is to add that something to a package that needs it.  For example:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1002
msgid "This is considered best practice for some common build dependencies, such as ``autotools`` (if the ``autoreconf`` command is needed) and ``cmake`` --- ``cmake`` especially, because different packages require a different version of CMake."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1009
msgid "binutils"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1013
msgid "Sometimes, strange error messages can happen while building a package. For example, ``ld`` might crash.  Or one receives a message like:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1021
msgid "or:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1027
msgid "These problems are often caused by an outdated ``binutils`` on your system.  Unlike CMake or Autotools, adding ``depends_on('binutils')`` to every package is not considered a best practice because every package written in C/C++/Fortran would need it.  A potential workaround is to load a recent ``binutils`` into your environment and use the ``--dirty`` flag."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1036
msgid "GPG Signing"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1042
msgid "``spack gpg``"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1044
msgid "Spack has support for signing and verifying packages using GPG keys. A separate keyring is used for Spack, so any keys available in the user's home directory are not used."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1050
msgid "``spack gpg init``"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1052
msgid "When Spack is first installed, its keyring is empty. Keys stored in :file:`var/spack/gpg` are the default keys for a Spack installation. These keys may be imported by running ``spack gpg init``. This will import the default keys into the keyring as trusted keys."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1059
msgid "Trusting keys"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1061
msgid "Additional keys may be added to the keyring using ``spack gpg trust <keyfile>``. Once a key is trusted, packages signed by the owner of they key may be installed."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1067
msgid "Creating keys"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1069
msgid "You may also create your own key so that you may sign your own packages using ``spack gpg create <name> <email>``. By default, the key has no expiration, but it may be set with the ``--expires <date>`` flag (see the ``gnupg2`` documentation for accepted date formats). It is also recommended to add a comment as to the use of the key using the ``--comment <comment>`` flag. The public half of the key can also be exported for sharing with others so that they may use packages you have signed using the ``--export <keyfile>`` flag. Secret keys may also be later exported using the ``spack gpg export <location> [<key>...]`` command."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1107
msgid "Key creation speed"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1082
msgid "The creation of a new GPG key requires generating a lot of random numbers. Depending on the entropy produced on your system, the entire process may take a long time (*even appearing to hang*). Virtual machines and cloud instances are particularly likely to display this behavior."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1087
msgid "To speed it up you may install tools like ``rngd``, which is usually available as a package in the host OS.  On e.g. an Ubuntu machine you need to give the following commands:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1096
msgid "before generating the keys."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1098
msgid "Another alternative is ``haveged``, which can be installed on RHEL/CentOS machines as follows:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1106
msgid "`This Digital Ocean tutorial <https://www.digitalocean.com/community/tutorials/how-to-setup-additional-entropy-for-cloud-servers-using-haveged>`_ provides a good overview of sources of randomness."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1112
msgid "Listing keys"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1114
msgid "In order to list the keys available in the keyring, the ``spack gpg list`` command will list trusted keys with the ``--trusted`` flag and keys available for signing using ``--signing``. If you would like to remove keys from your keyring, ``spack gpg untrust <keyid>``. Key IDs can be email addresses, names, or (best) fingerprints."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1122
msgid "Signing and Verifying Packages"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1124
msgid "In order to sign a package, ``spack gpg sign <file>`` should be used. By default, the signature will be written to ``<file>.asc``, but that may be changed by using the ``--output <file>`` flag. If there is only one signing key available, it will be used, but if there is more than one, the key to use must be specified using the ``--key <keyid>`` flag. The ``--clearsign`` flag may also be used to create a signed file which contains the contents, but it is not recommended. Signed packages may be verified by using ``spack gpg verify <file>``."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1137
msgid "Spack on Cray"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1139
msgid "Spack differs slightly when used on a Cray system. The architecture spec can differentiate between the front-end and back-end processor and operating system. For example, on Edison at NERSC, the back-end target processor is \"Ivy Bridge\", so you can specify to use the back-end this way:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1148
msgid "You can also use the operating system to build against the back-end:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1154
msgid "Notice that the name includes both the operating system name and the major version number concatenated together."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1157
msgid "Alternatively, if you want to build something for the front-end, you can specify the front-end target processor. The processor for a login node on Edison is \"Sandy bridge\" so we specify on the command line like so:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1165
msgid "And the front-end operating system is:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1173
msgid "Cray compiler detection"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1175
msgid "Spack can detect compilers using two methods. For the front-end, we treat everything the same. The difference lies in back-end compiler detection. Back-end compiler detection is made via the Tcl module avail command. Once it detects the compiler it writes the appropriate PrgEnv and compiler module name to compilers.yaml and sets the paths to each compiler with Cray\\'s compiler wrapper names (i.e. cc, CC, ftn). During build time, Spack will load the correct PrgEnv and compiler module and will call appropriate wrapper."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1183
msgid "The compilers.yaml config file will also differ. There is a modules section that is filled with the compiler's Programming Environment and module name. On other systems, this field is empty []:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1194
msgid "As mentioned earlier, the compiler paths will look different on a Cray system. Since most compilers are invoked using cc, CC and ftn, the paths for each compiler are replaced with their respective Cray compiler wrapper names:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1206
msgid "As opposed to an explicit path to the compiler executable. This allows Spack to call the Cray compiler wrappers during build time."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1209
msgid "For more on compiler configuration, check out :ref:`compiler-config`."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1211
msgid "Spack sets the default Cray link type to dynamic, to better match other other platforms. Individual packages can enable static linking (which is the default outside of Spack on cray systems) using the ``-static`` flag."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1217
msgid "Setting defaults and using Cray modules"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1219
msgid "If you want to use default compilers for each PrgEnv and also be able to load cray external modules, you will need to set up a ``packages.yaml``."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1222
msgid "Here's an example of an external configuration for cray modules:"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1235
msgid "This tells Spack that for whatever package that depends on mpi, load the cray-mpich module into the environment. You can then be able to use whatever environment variables, libraries, etc, that are brought into the environment via module load."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1242
msgid "For Cray-provided packages, it is best to use ``modules:`` instead of ``paths:`` in ``packages.yaml``, because the Cray Programming Environment heavily relies on modules (e.g., loading the ``cray-mpich`` module adds MPI libraries to the compiler wrapper link line)."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1247
msgid "You can set the default compiler that Spack can use for each compiler type. If you want to use the Cray defaults, then set them under ``all:`` in packages.yaml. In the compiler field, set the compiler specs in your order of preference. Whenever you build with that compiler type, Spack will concretize to that version."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1252
msgid "Here is an example of a full packages.yaml used at NERSC"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1277
msgid "Here we tell spack that whenever we want to build with gcc use version 5.2.0 or if we want to build with intel compilers, use version 16.0.0.109. We add a spec for each compiler type for each cray modules. This ensures that for each compiler on our system we can use that external module."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1282
msgid "For more on external packages check out the section :ref:`sec-external-packages`."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1286
msgid "Using Linux containers on Cray machines"
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1288
msgid "Spack uses environment variables particular to the Cray programming environment to determine which systems are Cray platforms. These environment variables may be propagated into containers that are not using the Cray programming environment."
msgstr ""

#: ../spack/lib/spack/docs/getting_started.rst:1293
msgid "To ensure that Spack does not autodetect the Cray programming environment, unset the environment variable ``CRAYPE_VERSION``. This will cause Spack to treat a linux container on a Cray system as a base linux distro."
msgstr ""

