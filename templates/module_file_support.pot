# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2019, Lawrence Livermore National Laboratory.
# This file is distributed under the same license as the Spack package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Spack 0.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-27 13:31-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../spack/lib/spack/docs/module_file_support.rst:10
#: ../spack/lib/spack/docs/module_file_support.rst:114
msgid "Modules"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:12
msgid "The use of module systems to manage user environment in a controlled way is a common practice at HPC centers that is often embraced also by individual programmers on their development machines. To support this common practice Spack integrates with `Environment Modules <http://modules.sourceforge.net/>`_ ,  `LMod <http://lmod.readthedocs.io/en/latest/>`_ and `Dotkit <https://computing.llnl.gov/?set=jobs&page=dotkit>`_ by providing post-install hooks that generate module files and commands to manipulate them."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:22
msgid "If your machine does not already have a module system installed, we advise you to use either Environment Modules or LMod. See :ref:`InstallEnvironmentModules` for more details."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:30
msgid "Using module files via Spack"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:32
msgid "If you have installed a supported module system either manually or through ``spack bootstrap``, you should be able to run either ``module avail`` or ``use -l spack`` to see what module files have been installed.  Here is sample output of those programs, showing lots of installed packages:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:57
msgid "The names should look familiar, as they resemble the output from ``spack find``. You *can* use the modules here directly.  For example, you could type either of these commands to load the ``cmake`` module:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:69
msgid "Neither of these is particularly pretty, easy to remember, or easy to type. Luckily, Spack has its own interface for using modules and dotkits."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:74
msgid "Shell support"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:76
msgid "To enable additional Spack commands for loading and unloading module files, and to add the correct path to ``MODULEPATH``,  you need to source the appropriate setup file in the ``$SPACK_ROOT/share/spack`` directory. This will activate shell support for the commands that need it. For ``bash``, ``ksh`` or ``zsh`` users:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:85
msgid "For ``csh`` and ``tcsh`` instead:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:92
msgid "Note that in the latter case it is necessary to explicitly set ``SPACK_ROOT`` before sourcing the setup file (you will get a meaningful error message if you don't)."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:96
msgid "When ``bash`` and ``ksh`` users update their environment with ``setup-env.sh``, it will check for spack-installed environment modules and add the ``module`` command to their environment; This only occurs if the module command is not already available. You can install ``environment-modules`` with ``spack bootstrap`` as described in :ref:`InstallEnvironmentModules`."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:98
msgid "Finally, if you want to have Spack's shell support available on the command line at any login you can put this source line in one of the files that are sourced at startup (like ``.profile``, ``.bashrc`` or ``.cshrc``). Be aware though that the startup time may be slightly increased because of that."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:108
msgid "``spack load / unload``"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:110
msgid "Once you have shell support enabled you can use the same spec syntax you're used to:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:114
msgid "Dotkit"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:116
msgid "``spack load <spec>``"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:116
msgid "``spack use <spec>``"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:117
msgid "``spack unload <spec>``"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:117
msgid "``spack unuse <spec>``"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:120
msgid "And you can use the same shortened names you use everywhere else in Spack."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:123
msgid "For example, if you are using dotkit, this will add the ``mpich`` package built with ``gcc`` to your path:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:137
msgid "Or, similarly if you are using modules, you could type:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:143
msgid "These commands will add appropriate directories to your ``PATH``, ``MANPATH``, ``CPATH``, and ``LD_LIBRARY_PATH``.  When you no longer want to use a package, you can type unload or unuse similarly:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:154
msgid "These ``use``, ``unuse``, ``load``, and ``unload`` subcommands are only available if you have enabled Spack's shell support *and* you have dotkit or modules installed on your machine."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:160
msgid "Ambiguous module names"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:162
msgid "If a spec used with load/unload or use/unuse is ambiguous (i.e. more than one installed package matches it), then Spack will warn you:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:172
msgid "You can either type the ``spack load`` command again with a fully qualified argument, or you can add just enough extra constraints to identify one package.  For example, above, the key differentiator is that one ``libelf`` is built with the Intel compiler, while the other used ``gcc``.  You could therefore just type:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:182
msgid "To identify just the one built with the Intel compiler."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:190
msgid "``spack module tcl loads``"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:192
msgid "In some cases, it is desirable to load not just a module, but also all the modules it depends on.  This is not required for most modules because Spack builds binaries with RPATH support.  However, not all packages use RPATH to find their dependencies: this can be true in particular for Python extensions, which are currently *not* built with RPATH."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:199
msgid "Scripts to load modules recursively may be made with the command:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:205
msgid "An equivalent alternative using `process substitution <http://tldp.org/LDP/abs/html/process-sub.html>`_ is:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:214
msgid "Module Commands for Shell Scripts"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:216
msgid "Although Spack is flexible, the ``module`` command is much faster. This could become an issue when emitting a series of ``spack load`` commands inside a shell script.  By adding the ``--shell`` flag, ``spack module tcl find`` may also be used to generate code that can be cut-and-pasted into a shell script.  For example:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:256
msgid "The script may be further edited by removing unnecessary modules."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:261
msgid "Module Prefixes"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:263
msgid "On some systems, modules are automatically prefixed with a certain string; ``spack module tcl loads`` needs to know about that prefix when it issues ``module load`` commands.  Add the ``--prefix`` option to your ``spack module tcl loads`` commands if this is necessary."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:268
msgid "For example, consider the following on one system:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:285
msgid "Module file customization"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:287
msgid "Module files are generated by post-install hooks after the successful installation of a package. The table below summarizes the essential information associated with the different file formats that can be generated by Spack:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:293
msgid "**Hook name**"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:293
msgid "**Default root directory**"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:293
msgid "**Default template file**"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:293
msgid "**Compatible tools**"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:295
msgid "**Dotkit**"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:295
msgid "``dotkit``"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:295
msgid "share/spack/dotkit"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:295
msgid "share/spack/templates/modules/modulefile.dk"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:295
msgid "DotKit"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:297
msgid "**TCL - Non-Hierarchical**"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:297
msgid "``tcl``"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:297
msgid "share/spack/modules"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:297
msgid "share/spack/templates/modules/modulefile.tcl"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:297
msgid "Env. Modules/LMod"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:299
msgid "**Lua - Hierarchical**"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:299
msgid "``lmod``"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:299
msgid "share/spack/lmod"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:299
msgid "share/spack/templates/modules/modulefile.lua"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:299
msgid "LMod"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:303
msgid "Spack ships with sensible defaults for the generation of module files, but you can customize many aspects of it to accommodate package or site specific needs. In general you can override or extend the default behavior by:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:307
msgid "overriding certain callback APIs in the Python packages"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:308
msgid "writing specific rules in the ``modules.yaml`` configuration file"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:309
msgid "writing your own templates to override or extend the defaults"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:311
msgid "The former method let you express changes in the run-time environment that are needed to use the installed software properly, e.g. injecting variables from language interpreters into their extensions. The latter two instead permit to fine tune the filesystem layout, content and creation of module files to meet site specific conventions."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:319
msgid "Override API calls in ``package.py``"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:321
msgid "There are two methods that you can override in any ``package.py`` to affect the content of the module files generated by Spack. The first one:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:330
msgid "can alter the content of the module file associated with the same package where it is overridden. The second method:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:339
msgid "can instead inject run-time environment modifications in the module files of packages that depend on it. In both cases you need to fill ``run_env`` with the desired list of environment modifications."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:365
msgid "The ``r`` package and callback APIs"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:345
msgid "An example in which it is crucial to override both methods is given by the ``r`` package. This package installs libraries and headers in non-standard locations and it is possible to prepend the appropriate directory to the corresponding environment variables:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:351
msgid "LIBRARY_PATH"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:351
#: ../spack/lib/spack/docs/module_file_support.rst:352
msgid "``self.prefix/rlib/R/lib``"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:352
msgid "LD_LIBRARY_PATH"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:353
msgid "CPATH"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:353
msgid "``self.prefix/rlib/R/include``"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:356
msgid "with the following snippet:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:361
msgid "The ``r`` package also knows which environment variable should be modified to make language extensions provided by other packages available, and modifies it appropriately in the override of the second method:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:372
msgid "Write a configuration file"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:374
msgid "The configuration files that control module generation behavior are named ``modules.yaml``. The default configuration:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:380
msgid "activates the hooks to generate ``tcl`` and ``dotkit`` module files and inspects the installation folder of each package for the presence of a set of subdirectories (``bin``, ``man``, ``share/man``, etc.). If any is found its full path is prepended to the environment variables listed below the folder name."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:387
msgid "Activate other hooks"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:389
msgid "Any other module file generator shipped with Spack can be activated adding it to the list under the ``enable`` key in the module file. Currently the only generator that is not active by default is ``lmod``, which produces hierarchical lua module files."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:393
msgid "Each module system can then be configured separately. In fact, you should list configuration options that affect a particular type of module files under a top level key corresponding to the generator being customized:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:411
msgid "In general, the configuration options that you can use in ``modules.yaml`` will either change the layout of the module files on the filesystem, or they will affect their content. For the latter point it is possible to use anonymous specs to fine tune the set of packages on which the modifications should be applied."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:420
msgid "Selection by anonymous specs"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:422
msgid "In the configuration file you can use *anonymous specs* (i.e. specs that **are not required to have a root package** and are thus used just to express constraints) to apply certain modifications on a selected set of the installed software. For instance, in the snippet below:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:454
msgid "you are instructing Spack to set the environment variable ``BAR=bar`` for every module, unless the associated spec satisfies ``^openmpi`` in which case ``BAR=baz``. In addition in any spec that satisfies ``zlib`` the value ``foo`` will be prepended to ``LD_LIBRARY_PATH`` and in any spec that satisfies ``zlib%gcc@4.8`` the variable ``FOOBAR`` will be unset."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:463
msgid "Order does matter"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:462
msgid "The modifications associated with the ``all`` keyword are always evaluated first, no matter where they appear in the configuration file. All the other spec constraints are instead evaluated top to bottom."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:468
msgid "Blacklist or whitelist specific module files"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:470
msgid "You can use anonymous specs also to prevent module files from being written or to force them to be written. Consider the case where you want to hide from users all the boilerplate software that you had to build in order to bootstrap a new compiler. Suppose for instance that ``gcc@4.4.7`` is the compiler provided by your system. If you write a configuration file like:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:483
msgid "you will prevent the generation of module files for any package that is compiled with ``gcc@4.4.7``, with the only exception of any ``gcc`` or any ``llvm`` installation."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:492
msgid "Customize the naming scheme"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:494
msgid "The names of environment modules generated by spack are not always easy to fully comprehend due to the long hash in the name. There are two module configuration options to help with that. The first is a global setting to adjust the hash length. It can be set anywhere from 0 to 32 and has a default length of 7. This is the representation of the hash in the module file name and does not affect the size of the package hash. Be aware that the smaller the hash length the more likely naming conflicts will occur. The following snippet shows how to set hash length in the module file names:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:509
msgid "To help make module names more readable, and to help alleviate name conflicts with a short hash, one can use the ``suffixes`` option in the modules configuration file. This option will add strings to modules that match a spec. For instance, the following config options,"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:523
msgid "will add a ``python-2.7.12`` version string to any packages compiled with python matching the spec, ``python@2.7.12``. This is useful to know which version of python a set of python extensions is associated with. Likewise, the ``openblas`` string is attached to any program that has openblas in the spec, most likely via the ``+blas`` variant specification."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:547
msgid "TCL module files"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:531
msgid "A modification that is specific to ``tcl`` module files is the possibility to change the naming scheme of modules."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:544
msgid "will create module files that will conflict with ``intel/14.0.1`` and with the base directory of the same module, effectively preventing the possibility to load two or more versions of the same software at the same time. The tokens that are available for use in this directive are the same understood by the ``Spec.format`` method."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:573
msgid "LMod hierarchical module files"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:553
msgid "When ``lmod`` is activated Spack will generate a set of hierarchical lua module files that are understood by LMod. The hierarchy will always contain the two layers ``Core`` / ``Compiler`` but can be further extended to any of the virtual dependencies present in Spack. A case that could be useful in practice is for instance:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:571
msgid "that will generate a hierarchy in which the ``lapack`` and ``mpi`` layer can be switched independently. This allows a site to build the same libraries or applications against different implementations of ``mpi`` and ``lapack``, and let LMod switch safely from one to the other."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:578
msgid "Deep hierarchies and ``lmod spider``"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:578
msgid "For hierarchies that are deeper than three layers ``lmod spider`` may have some issues. See `this discussion on the LMod project <https://github.com/TACC/Lmod/issues/114>`_."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:583
msgid "Filter out environment modifications"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:585
msgid "Modifications to certain environment variables in module files are there by default, for instance because they are generated by prefix inspections. If you want to prevent modifications to some environment variables, you can do so by using the environment blacklist:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:599
msgid "The configuration above will generate dotkit module files that will not contain modifications to either ``CPATH`` or ``LIBRARY_PATH`` and environment module files that instead will contain these modifications."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:608
msgid "Autoload dependencies"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:610
msgid "In some cases it can be useful to have module files that automatically load their dependencies.  This may be the case for Python extensions, if not activated using ``spack activate``:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:621
msgid "The configuration file above will produce module files that will load their direct dependencies if the package installed depends on ``python``. The allowed values for the ``autoload`` statement are either ``none``, ``direct`` or ``all``.  The default is ``none``."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:631
msgid "Building external software"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:628
msgid "Setting ``autoload`` to ``direct`` for all packages can be useful when building software outside of a Spack installation that depends on artifacts in that installation.  E.g. (adjust ``lmod`` vs ``tcl`` as appropriate):"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:644
msgid "TCL prerequisites"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:642
msgid "In the ``tcl`` section of the configuration file it is possible to use the ``prerequisites`` directive that accepts the same values as ``autoload``. It will produce module files that have a ``prereq`` statement instead of automatically loading other modules."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:649
msgid "Maintaining Module Files"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:651
msgid "Each type of module file has a command with the same name associated with it. The actions these commands permit are usually associated with the maintenance of a production environment. Here's, for instance, a sample of the features of the ``spack module tcl`` command:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:662
msgid "Refresh the set of modules"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:664
msgid "The subcommand that regenerates module files to update their content or their layout is ``refresh``:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:669
msgid "A set of packages can be selected using anonymous specs for the optional ``constraint`` positional argument. Optionally the entire tree can be deleted before regeneration if the change in layout is radical."
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:677
msgid "Delete module files"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:679
msgid "If instead what you need is just to delete a few module files, then the right subcommand is ``rm``:"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:688
msgid "We care about your module files!"
msgstr ""

#: ../spack/lib/spack/docs/module_file_support.rst:686
msgid "Every modification done on modules that are already existing will ask for a confirmation by default. If the command is used in a script it is possible though to pass the ``-y`` argument, that will skip this safety measure."
msgstr ""

