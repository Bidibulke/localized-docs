# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2019, Lawrence Livermore National Laboratory.
# This file is distributed under the same license as the Spack package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Spack 0.12\n"
"Report-Msgid-Bugs-To: maintainers@spack.io\n"
"POT-Creation-Date: 2019-05-23 08:25-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

# 71cce3791edd4b4c955b2ea777e0b02f
#: ../spack/lib/spack/docs/basic_usage.rst:10
msgid "Basic Usage"
msgstr ""

# eae07fa312cd4884ad007bfe5230215e
#: ../spack/lib/spack/docs/basic_usage.rst:12
msgid ""
"The ``spack`` command has many *subcommands*.  You'll only need a small "
"subset of them for typical usage."
msgstr ""

# 415a29a1c43b401999164d6475327aa1
#: ../spack/lib/spack/docs/basic_usage.rst:15
msgid ""
"Note that Spack colorizes output.  ``less -R`` should be used with Spack to "
"maintain this colorization.  E.g.:"
msgstr ""

# c560ef5684fe42789adad9712c78d282
#: ../spack/lib/spack/docs/basic_usage.rst:22
msgid "It is recommended that the following be put in your ``.bashrc`` file:"
msgstr ""

# de7683dec9e7441a9f05f357b065d1c3
#: ../spack/lib/spack/docs/basic_usage.rst:30
msgid "Listing available packages"
msgstr ""

# d03f76c223b24400a17dd990a13e61d4
#: ../spack/lib/spack/docs/basic_usage.rst:32
msgid ""
"To install software with Spack, you need to know what software is "
"available.  You can see a list of available package names at the :ref:"
"`package-list` webpage, or using the ``spack list`` command."
msgstr ""

# c78cdcc5e45944698269892d4f149e4f
#: ../spack/lib/spack/docs/basic_usage.rst:40
msgid "``spack list``"
msgstr ""

# 23930a18cb644028bf3acbf0ed37afde
#: ../spack/lib/spack/docs/basic_usage.rst:42
msgid ""
"The ``spack list`` command prints out a list of all of the packages Spack "
"can install:"
msgstr ""

# 4f010e83f6224110829ae9bf98c14444
#: ../spack/lib/spack/docs/basic_usage.rst:47
msgid ""
"The packages are listed by name in alphabetical order. A pattern to match "
"with no wildcards, ``*`` or ``?``, will be treated as though it started and "
"ended with ``*``, so ``util`` is equivalent to ``*util*``.  All patterns "
"will be treated as case-insensitive. You can also add the ``-d`` to search "
"the description of the package in addition to the name.  Some examples:"
msgstr ""

# 859389995c4942d8b62c8e0c155a64a3
#: ../spack/lib/spack/docs/basic_usage.rst:54
msgid "All packages whose names contain \"sql\":"
msgstr ""

# b1d0782d8d4648e6a9d8d497d63a8b7f
#: ../spack/lib/spack/docs/basic_usage.rst:58
msgid "All packages whose names or descriptions contain documentation:"
msgstr ""

# 90d59f712bbe4c99b8153115590198f4
#: ../spack/lib/spack/docs/basic_usage.rst:66
msgid "``spack info``"
msgstr ""

# e8982ebe7b9a47e79b782f5ae3375e0e
#: ../spack/lib/spack/docs/basic_usage.rst:68
msgid ""
"To get more information on a particular package from `spack list`, use "
"`spack info`.  Just supply the name of a package:"
msgstr ""

# 12b961dcc62d432e9c31b200bc12d002
#: ../spack/lib/spack/docs/basic_usage.rst:73
msgid ""
"Most of the information is self-explanatory.  The *safe versions* are "
"versions that Spack knows the checksum for, and it will use the checksum to "
"verify that these versions download without errors or viruses."
msgstr ""

# a0705969040c45ddb671054d59198873
#: ../spack/lib/spack/docs/basic_usage.rst:78
msgid ""
":ref:`Dependencies <sec-specs>` and :ref:`virtual dependencies <sec-virtual-"
"dependencies>` are described in more detail later."
msgstr ""

# aa23ca084caa4c2b8d611845be97ca65
#: ../spack/lib/spack/docs/basic_usage.rst:85
msgid "``spack versions``"
msgstr ""

# 5a31c1b4fbb6473f8841df50b5232b1a
#: ../spack/lib/spack/docs/basic_usage.rst:87
msgid ""
"To see *more* available versions of a package, run ``spack versions``. For "
"example:"
msgstr ""

# f3fa83ae42794dcaa0640e6f661ed68e
#: ../spack/lib/spack/docs/basic_usage.rst:92
msgid ""
"There are two sections in the output.  *Safe versions* are versions for "
"which Spack has a checksum on file.  It can verify that these versions are "
"downloaded correctly."
msgstr ""

# 7224e264c8064b18bbe88c22ea0dc812
#: ../spack/lib/spack/docs/basic_usage.rst:96
msgid ""
"In many cases, Spack can also show you what versions are available out on "
"the web---these are *remote versions*.  Spack gets this information by "
"scraping it directly from package web pages.  Depending on the package and "
"how its releases are organized, Spack may or may not be able to find remote "
"versions."
msgstr ""

# 9d6aca657eef4496a4532912c9ddd37b
#: ../spack/lib/spack/docs/basic_usage.rst:104
msgid "Installing and uninstalling"
msgstr ""

# bb34ae2ef867472397400de802092c47
#: ../spack/lib/spack/docs/basic_usage.rst:110
msgid "``spack install``"
msgstr ""

# 2f39d18a4d9f4265aeec29dcbf641874
#: ../spack/lib/spack/docs/basic_usage.rst:112
msgid ""
"``spack install`` will install any package shown by ``spack list``. For "
"example, To install the latest version of the ``mpileaks`` package, you "
"might type this:"
msgstr ""

# 6f9e065b45f0401085c6806298630021
#: ../spack/lib/spack/docs/basic_usage.rst:120
msgid ""
"If ``mpileaks`` depends on other packages, Spack will install the "
"dependencies first.  It then fetches the ``mpileaks`` tarball, expands it, "
"verifies that it was downloaded without errors, builds it, and installs it "
"in its own directory under ``$SPACK_ROOT/opt``. You'll see a number of "
"messages from spack, a lot of build output, and a message that the packages "
"is installed:"
msgstr ""

# c41739f0d2474deaa4fb75fb3972e198
#: ../spack/lib/spack/docs/basic_usage.rst:147
msgid ""
"The last line, with the ``[+]``, indicates where the package is installed."
msgstr ""

# b8a39a58b7b649998916d94df51b9d19
#: ../spack/lib/spack/docs/basic_usage.rst:152
msgid "Building a specific version"
msgstr ""

# f51eab25830d46beb995afad82bdd8ec
#: ../spack/lib/spack/docs/basic_usage.rst:154
msgid ""
"Spack can also build *specific versions* of a package.  To do this, just add "
"``@`` after the package name, followed by a version:"
msgstr ""

# 312580b58ad845d7851cc7f138d6293e
#: ../spack/lib/spack/docs/basic_usage.rst:161
msgid ""
"Any number of versions of the same package can be installed at once without "
"interfering with each other.  This is good for multi-user sites, as "
"installing a version that one user needs will not disrupt existing "
"installations for other users."
msgstr ""

# 8ebd1267a61041c4a2ae22b0e777dc52
#: ../spack/lib/spack/docs/basic_usage.rst:166
msgid ""
"In addition to different versions, Spack can customize the compiler, compile-"
"time options (variants), compiler flags, and platform (for cross compiles) "
"of an installation.  Spack is unique in that it can also configure the "
"*dependencies* a package is built with.  For example, two configurations of "
"the same version of a package, one built with boost 1.39.0, and the other "
"version built with version 1.43.0, can coexist."
msgstr ""

# 145c865f90b84e898d3f05ffead5832f
#: ../spack/lib/spack/docs/basic_usage.rst:173
msgid ""
"This can all be done on the command line using the *spec* syntax. Spack "
"calls the descriptor used to refer to a particular package configuration a "
"**spec**.  In the commands above, ``mpileaks`` and ``mpileaks@3.0.4`` are "
"both valid *specs*.  We'll talk more about how you can use them to customize "
"an installation in :ref:`sec-specs`."
msgstr ""

# ca8430130ea44e429725bc510906501e
#: ../spack/lib/spack/docs/basic_usage.rst:183
msgid "``spack uninstall``"
msgstr ""

# 5f19e356a6994d118bf03ee8725bc69f
#: ../spack/lib/spack/docs/basic_usage.rst:185
msgid ""
"To uninstall a package, type ``spack uninstall <package>``.  This will ask "
"the user for confirmation before completely removing the directory in which "
"the package was installed."
msgstr ""

# 1ed103f073384e1787d6151ec7ef3dec
#: ../spack/lib/spack/docs/basic_usage.rst:193
msgid ""
"If there are still installed packages that depend on the package to be "
"uninstalled, spack will refuse to uninstall it."
msgstr ""

# 0cacaa6d6deb49528069e472ac28a718
#: ../spack/lib/spack/docs/basic_usage.rst:196
msgid ""
"To uninstall a package and every package that depends on it, you may give "
"the ``--dependents`` option."
msgstr ""

# 912e7f7a40fd4e0582796d0e52c97403
#: ../spack/lib/spack/docs/basic_usage.rst:203
msgid ""
"will display a list of all the packages that depend on ``mpich`` and, upon "
"confirmation, will uninstall them in the right order."
msgstr ""

# c88227e71d58435aa51f46bb3779a1c0
#: ../spack/lib/spack/docs/basic_usage.rst:206
msgid "A command like"
msgstr ""

# 5a168bbb83c64fc89d9dbcd2ed34f53b
#: ../spack/lib/spack/docs/basic_usage.rst:212
msgid ""
"may be ambiguous if multiple ``mpich`` configurations are installed. For "
"example, if both ``mpich@3.0.2`` and ``mpich@3.1`` are installed, ``mpich`` "
"could refer to either one. Because it cannot determine which one to "
"uninstall, Spack will ask you either to provide a version number to remove "
"the ambiguity or use the ``--all`` option to uninstall all of the matching "
"packages."
msgstr ""

# 5d8fb1e664d54f5cba4b83bb97f6dbc4
#: ../spack/lib/spack/docs/basic_usage.rst:219
msgid "You may force uninstall a package with the ``--force`` option"
msgstr ""

# 9f862e24cc1244afa87b1b6bd62fe215
#: ../spack/lib/spack/docs/basic_usage.rst:225
msgid ""
"but you risk breaking other installed packages. In general, it is safer to "
"remove dependent packages *before* removing their dependencies or use the "
"``--dependents`` option."
msgstr ""

# 0ea0c8fd6da04230be3f94235d3ad55d
#: ../spack/lib/spack/docs/basic_usage.rst:234
msgid "Non-Downloadable Tarballs"
msgstr ""

# efdb80c0541a40b18451a98f439426de
#: ../spack/lib/spack/docs/basic_usage.rst:236
msgid ""
"The tarballs for some packages cannot be automatically downloaded by Spack.  "
"This could be for a number of reasons:"
msgstr ""

# 65c0498e13b34ce7a322b9fb0bb69cf5
#: ../spack/lib/spack/docs/basic_usage.rst:239
msgid ""
"The author requires users to manually accept a license agreement before "
"downloading (``jdk`` and ``galahad``)."
msgstr ""

# bd1c9347539f4cc099f9eb08c7df74df
#: ../spack/lib/spack/docs/basic_usage.rst:242
msgid ""
"The software is proprietary and cannot be downloaded on the open Internet."
msgstr ""

# 93e0e76758504d2fb295c0c757c2d132
#: ../spack/lib/spack/docs/basic_usage.rst:245
msgid ""
"To install these packages, one must create a mirror and manually add the "
"tarballs in question to it (see :ref:`mirrors`):"
msgstr ""

# 8bd4c8e8976e4d3ca80fcdd9a5d09df1
#: ../spack/lib/spack/docs/basic_usage.rst:248
msgid ""
"Create a directory for the mirror.  You can create this directory anywhere "
"you like, it does not have to be inside ``~/.spack``:"
msgstr ""

# 4d340fe4c6084b0bad7e11caf950ebf6
#: ../spack/lib/spack/docs/basic_usage.rst:255
msgid "Register the mirror with Spack by creating ``~/.spack/mirrors.yaml``:"
msgstr ""

# 32f50d4e14404584b53eaf361199c5e6
#: ../spack/lib/spack/docs/basic_usage.rst:262
msgid ""
"Put your tarballs in it.  Tarballs should be named ``<package>/<package>-"
"<version>.tar.gz``.  For example:"
msgstr ""

# f6b9a73dd8864ec0a5dc77733467e225
#: ../spack/lib/spack/docs/basic_usage.rst:271
msgid "Install as usual:"
msgstr ""

# cc032b3122874bdda028efcd0c5fdf60
#: ../spack/lib/spack/docs/basic_usage.rst:279
msgid "Seeing installed packages"
msgstr ""

# 86ad6a06e48c489d92f5ab2dfbe7ca0c
#: ../spack/lib/spack/docs/basic_usage.rst:281
msgid ""
"We know that ``spack list`` shows you the names of available packages, but "
"how do you figure out which are already installed?"
msgstr ""

# 91448c4006e34ea7aaf4a43889e40bda
#: ../spack/lib/spack/docs/basic_usage.rst:288
msgid "``spack find``"
msgstr ""

# a9efe37db13b43b997df2f9ff27ca349
#: ../spack/lib/spack/docs/basic_usage.rst:290
msgid ""
"``spack find`` shows the *specs* of installed packages.  A spec is like a "
"name, but it has a version, compiler, architecture, and build options "
"associated with it.  In spack, you can have many installations of the same "
"package with different specs."
msgstr ""

# 7b7115afbe16412abfbc8abdf03aeb2d
#: ../spack/lib/spack/docs/basic_usage.rst:295
msgid "Running ``spack find`` with no arguments lists installed packages:"
msgstr ""

# 207382d210ec43febefd550a7e796931
#: ../spack/lib/spack/docs/basic_usage.rst:330
msgid ""
"Packages are divided into groups according to their architecture and "
"compiler.  Within each group, Spack tries to keep the view simple, and only "
"shows the version of installed packages."
msgstr ""

# c3b15cbc9cd6451d92acd89d857693f3
#: ../spack/lib/spack/docs/basic_usage.rst:334
msgid ""
"``spack find`` can filter the package list based on the package name, spec, "
"or a number of properties of their installation status.  For example, "
"missing dependencies of a spec can be shown with ``--missing``, packages "
"which were explicitly installed with ``spack install <package>`` can be "
"singled out with ``--explicit`` and those which have been pulled in only as "
"dependencies with ``--implicit``."
msgstr ""

# b1f82d6aebee4044b2bf93b52449d875
#: ../spack/lib/spack/docs/basic_usage.rst:341
msgid ""
"In some cases, there may be different configurations of the *same* version "
"of a package installed.  For example, there are two installations of "
"``libdwarf@20130729`` above.  We can look at them in more detail using "
"``spack find --deps``, and by asking only to show ``libdwarf`` packages:"
msgstr ""

# e0fa9997f12a468eaa16eb0edea50296
#: ../spack/lib/spack/docs/basic_usage.rst:357
msgid ""
"Now we see that the two instances of ``libdwarf`` depend on *different* "
"versions of ``libelf``: 0.8.12 and 0.8.13.  This view can become complicated "
"for packages with many dependencies.  If you just want to know whether two "
"packages' dependencies differ, you can use ``spack find --long``:"
msgstr ""

# 636d3e41c6b840018c34a6f3d3c0f1ac
#: ../spack/lib/spack/docs/basic_usage.rst:370
msgid ""
"Now the ``libdwarf`` installs have hashes after their names.  These are "
"hashes over all of the dependencies of each package.  If the hashes are the "
"same, then the packages have the same dependency configuration."
msgstr ""

# 1fedfe37b8aa416ba2fa92652160f038
#: ../spack/lib/spack/docs/basic_usage.rst:374
msgid ""
"If you want to know the path where each package is installed, you can use "
"``spack find --paths``:"
msgstr ""

# 29544459b5134ee6a020b57b3bf86ff7
#: ../spack/lib/spack/docs/basic_usage.rst:391
msgid ""
"And, finally, you can restrict your search to a particular package by "
"supplying its name:"
msgstr ""

# 39a436f8dbbd451ba67a8a720b6ddbdd
#: ../spack/lib/spack/docs/basic_usage.rst:402
msgid ""
"``spack find`` actually does a lot more than this.  You can use *specs* to "
"query for specific configurations and builds of each package. If you want to "
"find only libelf versions greater than version 0.8.12, you could say:"
msgstr ""

# 9ebf566357b34c4391c28bc3026d16b2
#: ../spack/lib/spack/docs/basic_usage.rst:413
msgid ""
"Finding just the versions of libdwarf built with a particular version of "
"libelf would look like this:"
msgstr ""

# 8471cc14df354fc3b92e6e8be0a45486
#: ../spack/lib/spack/docs/basic_usage.rst:423
msgid ""
"We can also search for packages that have a certain attribute. For example, "
"``spack find libdwarf +debug`` will show only installations of libdwarf with "
"the 'debug' compile-time option enabled."
msgstr ""

# 5b6f47f8017040b892273b9f0d6f3164
#: ../spack/lib/spack/docs/basic_usage.rst:427
msgid "The full spec syntax is discussed in detail in :ref:`sec-specs`."
msgstr ""

# 430f1c6394c645d2a0885a83ca70296f
#: ../spack/lib/spack/docs/basic_usage.rst:433
msgid "Specs & dependencies"
msgstr ""

# adf776573ff54a2ca6d66f27111d6d6d
#: ../spack/lib/spack/docs/basic_usage.rst:435
msgid ""
"We know that ``spack install``, ``spack uninstall``, and other commands take "
"a package name with an optional version specifier.  In Spack, that "
"descriptor is called a *spec*.  Spack uses specs to refer to a particular "
"build configuration (or configurations) of a package. Specs are more than a "
"package name and a version; you can use them to specify the compiler, "
"compiler version, architecture, compile options, and dependency options for "
"a build.  In this section, we'll go over the full syntax of specs."
msgstr ""

# fe10141324ef447a94e615d38c1bfab5
#: ../spack/lib/spack/docs/basic_usage.rst:444
msgid "Here is an example of a much longer spec than we've seen thus far:"
msgstr ""

# d8209bb35eed4832a962dbcee2f0678a
#: ../spack/lib/spack/docs/basic_usage.rst:450
msgid ""
"If provided to ``spack install``, this will install the ``mpileaks`` library "
"at some version between ``1.2`` and ``1.4`` (inclusive), built using ``gcc`` "
"at version 4.7.5 for the Blue Gene/Q architecture, with debug options "
"enabled, and without Qt support.  Additionally, it says to link it with the "
"``callpath`` library (which it depends on), and to build callpath with "
"``gcc`` 4.7.2.  Most specs will not be as complicated as this one, but this "
"is a good example of what is possible with specs."
msgstr ""

# 829481ad63f24be6a2418db7b2ac7ac2
#: ../spack/lib/spack/docs/basic_usage.rst:459
msgid "More formally, a spec consists of the following pieces:"
msgstr ""

# b965cee0cd1a46c38311940025e05775
#: ../spack/lib/spack/docs/basic_usage.rst:461
msgid "Package name identifier (``mpileaks`` above)"
msgstr ""

# d9cd1b3edb8141428bc7f980750665b3
#: ../spack/lib/spack/docs/basic_usage.rst:462
msgid "``@`` Optional version specifier (``@1.2:1.4``)"
msgstr ""

# 8baafd14c6db4856a22d7458319d45c0
#: ../spack/lib/spack/docs/basic_usage.rst:463
msgid ""
"``%`` Optional compiler specifier, with an optional compiler version "
"(``gcc`` or ``gcc@4.7.3``)"
msgstr ""

# 819c240d64af478e8dba660dbdab4bc1
#: ../spack/lib/spack/docs/basic_usage.rst:465
msgid ""
"``+`` or ``-`` or ``~`` Optional variant specifiers (``+debug``, ``-qt``, or "
"``~qt``) for boolean variants"
msgstr ""

# 87084728817d44ba86bc676f712a8f17
#: ../spack/lib/spack/docs/basic_usage.rst:467
msgid ""
"``name=<value>`` Optional variant specifiers that are not restricted to "
"boolean variants"
msgstr ""

# 50a6aa2e26fc463aa76be6b782c840e8
#: ../spack/lib/spack/docs/basic_usage.rst:469
msgid ""
"``name=<value>`` Optional compiler flag specifiers. Valid flag names are "
"``cflags``, ``cxxflags``, ``fflags``, ``cppflags``, ``ldflags``, and "
"``ldlibs``."
msgstr ""

# 29d33ea2552144dabd9f4d47fac8060c
#: ../spack/lib/spack/docs/basic_usage.rst:471
msgid ""
"``target=<value> os=<value>`` Optional architecture specifier "
"(``target=haswell os=CNL10``)"
msgstr ""

# 0a136cd3adfe461da40e68822b8622b5
#: ../spack/lib/spack/docs/basic_usage.rst:473
msgid "``^`` Dependency specs (``^callpath@1.1``)"
msgstr ""

# b9ee5141862d4459ae7b2297d389bba1
#: ../spack/lib/spack/docs/basic_usage.rst:475
msgid ""
"There are two things to notice here.  The first is that specs are "
"recursively defined.  That is, each dependency after ``^`` is a spec "
"itself.  The second is that everything is optional *except* for the initial "
"package name identifier.  Users can be as vague or as specific as they want "
"about the details of building packages, and this makes spack good for "
"beginners and experts alike."
msgstr ""

# b11c95eacb114c3d9116ea9f50ea11b6
#: ../spack/lib/spack/docs/basic_usage.rst:482
msgid ""
"To really understand what's going on above, we need to think about how "
"software is structured.  An executable or a library (these are generally the "
"artifacts produced by building software) depends on other libraries in order "
"to run.  We can represent the relationship between a package and its "
"dependencies as a graph.  Here is the full dependency graph for ``mpileaks``:"
msgstr ""

# 5144508fc6fd471b80cd274656cd8ce5
#: ../spack/lib/spack/docs/basic_usage.rst:499
msgid ""
"Each box above is a package and each arrow represents a dependency on some "
"other package.  For example, we say that the package ``mpileaks`` *depends "
"on* ``callpath`` and ``mpich``.  ``mpileaks`` also depends *indirectly* on "
"``dyninst``, ``libdwarf``, and ``libelf``, in that these libraries are "
"dependencies of ``callpath``.  To install ``mpileaks``, Spack has to build "
"all of these packages.  Dependency graphs in Spack have to be acyclic, and "
"the *depends on* relationship is directional, so this is a *directed, "
"acyclic graph* or *DAG*."
msgstr ""

# a6f0b011a3094297aa09dce16a3e61a0
#: ../spack/lib/spack/docs/basic_usage.rst:508
msgid ""
"The package name identifier in the spec is the root of some dependency DAG, "
"and the DAG itself is implicit.  Spack knows the precise dependencies among "
"packages, but users do not need to know the full DAG structure. Each ``^`` "
"in the full spec refers to some dependency of the root package. Spack will "
"raise an error if you supply a name after ``^`` that the root does not "
"actually depend on (e.g. ``mpileaks ^emacs@23.3``)."
msgstr ""

# 7168e001e67040f3841a624fd06d1ca7
#: ../spack/lib/spack/docs/basic_usage.rst:516
msgid ""
"Spack further simplifies things by only allowing one configuration of each "
"package within any single build.  Above, both ``mpileaks`` and ``callpath`` "
"depend on ``mpich``, but ``mpich`` appears only once in the DAG.  You cannot "
"build an ``mpileaks`` version that depends on one version of ``mpich`` *and* "
"on a ``callpath`` version that depends on some *other* version of "
"``mpich``.  In general, such a configuration would likely behave "
"unexpectedly at runtime, and Spack enforces this to ensure a consistent "
"runtime environment."
msgstr ""

# 1f9c5670c2ff43e2aa00734c05c84dc6
#: ../spack/lib/spack/docs/basic_usage.rst:525
msgid ""
"The point of specs is to abstract this full DAG from Spack users.  If a user "
"does not care about the DAG at all, she can refer to mpileaks by simply "
"writing ``mpileaks``.  If she knows that ``mpileaks`` indirectly uses "
"``dyninst`` and she wants a particular version of ``dyninst``, then she can "
"refer to ``mpileaks ^dyninst@8.1``.  Spack will fill in the rest when it "
"parses the spec; the user only needs to know package names and minimal "
"details about their relationship."
msgstr ""

# b714f481c34d4ff8b34d6a47221d6679
#: ../spack/lib/spack/docs/basic_usage.rst:533
msgid ""
"When spack prints out specs, it sorts package names alphabetically to "
"normalize the way they are displayed, but users do not need to worry about "
"this when they write specs.  The only restriction on the order of "
"dependencies within a spec is that they appear *after* the root package.  "
"For example, these two specs represent exactly the same configuration:"
msgstr ""

# 08e8c5bec435456aa4aea16957d1c9e2
#: ../spack/lib/spack/docs/basic_usage.rst:545
msgid ""
"You can put all the same modifiers on dependency specs that you would put on "
"the root spec.  That is, you can specify their versions, compilers, "
"variants, and architectures just like any other spec. Specifiers are "
"associated with the nearest package name to their left. For example, above, "
"``@1.1`` and ``%gcc@4.7.2`` associates with the ``callpath`` package, while "
"``@1.2:1.4``, ``%gcc@4.7.5``, ``+debug``, ``-qt``, and ``target=haswell "
"os=CNL10`` all associate with the ``mpileaks`` package."
msgstr ""

# 7327da1b8a394720b10e58cbf4935884
#: ../spack/lib/spack/docs/basic_usage.rst:553
msgid ""
"In the diagram above, ``mpileaks`` depends on ``mpich`` with an unspecified "
"version, but packages can depend on other packages with *constraints* by "
"adding more specifiers.  For example, ``mpileaks`` could depend on "
"``mpich@1.2:`` if it can only build with version ``1.2`` or higher of "
"``mpich``."
msgstr ""

# 3d1201e09e7e47bdaae635c7d2af58c6
#: ../spack/lib/spack/docs/basic_usage.rst:559
msgid "Below are more details about the specifiers that you can add to specs."
msgstr ""

# 76d4887b1c7e481ab7892556861ec174
#: ../spack/lib/spack/docs/basic_usage.rst:563
msgid "Version specifier"
msgstr ""

# ddad6526a8cd4c5a9afd6242391e3fa1
#: ../spack/lib/spack/docs/basic_usage.rst:565
msgid ""
"A version specifier comes somewhere after a package name and starts with "
"``@``.  It can be a single version, e.g. ``@1.0``, ``@3``, or ``@1.2a7``.  "
"Or, it can be a range of versions, such as ``@1.0:1.5`` (all versions "
"between ``1.0`` and ``1.5``, inclusive).  Version ranges can be open, e.g. "
"``:3`` means any version up to and including ``3``. This would include "
"``3.4`` and ``3.4.2``.  ``4.2:`` means any version above and including "
"``4.2``.  Finally, a version specifier can be a set of arbitrary versions, "
"such as ``@1.0,1.5,1.7`` (``1.0``, ``1.5``, or ``1.7``).  When you supply "
"such a specifier to ``spack install``, it constrains the set of versions "
"that Spack will install."
msgstr ""

# 44a47118139e4f3b8d8630481c655a48
#: ../spack/lib/spack/docs/basic_usage.rst:576
msgid ""
"If the version spec is not provided, then Spack will choose one according to "
"policies set for the particular spack installation.  If the spec is "
"ambiguous, i.e. it could match multiple versions, Spack will choose a "
"version within the spec's constraints according to policies set for the "
"particular Spack installation."
msgstr ""

# 8d8534473dd049c5b33bc4d2b0cc0ff5
#: ../spack/lib/spack/docs/basic_usage.rst:582
msgid ""
"Details about how versions are compared and how Spack determines if one "
"version is less than another are discussed in the developer guide."
msgstr ""

# e0162174e32e4a91b5d761a28c70f747
#: ../spack/lib/spack/docs/basic_usage.rst:587
msgid "Compiler specifier"
msgstr ""

# 5638f26889d14393840b11ad19cb78d7
#: ../spack/lib/spack/docs/basic_usage.rst:589
msgid ""
"A compiler specifier comes somewhere after a package name and starts with ``"
"%``.  It tells Spack what compiler(s) a particular package should be built "
"with.  After the ``%`` should come the name of some registered Spack "
"compiler.  This might include ``gcc``, or ``intel``, but the specific "
"compilers available depend on the site.  You can run ``spack compilers`` to "
"get a list; more on this below."
msgstr ""

# 6b0222e9aa1e4ee29845d8345d30864a
#: ../spack/lib/spack/docs/basic_usage.rst:596
msgid ""
"The compiler spec can be followed by an optional *compiler version*. A "
"compiler version specifier looks exactly like a package version specifier.  "
"Version specifiers will associate with the nearest package name or compiler "
"specifier to their left in the spec."
msgstr ""

# 306225d111a94fa9a505980c27003cd6
#: ../spack/lib/spack/docs/basic_usage.rst:601
msgid ""
"If the compiler spec is omitted, Spack will choose a default compiler based "
"on site policies."
msgstr ""

# #-#-#-#-#  basic_usage.pot (Spack 0.12)  #-#-#-#-#
# a3fccb6b000d44ba87cad47d01616910
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# 025095118b1144b99446446bb1021dce
# #-#-#-#-#  tutorial_packaging.pot (Spack 0.12)  #-#-#-#-#
# 4d655bf6b220440aba6cbaa53c3db854
#: ../spack/lib/spack/docs/basic_usage.rst:609
#: ../spack/lib/spack/docs/packaging_guide.rst:1084
#: ../spack/lib/spack/docs/tutorial_packaging.rst:470
msgid "Variants"
msgstr ""

# 3f7f5dca9aa14269af220a5d8806187e
#: ../spack/lib/spack/docs/basic_usage.rst:611
msgid ""
"Variants are named options associated with a particular package. They are "
"optional, as each package must provide default values for each variant it "
"makes available. Variants can be specified using a flexible parameter syntax "
"``name=<value>``. For example, ``spack install libelf debug=True`` will "
"install libelf build with debug flags. The names of particular variants "
"available for a package depend on what was provided by the package author. "
"``spack info <package>`` will provide information on what build variants are "
"available."
msgstr ""

# f91f4ed3b8af4d208b05e655bedd7654
#: ../spack/lib/spack/docs/basic_usage.rst:620
msgid ""
"For compatibility with earlier versions, variants which happen to be boolean "
"in nature can be specified by a syntax that represents turning options on "
"and off. For example, in the previous spec we could have supplied ``libelf "
"+debug`` with the same effect of enabling the debug compile time option for "
"the libelf package."
msgstr ""

# 8a5921cd0c034e9cb8bffada9570cbc3
#: ../spack/lib/spack/docs/basic_usage.rst:626
msgid ""
"Depending on the package a variant may have any default value.  For "
"``libelf`` here, ``debug`` is ``False`` by default, and we turned it on with "
"``debug=True`` or ``+debug``.  If a variant is ``True`` by default you can "
"turn it off by either adding ``-name`` or ``~name`` to the spec."
msgstr ""

# 763b9ac08ac149faac19d80ac7bfed74
#: ../spack/lib/spack/docs/basic_usage.rst:631
msgid ""
"There are two syntaxes here because, depending on context, ``~`` and ``-`` "
"may mean different things.  In most shells, the following will result in the "
"shell performing home directory substitution:"
msgstr ""

# fc58c579cdba4dec8ae737a8941c4c4a
#: ../spack/lib/spack/docs/basic_usage.rst:640
msgid ""
"If there is a user called ``debug``, the ``~`` will be incorrectly "
"expanded.  In this situation, you would want to write ``libelf -debug``.  "
"However, ``-`` can be ambiguous when included after a package name without "
"spaces:"
msgstr ""

# c98fd7f506a349bda530d12c4386d6a4
#: ../spack/lib/spack/docs/basic_usage.rst:650
msgid ""
"Spack allows the ``-`` character to be part of package names, so the above "
"will be interpreted as a request for the ``mpileaks-debug`` package, not a "
"request for ``mpileaks`` built without ``debug`` options.  In this scenario, "
"you should write ``mpileaks~debug`` to avoid ambiguity."
msgstr ""

# 631b0b981d1c4ad696ae282f6d48d182
#: ../spack/lib/spack/docs/basic_usage.rst:656
msgid ""
"When spack normalizes specs, it prints them out with no spaces boolean "
"variants using the backwards compatibility syntax and uses only ``~`` for "
"disabled boolean variants.  The ``-`` and spaces on the command line are "
"provided for convenience and legibility."
msgstr ""

# #-#-#-#-#  basic_usage.pot (Spack 0.12)  #-#-#-#-#
# aa6b7d5f4f4446019c44a081221eebce
# #-#-#-#-#  tutorial_configuration.pot (Spack 0.12)  #-#-#-#-#
# 41282d7671db4b67bf70f547448f1058
#: ../spack/lib/spack/docs/basic_usage.rst:663
#: ../spack/lib/spack/docs/tutorial_configuration.rst:275
msgid "Compiler Flags"
msgstr ""

# 9129842bbeb841fd9c871a983e9d131a
#: ../spack/lib/spack/docs/basic_usage.rst:665
msgid ""
"Compiler flags are specified using the same syntax as non-boolean variants, "
"but fulfill a different purpose. While the function of a variant is set by "
"the package, compiler flags are used by the compiler wrappers to inject "
"flags into the compile line of the build. Additionally, compiler flags are "
"inherited by dependencies. ``spack install libdwarf cppflags=\"-g\"`` will "
"install both libdwarf and libelf with the ``-g`` flag injected into their "
"compile line."
msgstr ""

# cea6091a5d264cc0a812362490097cc0
#: ../spack/lib/spack/docs/basic_usage.rst:673
msgid ""
"Notice that the value of the compiler flags must be quoted if it contains "
"any spaces. Any of ``cppflags=-O3``, ``cppflags=\"-O3\"``, ``cppflags='-"
"O3'``, and ``cppflags=\"-O3 -fPIC\"`` are acceptable, but ``cppflags=-O3 -"
"fPIC`` is not. Additionally, if the value of the compiler flags is not the "
"last thing on the line, it must be followed by a space. The commmand ``spack "
"install libelf cppflags=\"-O3\"%intel`` will be interpreted as an attempt to "
"set ``cppflags=\"-O3%intel\"``."
msgstr ""

# 781ef64262d645ef8dc0f2c4f58c350c
#: ../spack/lib/spack/docs/basic_usage.rst:681
msgid ""
"The six compiler flags are injected in the order of implicit make commands "
"in GNU Autotools. If all flags are set, the order is ``$cppflags $cflags|"
"$cxxflags $ldflags <command> $ldlibs`` for C and C++ and ``$fflags $cppflags "
"$ldflags <command> $ldlibs`` for Fortran."
msgstr ""

# 578609c812474d9db5a960262f02512f
#: ../spack/lib/spack/docs/basic_usage.rst:688
msgid "Compiler environment variables and additional RPATHs"
msgstr ""

# 2204e3c6fcbc4d4b8089f270e03756fc
#: ../spack/lib/spack/docs/basic_usage.rst:690
msgid ""
"In the exceptional case a compiler requires setting special environment "
"variables, like an explicit library load path. These can bet set in an extra "
"section in the compiler configuration (the supported environment "
"modification commands are: ``set``, ``unset``, ``append-path``, and "
"``prepend-path``). The user can also specify additional ``RPATHs`` that the "
"compiler will add to all executables generated by that compiler.  This is "
"useful for forcing certain compilers to RPATH their own runtime libraries, "
"so that executables will run without the need to set ``LD_LIBRARY_PATH``."
msgstr ""

# 1305a9483d8244eb8a4c91181e25d6ff
#: ../spack/lib/spack/docs/basic_usage.rst:726
msgid ""
"The section `environment` is interpreted as an ordered dictionary, which "
"means two things. First, environment modification are applied in the order "
"they are specified in the configuration file. Second, you cannot express "
"environment modifications that require mixing different commands, i.e. you "
"cannot `set` one variable, than `prepend-path` to another one, and than "
"again `set` a third one."
msgstr ""

# 65f9a1bf2c8d47cab9a06b392187ccfb
#: ../spack/lib/spack/docs/basic_usage.rst:735
msgid "Architecture specifiers"
msgstr ""

# 45408d19cb444ce397842b07c3d2b3a4
#: ../spack/lib/spack/docs/basic_usage.rst:737
msgid ""
"The architecture can be specified by using the reserved words ``target`` and/"
"or ``os`` (``target=x86-64 os=debian7``). You can also use the triplet form "
"of platform, operating system and processor."
msgstr ""

# 81e3f6e5e6f24bff9078284a56826d3f
#: ../spack/lib/spack/docs/basic_usage.rst:745
msgid ""
"Users on non-Cray systems won't have to worry about specifying the "
"architecture. Spack will autodetect what kind of operating system is on your "
"machine as well as the processor. For more information on how the "
"architecture can be used on Cray machines, see :ref:`cray-support`"
msgstr ""

# #-#-#-#-#  basic_usage.pot (Spack 0.12)  #-#-#-#-#
# 924f554ddeee4bd3b5d5e80e0a977921
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# ba60170a2b90425da737852e7c1e3fd6
#: ../spack/lib/spack/docs/basic_usage.rst:754
#: ../spack/lib/spack/docs/packaging_guide.rst:2252
msgid "Virtual dependencies"
msgstr ""

# fdd0d9442b9447caa0aacf1579a75515
#: ../spack/lib/spack/docs/basic_usage.rst:756
msgid ""
"The dependence graph for ``mpileaks`` we saw above wasn't *quite* accurate.  "
"``mpileaks`` uses MPI, which is an interface that has many different "
"implementations.  Above, we showed ``mpileaks`` and ``callpath`` depending "
"on ``mpich``, which is one *particular* implementation of MPI.  However, we "
"could build either with another implementation, such as ``openmpi`` or "
"``mvapich``."
msgstr ""

# ea8deab0bceb4c6fa2eba64cae00d534
#: ../spack/lib/spack/docs/basic_usage.rst:763
msgid ""
"Spack represents interfaces like this using *virtual dependencies*. The real "
"dependency DAG for ``mpileaks`` looks like this:"
msgstr ""

# 68b0097fee6d4d028a8f8dba2fc943b8
#: ../spack/lib/spack/docs/basic_usage.rst:777
msgid ""
"Notice that ``mpich`` has now been replaced with ``mpi``. There is no *real* "
"MPI package, but some packages *provide* the MPI interface, and these "
"packages can be substituted in for ``mpi`` when ``mpileaks`` is built."
msgstr ""

# 822d4b21ff43437b92f754c8a21fe3d3
#: ../spack/lib/spack/docs/basic_usage.rst:782
msgid ""
"You can see what virtual packages a particular package provides by getting "
"info on it:"
msgstr ""

# c7f810bd0bd341f19bcedf42a56939cb
#: ../spack/lib/spack/docs/basic_usage.rst:787
msgid ""
"Spack is unique in that its virtual packages can be versioned, just like "
"regular packages.  A particular version of a package may provide a "
"particular version of a virtual package, and we can see above that ``mpich`` "
"versions ``1`` and above provide all ``mpi`` interface versions up to ``1``, "
"and ``mpich`` versions ``3`` and above provide ``mpi`` versions up to "
"``3``.  A package can *depend on* a particular version of a virtual package, "
"e.g. if an application needs MPI-2 functions, it can depend on ``mpi@2:`` to "
"indicate that it needs some implementation that provides MPI-2 functions."
msgstr ""

# ad5116a43e5947c6b72dee7f2bfb6119
#: ../spack/lib/spack/docs/basic_usage.rst:799
msgid "Constraining virtual packages"
msgstr ""

# 24dc05a17b7c49189838310c415e3b4c
#: ../spack/lib/spack/docs/basic_usage.rst:801
msgid ""
"When installing a package that depends on a virtual package, you can opt to "
"specify the particular provider you want to use, or you can let Spack pick.  "
"For example, if you just type this:"
msgstr ""

# 6bd1f11de51b4e95a330350c4a4e906f
#: ../spack/lib/spack/docs/basic_usage.rst:809
msgid ""
"Then spack will pick a provider for you according to site policies. If you "
"really want a particular version, say ``mpich``, then you could run this "
"instead:"
msgstr ""

# 18565c6f567a4832b18627c0bb1ae405
#: ../spack/lib/spack/docs/basic_usage.rst:817
msgid ""
"This forces spack to use some version of ``mpich`` for its implementation.  "
"As always, you can be even more specific and require a particular ``mpich`` "
"version:"
msgstr ""

# 4ce77b79189e4af99509d928122642e0
#: ../spack/lib/spack/docs/basic_usage.rst:825
msgid ""
"The ``mpileaks`` package in particular only needs MPI-1 commands, so any MPI "
"implementation will do.  If another package depends on ``mpi@2`` and you try "
"to give it an insufficient MPI implementation (e.g., one that provides only "
"``mpi@:1``), then Spack will raise an error.  Likewise, if you try to plug "
"in some package that doesn't provide MPI, Spack will raise an error."
msgstr ""

# 021e7def23184c2b992846cd81d507fb
#: ../spack/lib/spack/docs/basic_usage.rst:834
msgid "Specifying Specs by Hash"
msgstr ""

# af9158a478ca4d84aa7c0f060567f493
#: ../spack/lib/spack/docs/basic_usage.rst:836
msgid ""
"Complicated specs can become cumbersome to enter on the command line, "
"especially when many of the qualifications are necessary to distinguish "
"between similar installs. To avoid this, when referencing an existing spec, "
"Spack allows you to reference specs by their hash. We previously discussed "
"the spec hash that Spack computes. In place of a spec in any command, "
"substitute ``/<hash>`` where ``<hash>`` is any amount from the beginning of "
"a spec hash."
msgstr ""

# ef4395ff6f7f435e8bc69b50ca530411
#: ../spack/lib/spack/docs/basic_usage.rst:844
msgid ""
"For example, lets say that you accidentally installed two different "
"``mvapich2`` installations. If you want to uninstall one of them but don't "
"know what the difference is, you can run:"
msgstr ""

# 1876e738f9ca483c825a52edb952bde8
#: ../spack/lib/spack/docs/basic_usage.rst:857
msgid "You can then uninstall the latter installation using:"
msgstr ""

# 2ca91571d58e42c1b05ceb8f06b2b624
#: ../spack/lib/spack/docs/basic_usage.rst:864
msgid ""
"Or, if you want to build with a specific installation as a dependency, you "
"can use:"
msgstr ""

# 21b910b91b264ea3a382905873fd97d6
#: ../spack/lib/spack/docs/basic_usage.rst:872
msgid ""
"If the given spec hash is sufficiently long as to be unique, Spack will "
"replace the reference with the spec to which it refers. Otherwise, it will "
"prompt for a more qualified hash."
msgstr ""

# c900d110f5494b5aa0218c31af81c84c
#: ../spack/lib/spack/docs/basic_usage.rst:876
msgid ""
"Note that this will not work to reinstall a dependency uninstalled by "
"``spack uninstall --force``."
msgstr ""

# ae27006a2c10447cb3e49528b55e6542
#: ../spack/lib/spack/docs/basic_usage.rst:883
msgid "``spack providers``"
msgstr ""

# 7459780828164de98741261bb144f58c
#: ../spack/lib/spack/docs/basic_usage.rst:885
msgid ""
"You can see what packages provide a particular virtual package using ``spack "
"providers``.  If you wanted to see what packages provide ``mpi``, you would "
"just run:"
msgstr ""

# 2c910bb9d8cf4211adda95aca2803f27
#: ../spack/lib/spack/docs/basic_usage.rst:891
msgid ""
"And if you *only* wanted to see packages that provide MPI-2, you would add a "
"version specifier to the spec:"
msgstr ""

# acdf81b5688643b7bc24ce45622a913c
#: ../spack/lib/spack/docs/basic_usage.rst:896
msgid ""
"Notice that the package versions that provide insufficient MPI versions are "
"now filtered out."
msgstr ""

# 17449d6ede47428f8b75a19650f9f410
#: ../spack/lib/spack/docs/basic_usage.rst:901
msgid "Extensions & Python support"
msgstr ""

# 9a7b5d7daa2e4daf916bcd46e4cee44e
#: ../spack/lib/spack/docs/basic_usage.rst:903
msgid ""
"Spack's installation model assumes that each package will live in its own "
"install prefix.  However, certain packages are typically installed *within* "
"the directory hierarchy of other packages.  For example, modules in "
"interpreted languages like `Python <https://www.python.org>`_ are typically "
"installed in the ``$prefix/lib/python-2.7/site-packages`` directory."
msgstr ""

# 9a16c96a1f884453894cfe94dbd00936
#: ../spack/lib/spack/docs/basic_usage.rst:910
msgid ""
"Spack has support for this type of installation as well.  In Spack, a "
"package that can live inside the prefix of another package is called an "
"*extension*.  Suppose you have Python installed like so:"
msgstr ""

# 91c955f318d1449e9802bcc5bfea1a3e
#: ../spack/lib/spack/docs/basic_usage.rst:925
msgid "``spack extensions``"
msgstr ""

# 2debd76e558e4583a779b096ae93b9d9
#: ../spack/lib/spack/docs/basic_usage.rst:927
msgid "You can find extensions for your Python installation like this:"
msgstr ""

# 7078be192a0b4bdd8b10fac3ea2112e0
#: ../spack/lib/spack/docs/basic_usage.rst:952
msgid ""
"The extensions are a subset of what's returned by ``spack list``, and they "
"are packages like any other.  They are installed into their own prefixes, "
"and you can see this with ``spack find --paths``:"
msgstr ""

# 5073c0423ca948f08c24fa6e5c2003a8
#: ../spack/lib/spack/docs/basic_usage.rst:963
msgid ""
"However, even though this package is installed, you cannot use it directly "
"when you run ``python``:"
msgstr ""

# 780405ad21cb4e638c2d227194c94383
#: ../spack/lib/spack/docs/basic_usage.rst:981
msgid "Using Extensions"
msgstr ""

# f0394e0077224c9f859fb92958922b18
#: ../spack/lib/spack/docs/basic_usage.rst:983
msgid ""
"There are three ways to get ``numpy`` working in Python.  The first is to "
"use :ref:`shell-support`.  You can simply ``use`` or ``load`` the module for "
"the extension, and it will be added to the ``PYTHONPATH`` in your current "
"shell."
msgstr ""

# a849e5a61d0d4af1898df60c294ac7d2
#: ../spack/lib/spack/docs/basic_usage.rst:988
msgid "For tcl modules:"
msgstr ""

# a4b7fcaef6c1479ba589645c33ff497e
#: ../spack/lib/spack/docs/basic_usage.rst:995
msgid "or, for dotkit:"
msgstr ""

# 1ac78bb4bb5f4aada37d76bc81c0d620
#: ../spack/lib/spack/docs/basic_usage.rst:1002
msgid ""
"Now ``import numpy`` will succeed for as long as you keep your current "
"session open."
msgstr ""

# 0c323c0d10e14374a6d155ead6991acf
#: ../spack/lib/spack/docs/basic_usage.rst:1007
msgid "Activating Extensions in a View"
msgstr ""

# 05690df89cc74fe1bbdfecc3c1d1cdaa
#: ../spack/lib/spack/docs/basic_usage.rst:1009
msgid ""
"The second way to use extensions is to create a view, which merges the "
"python installation along with the extensions into a single prefix. See :ref:"
"`filesystem-views` for a more in-depth description of views and :ref:`cmd-"
"spack-view` for usage of the ``spack view`` command."
msgstr ""

# 717c840c152147948ff0ec3c37b65919
#: ../spack/lib/spack/docs/basic_usage.rst:1016
msgid "Activating Extensions Globally"
msgstr ""

# 13f24e990fcc4b2e9504c5a85ce790aa
#: ../spack/lib/spack/docs/basic_usage.rst:1018
msgid ""
"As an alternative to creating a merged prefix with Python and its "
"extensions, and prior to support for views, Spack has provided a means to "
"install the extension into the Spack installation prefix for the extendee. "
"This has typically been useful since extendable packages typically search "
"their own installation path for addons by default."
msgstr ""

# 92b674d07168405896e30cc402d8de4f
#: ../spack/lib/spack/docs/basic_usage.rst:1024
msgid "Global activations are performed with the ``spack activate`` command:"
msgstr ""

# c81ea55e77c24ce19160c424c125d9ec
#: ../spack/lib/spack/docs/basic_usage.rst:1030
msgid "``spack activate``"
msgstr ""

# 339fbe0450014eae993b74f96ae56d77
#: ../spack/lib/spack/docs/basic_usage.rst:1039
msgid ""
"Several things have happened here.  The user requested that ``py-numpy`` be "
"activated in the ``python`` installation it was built with.  Spack knows "
"that ``py-numpy`` depends on ``py-nose`` and ``py-setuptools``, so it "
"activated those packages first.  Finally, once all dependencies were "
"activated in the ``python`` installation, ``py-numpy`` was activated as well."
msgstr ""

# e5bbabff12b9490095b2a4f1a0a9635b
#: ../spack/lib/spack/docs/basic_usage.rst:1046
msgid ""
"If we run ``spack extensions`` again, we now see the three new packages "
"listed as activated:"
msgstr ""

# 5ca9d94651c24652810b34048b1e4346
#: ../spack/lib/spack/docs/basic_usage.rst:1074
msgid ""
"Now, when a user runs python, ``numpy`` will be available for import "
"*without* the user having to explicitly loaded.  ``python@2.7.8`` now acts "
"like a system Python installation with ``numpy`` installed inside of it."
msgstr ""

# e59d2f375f5b41f2b486e053f0f39cfd
#: ../spack/lib/spack/docs/basic_usage.rst:1079
msgid ""
"Spack accomplishes this by symbolically linking the *entire* prefix of the "
"``py-numpy`` into the prefix of the ``python`` package.  To the python "
"interpreter, it looks like ``numpy`` is installed in the ``site-packages`` "
"directory."
msgstr ""

# 5aba686b6b204ab9b4d8f3f07c1e1cd4
#: ../spack/lib/spack/docs/basic_usage.rst:1084
msgid ""
"The only limitation of global activation is that you can only have a "
"*single* version of an extension activated at a time.  This is because "
"multiple versions of the same extension would conflict if symbolically "
"linked into the same prefix.  Users who want a different version of a "
"package can still get it by using environment modules or views, but they "
"will have to explicitly load their preferred version."
msgstr ""

# b005a05503f843bdac4b403e7dc361a2
#: ../spack/lib/spack/docs/basic_usage.rst:1093
msgid "``spack activate --force``"
msgstr ""

# dfb0ec26017b4c0cb5f066a05a8eed84
#: ../spack/lib/spack/docs/basic_usage.rst:1095
msgid ""
"If, for some reason, you want to activate a package *without* its "
"dependencies, you can use ``spack activate --force``:"
msgstr ""

# 1cba95161a4c4f87a5d7b33986a46ba7
#: ../spack/lib/spack/docs/basic_usage.rst:1107
msgid "``spack deactivate``"
msgstr ""

# d6028d701cae4a3ebc09eb77f449b364
#: ../spack/lib/spack/docs/basic_usage.rst:1109
msgid ""
"We've seen how activating an extension can be used to set up a default "
"version of a Python module.  Obviously, you may want to change that at some "
"point.  ``spack deactivate`` is the command for this.  There are several "
"variants:"
msgstr ""

# 15725fe243f3413eb0407b4ccaa6d47f
#: ../spack/lib/spack/docs/basic_usage.rst:1114
msgid ""
"``spack deactivate <extension>`` will deactivate a single extension.  If "
"another activated extension depends on this one, Spack will warn you and "
"exit with an error."
msgstr ""

# a4fdff1999fe412c81741730686a457b
#: ../spack/lib/spack/docs/basic_usage.rst:1117
msgid ""
"``spack deactivate --force <extension>`` deactivates an extension regardless "
"of packages that depend on it."
msgstr ""

# f15684e7371d4db6b497137793ed5334
#: ../spack/lib/spack/docs/basic_usage.rst:1119
msgid ""
"``spack deactivate --all <extension>`` deactivates an extension and all of "
"its dependencies.  Use ``--force`` to disregard dependents."
msgstr ""

# e1af5a091769459b9ca8bab848708e1d
#: ../spack/lib/spack/docs/basic_usage.rst:1121
msgid ""
"``spack deactivate --all <extendee>`` deactivates *all* activated extensions "
"of a package.  For example, to deactivate *all* python extensions, use:"
msgstr ""

# bbdbf099908d4b27b51387d285a970a6
#: ../spack/lib/spack/docs/basic_usage.rst:1131
msgid "Filesystem requirements"
msgstr ""

# 92c1aa1d10414f0199b21da5d5a259ee
#: ../spack/lib/spack/docs/basic_usage.rst:1133
msgid ""
"By default, Spack needs to be run from a filesystem that supports ``flock`` "
"locking semantics.  Nearly all local filesystems and recent versions of NFS "
"support this, but parallel filesystems or NFS volumes may be configured "
"without ``flock`` support enabled.  You can determine how your filesystems "
"are mounted with ``mount``.  The output for a Lustre filesystem might look "
"like this:"
msgstr ""

# 8761ba2547ac4195a448246750437201
#: ../spack/lib/spack/docs/basic_usage.rst:1146
msgid "Note the ``flock`` option on both Lustre mounts."
msgstr ""

# f352388d410f4a0686298bd3ed0ecbcd
#: ../spack/lib/spack/docs/basic_usage.rst:1148
msgid ""
"If you do not see this or a similar option for your filesystem, you have a "
"few options. First, you can move your Spack installation to a filesystem "
"that supports locking. Second, you could ask your system administrator to "
"enable ``flock`` for your filesystem."
msgstr ""

# 453e751401b7473c8fb458f498fdb3ff
#: ../spack/lib/spack/docs/basic_usage.rst:1153
msgid "If none of those work, you can disable locking in one of two ways:"
msgstr ""

# 3a50e8ce790a42dba9575f7eb5f6eb58
#: ../spack/lib/spack/docs/basic_usage.rst:1155
msgid ""
"Run Spack with the ``-L`` or ``--disable-locks`` option to disable locks on "
"a call-by-call basis."
msgstr ""

# aa45be19e8854681884090fa09f7030a
#: ../spack/lib/spack/docs/basic_usage.rst:1157
msgid ""
"Edit :ref:`config.yaml <config-yaml>` and set the ``locks`` option to "
"``false`` to always disable locking."
msgstr ""

# 421486797632431eb1816021a554bdde
#: ../spack/lib/spack/docs/basic_usage.rst:1162
msgid ""
"If you disable locking, concurrent instances of Spack will have no way to "
"avoid stepping on each other.  You must ensure that there is only **one** "
"instance of Spack running at a time.  Otherwise, Spack may end up with a "
"corrupted database file, or you may not be able to see all installed "
"packages in commands like ``spack find``."
msgstr ""

# dbe3e0bcb7664ad498937bc44db4982c
#: ../spack/lib/spack/docs/basic_usage.rst:1168
msgid ""
"If you are unfortunate enough to run into this situation, you may be able to "
"fix it by running ``spack reindex``."
msgstr ""

# 4ee6bc22ce66421d85cbfc2b79094e9e
#: ../spack/lib/spack/docs/basic_usage.rst:1171
msgid "This issue typically manifests with the error below:"
msgstr ""

# 4a2cebf56ac14bfbad96caa41d6a65d0
#: ../spack/lib/spack/docs/basic_usage.rst:1195
msgid "A nicer error message is TBD in future versions of Spack."
msgstr ""

# 577a1c019bac4327b588fe9b91bb01eb
#: ../spack/lib/spack/docs/basic_usage.rst:1200
msgid "Getting Help"
msgstr ""

# 7003d239799b4a15b69322bb55e87e8c
#: ../spack/lib/spack/docs/basic_usage.rst:1206
msgid "``spack help``"
msgstr ""

# 37548d77c01d46d6a365ec829e4789dc
#: ../spack/lib/spack/docs/basic_usage.rst:1208
msgid ""
"If you don't find what you need here, the ``help`` subcommand will print out "
"out a list of *all* of spack's options and subcommands:"
msgstr ""

# 6188da40f4694892bbbb5cdca5dba62a
#: ../spack/lib/spack/docs/basic_usage.rst:1213
msgid ""
"Adding an argument, e.g. ``spack help <subcommand>``, will print out usage "
"information for a particular subcommand:"
msgstr ""

# d5618e99228348c5815d811200594948
#: ../spack/lib/spack/docs/basic_usage.rst:1218
msgid ""
"Alternately, you can use ``spack --help`` in place of ``spack help``, or "
"``spack <subcommand> --help`` to get help on a particular subcommand."
msgstr ""

# 1f0085a24ae44cd29319d2a08af34796
#: ../spack/lib/spack/docs/binary_caches.rst:10
msgid "Build Caches"
msgstr ""

# 2e6c0345d751443cbb2ed529a8da0a33
#: ../spack/lib/spack/docs/binary_caches.rst:12
msgid ""
"Some sites may encourage users to set up their own test environments before "
"carrying out central installations, or some users may prefer to set up these "
"environments on their own motivation. To reduce the load of recompiling "
"otherwise identical package specs in different installations, installed "
"packages can be put into build cache tarballs, uploaded to your Spack mirror "
"and then downloaded and installed by others."
msgstr ""

# bd74f8aa80844002af7c5b64a3e6b41b
#: ../spack/lib/spack/docs/binary_caches.rst:22
msgid "Creating build cache files"
msgstr ""

# a0cd6aa780bf458e81bcca1f03f570f7
#: ../spack/lib/spack/docs/binary_caches.rst:24
msgid ""
"A compressed tarball of an installed package is created. Tarballs are "
"created for all of its link and run dependency packages as well. Compressed "
"tarballs are signed with gpg and signature and tarball and put in a ``."
"spack`` file. Optionally, the rpaths (and ids and deps on macOS) can be "
"changed to paths relative to the Spack install tree before the tarball is "
"created."
msgstr ""

# 5acec6e9c73d401eb0586d04105657c9
#: ../spack/lib/spack/docs/binary_caches.rst:30
msgid "Build caches are created via:"
msgstr ""

# 0d836874c24e4d06a4d21d30d6600d92
#: ../spack/lib/spack/docs/binary_caches.rst:39
msgid "Finding or installing build cache files"
msgstr ""

# 037e96c034ad4d46adb94b23595ac01b
#: ../spack/lib/spack/docs/binary_caches.rst:41
msgid ""
"To find build caches or install build caches, a Spack mirror must be "
"configured with:"
msgstr ""

# 974fa02eaae94fe68e4d28471c409858
#: ../spack/lib/spack/docs/binary_caches.rst:48
msgid "Build caches are found via:"
msgstr ""

# 12917ac429404febb0a1f148fcd8c678
#: ../spack/lib/spack/docs/binary_caches.rst:54
msgid "Build caches are installed via:"
msgstr ""

# abc8afa867a649d59ef67498dc07c3af
#: ../spack/lib/spack/docs/binary_caches.rst:63
msgid "Relocation"
msgstr ""

# 0f575e9683db4a4194e10dd24413fa0a
#: ../spack/lib/spack/docs/binary_caches.rst:65
msgid ""
"Initial build and later installation do not necessarily happen at the same "
"location. Spack provides a relocation capability and corrects for RPATHs and "
"non-relocatable scripts. However, many packages compile paths into binary "
"artifacts directly. In such cases, the build instructions of this package "
"would need to be adjusted for better re-locatability."
msgstr ""

# 862d31ca2e1845af99d0d83c4931dd18
#: ../spack/lib/spack/docs/binary_caches.rst:75
msgid "``spack buildcache``"
msgstr ""

# d86879757823491ba9d2ec8aad5f0b3f
#: ../spack/lib/spack/docs/binary_caches.rst:79
msgid "``spack buildcache create``"
msgstr ""

# 9dd329186640436caef7ae4bf7c09040
#: ../spack/lib/spack/docs/binary_caches.rst:81
msgid ""
"Create tarball of installed Spack package and all dependencies. Tarballs are "
"checksummed and signed if gpg2 is available. Places them in a directory "
"``build_cache`` that can be copied to a mirror. Commands like ``spack "
"buildcache install`` will search Spack mirrors for build_cache to get the "
"list of build caches."
msgstr ""

# 89628f6d335446c4a0a5d154b10972f8
# 4375431dd3b144bbb00ad8e7045d5cef
# 82e687d8ab0c483294ba8c85cb10e4e6
# f33b1062b756412caa5fcb570950c2de
#: ../spack/lib/spack/docs/binary_caches.rst:87
#: ../spack/lib/spack/docs/binary_caches.rst:104
#: ../spack/lib/spack/docs/binary_caches.rst:119
#: ../spack/lib/spack/docs/binary_caches.rst:133
msgid "Arguments"
msgstr ""

# #-#-#-#-#  binary_caches.pot (Spack 0.12)  #-#-#-#-#
# 3ca43dc4cfca48dd8ea46fe6a4e2f484
# ba21b19000e94c68a0abf95a0d1327d2
# 9d4686ac5ca34efa9abaa18449157367
# 3aeb7c69e0244ea383e8bc161edd0c15
# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# 7adf86711bb44abeb79ea14395422927
# c557c26fbaea46bab824f83d8baa444d
# ee0dcabc66d040689deb3b8ee40721d4
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# 7575e953cd854ae0899060e12948d2f5
#: ../spack/lib/spack/docs/binary_caches.rst:87
#: ../spack/lib/spack/docs/binary_caches.rst:104
#: ../spack/lib/spack/docs/binary_caches.rst:119
#: ../spack/lib/spack/docs/binary_caches.rst:133
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:90
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:113
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:73
#: ../spack/lib/spack/docs/packaging_guide.rst:3840
msgid "Description"
msgstr ""

# 53624f67d90145e685292740e6d6abe5
# be7c3fc709d54d2fb3c9499193ec0f57
# d7efc39a177e438db4f6f7028a8bcc1c
#: ../spack/lib/spack/docs/binary_caches.rst:89
#: ../spack/lib/spack/docs/binary_caches.rst:106
#: ../spack/lib/spack/docs/binary_caches.rst:121
msgid "``<specs>``"
msgstr ""

# c361166e579c4d729538dd438c73ccde
#: ../spack/lib/spack/docs/binary_caches.rst:89
msgid ""
"list of partial specs or hashes with a leading ``/`` to match from installed "
"packages and used for creating build caches"
msgstr ""

# 28e7d6c78a714a44b06a27edd6ef3fa4
#: ../spack/lib/spack/docs/binary_caches.rst:90
msgid "``-d <path>``"
msgstr ""

# 9125ed9929c24d42806d1b88fea2b7b1
#: ../spack/lib/spack/docs/binary_caches.rst:90
msgid ""
"directory in which ``build_cache`` directory is created, defaults to ``.``"
msgstr ""

# 22395e76a7ff4127a34313285694a232
# e51841432af34194b7010e90b9a57072
#: ../spack/lib/spack/docs/binary_caches.rst:91
#: ../spack/lib/spack/docs/binary_caches.rst:122
msgid "``-f``"
msgstr ""

# d73e9ddeeeb641eda038dba33cd7b56b
#: ../spack/lib/spack/docs/binary_caches.rst:91
msgid "overwrite ``.spack`` file in ``build_cache`` directory if it exists"
msgstr ""

# 8efa779361c147bc81847cc600239b8c
#: ../spack/lib/spack/docs/binary_caches.rst:92
msgid "``-k <key>``"
msgstr ""

# 2ff0247625d349009dc61a38a7b27bc5
#: ../spack/lib/spack/docs/binary_caches.rst:92
msgid ""
"the key to sign package with. In the case where multiple keys exist, the "
"package will be unsigned unless ``-k`` is used."
msgstr ""

# b49f4a8d226344d1b22ec3855c427dd5
#: ../spack/lib/spack/docs/binary_caches.rst:93
msgid "``-r``"
msgstr ""

# a413842638e34209bace52ac11625094
#: ../spack/lib/spack/docs/binary_caches.rst:93
msgid "make paths in binaries relative before creating tarball"
msgstr ""

# 255c4abe01564eb9938e0f856e026ffd
# 433f1c04c8d3454eadf316d3cdd330fd
# 6a1e82eda6bb4176a9e947e57cf5a2fd
#: ../spack/lib/spack/docs/binary_caches.rst:94
#: ../spack/lib/spack/docs/binary_caches.rst:123
#: ../spack/lib/spack/docs/binary_caches.rst:136
msgid "``-y``"
msgstr ""

# c4d1e1d3c7cc437a8eb0a337dcf23473
#: ../spack/lib/spack/docs/binary_caches.rst:94
msgid "answer yes to all create unsigned ``build_cache`` questions"
msgstr ""

# eb5eefc657414522baeaf35de2a46c1e
#: ../spack/lib/spack/docs/binary_caches.rst:99
msgid "``spack buildcache list``"
msgstr ""

# f2b831d6e9364ff98853f9fef5a509c0
#: ../spack/lib/spack/docs/binary_caches.rst:101
msgid "Retrieves all specs for build caches available on a Spack mirror."
msgstr ""

# 3c5d4c1f289c4d9abedf6712cf3ab242
#: ../spack/lib/spack/docs/binary_caches.rst:106
msgid ""
"list of partial package specs to be matched against specs downloaded for "
"build caches"
msgstr ""

# 16ecd76eeb5543f1ba2a7a323ce41a8b
#: ../spack/lib/spack/docs/binary_caches.rst:109
msgid ""
"E.g. ``spack buildcache list gcc`` with print only commands to install "
"``gcc`` package(s)"
msgstr ""

# 8050c13bd3c349c7941841e797210b56
#: ../spack/lib/spack/docs/binary_caches.rst:113
msgid "``spack buildcache install``"
msgstr ""

# fd7a29bc78cb4f208d8273090e75103c
#: ../spack/lib/spack/docs/binary_caches.rst:115
msgid ""
"Retrieves all specs for build caches available on a Spack mirror and "
"installs build caches with specs matching the specs input."
msgstr ""

# 5e7569d065c14c4d9ee518c5847a974c
#: ../spack/lib/spack/docs/binary_caches.rst:121
msgid ""
"list of partial package specs or hashes with a leading ``/`` to be installed "
"from build caches"
msgstr ""

# 2c34e777cccf4032a6c94fc7454240fd
#: ../spack/lib/spack/docs/binary_caches.rst:122
msgid "remove install directory if it exists before unpacking tarball"
msgstr ""

# d8ce2576c9f8454e93d972b15209bd8d
#: ../spack/lib/spack/docs/binary_caches.rst:123
msgid "answer yes to all to don't verify package with gpg questions"
msgstr ""

# 8c9ba99f4e654ef889b291ed2bc24570
#: ../spack/lib/spack/docs/binary_caches.rst:128
msgid "``spack buildcache keys``"
msgstr ""

# 7f5e6b1d5def45529e4a94a48c36ddf7
#: ../spack/lib/spack/docs/binary_caches.rst:130
msgid "List public keys available on Spack mirror."
msgstr ""

# 4d39db9eb9ae466c80b8e825513dccd7
#: ../spack/lib/spack/docs/binary_caches.rst:135
msgid "``-i``"
msgstr ""

# f20f714392d04c57bc41b1edb751c90f
#: ../spack/lib/spack/docs/binary_caches.rst:135
msgid "trust the keys downloaded with prompt for each"
msgstr ""

# e9e0c0bc434c478eba4e31e5f4b53496
#: ../spack/lib/spack/docs/binary_caches.rst:136
msgid "answer yes to all trust all keys downloaded"
msgstr ""

# be4ef4985d694fe8899d54e35c45f2af
#: ../spack/lib/spack/docs/build_settings.rst:10
msgid "Build Customization"
msgstr ""

# d7c6c3314a704d498fd8e0c469e376d5
#: ../spack/lib/spack/docs/build_settings.rst:12
msgid ""
"Spack allows you to customize how your software is built through the "
"``packages.yaml`` file.  Using it, you can make Spack prefer particular "
"implementations of virtual dependencies (e.g., MPI or BLAS/LAPACK), or you "
"can make it prefer to build with particular compilers.  You can also tell "
"Spack to use *external* software installations already present on your "
"system."
msgstr ""

# bbc153eb1c40421785decf63d2917106
#: ../spack/lib/spack/docs/build_settings.rst:19
msgid "At a high level, the ``packages.yaml`` file is structured like this:"
msgstr ""

# 8943a3d6038b4ade89ec0504a65f43b2
#: ../spack/lib/spack/docs/build_settings.rst:32
msgid ""
"So you can either set build preferences specifically for *one* package, or "
"you can specify that certain settings should apply to *all* packages. The "
"types of settings you can customize are described in detail below."
msgstr ""

# 8c9609e19ca342faa677fe90d675ab82
#: ../spack/lib/spack/docs/build_settings.rst:36
msgid ""
"Spack's build defaults are in the default ``etc/spack/defaults/packages."
"yaml`` file.  You can override them in ``~/.spack/packages.yaml`` or ``etc/"
"spack/packages.yaml``. For more details on how this works, see :ref:"
"`configuration-scopes`."
msgstr ""

# #-#-#-#-#  build_settings.pot (Spack 0.12)  #-#-#-#-#
# 36b3ffd068ad40f494e979e5678d96f6
# #-#-#-#-#  tutorial_configuration.pot (Spack 0.12)  #-#-#-#-#
# 70ffe3447bec4311b5a08fe88791938b
#: ../spack/lib/spack/docs/build_settings.rst:45
#: ../spack/lib/spack/docs/tutorial_configuration.rst:566
msgid "External Packages"
msgstr ""

# b710631595a2413eb03204bb90effde4
#: ../spack/lib/spack/docs/build_settings.rst:47
msgid ""
"Spack can be configured to use externally-installed packages rather than "
"building its own packages. This may be desirable if machines ship with "
"system packages, such as a customized MPI that should be used instead of "
"Spack building its own MPI."
msgstr ""

# 45326bdd88da4c299dcff758494bdd1f
#: ../spack/lib/spack/docs/build_settings.rst:52
msgid ""
"External packages are configured through the ``packages.yaml`` file found in "
"a Spack installation's ``etc/spack/`` or a user's ``~/.spack/`` directory. "
"Here's an example of an external configuration:"
msgstr ""

# 2985398c49ca4427ac61e62b25f51c3c
#: ../spack/lib/spack/docs/build_settings.rst:65
msgid ""
"This example lists three installations of OpenMPI, one built with GCC, one "
"built with GCC and debug information, and another built with Intel. If Spack "
"is asked to build a package that uses one of these MPIs as a dependency, it "
"will use the pre-installed OpenMPI in the given directory. ``packages.yaml`` "
"can also be used to specify modules to load instead of the installation "
"prefixes."
msgstr ""

# 9e69e2a27aa044409704c4618d15be02
#: ../spack/lib/spack/docs/build_settings.rst:72
msgid ""
"Each ``packages.yaml`` begins with a ``packages:`` token, followed by a list "
"of package names.  To specify externals, add a ``paths`` or ``modules`` "
"token under the package name, which lists externals in a ``spec: /path`` or "
"``spec: module-name`` format.  Each spec should be as well-defined as "
"reasonably possible.  If a package lacks a spec component, such as missing a "
"compiler or package version, then Spack will guess the missing component "
"based on its most-favored packages, and it may guess incorrectly."
msgstr ""

# 49466c7f92b84937840d5a7ebaa5c08e
#: ../spack/lib/spack/docs/build_settings.rst:81
msgid ""
"Each package version and compiler listed in an external should have entries "
"in Spack's packages and compiler configuration, even though the package and "
"compiler may not ever be built."
msgstr ""

# 5639af24c24143d6af4369bc84ed4612
#: ../spack/lib/spack/docs/build_settings.rst:85
msgid ""
"The packages configuration can tell Spack to use an external location for "
"certain package versions, but it does not restrict Spack to using external "
"packages.  In the above example, since newer versions of OpenMPI are "
"available, Spack will choose to start building and linking with the latest "
"version rather than continue using the pre-installed OpenMPI versions."
msgstr ""

# ba3ddba5059d457abb7474550437ad0a
#: ../spack/lib/spack/docs/build_settings.rst:91
msgid ""
"To prevent this, the ``packages.yaml`` configuration also allows packages to "
"be flagged as non-buildable.  The previous example could be modified to be:"
msgstr ""

# a1677e2f3e4144aa8404c87c1f3b2238
#: ../spack/lib/spack/docs/build_settings.rst:105
msgid ""
"The addition of the ``buildable`` flag tells Spack that it should never "
"build its own version of OpenMPI, and it will instead always rely on a pre-"
"built OpenMPI.  Similar to ``paths``, ``buildable`` is specified as a "
"property under a package name."
msgstr ""

# b774c09203e440369a01364101149ec2
#: ../spack/lib/spack/docs/build_settings.rst:110
msgid ""
"If an external module is specified as not buildable, then Spack will load "
"the external module into the build environment which can be used for linking."
msgstr ""

# 49ff4dfeb53a4748adb864b5ec89fc07
#: ../spack/lib/spack/docs/build_settings.rst:113
msgid ""
"The ``buildable`` does not need to be paired with external packages. It "
"could also be used alone to forbid packages that may be buggy or otherwise "
"undesirable."
msgstr ""

# 631b9cc57a7a4311b89ce677422c798b
#: ../spack/lib/spack/docs/build_settings.rst:122
msgid "Concretization Preferences"
msgstr ""

# 59d98e7457c644368723ba6e750781e2
#: ../spack/lib/spack/docs/build_settings.rst:124
msgid ""
"Spack can be configured to prefer certain compilers, package versions, "
"dependencies, and variants during concretization. The preferred "
"configuration can be controlled via the ``~/.spack/packages.yaml`` file for "
"user configurations, or the ``etc/spack/packages.yaml`` site configuration."
msgstr ""

# 8751ca41b27b46c9964d1f8612640750
#: ../spack/lib/spack/docs/build_settings.rst:130
msgid "Here's an example ``packages.yaml`` file that sets preferred packages:"
msgstr ""

# 259096540b5b472abf41ae7e7b0816e1
#: ../spack/lib/spack/docs/build_settings.rst:145
msgid ""
"At a high level, this example is specifying how packages should be "
"concretized.  The opencv package should prefer using GCC 4.9 and be built "
"with debug options.  The gperftools package should prefer version 2.2 over "
"2.4.  Every package on the system should prefer mvapich2 for its MPI and GCC "
"4.4.7 (except for opencv, which overrides this by preferring GCC 4.9). These "
"options are used to fill in implicit defaults.  Any of them can be "
"overwritten on the command line if explicitly requested."
msgstr ""

# fc8b916a7724422886800d5eaad9bfcf
#: ../spack/lib/spack/docs/build_settings.rst:153
msgid ""
"Each ``packages.yaml`` file begins with the string ``packages:`` and package "
"names are specified on the next level. The special string ``all`` applies "
"settings to each package. Underneath each package name is one or more "
"components: ``compiler``, ``variants``, ``version``, or ``providers``.  Each "
"component has an ordered list of spec ``constraints``, with earlier entries "
"in the list being preferred over later entries."
msgstr ""

# 8b60dd5e873a4c328a5d22fd7a91fb92
#: ../spack/lib/spack/docs/build_settings.rst:161
msgid ""
"Sometimes a package installation may have constraints that forbid the first "
"concretization rule, in which case Spack will use the first legal "
"concretization rule.  Going back to the example, if a user requests "
"gperftools 2.3 or later, then Spack will install version 2.4 as the 2.4 "
"version of gperftools is preferred over 2.3."
msgstr ""

# 3fa8471cb4eb4f6fa5675a7ba4117106
#: ../spack/lib/spack/docs/build_settings.rst:167
msgid ""
"An explicit concretization rule in the preferred section will always take "
"preference over unlisted concretizations.  In the above example, xlc isn't "
"listed in the compiler list.  Every listed compiler from gcc to pgi will "
"thus be preferred over the xlc compiler."
msgstr ""

# edce3b6157d4426faaf441b895987e5b
#: ../spack/lib/spack/docs/build_settings.rst:172
msgid ""
"The syntax for the ``provider`` section differs slightly from other "
"concretization rules.  A provider lists a value that packages may "
"``depend_on`` (e.g, MPI) and a list of rules for fulfilling that dependency."
msgstr ""

# ffd6afdcea02478389d65ebc7711b4f4
#: ../spack/lib/spack/docs/build_settings.rst:181
msgid "Package Permissions"
msgstr ""

# a88b0e6e483a4249b717fb8169ac8a5f
#: ../spack/lib/spack/docs/build_settings.rst:183
msgid ""
"Spack can be configured to assign permissions to the files installed by a "
"package."
msgstr ""

# 4b35db2588374231aff95285e14cf606
#: ../spack/lib/spack/docs/build_settings.rst:186
msgid ""
"In the ``packages.yaml`` file under ``permissions``, the attributes "
"``read``, ``write``, and ``group`` control the package permissions. These "
"attributes can be set per-package, or for all packages under ``all``. If "
"permissions are set under ``all`` and for a specific package, the package-"
"specific settings take precedence."
msgstr ""

# 5d2bf91432fe45c8b7385faad26a1a44
#: ../spack/lib/spack/docs/build_settings.rst:192
msgid ""
"The ``read`` and ``write`` attributes take one of ``user``, ``group``, and "
"``world``."
msgstr ""

# 1c6065a4038042f4b80deab3661df04c
#: ../spack/lib/spack/docs/build_settings.rst:207
msgid ""
"The permissions settings describe the broadest level of access to "
"installations of the specified packages. The execute permissions of the file "
"are set to the same level as read permissions for those files that are "
"executable. The default setting for ``read`` is ``world``, and for ``write`` "
"is ``user``. In the example above, installations of ``my_app`` will be "
"installed with user and group permissions but no world permissions, and "
"owned by the group ``my_team``. All other packages will be installed with "
"user and group write privileges, and world read privileges. Those packages "
"will be owned by the group ``spack``."
msgstr ""

# 5b7d88434ca647a5a9cae664ac187ed4
#: ../spack/lib/spack/docs/build_settings.rst:218
msgid ""
"The ``group`` attribute assigns a Unix-style group to a package. All files "
"installed by the package will be owned by the assigned group, and the sticky "
"group bit will be set on the install prefix and all directories inside the "
"install prefix. This will ensure that even manually placed files within the "
"install prefix are owned by the assigned group. If no group is assigned, "
"Spack will allow the OS default behavior to go as expected."
msgstr ""

# 518880a8003d4d02b3ac400a411d3645
#: ../spack/lib/spack/docs/build_systems.rst:11
msgid "Build Systems"
msgstr ""

# 41b3ed4842e74375a7c67ec5b81ee632
#: ../spack/lib/spack/docs/build_systems.rst:13
msgid ""
"Spack defines a number of classes which understand how to use common `build "
"systems  <https://en.wikipedia.org/wiki/List_of_build_automation_software>`_ "
"(Makefiles, CMake, etc.). Spack package definitions can inherit these "
"classes in order to streamline their builds."
msgstr ""

# 1553608b50e34a98bc31e7a2107f056b
#: ../spack/lib/spack/docs/build_systems.rst:18
msgid ""
"This guide provides information specific to each particular build system. It "
"assumes that you've read the :ref:`packaging-guide` and expands on these "
"ideas for each distinct build system that Spack supports:"
msgstr ""

# 6b0a8b747b924fa3b4224fa1082a8d23
#: ../spack/lib/spack/docs/build_systems.rst:22
msgid "Make-based"
msgstr ""

# 92884533607b4033b48579a6bd07124f
#: ../spack/lib/spack/docs/build_systems.rst:28
msgid "Make-incompatible"
msgstr ""

# 67cdd235b80143b6aa54be5fba9002ed
#: ../spack/lib/spack/docs/build_systems.rst:35
msgid "Build-script generation"
msgstr ""

# de2c0f6db50c4f4a87dcf3c8763f99be
#: ../spack/lib/spack/docs/build_systems.rst:44
msgid "Language-specific"
msgstr ""

# a1046473af7144648c24ebb13ac73d30
#: ../spack/lib/spack/docs/build_systems.rst:54
msgid "Other"
msgstr ""

# 829e6a1e09954f70860e63dd1ec4fe68
#: ../spack/lib/spack/docs/build_systems.rst:62
msgid ""
"For reference, the :py:mod:`Build System API docs <spack.build_systems>` "
"provide a list of build systems and methods/attributes that can be "
"overridden. If you are curious about the implementation of a particular "
"build system, you can view the source code by running:"
msgstr ""

# 5b063758a07b4e4db11c0001d74adb30
#: ../spack/lib/spack/docs/build_systems.rst:72
msgid ""
"This will open up the ``AutotoolsPackage`` definition in your favorite "
"editor. In addition, if you are working with a less common build system like "
"QMake, SCons, or Waf, it may be useful to see examples of other packages. "
"You can quickly find examples by running:"
msgstr ""

# 4c5d0b14f6874c23a484903d1e5e4dc1
#: ../spack/lib/spack/docs/build_systems.rst:83
msgid "You can then view these packages with ``spack edit``."
msgstr ""

# 988e44c9273740798730838b03ca3d3f
#: ../spack/lib/spack/docs/build_systems.rst:85
msgid ""
"This guide is intended to supplement the :py:mod:`Build System API docs "
"<spack.build_systems>` with examples of how to override commonly used "
"methods. It also provides rules of thumb and suggestions for package "
"developers who are unfamiliar with a particular build system."
msgstr ""

# 91d0fc57f50d46d79ce0e58dd5b815e1
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:10
msgid "AutotoolsPackage"
msgstr ""

# 3f0f92201ab3405493b0d80eedff592c
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:12
msgid ""
"Autotools is a GNU build system that provides a build-script generator. By "
"running the platform-independent ``./configure`` script that comes with the "
"package, you can generate a platform-dependent Makefile."
msgstr ""

# c4c59df73a6a4a0592671f3e41bbfc77
# e53a14864626486ba0288d2ad1debdb0
# e12b5ccd2c97495aae4a92430f54db06
# d26a58dbf3824ffd9de8d3a23bf1e2c3
# 6eb2404cdfa74feba58e1ae0fb370513
# 452ccfb1a56945a0907cc59082dcd7b2
# 56ddbad7ef5347699fe3b231c172c9a0
# 4b55cfe93d5e4ec9ae99d7a6bca8d3a9
# 59c74ddddd804b55b8340b1dc588f8a8
# f5bb38431f1b42fda40ff69d0dea4fab
# 607986e68a7341058f47dace968a3088
# 61a64a9eba1b4ff5b9b27c5e2ed3d884
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:18
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:22
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:48
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:19
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:18
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:16
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:17
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:16
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:30
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:20
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:34
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:17
msgid "Phases"
msgstr ""

# 8c5a64b7776d4b8ea3d905cfb9385bec
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:20
msgid "The ``AutotoolsPackage`` base class comes with the following phases:"
msgstr ""

# 0c51ed9a3a444a60a9925e94bfabb377
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:22
msgid "``autoreconf`` - generate the configure script"
msgstr ""

# d7c640b3b55344f9933e74daad37186f
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:23
msgid "``configure`` - generate the Makefiles"
msgstr ""

# b42a453ecd8741cca0f219436ab06498
# a79d56da042f4d5b8b008b762f822f4d
# 75774bd876a84445bf2c4be09d846477
# 482b50c6d4344affa8d4667732b8f2db
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:24
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:27
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:22
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:48
msgid "``build`` - build the package"
msgstr ""

# 9279483dddb042f78d78796cc22cb4f7
# da67a0006f6148aebb132027688530b1
# 54cc237490f9430295b43188c98fc470
# e5af249b9e3541a99858e811f45dc966
# 571c03171a8b40be81882fabaf1f8d5c
# 23cd063594ac404ab19c630eb43ef983
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:25
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:28
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:20
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:23
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:24
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:49
msgid "``install`` - install the package"
msgstr ""

# fdb5fe825805434987757772a2012f8d
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:27
msgid ""
"Most of the time, the ``autoreconf`` phase will do nothing, but if the "
"package is missing a ``configure`` script, ``autoreconf`` will generate one "
"for you."
msgstr ""

# 505e9681d2504245b42a96f6fa9132c9
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:31
msgid "The other phases run:"
msgstr ""

# c6ed3b2f5f944769b6f45034f90d5b1e
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:42
msgid ""
"Of course, you may need to add a few arguments to the ``./configure`` line."
msgstr ""

# 780dcaba008946a582a2e4c25d3f4725
# 78dffbdf035e453b96adfb358040ba05
# c32d440b63754d57b0e5f43132d21006
# e947b4ab349147dd826d404ea693b598
# ab70e7a020174ebc9e766d94d8ae83d7
# 065df9194cf743ff957209d94b6b8b0d
# c9c70d2b7d644b3da26e4cdc9c01393c
# 94aa1626192c4d3d9770641b89474773
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:47
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:48
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:39
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:51
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:86
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:60
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:65
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:74
msgid "Important files"
msgstr ""

# 3c3640a65c874cb9b062eee56c2998a5
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:49
msgid ""
"The most important file for an Autotools-based package is the ``configure`` "
"script. This script is automatically generated by Autotools and generates "
"the appropriate Makefile when run."
msgstr ""

# ecd1975cbf8a43f4a33d9216ace77828
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:55
msgid "Watch out for fake Autotools packages!"
msgstr ""

# 5f660cd13c0e4712bd39ece997db9ee0
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:57
msgid ""
"Autotools is a very popular build system, and many people are used to the "
"classic steps to install a package:"
msgstr ""

# c3d13a34e6864ec5a7e14db4db5a8c26
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:67
msgid ""
"For this reason, some developers will write their own ``configure`` scripts "
"that have nothing to do with Autotools. These packages may not accept the "
"same flags as other Autotools packages, so it is better to use the "
"``Package`` base class and create a :ref:`custom build system "
"<custompackage>`. You can tell if a package uses Autotools by running ``./"
"configure --help`` and comparing the output to other known Autotools "
"packages. You should also look for files like:"
msgstr ""

# d1855ca5b4b6480b8ebf1e2f75363509
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:75
msgid "``configure.ac``"
msgstr ""

# d048c4fb0a4547bf95967eb7aa0daf2d
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:76
msgid "``configure.in``"
msgstr ""

# 54bac3f260f241bba77c0eb61a5406fb
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:77
msgid "``Makefile.am``"
msgstr ""

# 1e69412cd70544f883cd9c9d2b0edb13
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:79
msgid "Packages that don't use Autotools aren't likely to have these files."
msgstr ""

# b3454ec132d24a28a3d4899148dd87f5
# 812f1b3184454dcfa907ffded3c0847c
# 243c112b0155467e9c7752c2394eac57
# 339154d044b84933aba1b32877b7a324
# b5dbe190e2334aa99655c0e47c7b148e
# 3c251993bf3543b0aa99ef43c94880aa
# c669192bc4254a388784d681be12b0f5
# 4e4e27540e7b4b59a5aa126e33226d75
# 39634ab585764cd4ab294706ee21cf39
# cd24ed0eebb44f00bc5b8df3b0ad36cc
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:83
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:77
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:53
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:81
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:114
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:248
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:78
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:125
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:83
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:88
msgid "Build system dependencies"
msgstr ""

# e7100191895b4380ad295f2d7d94a195
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:85
msgid ""
"Whether or not your package requires Autotools to install depends on how the "
"source code is distributed. Most of the time, when developers distribute "
"tarballs, they will already contain the ``configure`` script necessary for "
"installation. If this is the case, your package does not require any "
"Autotools dependencies."
msgstr ""

# d6760b4bfb284064a4ce39c2020fca9c
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:91
msgid ""
"However, a basic rule of version control systems is to never commit code "
"that can be generated. The source code repository itself likely does not "
"have a ``configure`` script. Developers typically write (or auto-generate) a "
"``configure.ac`` script that contains configuration preferences and a "
"``Makefile.am`` script that contains build instructions. Then, ``autoconf`` "
"is used to convert ``configure.ac`` into ``configure``, while ``automake`` "
"is used to convert ``Makefile.am`` into ``Makefile.in``. ``Makefile.in`` is "
"used by ``configure`` to generate a platform-dependent ``Makefile`` for you. "
"The following diagram provides a high-level overview of the process:"
msgstr ""

# 54d652ca87d2455e9674b102948d4269
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:105
msgid ""
"`GNU autoconf and automake process for generating makefiles <https://commons."
"wikimedia.org/wiki/File:Autoconf-automake-process.svg>`_ by `Jdthood` under "
"`CC BY-SA 3.0 <https://creativecommons.org/licenses/by-sa/3.0/deed.en>`_"
msgstr ""

# dc1b59335c72477d9428643776402e48
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:108
msgid ""
"If a ``configure`` script is not present in your tarball, you will need to "
"generate one yourself. Luckily, Spack already has an ``autoreconf`` phase to "
"do most of the work for you. By default, the ``autoreconf`` phase runs:"
msgstr ""

# 78e5b4e95d3c47d88a022f39a37f4045
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:119
msgid ""
"All you need to do is add a few Autotools dependencies to the package. Most "
"stable releases will come with a ``configure`` script, but if you check out "
"a commit from the ``develop`` branch, you would want to add:"
msgstr ""

# 2db6dea421424502bb4201840056c372
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:130
msgid ""
"In some cases, developers might need to distribute a patch that modifies one "
"of the files used to generate ``configure`` or ``Makefile.in``. In this "
"case, these scripts will need to be regenerated. It is preferable to "
"regenerate these manually using the patch, and then create a new patch that "
"directly modifies ``configure``. That way, Spack can use the secondary patch "
"and additional build system dependencies aren't necessary."
msgstr ""

# 809816ac6117418fa9dec67b175645e0
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:140
msgid "force_autoreconf"
msgstr ""

# 49a499b9d9064e808d9b0a7dab62f36d
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:142
msgid ""
"If for whatever reason you really want to add the original patch and tell "
"Spack to regenerate ``configure``, you can do so using the following setting:"
msgstr ""

# bddf2b6bd53841168b4bd9cf0f83b848
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:150
msgid ""
"This line tells Spack to wipe away the existing ``configure`` script and "
"generate a new one. If you only need to do this for a single version, this "
"can be done like so:"
msgstr ""

# 380c26676b744a19b44204229a3302b8
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:162
msgid "Finding configure flags"
msgstr ""

# 07a83e2404c44c6dac987da96c40585c
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:164
msgid ""
"Once you have a ``configure`` script present, the next step is to determine "
"what option flags are available. These flags can be found by running:"
msgstr ""

# b539aaa3e7d44ee68e92dc333a5d6e12
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:172
msgid ""
"``configure`` will display a list of valid flags separated into some or all "
"of the following sections:"
msgstr ""

# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# 3a18aff29b554ee48491465450c30799
# #-#-#-#-#  tutorial_environments.pot (Spack 0.12)  #-#-#-#-#
# e337f2aa2bd34f61bdfc5a6f0af09ea4
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:175
#: ../spack/lib/spack/docs/tutorial_environments.rst:355
msgid "Configuration"
msgstr ""

# 58d7a56ad27d47448220ea5418186a98
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:176
msgid "Installation directories"
msgstr ""

# 69942863f4224b6ca6330247d477ca15
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:177
msgid "Fine tuning of the installation directories"
msgstr ""

# f07228acfc604cfbb260135b90d57ac4
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:178
msgid "Program names"
msgstr ""

# b32695a889114aad8a8580ee3a5a9722
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:179
msgid "X features"
msgstr ""

# 829e24e2c4c143f78759efecb69c4ddb
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:180
msgid "System types"
msgstr ""

# ff22e2bf7abf466fa3617e2691d9f0dc
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:181
msgid "**Optional Features**"
msgstr ""

# e88b1fd5a6de41b880b1bc9e1c23dbf1
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:182
msgid "**Optional Packages**"
msgstr ""

# 958ad63527654909a31cee2ba1a6e1b8
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:183
msgid "**Some influential environment variables**"
msgstr ""

# f545f802c7ea415c97bb3ead866aa36c
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:185
msgid ""
"For the most part, you can ignore all but the last 3 sections. The "
"\"Optional Features\" sections lists flags that enable/disable features you "
"may be interested in. The \"Optional Packages\" section often lists "
"dependencies and the flags needed to locate them. The \"environment variables"
"\" section lists environment variables that the build system uses to pass "
"flags to the compiler and linker."
msgstr ""

# 15ce56f68e7344d0a68a387d84a86855
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:194
msgid "Addings flags to configure"
msgstr ""

# ffd0c80a56774f0792e5bd2977687b0b
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:196
msgid ""
"For most of the flags you encounter, you will want a variant to optionally "
"enable/disable them. You can then optionally pass these flags to the "
"``configure`` call by overriding the ``configure_args`` function like so:"
msgstr ""

# 16ae9eef5d15488d930d5bf0e9f92773
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:213
msgid ""
"Note that we are explicitly disabling MPI support if it is not requested. "
"This is important, as many Autotools packages will enable options by default "
"if the dependencies are found, and disable them otherwise. We want Spack "
"installations to be as deterministic as possible. If two users install a "
"package with the same variants, the goal is that both installations work the "
"same way. See `here <https://www.linux.com/news/best-practices-autotools>`__ "
"and `here <https://wiki.gentoo.org/wiki/Project:Quality_Assurance/"
"Automagic_dependencies>`__ for a rationale as to why these so-called "
"\"automagic\" dependencies are a problem."
msgstr ""

# 6a059985f4094c2cab0a145bf5b88908
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:223
msgid ""
"By default, Autotools installs packages to ``/usr``. We don't want this, so "
"Spack automatically adds ``--prefix=/path/to/installation/prefix`` to your "
"list of ``configure_args``. You don't need to add this yourself."
msgstr ""

# 9e26d6cc7054451f9ee8b01c9132b627
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:229
msgid "Helper functions"
msgstr ""

# c6ce87090c164b3b90ab6fa27cd2a352
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:231
msgid ""
"You may have noticed that most of the Autotools flags are of the form ``--"
"enable-foo``, ``--disable-bar``, ``--with-baz=<prefix>``, or ``--without-"
"baz``. Since these flags are so common, Spack provides a couple of helper "
"functions to make your life easier."
msgstr ""

# 3990b2c2f0e9477cb0e123388b9accaa
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:236
msgid "TODO: document ``with_or_without`` and ``enable_or_disable``."
msgstr ""

# f0745fb76d3c4a9ab8fdde393002edf6
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:240
msgid "Configure script in a sub-directory"
msgstr ""

# 30ee0b6cf5c64979aa9ff545b1db839b
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:242
msgid ""
"Occasionally, developers will hide their source code and ``configure`` "
"script in a subdirectory like ``src``. If this happens, Spack won't be able "
"to automatically detect the build system properly when running ``spack "
"create``. You will have to manually change the package base class and tell "
"Spack where the ``configure`` script resides. You can do this like so:"
msgstr ""

# e60597d934fb426c914e3f37972d8a9d
# 000a150ffe904ba8841159f5932e9395
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:255
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:233
msgid "Building out of source"
msgstr ""

# 74b201f73fd3492f958dbcaeb0ffbeda
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:257
msgid ""
"Some packages like ``gcc`` recommend building their software in a different "
"directory than the source code to prevent build pollution. This can be done "
"using the ``build_directory`` variable:"
msgstr ""

# b244356273694e49881c49987b4d6136
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:265
msgid ""
"By default, Spack will build the package in the same directory that contains "
"the ``configure`` script"
msgstr ""

# 4b6eb51a21f5449a9cd04b4b90417faa
# 3ba1173ad3124caba88cf3af12d64a82
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:270
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:245
msgid "Build and install targets"
msgstr ""

# e109abf2f0fc45f0b7fc7b460c89f6a6
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:272
msgid "For most Autotools packages, the usual:"
msgstr ""

# 192bb8afa6c54f2faac34050c33c6646
# db55bee1170047af813a40a0e577b970
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:280
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:255
msgid ""
"is sufficient to install the package. However, if you need to run make with "
"any other targets, for example, to build an optional library or build the "
"documentation, you can add these like so:"
msgstr ""

# 6693611fa798411eac2bb036791b8101
# 00b59d7043be47cb971d1960ab3d3bf0
# c83bfcd6c042480581ce7f4ff4bbdc6f
# f304f9d01f3d4ca09d8d65df4a506d05
# 37895587ada348928b39df3a622ae0e9
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:291
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:266
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:169
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:518
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:55
msgid "Testing"
msgstr ""

# ff81c83dafaf49c1ab3a2b5aa68d15b0
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:293
msgid ""
"Autotools-based packages typically provide unit testing via the ``check`` "
"and ``installcheck`` targets. If you build your software with ``spack "
"install --test=root``, Spack will check for the presence of a ``check`` or "
"``test`` target in the Makefile and run ``make check`` for you. After "
"installation, it will check for an ``installcheck`` target and run ``make "
"installcheck`` if it finds one."
msgstr ""

# 58dc61e9c1ab46229e3d322324dad00a
# 607bc157712f4635b87081edcad8c466
# 6bd98e10fd9b448a9b1034c57d42eb73
# 37c8de87bc574e49b09891fc699e2480
# 3254e03f4f1145119a8e915ccd7de49f
# 47974eb0edde420ba755e2f2c2339b51
# 2719ad57ead340e5b74080be0fd8b73b
# 54e427aebafe45ec90e69e1228fd8dd6
# 1f64ae15f83746179640b1a15da5b61f
# 1847a0e4b21844098936d18e7992315a
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:302
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:276
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:306
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:131
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:206
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:744
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:113
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:343
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:303
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:126
msgid "External documentation"
msgstr ""

# 9bfa405c07a64bb7936f99d6ebd67e29
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:304
msgid ""
"For more information on the Autotools build system, see: https://www.gnu.org/"
"software/automake/manual/html_node/Autotools-Introduction.html"
msgstr ""

# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# 5d92eadb156a4d9383fcfcc7fbb9bfac
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# 057e4f88eb37446a94c93692b8f9e1a4
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:10
#: ../spack/lib/spack/docs/packaging_guide.rst:4215
msgid "CMakePackage"
msgstr ""

# dde38aef89c6458ebfb2c52428c77278
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:12
msgid ""
"Like Autotools, CMake is a widely-used build-script generator. Designed by "
"Kitware, CMake is the most popular build system for new C, C++, and Fortran "
"projects, and many older projects are switching to it as well."
msgstr ""

# e84ff1acd81e40c1a7ab917a8b6ea19c
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:16
msgid ""
"Unlike Autotools, CMake can generate build scripts for builders other than "
"Make: Ninja, Visual Studio, etc. It is therefore cross-platform, whereas "
"Autotools is Unix-only."
msgstr ""

# b6d2e956322649af941d36fd2e7d2b83
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:24
msgid "The ``CMakePackage`` base class comes with the following phases:"
msgstr ""

# 61288af0cfdc40a8bda5bbe361f8d5b7
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:26
msgid "``cmake`` - generate the Makefile"
msgstr ""

# d62069e9964f4fe89d5d611a2692c9e5
# d668e8064a2343c69b09f03cb33c0f35
# ceaf8f713b8943d18ba51a2705759c2a
# 843f592d4a8448f6a95ae947341d6257
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:30
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:26
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:38
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:25
msgid "By default, these phases run:"
msgstr ""

# 31e8db2dad5845fa82ccfda1852c0bb3
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:42
msgid ""
"A few more flags are passed to ``cmake`` by default, including flags for "
"setting the build type and flags for locating dependencies. Of course, you "
"may need to add a few arguments yourself."
msgstr ""

# f5ea1070417e46838c533709716e1816
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:50
msgid ""
"A CMake-based package can be identified by the presence of a ``CMakeLists."
"txt`` file. This file defines the build flags that can be passed to the "
"cmake invocation, as well as linking instructions. If you are familiar with "
"CMake, it can prove very useful for determining dependencies and dependency "
"version requirements."
msgstr ""

# 022411bedf0b4ae6b68bdd8e5cc9e45a
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:56
msgid "One thing to look for is the ``cmake_minimum_required`` function:"
msgstr ""

# 7e8082b4049646388e35c4f2455c60a6
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:63
msgid ""
"This means that CMake 2.8.12 is the earliest release that will work. You "
"should specify this in a ``depends_on`` statement."
msgstr ""

# 7c30ef8d86b84afeb3fa1b40c3a8f3ad
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:66
msgid ""
"CMake-based packages may also contain ``CMakeLists.txt`` in subdirectories. "
"This modularization helps to manage complex builds in a hierarchical "
"fashion. Sometimes these nested ``CMakeLists.txt`` require additional "
"dependencies not mentioned in the top-level file."
msgstr ""

# 157619cbf2b044519ef6226a8fdc90a0
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:71
msgid ""
"There's also usually a ``cmake`` or ``CMake`` directory containing "
"additional macros, find scripts, etc. These may prove useful in determining "
"dependency version requirements."
msgstr ""

# da1d1a40a2824d51ba3e30d48adf6175
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:79
msgid ""
"Every package that uses the CMake build system requires a ``cmake`` "
"dependency. Since this is always the case, the ``CMakePackage`` base class "
"already contains:"
msgstr ""

# 8f0a255644e04b358379576df53ca2ee
# 58ba431c48154c63b2af37cb86f73d8e
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:88
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:93
msgid ""
"If you need to specify a particular version requirement, you can override "
"this in your package:"
msgstr ""

# 93806943b7684dbabdb5f7e931a24e90
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:98
msgid "Finding cmake flags"
msgstr ""

# 2668bbd739c34571a0e5dfab18d54d95
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:100
msgid ""
"To get a list of valid flags that can be passed to ``cmake``, run the "
"following command in the directory that contains ``CMakeLists.txt``:"
msgstr ""

# 8629a81739b440309d6534c623ebfa15
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:108
msgid ""
"CMake will start by checking for compilers and dependencies. Eventually it "
"will begin to list build options. You'll notice that most of the build "
"options at the top are prefixed with ``CMAKE_``. You can safely ignore most "
"of these options as Spack already sets them for you. This includes flags "
"needed to locate dependencies, RPATH libraries, set the installation "
"directory, and set the build type."
msgstr ""

# 6d6f0a3f2dfa49a6abb2a47835c9f17b
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:115
msgid ""
"The rest of the flags are the ones you should consider adding to your "
"package. They often include flags to enable/disable support for certain "
"features and locate specific dependencies. One thing you'll notice that "
"makes CMake different from Autotools is that CMake has an understanding of "
"build flag hierarchy. That is, certain flags will not display unless their "
"parent flag has been selected. For example, flags to specify the ``lib`` and "
"``include`` directories for a package might not appear unless CMake found "
"the dependency it was looking for. You may need to manually specify certain "
"flags to explore the full depth of supported build flags, or check the "
"``CMakeLists.txt`` yourself."
msgstr ""

# 7c11370a9aac4085a70b5cf546ead17f
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:128
msgid "Adding flags to cmake"
msgstr ""

# 7c807769b1cc4797b2ecab3399d91e53
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:130
msgid ""
"To add additional flags to the ``cmake`` call, simply override the "
"``cmake_args`` function:"
msgstr ""

# 0c4a34fe294d47f7a59632ea21c42a2b
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:148
msgid "Generators"
msgstr ""

# 21d0f449be8c46d8926d4a296cd3ac1c
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:150
msgid ""
"CMake and Autotools are build-script generation tools; they \"generate\" the "
"Makefiles that are used to build a software package. CMake actually supports "
"multiple generators, not just Makefiles. Another common generator is Ninja. "
"To switch to the Ninja generator, simply add:"
msgstr ""

# 4b88c308a07a453897e81e7c854359df
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:160
msgid ""
"``CMakePackage`` defaults to \"Unix Makefiles\". If you switch to the Ninja "
"generator, make sure to add:"
msgstr ""

# e6a27b34be724ba39cab4c325407473c
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:167
msgid ""
"to the package as well. Aside from that, you shouldn't need to do anything "
"else. Spack will automatically detect that you are using Ninja and run:"
msgstr ""

# 57bc2d406638470f9adbc23202e4f4f1
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:177
msgid ""
"Spack currently only supports \"Unix Makefiles\" and \"Ninja\" as valid "
"generators, but it should be simple to add support for alternative "
"generators. For more information on CMake generators, see: https://cmake.org/"
"cmake/help/latest/manual/cmake-generators.7.html"
msgstr ""

# 5647f349e32745b69b495add815fd5ba
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:184
msgid "CMAKE_BUILD_TYPE"
msgstr ""

# 0d93a70bf220404c91193ba296096c25
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:186
msgid ""
"Every CMake-based package accepts a ``-DCMAKE_BUILD_TYPE`` flag to dictate "
"which level of optimization to use. In order to ensure uniformity across "
"packages, the ``CMakePackage`` base class adds a variant to control this:"
msgstr ""

# 0c0c57f0131344aa997c106b4705f837
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:197
msgid ""
"However, not every CMake package accepts all four of these options. Grep the "
"``CMakeLists.txt`` file to see if the default values are missing or "
"replaced. For example, the `dealii <https://github.com/spack/spack/blob/"
"develop/var/spack/repos/builtin/packages/dealii/package.py>`_ package "
"overrides the default variant with:"
msgstr ""

# b993ee42cdb3420ca5972d68755b4d6d
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:209
msgid ""
"For more information on ``CMAKE_BUILD_TYPE``, see: https://cmake.org/cmake/"
"help/latest/variable/CMAKE_BUILD_TYPE.html"
msgstr ""

# ad09a63682724a75bb859b4178cf16a0
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:214
msgid "CMakeLists.txt in a sub-directory"
msgstr ""

# 58e1920cf3604ea49d9b0e147e6fa346
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:216
msgid ""
"Occasionally, developers will hide their source code and ``CMakeLists.txt`` "
"in a subdirectory like ``src``. If this happens, Spack won't be able to "
"automatically detect the build system properly when running ``spack "
"create``. You will have to manually change the package base class and tell "
"Spack where ``CMakeLists.txt`` resides. You can do this like so:"
msgstr ""

# 8a4b7b82019747dfa4299a12515a5891
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:228
msgid ""
"Note that this path is relative to the root of the extracted tarball, not to "
"the ``build_directory``. It defaults to the current directory."
msgstr ""

# 8d952b17ad02465abbdf7390c6569b3a
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:235
msgid ""
"By default, Spack builds every ``CMakePackage`` in a ``spack-build`` sub-"
"directory. If, for whatever reason, you would like to build in a different "
"sub-directory, simply override ``build_directory`` like so:"
msgstr ""

# 9c35f57c57ff4152846544715cc77edc
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:247
msgid "For most CMake packages, the usual:"
msgstr ""

# 91b03c4bc39942d4bdea7107f7123ec3
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:268
msgid ""
"CMake-based packages typically provide unit testing via the ``test`` target. "
"If you build your software with ``--test=root``, Spack will check for the "
"presence of a ``test`` target in the Makefile and run ``make test`` for you. "
"If you want to run a different test instead, simply override the ``check`` "
"method."
msgstr ""

# 973cb0e80e2a4c21bcc70239825a22db
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:278
msgid ""
"For more information on the CMake build system, see: https://cmake.org/cmake/"
"help/latest/"
msgstr ""

# ce6000e730f04db9b8f2b632d9ada5be
#: ../spack/lib/spack/docs/build_systems/cudapackage.rst:10
msgid "CudaPackage"
msgstr ""

# 9b1dccd0b327419d90c890c1e6a80a2e
#: ../spack/lib/spack/docs/build_systems/cudapackage.rst:12
msgid ""
"Different from other packages, ``CudaPackage`` does not represent a build "
"system. Instead its goal is to simplify and unify usage of ``CUDA`` in other "
"packages."
msgstr ""

# e46cd8ec28954b668e1d2ada4e4abe38
#: ../spack/lib/spack/docs/build_systems/cudapackage.rst:18
msgid "Provided variants and dependencies"
msgstr ""

# 37b09ecabb814fe29fa354be70a440aa
#: ../spack/lib/spack/docs/build_systems/cudapackage.rst:20
msgid ""
"``CudaPackage`` provides ``cuda`` variant (default to ``off``) to enable/"
"disable ``CUDA``, and ``cuda_arch`` variant to optionally specify the "
"architecture. It also declares dependencies on the ``CUDA`` package "
"``depends_on('cuda@...')`` based on the architecture as well as specifies "
"conflicts for certain compiler versions."
msgstr ""

# 72e6528f7f4f45fb8c94b691652a37e1
#: ../spack/lib/spack/docs/build_systems/cudapackage.rst:27
msgid "Usage"
msgstr ""

# b487e986f40642b3aefc463673b663fd
#: ../spack/lib/spack/docs/build_systems/cudapackage.rst:29
msgid ""
"In order to use it, just add another base class to your package, for example:"
msgstr ""

# a7bd8f9fad924ff595a087f454f2e284
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:10
msgid "Custom Build Systems"
msgstr ""

# 31a9d60a68ed40569fdb4f659ed2eaea
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:12
msgid ""
"While the build systems listed above should meet your needs for the vast "
"majority of packages, some packages provide custom build scripts. This guide "
"is intended for the following use cases:"
msgstr ""

# 2552d126069a406ba5f1e46d1b53188c
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:16
msgid "Packaging software with its own custom build system"
msgstr ""

# c7123be705c343c18ab779018e30578d
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:17
msgid "Adding support for new build systems"
msgstr ""

# 33afc63bc54f4dccad7dae8c4fba5459
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:19
msgid ""
"If you want to add support for a new build system, a good place to start is "
"to look at the definitions of other build systems. This guide focuses mostly "
"on how Spack's build systems work."
msgstr ""

# 34904a93c81e4c5096e08fee52169810
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:23
msgid ""
"In this guide, we will be using the `perl <https://github.com/spack/spack/"
"blob/develop/var/spack/repos/builtin/packages/perl/package.py>`_ and `cmake "
"<https://github.com/spack/spack/blob/develop/var/spack/repos/builtin/"
"packages/cmake/package.py>`_ packages as examples. ``perl``'s build system "
"is a hand-written ``Configure`` shell script, while ``cmake`` bootstraps "
"itself during installation. Both of these packages require custom build "
"systems."
msgstr ""

# 6269895afdc94b7a923ec7058ec50ca8
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:32
msgid "Base class"
msgstr ""

# b4262a7c2e6543e7a77d25bed02bbd5c
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:34
msgid ""
"If your package does not belong to any of the aforementioned build systems "
"that Spack already supports, you should inherit from the ``Package`` base "
"class. ``Package`` is a simple base class with a single phase: ``install``. "
"If your package is simple, you may be able to simply write an ``install`` "
"method that gets the job done. However, if your package is more complex and "
"installation involves multiple steps, you should add separate phases as "
"mentioned in the next section."
msgstr ""

# 6be8835f5b5844c5902ec7790212ade3
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:42
msgid ""
"If you are creating a new build system base class, you should inherit from "
"``PackageBase``. This is the superclass for all build systems in Spack."
msgstr ""

# a36479625c7442fd9f871f84b322822f
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:50
msgid ""
"The most important concept in Spack's build system support is the idea of "
"phases. Each build system defines a set of phases that are necessary to "
"install the package. They usually follow some sort of \"configure\", \"build"
"\", \"install\" guideline, but any of those phases may be missing or "
"combined with another phase."
msgstr ""

# 03ecb093dc5d4ad8bfa3b0a75e7ac4f8
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:56
msgid "If you look at the ``perl`` package, you'll see:"
msgstr ""

# e080d5a1345c4e209eff2f7cfe9fc8a1
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:62
msgid "Similarly, ``cmake`` defines:"
msgstr ""

# c3befeb78f904beb9fe3c7f2c865f545
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:68
msgid ""
"If we look at the ``cmake`` example, this tells Spack's ``PackageBase`` "
"class to run the ``bootstrap``, ``build``, and ``install`` functions in that "
"order. It is now up to you to define these methods."
msgstr ""

# 7a4683278c704abcb7877d2d7fb3173b
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:74
msgid "Phase and phase_args functions"
msgstr ""

# abedfa76f3344665bb6101a8c2611f25
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:76
msgid "If we look at ``perl``, we see that it defines a ``configure`` method:"
msgstr ""

# cd75e47550684c369bb623883b20346f
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:84
msgid ""
"There is also a corresponding ``configure_args`` function that handles all "
"of the arguments to pass to ``Configure``, just like in "
"``AutotoolsPackage``. Comparatively, the ``build`` and ``install`` phases "
"are pretty simple:"
msgstr ""

# 7b77c650273b468f919c5a40c0490af4
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:97
msgid ""
"The ``cmake`` package looks very similar, but with a ``bootstrap`` function "
"instead of ``configure``:"
msgstr ""

# e9b54c6d1dba483383d2434a7df99bad
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:112
msgid ""
"Again, there is a ``boostrap_args`` function that determines the correct "
"bootstrap flags to use."
msgstr ""

# b3a6329596a446a7a75a8ecb949e050e
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:117
msgid "run_before/run_after"
msgstr ""

# a172ce4efade4aebb1927715e1599075
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:119
msgid ""
"Occasionally, you may want to run extra steps either before or after a given "
"phase. This applies not just to custom build systems, but to existing build "
"systems as well. You may need to patch a file that is generated by "
"configure, or install extra files in addition to what ``make install`` "
"copies to the installation prefix. This is where ``@run_before`` and "
"``@run_after`` come in."
msgstr ""

# 7f412d82c7f2467d904d325e0564b079
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:126
msgid ""
"These Python decorators allow you to write functions that are called before "
"or after a particular phase. For example, in ``perl``, we see:"
msgstr ""

# d89d3d10d3b148159512553f331536b3
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:142
msgid ""
"This extra step automatically installs ``cpanm`` in addition to the base "
"Perl installation."
msgstr ""

# 95287a62eb8c4440ab04ca3dd9bb689b
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:147
msgid "on_package_attributes"
msgstr ""

# fb919f753ab04648bf3a9680ed11b30f
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:149
msgid ""
"The ``run_before``/``run_after`` logic discussed above becomes particularly "
"powerful when combined with the ``@on_package_attributes`` decorator. This "
"decorator allows you to conditionally run certain functions depending on the "
"attributes of that package. The most common example is conditional testing. "
"Many unit tests are prone to failure, even when there is nothing wrong with "
"the installation. Unfortunately, non-portable unit tests and tests that are "
"\"supposed to fail\" are more common than we would like. Instead of always "
"running unit tests on installation, Spack lets users conditionally run tests "
"with the ``--test=root`` flag."
msgstr ""

# b01390e6809e4210bd8eb8ef9e9092e2
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:160
msgid ""
"If we wanted to define a function that would conditionally run if and only "
"if this flag is set, we would use the following line:"
msgstr ""

# 6741bcbad6944f4191fbdf119e3bf4a9
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:171
msgid ""
"Let's put everything together and add unit tests to our package. In the "
"``perl`` package, we can see:"
msgstr ""

# 4352b2ca31b34437acc02cc16a6336a6
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:181
msgid ""
"As you can guess, this runs ``make test`` *after* building the package, if "
"and only if testing is requested. Again, this is not specific to custom "
"build systems, it can be added to existing build systems as well."
msgstr ""

# 7b6a79c96e3d4afdab4b5796b39826b2
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:185
msgid ""
"Ideally, every package in Spack will have some sort of test to ensure that "
"it was built correctly. It is up to the package authors to make sure this "
"happens. If you are adding a package for some software and the developers "
"list commands to test the installation, please add these tests to your "
"``package.py``."
msgstr ""

# 4752cc11b2b7441dabed4d58ca03612e
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:193
msgid "The order of decorators matters. The following ordering:"
msgstr ""

# 48f10a88d149452eb32f717c5e29e2f1
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:200
msgid "works as expected. However, if you reverse the ordering:"
msgstr ""

# a0cf967fb326402ab15ef6cc0ed48c09
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:207
msgid ""
"the tests will always be run regardless of whether or not ``--test=root`` is "
"requested. See https://github.com/spack/spack/issues/3833 for more "
"information"
msgstr ""

# 11c42f60f6fd4895830df24cc1dba325
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:10
msgid "IntelPackage"
msgstr ""

# 67317f7defd04f858466f39abf567ceb
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:12
msgid "Contents"
msgstr ""

# 44bb4692c80d4654852b5e011c1afac8
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:16
msgid "Intel packages in Spack"
msgstr ""

# a840c1a5b7574df7a55d78dc2a239cfc
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:18
msgid ""
"Spack can install and use several software development products offered by "
"Intel. Some of these are available under no-cost terms, others require a "
"paid license. All share the same basic steps for configuration, "
"installation, and, where applicable, license management. The Spack Python "
"class ``IntelPackage`` implements these steps."
msgstr ""

# bad9b880bcc14b3a8961ba701bf65e90
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:24
msgid ""
"Spack interacts with Intel tools in several routes, like it does for any "
"other package:"
msgstr ""

# 6634c31215934cc3ad488146562f8570
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:29
msgid ""
"Accept system-provided tools after you declare them to Spack as *external "
"packages*."
msgstr ""

# 60ca7d2755e4413b9956763c1ff1b811
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:33
msgid "Install the products for you as *internal packages* in Spack."
msgstr ""

# 4b305ad8035f44269cae8fca73f91528
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:37
msgid ""
"*Use* the packages, regardless of installation route, to install what we'll "
"call *client packages* for you, this being Spack's primary purpose."
msgstr ""

# 57e3cd99429c447ba71a2e15c3a567cb
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:40
msgid ""
"An auxiliary route follows from route 2, as it would for most Spack "
"packages, namely:"
msgstr ""

# a5c2c5b2d95b4b2ca6f85225664f00de
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:45
msgid ""
"Make Spack-installed Intel tools available outside of Spack for ad-hoc use, "
"typically through Spack-managed modulefiles."
msgstr ""

# ef2d54e3be764fb0ba002cc2bd3eb676
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:48
msgid "This document covers routes 1 through 3."
msgstr ""

# b2f4b31ff2f54c5399385ea610ee5aae
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:53
msgid "Packages under no-cost license"
msgstr ""

# 9ab3bbfc0ffa4dd8937d7caa7fbf2944
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:55
msgid ""
"Intel's standalone performance library products, notably MKL and MPI, are "
"available for use under a `simplified license <https://software.intel.com/en-"
"us/license/intel-simplified-software-license>`_ since 2017 [fn1]_. They are "
"packaged in Spack as:"
msgstr ""

# b0b5f14e7eb7420aa5172b3a65223e50
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:60
msgid "``intel-mkl`` -- Math Kernel Library (linear algebra and FFT),"
msgstr ""

# a6cdc3d5ccec4eb78c8ab0a46216ffb7
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:61
msgid "``intel-mpi`` -- The Intel-MPI implementation (derived from MPICH),"
msgstr ""

# 931c5b7fe4464c97aa3ea275b7c6caea
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:62
msgid "``intel-ipp`` -- Primitives for image-, signal-, and data-processing,"
msgstr ""

# 0dfff00cf426403d9f9e53113780f27e
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:63
msgid "``intel-daal`` -- Machine learning and data analytics."
msgstr ""

# 7c34edd8df264041af5f76ccef5652bb
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:65
msgid ""
"Some earlier versions of these libraries were released under a paid license. "
"For these older versions, the license must be available at installation time "
"of the products and during compilation of client packages."
msgstr ""

# 30813635b7604cb8a60c896ca3200ced
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:69
msgid ""
"The library packages work well with the Intel compilers but do not require "
"them -- those packages can just as well be used with other compilers.  The "
"Intel compiler invocation commands offer custom options to simplify linking "
"Intel libraries (sometimes considerably), but Spack always uses fairly "
"explicit linkage anyway."
msgstr ""

# 8c345b7f524345b099be574364037910
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:78
msgid "Licensed packages"
msgstr ""

# f48b495b17984030bdb148e8c9123b55
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:80
msgid ""
"Intel's core software development products that provide compilers, "
"analyzers, and optimizers do require a paid license.  In Spack, they are "
"packaged as:"
msgstr ""

# c3351f103b514dba9c1f87228567da04
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:83
msgid ""
"``intel-parallel-studio`` -- the entire suite of compilers and libraries,"
msgstr ""

# 14d3a1e94b0f4f359fdb056eb5c6ba2d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:84
msgid ""
"``intel`` -- a subset containing just the compilers and the Intel-MPI "
"runtime [fn2]_."
msgstr ""

# 42c766ca804c4b02a6426ded4723a512
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:97
msgid ""
"The license is needed at installation time and to compile client packages, "
"but never to merely run any resulting binaries. The license status for a "
"given Spack package is normally specified in the *package code* through "
"directives like `license_required` (see :ref:`Licensed software <license>`). "
"For the Intel packages, however, the *class code* provides these directives "
"(in exchange of forfeiting a measure of OOP purity) and takes care of "
"idiosyncasies like historic version dependence."
msgstr ""

# 6a13760370da4d27a28926a71ee67068
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:105
msgid ""
"The libraries that are provided in the standalone packages are also included "
"in the all-encompassing ``intel-parallel-studio``. To complicate matters a "
"bit, that package is sold in 3 \"editions\", of which only the upper-tier "
"``cluster`` edition supports *compiling* MPI applications, and hence only "
"that edition can provide the ``mpi`` virtual package.  (As mentioned [fn2]_, "
"all editions provide support for *running* MPI applications.)"
msgstr ""

# 07a3991507a7406ca2b5aabb5b47c096
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:112
msgid ""
"The edition forms the leading part of the version number for Spack's "
"``intel*`` packages discussed here. This differs from the primarily numeric "
"version numbers seen with most other Spack packages. For example, we have:"
msgstr ""

# 3642b3c7c2bf4e5c8ba391634ab44258
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:133
msgid ""
"The full studio suite, capable of compiling MPI applications, currently "
"requires about 12 GB of disk space when installed (see section `Install "
"steps for packages with compilers and libraries`_ for detailed "
"instructions). If you need to save disk space or installation time, you "
"could install the ``intel`` compilers-only subset (0.6 GB) and just the "
"library packages you need, for example ``intel-mpi`` (0.5 GB) and ``intel-"
"mkl`` (2.5 GB)."
msgstr ""

# 666ac53a4f7749a2a97b953dd3bdd819
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:143
msgid "Unrelated packages"
msgstr ""

# d80386286fa5408bb20dd0783e5553e1
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:145
msgid ""
"The following packages do not use the Intel installer and are not in class "
"``IntelPackage`` that is discussed here:"
msgstr ""

# e26a809ac1cb4ebfb76861668b51b19d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:148
msgid ""
"``intel-gpu-tools`` -- Test suite and low-level tools for the Linux `Direct "
"Rendering Manager <https://en.wikipedia.org/wiki/Direct_Rendering_Manager>`_"
msgstr ""

# 4f4bd1c5a5fa4dd69d0d5d590c3d3a21
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:150
msgid ""
"``intel-mkl-dnn`` -- Math Kernel Library for Deep Neural Networks "
"(``CMakePackage``)"
msgstr ""

# 7a9c254ccd694009a3df4aa602eaedf5
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:151
msgid "``intel-xed`` -- X86 machine instructions encoder/decoder"
msgstr ""

# 564e9e9783544f17b1150d0af0963fbe
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:152
msgid ""
"``intel-tbb`` -- Standalone version of Intel Threading Building Blocks. Note "
"that a TBB runtime version is included with ``intel-mkl``, and development "
"versions are provided by the packages ``intel-parallel-studio`` (all "
"editions) and its ``intel`` subset."
msgstr ""

# a31c4158a49f41ae9eda9db18fdbf063
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:159
msgid "Configuring Spack to use Intel licenses"
msgstr ""

# 70f22aae22f94247aeeea858a00b4cf4
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:161
msgid ""
"If you wish to integrate licensed Intel products into Spack as external "
"packages (`route 1`_ above) we assume that their license configuration is in "
"place and is working [fn3]_. In this case, skip to section `Integration of "
"Intel tools installed external to Spack`_."
msgstr ""

# a160ae17917a4579bfc2ac284fc4d8cf
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:166
msgid ""
"If you plan to have Spack install licensed products for you (`route 2`_ "
"above), the Intel product installer that Spack will run underneath must have "
"access to a license that is either provided by a *license server* or as a "
"*license file*. The installer may be able to locate a license that is "
"already configured on your system.  If it cannot, you must configure Spack "
"to provide either the server location or the license file."
msgstr ""

# 0f50623e48834d4686e91feef40fbbe8
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:173
msgid "For authoritative information on Intel licensing, see:"
msgstr ""

# 92a3688da2f243d7bc1c53363becbecc
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:175
msgid "https://software.intel.com/en-us/faq/licensing"
msgstr ""

# 370b07c8c2824840aa8f1125dc5c8c9d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:176
msgid "https://software.intel.com/en-us/articles/how-do-i-manage-my-licenses"
msgstr ""

# eca8d39682d14e0dbf31ecb15a3b2de1
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:180
msgid "Pointing to an existing license server"
msgstr ""

# 20fd4ad567e345238a416bad38400fa7
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:182
msgid ""
"Installing and configuring a license server is outside the scope of Spack. "
"We assume that:"
msgstr ""

# c428d87317c34d399f12e41291d8e6dc
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:185
msgid "Your system administrator has a license server running."
msgstr ""

# 55c5c2ef92b84e889af6c61101f90d64
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:186
msgid ""
"The license server offers valid licenses for the Intel packages of interest."
msgstr ""

# e97cc81a166b4bfaa77122b566f6e1a6
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:187
msgid "You can access these licenses under the user id running Spack."
msgstr ""

# 9de87c54ae76492885a1116393c070b5
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:189
msgid ""
"Be aware of the difference between (a) installing and configuring a license "
"server, and (b) configuring client software to *use* a server's so-called "
"floating licenses.  We are concerned here with (b) only. The process of "
"obtaining a license from a server for temporary use is called \"checking out "
"a license\".  For that, a client application such as the Intel package "
"installer or a compiler needs to know the host name and port number of one "
"or more license servers that it may query [fn4]_."
msgstr ""

# 56188e445f974f8692610f578cd225d2
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:197
msgid ""
"Follow one of three methods to `point client software to a floating license "
"server <https://software.intel.com/en-us/articles/licensing-setting-up-the-"
"client-floating-license>`_. Ideally, your license administrator will already "
"have implemented one that can be used unchanged in Spack: Look for the "
"environment variable ``INTEL_LICENSE_FILE`` or for files ``/opt/intel/"
"licenses/*.lic`` that contain::"
msgstr ""

# f278bcfd169f40bbb059bf81eb4f3378
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:207
msgid ""
"The relevant tokens, among possibly others, are the ``USE_SERVER`` line, "
"intended specifically for clients, and one or more ``SERVER`` lines above it "
"which give the network address."
msgstr ""

# 4469ae91866b46879c5fa9a034065232
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:211
msgid ""
"If you cannot find pre-existing ``/opt/intel/licenses/*.lic`` files and the "
"``INTEL_LICENSE_FILE`` environment variable is not set (even after you "
"loaded any relevant modulefiles), ask your license administrator for the "
"server address(es) and place them in a \"global\" license file within your "
"Spack directory tree `as shown below <Spack-managed file_>`_)."
msgstr ""

# 4f5ea6f9b9174cb5a4c6133566896acd
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:220
msgid "Installing a standalone license file"
msgstr ""

# 8b30cd3788d44fdc9cc181a1377a9517
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:222
msgid ""
"If you purchased a user-specific license, follow `Intel's instructions "
"<https://software.intel.com/en-us/faq/licensing#license-management>`_ to "
"\"activate\" it for your serial number, then download the resulting license "
"file. If needed, `request to have the file re-sent <https://software.intel."
"com/en-us/articles/resend-license-file>`_ to you."
msgstr ""

# d854ccbe48be442798f83bf790af62b8
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:228
msgid ""
"Intel's license files are text files that contain tokens in the proprietary "
"\"FLEXlm\" format and whose name ends in ``.lic``. Intel installers and "
"compilers look for license files in several locations when they run. Place "
"your license by one of the following means, in order of decreasing "
"preference:"
msgstr ""

# 75420e963b3448979dd70810d8015ad7
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:233
msgid "Default directory"
msgstr ""

# 9b51365f009e4a6abe0808558bfa8ab7
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:235
msgid ""
"Install your license file in the directory ``/opt/intel/licenses/`` if you "
"have write permission to it. This directory is inspected by all Intel tools "
"and is therefore preferred, as no further configuration will be needed. "
"Create the directory if it does not yet exist.  For the file name, either "
"keep the downloaded name or use another suitably plain yet descriptive name "
"that ends in ``.lic``. Adjust file permissions for access by licensed users."
msgstr ""

# a3b18963eadd4a83925bce9b56592879
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:244
msgid "Directory given in environment variable"
msgstr ""

# 3521f517b3654c30a9fc506f275c27a1
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:246
msgid ""
"If you cannot use the default directory, but your system already has set the "
"environment variable ``INTEL_LICENSE_FILE`` independent from Spack [fn5]_, "
"then, if you have the necessary write permissions, place your license file "
"in one of the directories mentioned in this environment variable.  Adjust "
"file permissions to match licensed users."
msgstr ""

# b0b43a6a7a2b46d3becf6dfdaef288c7
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:254
msgid ""
"If your system has not yet set and used the environment variable "
"``INTEL_LICENSE_FILE``, you could start using it with the ``spack install`` "
"stage of licensed tools and subsequent client packages. You would, however, "
"be in a bind to always set that variable in the same manner, across updates "
"and re-installations, and perhaps accommodate additions to it. As this may "
"be difficult in the long run, we recommend that you do *not* attempt to "
"start using the variable solely for Spack."
msgstr ""

# 826b0c82398249e99ea6ae9a3564c3c2
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:264
msgid "Spack-managed file"
msgstr ""

# 005a82f537ce4ac3b5263d451590ee3c
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:266
msgid ""
"The first time Spack encounters an Intel package that requires a license, it "
"will initialize a Spack-global Intel-specific license file for you, as a "
"template with instructional comments, and bring up an editor [fn6]_.  Spack "
"will do this *even if you have a working license elsewhere* on the system."
msgstr ""

# 6f44fffcb48448378b5fe9f0fb825461
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:271
msgid ""
"To proceed with an externally configured license, leave the newly templated "
"file as is (containing comments only) and close the editor. You do not need "
"to touch the file again."
msgstr ""

# c9a221d1d5fa4f588e3c16e302605643
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:275
msgid ""
"To configure your own standalone license, copy the contents of your "
"downloaded license file into the opened file, save it, and close the editor."
msgstr ""

# 465aa6975dca4530841e89d70b6f4041
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:278
msgid ""
"To use a license server (i.e., a floating network license) that is not "
"already configured elsewhere on the system, supply your license server "
"address(es) in the form of ``SERVER`` and ``USE_SERVER`` lines at the "
"*beginning of the file* [fn7]_, in the format shown in section `Pointing to "
"an existing license server`_. Save the file and close the editor."
msgstr ""

# c2714d8691574c81bad3fe40550b4519
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:284
msgid ""
"To revisit and manually edit this file, such as prior to a subsequent "
"installation attempt, find it at ``$SPACK_ROOT/etc/spack/licenses/intel/"
"intel.lic`` ."
msgstr ""

# a7ea096019e6451a8a0f063cb511d3fe
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:288
msgid ""
"Spack will place symbolic links to this file in each directory where "
"licensed Intel binaries were installed.  If you kept the template unchanged, "
"Intel tools will simply ignore it."
msgstr ""

# 81770e4dcaf24ea5bc97fb071cb95354
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:297
msgid "Integration of Intel tools installed *external* to Spack"
msgstr ""

# 20e9f35177a641728ef3c07e8433925d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:299
msgid "This section discusses `route 1`_ from the introduction."
msgstr ""

# 7b3c9a40c70f4cfa9222b1eddeed1e69
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:301
msgid ""
"A site that already uses Intel tools, especially licensed ones, will likely "
"have some versions already installed on the system, especially at a time "
"when Spack is just being introduced. It will be useful to make such "
"previously installed tools available for use by Spack as they are. How to do "
"this varies depending on the type of the tools:"
msgstr ""

# 1a1b2268e98f46b99a4c0a10e7449326
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:309
msgid "Integrating external compilers"
msgstr ""

# 8f7a5989ca1742ee8b8a7b97b3a6cb9c
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:311
msgid ""
"For Spack to use external Intel compilers, you must tell it both *where* to "
"find them and *when* to use them.  The present section documents the \"where"
"\" aspect, involving ``compilers.yaml`` and, in most cases, long absolute "
"paths. The \"when\" aspect actually relates to `route 3`_ and requires "
"explicitly stating the compiler as a spec component (in the form ``foo "
"%intel`` or ``foo %intel@compilerversion``) when installing client packages "
"or altering Spack's compiler default in ``packages.yaml``. See section "
"`Selecting Intel compilers <Selecting Intel compilers_>`_ for details."
msgstr ""

# 3b7f0ddacb1a423eb96619970104e272
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:320
msgid ""
"To integrate a new set of externally installed Intel compilers into Spack "
"follow section :ref:`Compiler configuration <compiler-config>`. Briefly, "
"prepare your shell environment like you would if you were to use these "
"compilers normally, i.e., typically by a ``module load ...`` or a shell "
"``source ...`` command, then use ``spack compiler find`` to make Spack aware "
"of these compilers.  This will create a new entry in a suitably scoped and "
"possibly new ``compilers.yaml`` file. You could certainly create such a "
"compiler entry manually, but this is error-prone due to the indentation and "
"different data types involved."
msgstr ""

# c6e3086ac29644b0b83ca891dd4d7fc1
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:331
msgid ""
"The Intel compilers need and use the system's native GCC compiler (``gcc`` "
"on most systems, ``clang`` on macOS) to provide certain functionality, "
"notably to support C++. To provide a different GCC compiler for the Intel "
"tools, or more generally set persistent flags for all invocations of the "
"Intel compilers, locate the ``compilers.yaml`` entry that defines your Intel "
"compiler, and, using a text editor, change one or both of the following:"
msgstr ""

# 020e26d4d143486890d17e8779702187
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:338
msgid "At the ``modules:`` tag, add a ``gcc`` module to the list."
msgstr ""

# 286805d16e994c3585ee37aafd56c6b2
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:339
msgid ""
"At the ``flags:`` tag, add ``cflags:``, ``cxxflags:``, and ``fflags:`` key-"
"value entries."
msgstr ""

# d3f9031384274041b35423a44dc0429f
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:341
msgid ""
"Consult the examples under :ref:`Compiler configuration <compiler-config>` "
"and :ref:`Vendor-Specific Compiler Configuration <vendor-specific-compiler-"
"configuration>` in the Spack documentation. When done, validate your "
"compiler definition by running ``spack compiler info intel@compilerversion`` "
"(replacing ``compilerversion`` by the version that you defined)."
msgstr ""

# f5464442212b499ebecb2d51bdac701b
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:350
msgid ""
"Be aware that both the GCC integration and persistent compiler flags can "
"also be affected by an advanced third method:"
msgstr ""

# 4c2cc5a5bbec4824be37598c3468d275
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:353
msgid ""
"A modulefile that provides the Intel compilers for you could, for the "
"benefit of users outside of Spack, implicitly integrate a specific ``gcc`` "
"version via compiler flag environment variables or (hopefully not) via a "
"sneaky extra ``PATH`` addition."
msgstr ""

# aa23b9ff2a9645ffbad80490cd0f7322
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:358
msgid ""
"Next, visit section `Selecting Intel Compilers`_ to learn how to tell Spack "
"to use the newly configured compilers."
msgstr ""

# afb98e5c5cfc42218dbf626555add891
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:363
msgid "Integrating external libraries"
msgstr ""

# 3c4fa3e028814dec9efd42fc3f869de4
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:365
msgid ""
"Configure external library-type packages (as opposed to compilers) in the "
"files ``$SPACK_ROOT/etc/spack/packages.yaml`` or ``~/.spack/packages.yaml``, "
"following the Spack documentation under :ref:`External Packages <sec-"
"external-packages>`."
msgstr ""

# f70dc1f9bbd245d48901499d28ddd204
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:370
msgid ""
"Similar to ``compilers.yaml``, the ``packages.yaml`` files define a package "
"external to Spack in terms of a Spack spec and resolve each such spec via "
"either the ``paths`` or ``modules`` tokens to a specific pre-installed "
"package version on the system.  Since Intel tools generally need environment "
"variables to interoperate, which cannot be conveyed in a mere ``paths`` "
"specification, the ``modules`` token will be more sensible to use. It "
"resolves the Spack-side spec to a modulefile generated and managed outside "
"of Spack's purview, which Spack will load internally and transiently when "
"the corresponding spec is called upon to compile client packages."
msgstr ""

# c4c17e47626e44a990514f48249eeaaf
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:380
msgid ""
"Unlike for compilers, where ``spack find compilers [spec]`` generates an "
"entry in an existing or new ``compilers.yaml`` file, Spack does not offer a "
"command to generate an entirely new ``packages.yaml`` entry.  You must "
"create new entries yourself in a text editor, though the command ``spack "
"config [--scope=...] edit packages`` can help with selecting the proper "
"file. See section :ref:`Configuration Scopes <configuration-scopes>` for an "
"explanation about the different files and section :ref:`Build customization "
"<build-settings>` for specifics and examples for ``packages.yaml`` files."
msgstr ""

# 3ef45cff4f3d4351a1f68a127412b226
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:400
msgid ""
"The following example integrates packages embodied by hypothetical external "
"modulefiles ``intel-mkl/18/...`` into Spack as packages ``intel-mkl@...``:"
msgstr ""

# bab820f94a524fa4a2b4ae68bd67ecdf
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:408
msgid "Make sure the file begins with:"
msgstr ""

# 16e3aa67416a485f847cbff1ac5e153e
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:414
msgid "Adapt the following example. Be sure to maintain the indentation:"
msgstr ""

# 50f5a40fadbb498f8787e032d50b2331
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:425
msgid ""
"The version numbers for the ``intel-mkl`` specs defined here correspond to "
"file and directory names that Intel uses for its products because they were "
"adopted and declared as such within Spack's package repository. You can "
"inspect the versions known to your current Spack installation by:"
msgstr ""

# e55471c9a5d14fadbef5594166aa26ef
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:434
msgid ""
"Using the same version numbers for external packages as for packages known "
"internally is useful for clarity, but not strictly necessary.  Moreover, "
"with a ``packages.yaml`` entry, you can go beyond internally known versions."
msgstr ""

# 87fb39029c8e46c2ae7be59586d941dd
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:440
msgid ""
"Note that the Spack spec in the example does not contain a compiler "
"specification. This is intentional, as the Intel library packages can be "
"used unmodified with different compilers."
msgstr ""

# 19c513987d364e289daeb1836e444819
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:444
msgid ""
"A slightly more advanced example illustrates how to provide :ref:`variants "
"<basic-variants>` and how to use the ``buildable: False`` directive to "
"prevent Spack from installing other versions or variants of the named "
"package through its normal internal mechanism."
msgstr ""

# 30b42c89dba34869a3f9b0c91e6a9c46
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:459
msgid ""
"One additional example illustrates the use of ``paths:`` instead of "
"``modules:``, useful when external modulefiles are not available or not "
"suitable:"
msgstr ""

# cfd922eef2a944498130d3eabd85fb67
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:472
msgid ""
"Note that for the Intel packages discussed here, the directory values in the "
"``paths:`` entries must be the high-level and typically version-less "
"\"installation directory\" that has been used by Intel's product installer. "
"Such a directory will typically accumulate various product versions.  "
"Amongst them, Spack will select the correct version-specific product "
"directory based on the ``@version`` spec component that each path is being "
"defined for."
msgstr ""

# a06f8be804f24d9d9d89554c79eacf4b
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:479
msgid ""
"For further background and details, see :ref:`External Packages <sec-"
"external-packages>`."
msgstr ""

# 33463a0075134287b3cd4ed0f9bcca62
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:485
msgid "Installing Intel tools *within* Spack"
msgstr ""

# c96d5a20848b4fc39716efa3077c2857
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:487
msgid "This section discusses `route 2`_ from the introduction."
msgstr ""

# c74d2f0166474003acc3cfdbdd44d8c0
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:489
msgid ""
"When a system does not yet have Intel tools installed already, or the "
"installed versions are undesirable, Spack can install these tools like any "
"regular Spack package for you and, with appropriate pre- and post-install "
"configuration, use its compilers and/or libraries to install client packages."
msgstr ""

# f17fa5d2e00b4038a0cfd448a5d5b590
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:498
msgid "Install steps for packages with compilers and libraries"
msgstr ""

# e5931547bd5c49f08b4ba31eb06bd597
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:500
msgid ""
"The packages ``intel-parallel-studio`` and ``intel`` (which is a subset of "
"the former) are many-in-one products that contain both compilers and a set "
"of library packages whose scope depends on the edition. Because they are "
"general products geared towards shell environments, it can be somewhat "
"involved to integrate these packages at their full extent into Spack."
msgstr ""

# 6ec27e41ea964dea957ba37dd3e76a73
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:507
msgid ""
"Note: To install library-only packages like ``intel-mkl``, ``intel-mpi``, "
"and ``intel-daal`` follow `the next section <intel-install-libs_>`_ instead."
msgstr ""

# a80768b849644d38ad4fe7480e0ba2ff
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:510
msgid "Review the section `Configuring spack to use intel licenses`_."
msgstr ""

# 72fe4d37d55741c3a934a1e11f6e0dd3
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:514
msgid ""
"To install a version of ``intel-parallel-studio`` that provides Intel "
"compilers at a version that you have *not yet declared in Spack*, the "
"following preparatory steps are recommended:"
msgstr ""

# be5e40d94ee64d90af2a3b98494f8c9f
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:518
msgid ""
"Determine the compiler spec that the new ``intel-parallel-studio`` package "
"will provide, as follows: From the package version, combine the last two "
"digits of the version year, a literal \"0\" (zero), and the version "
"component that immediately follows the year."
msgstr ""

# 3914ca7d9781402db95156ad5a1d6532
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:524
msgid "Package version"
msgstr ""

# 254808819c26457384eed1597b26cbba
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:524
msgid "Compiler spec provided"
msgstr ""

# b69e36168687455abd01c61450a14293
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:526
msgid "``intel-parallel-studio@edition.YYyy.u``"
msgstr ""

# 37075ad5a3db48268f0365d11756f256
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:526
msgid "``intel@yy.0.u``"
msgstr ""

# 46fb13b40d354a1d889a670dc0f2060d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:529
msgid ""
"Example: The package ``intel-parallel-studio@cluster.2018.3`` will provide "
"the compiler with spec ``intel@18.0.3``."
msgstr ""

# 00355781ada949718d201a465e878873
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:534
msgid ""
"Add a new compiler section with the newly anticipated version at the end of "
"a ``compilers.yaml`` file in a suitable scope.  For example, run:"
msgstr ""

# b5e364f700aa4a67825b6940b309dc49
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:541
msgid "and append a stub entry:"
msgstr ""

# c8d905d934634b2f834edb8011362079
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:556
msgid ""
"Replace ``18.0.3`` with the version that you determined in the preceeding "
"step. The contents under ``paths:`` do not matter yet."
msgstr ""

# 912e57c784ba407799789c252bf6165b
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:559
msgid ""
"You are right to ask: \"Why on earth is that necessary?\" [fn8]_. The answer "
"lies in Spack striving for strict compiler consistency. Consider what "
"happens without such a pre-declared compiler stub: Say, you ask Spack to "
"install a particular version ``intel-parallel-studio@edition.V``.  Spack "
"will apply an unrelated compiler spec to concretize and install your "
"request, resulting in ``intel-parallel-studio@edition.V %X``. That compiler "
"``%X`` is not going to be the version that this new package itself provides. "
"Rather, it would typically be ``%gcc@...`` in a default Spack installation "
"or possibly indeed ``%intel@...``, but at a version that precedes ``V``."
msgstr ""

# 7674623f4b3b4fb49021402ac69432a1
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:570
msgid ""
"The problem comes to the fore as soon as you try to use any virtual ``mkl`` "
"or ``mpi`` packages that you would expect to now be provided by ``intel-"
"parallel-studio@edition.V``.  Spack will indeed see those virtual packages, "
"but only as being tied to the compiler that the package ``intel-parallel-"
"studio@edition.V`` was concretized with *at installation*. If you were to "
"install a client package with the new compilers now available to you, you "
"would naturally run ``spack install foo +mkl %intel@V``, yet Spack will "
"either complain about ``mkl%intel@V`` being missing (because it only knows "
"about ``mkl%X``) or it will go and attempt to install *another instance* of "
"``intel-parallel-studio@edition.V %intel@V`` so as to match the compiler "
"spec ``%intel@V`` that you gave for your client package ``foo``. This will "
"be unexpected and will quickly get annoying because each reinstallation "
"takes up time and extra disk space."
msgstr ""

# 61fe726a8d434aa78c229449e2946cc4
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:584
msgid ""
"To escape this trap, put the compiler stub declaration shown here in place, "
"then use that pre-declared compiler spec to install the actual package, as "
"shown next.  This approach works because during installation only the "
"package's own self-sufficient installer will be used, not any compiler."
msgstr ""

# e562cbd1c2e74438bc4d201c555367dc
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:591
msgid ""
"Verify that the compiler version provided by the new ``studio`` version "
"would be used as expected if you were to compile a client package:"
msgstr ""

# 8623622b3c02405dae36a3a006dfce03
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:598
msgid ""
"If the version does not match, explicitly state the anticipated compiler "
"version, e.g.:"
msgstr ""

# 7bcdd66ba6cd4bad89d6ad7d3489d9f0
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:604
msgid ""
"if there are problems, review and correct the compiler's ``compilers.yaml`` "
"entry, be it still in stub form or already complete (as it would be for a re-"
"installation)."
msgstr ""

# 1e18a07ab28043d497965edf3084a97c
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:608
msgid ""
"Install the new ``studio`` package using Spack's regular ``install`` "
"command. It may be wise to provide the anticipated compiler (`see above "
"<verify-compiler-anticipated_>`_) as an explicit concretization element:"
msgstr ""

# ceac119d421a487680731b5678758c4b
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:618
msgid ""
"Follow the same steps as under `Integrating external compilers`_ to tell "
"Spack the minutiae for actually using those compilers with client packages. "
"If you placed a stub entry in a ``compilers.yaml`` file, now is the time to "
"edit it and fill in the particulars."
msgstr ""

# afe23f2f04c74b8fbd49a2d6a488997e
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:623
msgid ""
"Under ``paths:``, give the full paths to the actual compiler binaries "
"(``icc``, ``ifort``, etc.) located within the Spack installation tree, in "
"all their unsightly length [fn9]_."
msgstr ""

# f02afef7b5464c70850f21107a3df982
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:627
msgid "To determine the full path to the C compiler, adapt and run:"
msgstr ""

# 0e6fb47975ce4d45ad879538dd30f712
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:634
msgid ""
"If you get hits for both ``intel64`` and ``ia32``, you almost certainly will "
"want to use the ``intel64`` variant.  The ``icpc`` and ``ifort`` compilers "
"will be located in the same directory as ``icc``."
msgstr ""

# b5141ecf3d094eaa8bdd4d85b5aabf87
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:638
msgid ""
"Use the ``modules:`` and/or ``cflags:`` tokens to specify a suitable "
"accompanying ``gcc`` version to help pacify picky client packages that ask "
"for C++ standards more recent than supported by your system-provided ``gcc`` "
"and its ``libstdc++.so``."
msgstr ""

# 51a06abf6d9d4304939e7cb0f524956b
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:643
msgid ""
"To set the Intel compilers for default use in Spack, instead of the usual ``"
"%gcc``, follow section `Selecting Intel compilers`_."
msgstr ""

# efd0e834054042489c5869ebecff57cd
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:648
msgid ""
"Compiler packages like ``intel-parallel-studio`` can easily be above 10 GB "
"in size, which can tax the disk space available for temporary files on "
"small, busy, or restricted systems (like virtual machines). The Intel "
"installer will stop and report insufficient space as::"
msgstr ""

# d3d28867d36d4b77acd3ffa4879f5bea
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:658
msgid "As first remedy, clean Spack's existing staging area:"
msgstr ""

# 58667019fe9f4d7489bc57b7005ca370
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:664
msgid ""
"then retry installing the large package. Spack normally cleans staging "
"directories but certain failures may prevent it from doing so."
msgstr ""

# 9e030588702f4dc295c91083564c25fd
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:667
msgid ""
"If the error persists, tell Spack to use an alternative location for "
"temporary files:"
msgstr ""

# d51aa613829b4d03a1cc4f9897023419
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:670
msgid "Run ``df -h`` to identify an alternative location on your system."
msgstr ""

# 767a8c9a92984e9ba68cf7f9ccc25d8e
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:672
msgid ""
"Tell Spack to use that location for staging. Do **one** of the following:"
msgstr ""

# fc10885e5e4844d9a685a82067fa588f
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:674
msgid ""
"Run Spack with the environment variable ``TMPDIR`` altered for just a single "
"command. For example, to use your ``$HOME`` directory:"
msgstr ""

# 16b635cf281344f28d81a86c6dd1b7c0
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:681
msgid ""
"This example uses Bourne shell syntax. Adapt for other shells as needed."
msgstr ""

# e6c9894db3eb40bd9962d49b4ee5eaab
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:683
msgid ""
"Alternatively, customize Spack's ``build_stage`` :ref:`configuration setting "
"<config-overrides>`."
msgstr ""

# ab04fffc597443ae877111535b76fc23
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:690
msgid "Append:"
msgstr ""

# 908668cd8a4e45068f7142e606e23b93
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:698
msgid ""
"Do not duplicate the ``config:`` line if it already is present. Adapt the "
"location, which here is the same as in the preceeding example."
msgstr ""

# eb2b458e47a4455c88cf143544614523
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:701
msgid "Retry installing the large package."
msgstr ""

# 11467f3027934339912f1c99f8d53205
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:708
msgid "Install steps for library-only packages"
msgstr ""

# 276d0602a8854d1996cd9d6bde30e441
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:710
msgid ""
"To install library-only packages like ``intel-mkl``, ``intel-mpi``, and "
"``intel-daal`` follow the steps given here. For packages that contain a "
"compiler, follow `the previous section <intel-install-studio_>`_ instead."
msgstr ""

# 80365f66ea2442779879ac3ea5317027
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:715
msgid ""
"For pre-2017 product releases, review the section `Configuring Spack to use "
"Intel licenses`_."
msgstr ""

# 92770e6129f948a7a65c6d63531c382d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:717
msgid ""
"Inspect the package spec. Specify an explicit compiler if necessary, e.g.:"
msgstr ""

# 6848c4f2db7742678c6db68c5237b17b
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:724
msgid ""
"Check that the package will use the compiler flavor and version that you "
"expect."
msgstr ""

# b6a8d4d7b54745baac54c7a51ae17175
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:726
msgid ""
"Install the package normally within Spack. Use the same spec as in the "
"previous command, i.e., as general or as specific as needed:"
msgstr ""

# 328c6b144ccd43a892a09cc635c939fa
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:734
msgid ""
"To prepare the new packages for use with client packages, follow `Selecting "
"libraries to satisfy virtual packages`_."
msgstr ""

# 112449bedbf34d829bace9d411108dfb
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:740
msgid "Debug notes"
msgstr ""

# a0af13c7ab7246a79b7384fbd197b96f
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:742
msgid ""
"You can trigger a wall of additional diagnostics using Spack options, e.g.:"
msgstr ""

# 8bf687dffb2e4bcea7d03b0673ec84a4
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:748
msgid ""
"The ``--debug`` option can also be useful while installing client packages "
"`(see below) <Using Intel tools in Spack to install client packages_>`_ to "
"confirm the integration of the Intel tools in Spack, notably MKL and MPI."
msgstr ""

# 05cdbae8d2df4b6fb8af848d1d27554b
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:753
msgid ""
"The ``.spack/`` subdirectory of an installed ``IntelPackage`` will contain, "
"besides Spack's usual archival items, a copy of the ``silent.cfg`` file that "
"was passed to the Intel installer:"
msgstr ""

# e10c6180fa5c40dd9735eee9164f8f8d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:762
msgid ""
"If an installation error occurs, Spack will normally clean up and remove a "
"partially installed target directory. You can direct Spack to keep it using "
"``--keep-prefix``, e.g.:"
msgstr ""

# 1a1872599e5a4874842e4253fde92d35
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:770
msgid ""
"You must, however, *remove such partial installations* prior to subsequent "
"installation attempts. Otherwise, the Intel installer will behave "
"incorrectly."
msgstr ""

# a8d1d3ce89044c01a70ceb3176c07f96
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:777
msgid "Using Intel tools in Spack to install client packages"
msgstr ""

# 1b2043227dc54e249fc7eee6a5110198
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:779
msgid "Finally, this section pertains to `route 3`_ from the introduction."
msgstr ""

# 79f90ef172854ed38cf45b62eecf0971
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:781
msgid ""
"Once Intel tools are installed within Spack as external or internal packages "
"they can be used as intended for installing client packages."
msgstr ""

# c9243d1439574987ba48c7c2102a3bc3
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:789
msgid "Selecting Intel compilers"
msgstr ""

# 1f3a1107051b4cf582940e56700b0504
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:791
msgid ""
"Select Intel compilers to compile client packages, like any compiler in "
"Spack, by one of the following means:"
msgstr ""

# 512c965492c6429c9c36253f87c7d597
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:794
msgid "Request the Intel compilers explicitly in the client spec, e.g.:"
msgstr ""

# a7d70f6223cf4df9a0843826359f0682
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:801
msgid ""
"Alternatively, request Intel compilers implicitly by concretization "
"preferences. Configure the order of compilers in the appropriate ``packages."
"yaml`` file, under either an ``all:`` or client-package-specific entry, in a "
"``compiler:`` list. Consult the Spack documentation for :ref:`Configuring "
"Package Preferences <configs-tutorial-package-prefs>` and :ref:"
"`Concretization Preferences <concretization-preferences>`."
msgstr ""

# 9a70650ef1f945a98478c1981240842f
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:809
msgid "Example: ``etc/spack/packages.yaml`` might simply contain:"
msgstr ""

# 1da79e24848b45ceb92302023256a20d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:817
msgid ""
"To be more specific, you can state partial or full compiler version numbers, "
"for example:"
msgstr ""

# e4b21d2c1fca489198cdb22fceabab8f
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:830
msgid "Selecting libraries to satisfy virtual packages"
msgstr ""

# 63b2f6e5aa1743ec9dbb50f3da95233e
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:832
msgid ""
"Intel packages, whether integrated into Spack as external packages or "
"installed within Spack, can be called upon to satisfy the requirement of a "
"client package for a library that is available from different providers. The "
"relevant virtual packages for Intel are ``blas``, ``lapack``, ``scalapack``, "
"and ``mpi``."
msgstr ""

# c644732307684b6cb11e12740a319430
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:838
msgid ""
"In both integration routes, Intel packages can have optional :ref:`variants "
"<basic-variants>` which alter the list of virtual packages they can "
"satisfy.  For Spack-external packages, the active variants are a combination "
"of the defaults declared in Spack's package repository and the spec it is "
"declared as in ``packages.yaml``. Needless to say, those should match the "
"components that are actually present in the external product installation. "
"Likewise, for Spack-internal packages, the active variants are determined, "
"persistently at installation time, from the defaults in the repository and "
"the spec selected to be installed."
msgstr ""

# e96b77f6d8f94dcd89c4916d003804c3
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:848
msgid ""
"To have Intel packages satisfy virtual package requests for all or selected "
"client packages, edit the ``packages.yaml`` file.  Customize, either in the "
"``all:`` or a more specific entry, a ``providers:`` dictionary whose keys "
"are the virtual packages and whose values are the Spack specs that satisfy "
"the virtual package, in order of decreasing preference.  To learn more about "
"the ``providers:`` settings, see the Spack tutorial for :ref:`Configuring "
"Package Preferences <configs-tutorial-package-prefs>` and the section :ref:"
"`Concretization Preferences <concretization-preferences>`."
msgstr ""

# 2109104233b3444b9cbe04adeaf88be3
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:858
msgid ""
"Example: The following fairly minimal example for ``packages.yaml`` shows "
"how to exclusively use the standalone ``intel-mkl`` package for all the "
"linear algebra virtual packages in Spack, and ``intel-mpi`` as the preferred "
"MPI implementation. Other providers can still be chosen on a per-package "
"basis."
msgstr ""

# b7d4511eb0c544c59a84cac841085f01
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:873
msgid ""
"If you have access to the ``intel-parallel-studio@cluster`` edition, you can "
"use instead:"
msgstr ""

# 54616c05167d4fe3a415819cd2c443ae
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:886
msgid ""
"If you installed ``intel-parallel-studio`` within Spack (\"`route 2`_\"), "
"make sure you followed the `special installation step <intel-compiler-"
"anticipation_>`_ to ensure that its virtual packages match the compilers it "
"provides."
msgstr ""

# 0bd80daedf324dcaad92ab44fc63d81f
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:894
msgid "Using Intel tools as explicit dependency"
msgstr ""

# 72773814cb694d23a04ccb58cbe650c5
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:896
msgid ""
"With the proper installation as detailed above, no special steps should be "
"required when a client package specifically (and thus deliberately) requests "
"an Intel package as dependency, this being one of the target use cases for "
"Spack."
msgstr ""

# 5b7cfc2dfbba459ebaf45f8ae99f205a
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:903
msgid "Tips for configuring client packages to use MKL"
msgstr ""

# 87220177fe174a88b3b75b44bc844071
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:905
msgid ""
"The Math Kernel Library (MKL) is provided by several Intel packages, "
"currently ``intel-parallel-studio`` when variant ``+mkl`` is active (it is "
"by default) and the standalone ``intel-mkl``. Because of these different "
"provider packages, a *virtual* ``mkl`` package is declared in Spack."
msgstr ""

# 04c29879fbd842168c979bf50fc68a98
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:910
msgid "To use MKL-specific APIs in a client package:"
msgstr ""

# 661876de0fc249b18166875522e0f499
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:912
msgid ""
"Declare a dependency on ``mkl``, rather than a specific provider like "
"``intel-mkl``.  Declare the dependency either absolutely or conditionally "
"based on variants that your package might have declared:"
msgstr ""

# b3082f78863140b6a25f8da7f6abc1a6
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:923
msgid ""
"The ``MKLROOT`` environment variable (part of the documented API) will be "
"set during all stages of client package installation, and is available to "
"both the Spack packaging code and the client code."
msgstr ""

# 77ed70bfbd4244f5844341dcc66807a0
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:927
msgid "To use MKL as provider for BLAS, LAPACK, or ScaLAPACK:"
msgstr ""

# 4364ce59c1154de9920e25ae78a9cfe9
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:929
msgid ""
"The packages that provide ``mkl`` also provide the narrower virtual "
"``blas``, ``lapack``, and ``scalapack`` packages. See the relevant :ref:"
"`Packaging Guide section <blas_lapack_scalapack>` for an introduction. To "
"portably use these virtual packages, construct preprocessor and linker "
"option strings in your package configuration code using the package "
"functions ``.headers`` and ``.libs`` in conjunction with utility functions "
"from the following classes:"
msgstr ""

# 726863264ab0467f97b71447b77679d0
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:938
msgid ":py:class:`llnl.util.filesystem.FileList`,"
msgstr ""

# 793fbb9fb88c4afa9759009ac883c4ea
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:939
msgid ":py:class:`llnl.util.filesystem.HeaderList`,"
msgstr ""

# b91ead1a7a7b44aea40af8c438ebd061
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:940
msgid ":py:class:`llnl.util.filesystem.LibraryList`."
msgstr ""

# 19c6645eb3ff47de95f9eb88fb18f680
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:943
msgid ""
"*Do not* use constructs like ``.prefix.include`` or ``.prefix.lib``, with "
"Intel or any other implementation of ``blas``, ``lapack``, and ``scalapack``."
msgstr ""

# cbdfc8ac962f48d78a590db7fda6531a
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:947
msgid ""
"For example, for an :ref:`AutotoolsPackage <autotoolspackage>` use ``.libs."
"ld_flags`` to transform the library file list into linker options passed to "
"``./configure``:"
msgstr ""

# 463d8b557a814a658fd53aea75799c44
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:962
msgid ""
"Even though ``.ld_flags`` will return a string of multiple words, *do not* "
"use quotes for options like ``--with-blas=...`` because Spack passes them to "
"``./configure`` without invoking a shell."
msgstr ""

# c49be189df8649c493c9dd3a237eb464
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:966
msgid ""
"Likewise, in a :ref:`MakefilePackage <makefilepackage>` or similiar package "
"that does not use AutoTools you may need to provide include and link options "
"for use on command lines or in environment variables. For example, to "
"generate an option string of the form ``-I<dir>``, use:"
msgstr ""

# 8540e99b46bb479a863f4d09ce305300
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:976
msgid ""
"and to generate linker options (``-L<dir> -llibname ...``), use the same as "
"above,"
msgstr ""

# 0fd0f18511fc477d89e976dcee809c2f
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:982
msgid ""
"See :ref:`MakefilePackage <makefilepackage>` and more generally the :ref:"
"`Packaging Guide <blas_lapack_scalapack>` for background and further "
"examples."
msgstr ""

# 48c3e105c5f94a41886fa99e9fde80d8
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:991
msgid "Footnotes"
msgstr ""

# 0f1335cfe85544099c225289ab049cbf
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:993
msgid "Strictly speaking, versions from ``2017.2`` onward."
msgstr ""

# 79f1cca7e64e4dcb9e260abc84f60cb4
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:995
msgid ""
"The package ``intel`` intentionally does not have a ``+mpi`` variant since "
"it is meant to be small. The native installer will always add MPI *runtime* "
"components because it follows defaults defined in the download package, even "
"when ``intel-parallel-studio ~mpi`` has been requested."
msgstr ""

# 5b19309a7ff74a8fad8b241e78516261
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1000
msgid ""
"For ``intel-parallel-studio +mpi``, the class function :py:func:``."
"IntelPackage.pset_components`` will include ``\"intel-mpi intel-imb\"`` in a "
"list of component patterns passed to the Intel installer. The installer will "
"extend each pattern word with an implied glob-like ``*`` to resolve it to "
"package names that are *actually present in the product BOM*. As a side "
"effect, this pattern approach accommodates occasional package name changes, "
"e.g., capturing both ``intel-mpirt`` and ``intel-mpi-rt`` ."
msgstr ""

# 256c597086da46da8cbe1864e7284b1e
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1009
msgid "How could the external installation have succeeded otherwise?"
msgstr ""

# 52a4d588df924a53a8cdaa747faa0c94
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1011
msgid ""
"According to Intel's documentation, there is supposedly a way to install a "
"product using a network license even `when a FLEXlm server is not running "
"<https://software.intel.com/en-us/articles/licensing-setting-up-the-client-"
"floating-license>`_: Specify the license in the form ``port@serverhost`` in "
"the ``INTEL_LICENSE_FILE`` environment variable. All other means of "
"specifying a network license require that the license server be up."
msgstr ""

# f1010c52775041c986188d076a0df635
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1018
msgid ""
"Despite the name, ``INTEL_LICENSE_FILE`` can hold several and diverse "
"entries. They  can be either directories (presumed to contain ``*.lic`` "
"files), file names, or network locations in the form ``port@host`` (on Linux "
"and Mac), with all items separated by \":\" (on Linux and Mac)."
msgstr ""

# a9af4e3cb4184b90b91f8ccb9c0508a7
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1023
msgid ""
"Should said editor turn out to be ``vi``, you better be in a position to "
"know how to use it."
msgstr ""

# 6f8f56c7487c4aa382bf2fa6025bd363
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1026
msgid ""
"Comment lines in FLEXlm files, indicated by ``#`` as the first non-"
"whitespace character on the line, are generally allowed anywhere in the "
"file. There `have been reports <https://github.com/spack/spack/"
"issues/6534>`_, however, that as of 2018, ``SERVER`` and ``USE_SERVER`` "
"lines must precede any comment lines."
msgstr ""

# 0b163a4efd284229b98e827b3946a775
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1037
msgid ""
"Spack's close coupling of installed packages to compilers, which both "
"necessitates the detour for installing ``intel-parallel-studio``, and "
"largely limits any of its provided virtual packages to a single compiler, "
"heavily favors `recommending to install Intel Parallel Studio outside of "
"Spack <integrate-external-intel_>`_ and declare it for Spack in ``packages."
"yaml`` by a `compiler-less spec <compiler-neutral-package_>`_."
msgstr ""

# 7d629f5865d643c7b03a30eccac3fd15
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1044
msgid "With some effort, you can convince Spack to use shorter paths."
msgstr ""

# efa62a372a634f8ab2da6be2e6864703
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1046
msgid ""
"Altering the naming scheme means that Spack will lose track of all packages "
"it has installed for you so far. That said, the time is right for this kind "
"of customization when you are defining a new set of compilers."
msgstr ""

# b5ff75bca3714ceba68a9eb7d59df9c7
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1051
msgid "The relevant tunables are:"
msgstr ""

# b57ab4ad5c4a474f94c3c2116516bd8b
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1053
msgid ""
"Set the ``install_tree`` location in ``config.yaml`` (:ref:`see doc <config-"
"yaml>`)."
msgstr ""

# 074a85e40b064b0bb0f4359a36967bd2
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1055
msgid ""
"Set the hash length in ``install-path-scheme``, also in ``config.yaml`` (:"
"ref:`q.v. <config-yaml>`)."
msgstr ""

# dbc867c2fc5e48b78278218a17541b51
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1057
msgid ""
"You will want to set the *same* hash length for :ref:`tcl module files "
"<modules-naming-scheme>` if you have Spack produce them for you, under "
"``naming_scheme`` in ``modules.yaml``.  Other module dialects cannot be "
"altered in this manner."
msgstr ""

# 51eb303d19414121b0dd722a0d8f27d1
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:10
msgid "MakefilePackage"
msgstr ""

# 06b12c7346f0410a93417dc8b2af99ce
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:12
msgid ""
"The most primitive build system a package can use is a plain Makefile. "
"Makefiles are simple to write for small projects, but they usually require "
"you to edit the Makefile to set platform and compiler-specific variables."
msgstr ""

# 17e8ab491b2c437d86cb5aefcc3ac5a0
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:21
msgid "The ``MakefilePackage`` base class comes with 3 phases:"
msgstr ""

# f76bf79170be4097ba5c3cba6ba7e3ca
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:23
msgid "``edit`` - edit the Makefile"
msgstr ""

# af90fb443492413389977c00480d10b9
# f831a5560ad942968ba1476146407962
# 89323c3116fb4bdbae14f6de8021a193
# 629f2d85d7f54c90b46ed0d5f41b0224
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:24
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:23
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:35
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:22
msgid "``build`` - build the project"
msgstr ""

# b4373b72256d4b229313474630a114f8
# b49c17a952d1421db7ae453d8539ee88
# b7b714d6711e41a2a2511ef0a8312412
# 7d3d08ab9ef34cfd9ef6cda3efd404a1
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:25
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:24
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:36
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:23
msgid "``install`` - install the project"
msgstr ""

# 726b923b082049b0b83cec796f54614f
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:27
msgid ""
"By default, ``edit`` does nothing, but you can override it to replace hard-"
"coded Makefile variables. The ``build`` and ``install`` phases run:"
msgstr ""

# c7b5b8199cc9462ca81d8426ed0ae298
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:41
msgid ""
"The main file that matters for a ``MakefilePackage`` is the Makefile. This "
"file will be named one of the following ways:"
msgstr ""

# 0682176450574a0c96bd138a7ba01767
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:44
msgid "GNUmakefile (only works with GNU Make)"
msgstr ""

# b675a795319e4ae39927a3429da3e72e
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:45
msgid "Makefile (most common)"
msgstr ""

# 178d3af8c4a04599ba461acaeceb000d
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:46
msgid "makefile"
msgstr ""

# 5679de813c2743e0b02eabff1a002ab3
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:48
msgid ""
"Some Makefiles also *include* other configuration files. Check for an "
"``include`` directive in the Makefile."
msgstr ""

# 84a4e9efd96a4a69b54e31508d0d69ac
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:55
msgid ""
"Spack assumes that the operating system will have a valid ``make`` utility "
"installed already, so you don't need to add a dependency on ``make``. "
"However, if the package uses a ``GNUmakefile`` or the developers recommend "
"using GNU Make, you should add a dependency on ``gmake``:"
msgstr ""

# 59cd20d58e6047ae965528068814bda5
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:67
msgid "Types of Makefile packages"
msgstr ""

# f22fb1bab2544176b54c3473f208f3dc
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:69
msgid ""
"Most of the work involved in packaging software that uses Makefiles involves "
"overriding or replacing hard-coded variables. Many packages make the mistake "
"of hard-coding compilers, usually for GCC or Intel. This is fine if you "
"happen to be using that particular compiler, but Spack is designed to work "
"with *any* compiler, and you need to ensure that this is the case."
msgstr ""

# fe945e686da948f7bbf1ee4852f7f9bf
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:76
msgid ""
"Depending on how the Makefile is designed, there are 4 common strategies "
"that can be used to set or override the appropriate variables:"
msgstr ""

# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# 657c1697ff8340c08e5ad6f85e79c735
# #-#-#-#-#  configuration.pot (Spack 0.12)  #-#-#-#-#
# 8cde3b0295c04684aafcfa39b728d28d
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# 43bfc8d026a54d36aecb260558b37854
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:81
#: ../spack/lib/spack/docs/configuration.rst:413
#: ../spack/lib/spack/docs/packaging_guide.rst:2758
msgid "Environment variables"
msgstr ""

# f2fdc312dbd44fe78cc5542e84259698
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:83
msgid ""
"Make has multiple types of `assignment operators <https://www.gnu.org/"
"software/make/manual/make.html#Setting>`_. Some Makefiles use ``=`` to "
"assign variables. The only way to override these variables is to edit the "
"Makefile or override them on the command-line. However, Makefiles that use "
"``?=`` for assignment honor environment variables. Since Spack already sets "
"``CC``, ``CXX``, ``F77``, and ``FC``, you won't need to worry about setting "
"these variables. If there are any other variables you need to set, you can "
"do this in the ``edit`` method:"
msgstr ""

# b444c7f0c82e419a927e22ec67eb38fa
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:100
msgid ""
"`cbench <https://github.com/spack/spack/blob/develop/var/spack/repos/builtin/"
"packages/cbench/package.py>`_ is a good example of a simple package that "
"does this, while `esmf <https://github.com/spack/spack/blob/develop/var/"
"spack/repos/builtin/packages/esmf/package.py>`_ is a good example of a more "
"complex package."
msgstr ""

# a4c6f14372174c6fa30011061da036bd
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:107
msgid "Command-line arguments"
msgstr ""

# 1b2f5d56747b42a0a3819aceb4081d92
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:109
msgid ""
"If the Makefile ignores environment variables, the next thing to try is "
"command-line arguments. You can do this by overriding the ``build_targets`` "
"attribute. If you don't need access to the spec, you can do this like so:"
msgstr ""

# aa3843f0a9e1431d898a495db3bdf8f1
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:119
msgid "If you do need access to the spec, you can create a property like so:"
msgstr ""

# febf5ef8a29c4cf283f5e0f8acdf6642
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:133
msgid ""
"`cloverleaf <https://github.com/spack/spack/blob/develop/var/spack/repos/"
"builtin/packages/cloverleaf/package.py>`_ is a good example of a package "
"that uses this strategy."
msgstr ""

# bfe27e785cca4dfbaf7588cfdc797a5a
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:138
msgid "Edit Makefile"
msgstr ""

# 48c338bc970f43cab44566dbe73b81da
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:140
msgid ""
"Some Makefiles are just plain stubborn and will ignore command-line "
"variables. The only way to ensure that these packages build correctly is to "
"directly edit the Makefile. Spack provides a ``FileFilter`` class and a "
"``filter_file`` method to help with this. For example:"
msgstr ""

# d6e97f4408594e79a3060dab7e37f22a
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:154
msgid ""
"`stream <https://github.com/spack/spack/blob/develop/var/spack/repos/builtin/"
"packages/stream/package.py>`_ is a good example of a package that involves "
"editing a Makefile to set the appropriate variables."
msgstr ""

# 1eb71123d9ae405eba17ca6e72012b61
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:160
msgid "Config file"
msgstr ""

# 4b65ce7f34f64a5da41e4963b260fe4d
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:162
msgid ""
"More complex packages often involve Makefiles that *include* a configuration "
"file. These configuration files are primarily composed of variables relating "
"to the compiler, platform, and the location of dependencies or names of "
"libraries. Since these config files are dependent on the compiler and "
"platform, you will often see entire directories of examples for common "
"compilers and architectures. Use these examples to help determine what "
"possible values to use."
msgstr ""

# 05e9b1c53a55421aa10c352751482c47
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:170
msgid ""
"If the config file is long and only contains one or two variables that need "
"to be modified, you can use the technique above to edit the config file. "
"However, if you end up needing to modify most of the variables, it may be "
"easier to write a new file from scratch."
msgstr ""

# 3024427826d243bb8bfaf8741ed617e7
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:175
msgid ""
"If each variable is independent of each other, a dictionary works well for "
"storing variables:"
msgstr ""

# 9b8665450b0c43739b6d328285245b07
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:194
msgid ""
"`elk <https://github.com/spack/spack/blob/develop/var/spack/repos/builtin/"
"packages/elk/package.py>`_ is a good example of a package that uses a "
"dictionary to store configuration variables."
msgstr ""

# bee631bb720c47778e8148159bcd06bf
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:198
msgid ""
"If the order of variables is important, it may be easier to store them in a "
"list:"
msgstr ""

# 0df2a0863274451295c44536f85230e0
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:215
msgid ""
"`hpl <https://github.com/spack/spack/blob/develop/var/spack/repos/builtin/"
"packages/hpl/package.py>`_ is a good example of a package that uses a list "
"to store configuration variables."
msgstr ""

# 9184fe58630b4a439988a9f3a77d0ff0
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:221
msgid "Variables to watch out for"
msgstr ""

# 1c1d12bf6e074964816d3af26b07e0f4
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:223
msgid ""
"The following is a list of common variables to watch out for. The first two "
"sections are `implicit variables <https://www.gnu.org/software/make/manual/"
"html_node/Implicit-Variables.html>`_ defined by Make and will always use the "
"same name, while the rest are user-defined variables and may vary from "
"package to package."
msgstr ""

# 8b471c0a8db346be9d730981610aa104
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:229
msgid "**Compilers**"
msgstr ""

# f3c29a27fcf84a5788f2642b9efdebdd
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:231
msgid ""
"This includes variables such as ``CC``, ``CXX``, ``F77``, ``F90``, and "
"``FC``, as well as variables related to MPI compiler wrappers, like "
"``MPICC`` and friends."
msgstr ""

# a3107477979940369f34137c86765058
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:235
msgid "**Compiler flags**"
msgstr ""

# 066973a92fe443c28e144c6a9635de25
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:237
msgid ""
"This includes variables for specific compilers, like ``CFLAGS``, "
"``CXXFLAGS``, ``F77FLAGS``, ``F90FLAGS``, ``FCFLAGS``, and ``CPPFLAGS``. "
"These variables are often hard-coded to contain flags specific to a certain "
"compiler. If these flags don't work for every compiler, you may want to "
"consider filtering them."
msgstr ""

# 87d9bda072454194bbed9d9c7f0307d1
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:243
msgid "**Variables that enable or disable features**"
msgstr ""

# 2e0ad17d44d34e44900f9a3f5adde38d
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:245
msgid ""
"This includes variables like ``MPI``, ``OPENMP``, ``PIC``, and ``DEBUG``. "
"These flags often require you to create a variant so that you can either "
"build with or without MPI support, for example. These flags are often "
"compiler-dependent. You should replace them with the appropriate compiler "
"flags, such as ``self.compiler.openmp_flag`` or ``self.compiler.pic_flag``."
msgstr ""

# 9bedf3ca263c40de9dd7237d7e713d90
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:252
msgid "**Platform flags**"
msgstr ""

# 83269d9a1c3642e682a04820193d6dca
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:254
msgid ""
"These flags control the type of architecture that the executable is compiler "
"for. Watch out for variables like ``PLAT`` or ``ARCH``."
msgstr ""

# 876b1f221f634753abb2c3b389029c09
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:257
msgid "**Dependencies**"
msgstr ""

# e6d2635135824e1a92d9c5a35768c4bc
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:259
msgid ""
"Look out for variables that sound like they could be used to locate "
"dependencies, such as ``JAVA_HOME``, ``JPEG_ROOT``, or ``ZLIBDIR``. Also "
"watch out for variables that control linking, such as ``LIBS``, ``LDFLAGS``, "
"and ``INCLUDES``. These variables need to be set to the installation prefix "
"of a dependency, or to the correct linker flags to link to that dependency."
msgstr ""

# 2b21a2a9babe4f3195e1e767d774552f
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:266
msgid "**Installation prefix**"
msgstr ""

# a909e4394b0442c1bf1e1085cc8a67c5
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:268
msgid ""
"If your Makefile has an ``install`` target, it needs some way of knowing "
"where to install. By default, many packages install to ``/usr`` or ``/usr/"
"local``. Since many Spack users won't have sudo privileges, it is imperative "
"that each package is installed to the proper prefix. Look for variables like "
"``PREFIX`` or ``INSTALL``."
msgstr ""

# 00db0ebf52bb47f3a176720f72675780
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:277
msgid "Makefiles in a sub-directory"
msgstr ""

# 6793cd271abf4f2b97d837b6579bf94a
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:279
msgid ""
"Not every package places their Makefile in the root of the package tarball. "
"If the Makefile is in a sub-directory like ``src``, you can tell Spack where "
"to locate it like so:"
msgstr ""

# c82b421502f84a3691335394c6b82bb6
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:290
msgid "Manual installation"
msgstr ""

# c959e3e55fb84e619437e1351cd8e84d
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:292
msgid ""
"Not every Makefile includes an ``install`` target. If this is the case, you "
"can override the default ``install`` method to manually install the package:"
msgstr ""

# 1f2716b11cb04d78a3d5499639149863
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:308
msgid ""
"For more information on reading and writing Makefiles, see: https://www.gnu."
"org/software/make/manual/make.html"
msgstr ""

# ba4dae53f4a245fba66df3413723b564
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:10
msgid "MesonPackage"
msgstr ""

# aec1ea701b6d4dffa369f33ff872c86d
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:12
msgid ""
"Much like Autotools and CMake, Meson is a build system.  But it is meant to "
"be both fast and as user friendly as possible.  GNOME's goal is to port "
"modules to use the Meson build system."
msgstr ""

# e702c9cb10194be2ae548450339ff5a7
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:20
msgid "The ``MesonPackage`` base class comes with the following phases:"
msgstr ""

# b57eb50772084623b17ba9c4052afd33
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:22
msgid "``meson`` - generate ninja files"
msgstr ""

# b5c5c45633684881bc012d8004b74c14
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:38
msgid ""
"Any of these phases can be overridden in your package as necessary. There is "
"also a ``check`` method that looks for a ``test`` target in the build file. "
"If a ``test`` target exists and the user runs:"
msgstr ""

# 336dc08a55954133bb65918096b65098
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:47
msgid "Spack will run ``ninja test`` after the build phase."
msgstr ""

# 62bfc649af1a40e4b29960c78166dbec
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:53
msgid ""
"Packages that use the Meson build system can be identified by the presence "
"of a ``meson.build`` file. This file declares things like build instructions "
"and dependencies."
msgstr ""

# fad3142798914a18a42d3ae908aea511
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:57
msgid ""
"One thing to look for is the ``meson_version`` key that gets passed to the "
"``project`` function:"
msgstr ""

# f64c5a4bd9924a0fbcae6716931d3067
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:76
msgid ""
"This means that Meson 0.43.0 is the earliest release that will work. You "
"should specify this in a ``depends_on`` statement."
msgstr ""

# aeedc8d45da54a4283ec3732f09db176
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:83
msgid ""
"At the bare minimum, packages that use the Meson build system need ``meson`` "
"and ```ninja``` dependencies. Since this is always the case, the "
"``MesonPackage`` base class already contains:"
msgstr ""

# 23d119cb408a49e19269bae5f8ef9840
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:104
msgid "Finding meson flags"
msgstr ""

# 137370ddd8b642cd8436788520b86ccb
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:106
msgid ""
"To get a list of valid flags that can be passed to ``meson``, run the "
"following command in the directory that contains ``meson.build``:"
msgstr ""

# 2dd5e09e66d54a62b635156310dc95e7
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:116
msgid "Passing arguments to meson"
msgstr ""

# a33021c0d868488ca76c6d88360ac4c3
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:118
msgid ""
"If you need to pass any arguments to the ``meson`` call, you can override "
"the ``meson_args`` method like so:"
msgstr ""

# 86585a640932401881b71e3e95c7159d
# 61652504f6f74df982bf5eb66778be35
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:127
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:109
msgid "This method can be used to pass flags as well as variables."
msgstr ""

# 58b951aebfa24dda846ec58c3dc01140
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:133
msgid ""
"For more information on the Meson build system, see: https://mesonbuild.com/"
"index.html"
msgstr ""

# 5ca7227745d54fa5a3fa6c44aacac214
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:10
msgid "OctavePackage"
msgstr ""

# 1d451060721f4dd29ab7ce4af523bd85
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:12
msgid "Octave has its own build system for installing packages."
msgstr ""

# 884791f5444647fc920219979834a278
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:18
msgid "The ``OctavePackage`` base class has a single phase:"
msgstr ""

# e5638a2299ab4df98c26fd03f77ca1c3
# f289fa29c5294ca2be8dfc57720e2e7a
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:22
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:26
msgid "By default, this phase runs the following command:"
msgstr ""

# 694a7a741ee243bd9b07a9f87759fc66
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:29
msgid ""
"Beware that uninstallation is not implemented at the moment. After "
"uninstalling a package via Spack, you also need to manually uninstall it "
"from Octave via ``pkg uninstall <package_name>``."
msgstr ""

# 0e7d6fd723ea4bc7b23c6024db3617b8
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:35
msgid "Finding Octave packages"
msgstr ""

# 7c81333e018044c69cd526fef66d0d1d
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:37
msgid ""
"Most Octave packages are listed at https://octave.sourceforge.io/packages."
"php."
msgstr ""

# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# db2a6a84f2aa42e39cd76ffbbf23934a
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# 865363d1002b4e1d95dfafeb6eda2768
# #-#-#-#-#  tutorial_packaging.pot (Spack 0.12)  #-#-#-#-#
# a11fee1d821e4fdba1a8aa5c84264f0e
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:41
#: ../spack/lib/spack/docs/packaging_guide.rst:1770
#: ../spack/lib/spack/docs/tutorial_packaging.rst:202
msgid "Dependencies"
msgstr ""

# f4b0050fcb314d89b1e9207c702bc332
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:43
msgid ""
"Usually, the homepage of a package will list dependencies, i.e. "
"``Dependencies: Octave >= 3.6.0 struct >= 1.0.12``. The same information "
"should be available in the ``DESCRIPTION`` file in the root of each archive."
msgstr ""

# eaf0efe5db9c482ab4c835f4cea8626b
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:49
msgid "External Documentation"
msgstr ""

# ecc423bd1a334b49a413d9ca835b2e6c
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:51
msgid ""
"For more information on the Octave build system, see: https://octave.org/doc/"
"v4.4.0/Installing-and-Removing-Packages.html"
msgstr ""

# 31e540ef11a64c9badea436e9d3bef61
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:10
msgid "PerlPackage"
msgstr ""

# 0c79bb7929f84699aca9849b23a06a65
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:12
msgid "Much like Octave, Perl has its own language-specific build system."
msgstr ""

# 680d21465c2649c4ba79e83ec459913f
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:19
msgid ""
"The ``PerlPackage`` base class comes with 3 phases that can be overridden:"
msgstr ""

# f3ab0114c1534c6ba2aba79418effabf
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:21
msgid "``configure`` - configure the package"
msgstr ""

# e35a1859920c42608f6b49a8009415bd
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:25
msgid "Perl packages have 2 common modules used for module installation:"
msgstr ""

# db9b65e740714c24b4392af20e775f8a
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:29
msgid "``ExtUtils::MakeMaker``"
msgstr ""

# 3b2e0d3661cb4dcc8dec01052ec64212
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:31
msgid ""
"The ``ExtUtils::MakeMaker`` module is just what it sounds like, a module "
"designed to generate Makefiles. It can be identified by the presence of a "
"``Makefile.PL`` file, and has the following installation steps:"
msgstr ""

# 28b0f95b420b4e26bdd407a0842bd224
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:45
msgid "``Module::Build``"
msgstr ""

# fb6af60a382740a0bdc5dd1cc321a6e4
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:47
msgid ""
"The ``Module::Build`` module is a pure-Perl build system, and can be "
"identified by the presence of a ``Build.PL`` file. It has the following "
"installation steps:"
msgstr ""

# 923267f80ee64be89c698ae08108cc76
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:59
msgid ""
"If both ``Makefile.PL`` and ``Build.PL`` files exist in the package, Spack "
"will use ``Makefile.PL`` by default. If your package uses a different "
"module, ``PerlPackage`` will need to be extended to support it."
msgstr ""

# 8448bc34b92a4e3291ad7ca00e772343
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:64
msgid ""
"``PerlPackage`` automatically detects which build steps to use, so there "
"shouldn't be much work on the package developer's side to get things working."
msgstr ""

# 9ddb43d65cdf4e77957c847f9eaecb58
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:70
msgid "Finding Perl packages"
msgstr ""

# fbe6ff07bdea4af38ea631201e134b5d
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:72
msgid ""
"Most Perl modules are hosted on CPAN - The Comprehensive Perl Archive "
"Network. If you need to find a package for ``XML::Parser``, for example, you "
"should search for \"CPAN XML::Parser\"."
msgstr ""

# 21f6af8820a24ba2aa37e09254295ff6
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:76
msgid ""
"Some CPAN pages are versioned. Check for a link to the \"Latest Release\" to "
"make sure you have the latest version."
msgstr ""

# b000229fc411421f934db97deee6c33b
# c992337f53104cda9cfd7cbfc926f0ae
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:81
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:52
msgid "Package name"
msgstr ""

# 82d777e5906b40c6a3fd50336f3bd6ee
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:83
msgid ""
"When you use ``spack create`` to create a new Perl package, Spack will "
"automatically prepend ``perl-`` to the front of the package name. This helps "
"to keep Perl modules separate from other packages. The same naming scheme is "
"used for other language extensions, like Python and R."
msgstr ""

# 0cab24cc394c4a7ea8ab0dabb1fb2eff
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:92
msgid ""
"Most CPAN pages have a short description under \"NAME\" and a longer "
"description under \"DESCRIPTION\". Use whichever you think is more useful "
"while still being succinct."
msgstr ""

# 1cdde7d9025e447fbca88b70160ff052
# 05d526db3e404ce9b606d5b7a83df267
# aa54797841104369910e4247484afe23
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:98
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:129
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:87
msgid "Homepage"
msgstr ""

# 6d57341621f34dca8fb8c8221bffa8af
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:100
msgid ""
"In the top-right corner of the CPAN page, you'll find a \"permalink\" for "
"the package. This should be used instead of the current URL, as it doesn't "
"contain the version number and will always link to the latest release."
msgstr ""

# 04b8794090584ba292088d08ee9edcbe
# de0ade2d9cdc483caf4e754be169d571
# 42f93e7232444500b8d13c861cf18f03
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:107
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:145
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:102
msgid "URL"
msgstr ""

# a00c773001fe4fb8bbb9973445ab7694
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:109
msgid ""
"If you haven't found it already, the download URL is on the right side of "
"the page below the permalink. Search for \"Download\"."
msgstr ""

# 3a27a8c6401b42b583f4c6b01e22a6c4
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:116
msgid ""
"Every ``PerlPackage`` obviously depends on Perl at build and run-time, so "
"``PerlPackage`` contains:"
msgstr ""

# 26405cdef4d04d4a9f1709de20f3008d
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:126
msgid ""
"If your package requires a specific version of Perl, you should specify this."
msgstr ""

# 254b63efdb1f493f9f7239d9aa84ecce
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:129
msgid ""
"Although newer versions of Perl include ``ExtUtils::MakeMaker`` and "
"``Module::Build`` as \"core\" modules, you may want to add dependencies on "
"``perl-extutils-makemaker`` and ``perl-module-build`` anyway. Many people "
"add Perl as an external package, and we want the build to work properly. If "
"your package uses ``Makefile.PL`` to build, add:"
msgstr ""

# 2898403f3b254db08ae3b68355b85267
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:140
msgid "If your package uses ``Build.PL`` to build, add:"
msgstr ""

# 7064a0080fd34013999aeb3f0454691d
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:149
msgid "Perl dependencies"
msgstr ""

# 190f3145eeb74b8c903179c0d6174a3f
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:151
msgid ""
"Below the download URL, you will find a \"Dependencies\" link, which takes "
"you to a page listing all of the dependencies of the package. Packages "
"listed as \"Core module\" don't need to be added as dependencies, but all "
"direct dependencies should be added. Don't add dependencies of dependencies. "
"These should be added as dependencies to the dependency, not to your package."
msgstr ""

# 10e18a7d64cc401193d64e7b3621b06d
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:160
msgid "Passing arguments to configure"
msgstr ""

# 2e1ae97229cc469d92a14f3481fd135a
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:162
msgid ""
"Packages that have non-Perl dependencies often use command-line variables to "
"specify their installation directory. You can pass arguments to ``Makefile."
"PL`` or ``Build.PL`` by overriding ``configure_args`` like so:"
msgstr ""

# 9d6819dcbb354a3195cba536e3309e1a
# de092e10684647a68b82f2e55c860df0
# 2c2bace6cd22465dacfbaf6cfcad7a57
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:180
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:720
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:312
msgid "Alternatives to Spack"
msgstr ""

# c8cc3148b9fc44869c6037a83bf6dc8e
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:182
msgid ""
"If you need to maintain a stack of Perl modules for a user and don't want to "
"add all of them to Spack, a good alternative is ``cpanm``. If Perl is "
"already installed on your system, it should come with a ``cpan`` executable. "
"To install ``cpanm``, run the following command:"
msgstr ""

# 82730516ecfb4972b993c493d52d8d4c
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:192
msgid "Now, you can install any Perl module you want by running:"
msgstr ""

# 32ff2c25e4404233967391399b78f1ed
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:199
msgid ""
"Obviously, these commands can only be run if you have root privileges. "
"Furthermore, ``cpanm`` is not capable of installing non-Perl dependencies. "
"If you need to install to your home directory or need to install a module "
"with non-Perl dependencies, Spack is a better option."
msgstr ""

# 93ea02a6a4a54cb0a17cbb152cbce456
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:208
msgid ""
"You can find more information on installing Perl modules from source at: "
"http://www.perlmonks.org/?node_id=128077"
msgstr ""

# abf2d86af10b43e595378419b645119e
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:211
msgid ""
"More generic Perl module installation instructions can be found at: http://"
"www.cpan.org/modules/INSTALL.html"
msgstr ""

# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# f71b94b3db9b4dd181fa44114604a7be
# #-#-#-#-#  tutorial_buildsystems.pot (Spack 0.12)  #-#-#-#-#
# c158851bfc344b9c8900eb01a08d879f
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:10
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:639
msgid "PythonPackage"
msgstr ""

# 5662306d016844a7b2d63aa9c8ad77b2
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:12
msgid "Python packages and modules have their own special build system."
msgstr ""

# 939eaf4988dd488b98090548851bcf1b
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:18
msgid ""
"The ``PythonPackage`` base class provides the following phases that can be "
"overridden:"
msgstr ""

# bc4610055d1149b5bffa94935708fd08
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:21
msgid "``build``"
msgstr ""

# 1344a390c52f4c2fb160c35d8f35b9db
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:22
msgid "``build_py``"
msgstr ""

# 856187ca89ca4eaaa29eef72c3f071a5
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:23
msgid "``build_ext``"
msgstr ""

# e5c3fa9b2c984996ac9508b02ab05d7b
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:24
msgid "``build_clib``"
msgstr ""

# 3de1ccb4320f40278cc55c3f6f2fc5e7
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:25
msgid "``build_scripts``"
msgstr ""

# dbdb5c344fb647d3af5d59c0a3b2d192
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:26
msgid "``clean``"
msgstr ""

# abb85e65f31f438f88ef8ade30437d2b
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:27
msgid "``install``"
msgstr ""

# a342f4f0c2fd4c5b8cfa46b37e186960
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:28
msgid "``install_lib``"
msgstr ""

# 59d76966750d4dd9a9167fd7628c651e
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:29
msgid "``install_headers``"
msgstr ""

# 16041ac2226142258e2109c23a793e9e
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:30
msgid "``install_scripts``"
msgstr ""

# 353b2ad760014f2bb1ad0e3c8f967c64
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:31
msgid "``install_data``"
msgstr ""

# 3008d65aba674777bfa29e7432023ddc
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:32
msgid "``sdist``"
msgstr ""

# b262842500e34b978861cd3cb611130e
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:33
msgid "``register``"
msgstr ""

# 77a4afa12669491fb322ae8ad964d83a
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:34
msgid "``bdist``"
msgstr ""

# 4d65657272be4413874428135e389fe7
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:35
msgid "``bdist_dumb``"
msgstr ""

# 17f4f1d2334a40cab33eb05f18fbc84d
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:36
msgid "``bdist_rpm``"
msgstr ""

# 961a8f48ed9f4f38a331e90ddf82fc4b
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:37
msgid "``bdist_wininst``"
msgstr ""

# 5a48d330f8b94a08ac8305a61e8875dd
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:38
msgid "``upload``"
msgstr ""

# dd1a9a0c53e84c469276453782a85991
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:39
msgid "``check``"
msgstr ""

# 000df5e1460a4c1c934960007153dd09
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:41
msgid ""
"These are all standard ``setup.py`` commands and can be found by running:"
msgstr ""

# 0bf799dfdd924ffb97049464a598671a
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:48
msgid "By default, only the ``build`` and ``install`` phases are run:"
msgstr ""

# 698c7ff187f64948b91f2cd73b45cbbe
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:50
msgid "``build`` - build everything needed to install"
msgstr ""

# 1c7a691240a9407c87a03c393cd69ff7
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:51
msgid "``install`` - install everything from build directory"
msgstr ""

# 0a9534a8f5ac4e93888c662e8499727a
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:53
msgid ""
"If for whatever reason you need to run more phases, simply modify your "
"``phases`` list like so:"
msgstr ""

# 051e36d8b49c4a40927f63c139c6e66f
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:61
msgid "Each phase provides a function ``<phase>`` that runs:"
msgstr ""

# 08576c146adb41738830588082a4d5fc
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:68
msgid ""
"Each phase also has a ``<phase_args>`` function that can pass arguments to "
"this call. All of these functions are empty except for the ``install_args`` "
"function, which passes ``--prefix=/path/to/installation/prefix``. There is "
"also some additional logic specific to setuptools and eggs."
msgstr ""

# 83a0445cbf644a068482aa1202ac9a3d
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:73
msgid ""
"If you need to run a phase that is not a standard ``setup.py`` command, "
"you'll need to define a function for it like so:"
msgstr ""

# 9d62a9056375463b827dc50293349a42
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:88
msgid ""
"Python packages can be identified by the presence of a ``setup.py`` file. "
"This file is used by package managers like ``pip`` to determine a package's "
"dependencies and the version of dependencies required, so if the ``setup."
"py`` file is not accurate, the package will not build properly. For this "
"reason, the ``setup.py`` file should be fairly reliable. If the "
"documentation and ``setup.py`` disagree on something, the ``setup.py`` file "
"should be considered to be the truth. As dependencies are added or removed, "
"the documentation is much more likely to become outdated than the ``setup."
"py``."
msgstr ""

# cd66a88e9ebd4cd4b7ea6c71172e179a
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:100
msgid "Finding Python packages"
msgstr ""

# 29603693ccc74249811c31cad18d2325
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:102
msgid ""
"The vast majority of Python packages are hosted on PyPI - The Python Package "
"Index. ``pip`` only supports packages hosted on PyPI, making it the only "
"option for developers who want a simple installation. Search for \"PyPI "
"<package-name>\" to find the download page. Note that some pages are "
"versioned, and the first result may not be the newest version. Click on the "
"\"Latest Version\" button to the top right to see if a newer version is "
"available. The download page is usually at: https://pypi.org/project/"
"<package-name>"
msgstr ""

# 81455d6355d74b26b75d9e6f151e104c
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:115
msgid ""
"The top of the PyPI downloads page contains a description of the package. "
"The first line is usually a short description, while there may be a several "
"line \"Project Description\" that follows. Choose whichever is more useful. "
"You can also get these descriptions on the command-line using:"
msgstr ""

# b194cdf462d441b7be053153eca9e5db
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:131
msgid ""
"Package developers use ``setup.py`` to upload new versions to PyPI. The "
"``setup`` method often passes metadata like ``homepage`` to PyPI. This "
"metadata is displayed on the left side of the download page. Search for the "
"text \"Homepage\" under \"Project links\" to find it. You should use this "
"page instead of the PyPI page if they differ. You can also get the homepage "
"on the command-line by running:"
msgstr ""

# 7492dcb0334243379fead18d1a2d41fa
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:147
msgid ""
"You may have noticed that Spack allows you to add multiple versions of the "
"same package without adding multiple versions of the download URL. It does "
"this by guessing what the version string in the URL is and replacing this "
"with the requested version. Obviously, if Spack cannot guess the version "
"correctly, or if non-version-related things change in the URL, Spack cannot "
"substitute the version properly."
msgstr ""

# f8f5b3d0b08745799384df0dc30050ce
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:154
msgid ""
"Once upon a time, PyPI offered nice, simple download URLs like: https://pypi."
"python.org/packages/source/n/numpy/numpy-1.13.1.zip"
msgstr ""

# 0d83ddc2e26b4256bc2f78b42662ca75
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:157
msgid ""
"As you can see, the version is 1.13.1. It probably isn't hard to guess what "
"URL to use to download version 1.12.0, and Spack was perfectly capable of "
"performing this calculation."
msgstr ""

# 945e12076a1844aead04b593de1e76d5
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:161
msgid ""
"However, PyPI switched to a new download URL format: https://pypi.python.org/"
"packages/c0/3a/40967d9f5675fbb097ffec170f59c2ba19fc96373e73ad47c2cae9a30aed/"
"numpy-1.13.1.zip#md5=2c3c0f4edf720c3a7b525dacc825b9ae"
msgstr ""

# 8e06689d0f9644c48d12bda8afaf30c5
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:164
msgid ""
"and more recently: https://files.pythonhosted.org/packages/"
"b0/2b/497c2bb7c660b2606d4a96e2035e92554429e139c6c71cdff67af66b58d2/"
"numpy-1.14.3.zip"
msgstr ""

# e316044f0d364ae699e7722fabbedb92
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:167
msgid ""
"As you can imagine, it is impossible for Spack to guess what URL to use to "
"download version 1.12.0 given this URL. There is a solution, however. PyPI "
"offers a new hidden interface for downloading Python packages that does not "
"include a hash in the URL: https://pypi.io/packages/source/n/numpy/"
"numpy-1.13.1.zip"
msgstr ""

# 9e4d716365474bc99f8a7ca96ea9c4e5
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:173
msgid ""
"This URL redirects to the files.pythonhosted.org URL. The general syntax for "
"this pypi.io URL is: https://pypi.io/packages/source/<first-letter-of-name>/"
"<name>/<name>-<version>.<extension>"
msgstr ""

# db1a9e06a81f49bda5edafccf564de27
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:177
msgid ""
"Please use the pypi.io URL instead of the pypi.python.org URL. If both ``."
"tar.gz`` and ``.zip`` versions are available, ``.tar.gz`` is preferred. If "
"some releases offer both ``.tar.gz`` and ``.zip`` versions, but some only "
"offer ``.zip`` versions, use ``.zip``."
msgstr ""

# 44a2f42be85242299a3538ec6bd67ccc
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:184
msgid "PyPI vs. GitHub"
msgstr ""

# 7b8440358d134e5fb9dbe01c567b4ba5
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:186
msgid ""
"Many packages are hosted on PyPI, but are developed on GitHub and other "
"version control systems. The tarball can be downloaded from either location, "
"but PyPI is preferred for the following reasons:"
msgstr ""

# 425e588bd3b44cb29146f6db0c2a54db
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:190
msgid "PyPI contains the bare minimum of files to install the package."
msgstr ""

# cab8f3127c624fe99add5b8ea0b3c8e3
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:192
msgid ""
"You may notice that the tarball you download from PyPI does not have the "
"same checksum as the tarball you download from GitHub. When a developer "
"uploads a new release to PyPI, it doesn't contain every file in the "
"repository, only the files necessary to install the package. PyPI tarballs "
"are therefore smaller."
msgstr ""

# 1d502131713040579588c05c1aa273be
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:198
msgid "PyPI is the official source for package managers like ``pip``."
msgstr ""

# 01f1f842ccf8472ca42640123c6e1200
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:200
msgid ""
"Let's be honest, ``pip`` is much more popular than Spack. If the GitHub "
"tarball contains a file not present in the PyPI tarball that causes a bug, "
"the developers may not realize this for quite some time. If the bug was in a "
"file contained in the PyPI tarball, users would notice the bug much more "
"quickly."
msgstr ""

# 8b97102e240f4d289c413097f3005e57
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:206
msgid "GitHub release may be a beta version."
msgstr ""

# 71050d0b6faa486fb5c423656ebe96cc
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:208
msgid ""
"When a developer releases a new version of a package on GitHub, it may not "
"be intended for most users. Until that release also makes its way to PyPI, "
"it should be assumed that the release is not yet ready for general use."
msgstr ""

# f33972827d144e4caf1b0bd53fbc0493
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:213
msgid "The checksum for a GitHub release may change."
msgstr ""

# 269cc4a8e3c5435aaaf6ecbda1014ea0
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:215
msgid ""
"Unfortunately, some developers have a habit of patching releases without "
"incrementing the version number. This results in a change in tarball "
"checksum. Package managers like Spack that use checksums to verify the "
"integrity of a download tarball grind to a halt when the checksum for a "
"known version changes. Most of the time, the change is intentional, and "
"contains a needed bug fix. However, sometimes the change indicates a "
"download source that has been compromised, and a tarball that contains a "
"virus. If this happens, you must contact the developers to determine which "
"is the case. PyPI is nice because it makes it physically impossible to re-"
"release the same version of a package with a different checksum."
msgstr ""

# 44817efe6eec4e74b09441034a39022c
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:227
msgid "There are some reasons to prefer downloading from GitHub:"
msgstr ""

# b3fdcd99c68d45f4a236e0869f1e0453
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:229
msgid "The GitHub tarball may contain unit tests"
msgstr ""

# ff41b495f30a429f804c5ebecb83ed21
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:231
msgid ""
"As previously mentioned, the PyPI tarball contains the bare minimum of files "
"to install the package. Unless explicitly specified by the developers, it "
"will not contain development files like unit tests. If you desire to run the "
"unit tests during installation, you should use the GitHub tarball instead."
msgstr ""

# e73f15e90a3e4815a9578496a2fd7d40
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:237
msgid ""
"Spack does not yet support ``spack versions`` and ``spack checksum`` with "
"PyPI URLs"
msgstr ""

# 4482383e495b4ca4a4a9f506c5499a65
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:240
msgid ""
"These commands work just fine with GitHub URLs. This is a minor annoyance, "
"not a reason to prefer GitHub over PyPI."
msgstr ""

# 246636e2b7c64774b5300c3021a8dadd
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:243
msgid ""
"If you really want to run these unit tests, no one will stop you from "
"submitting a PR for a new package that downloads from GitHub."
msgstr ""

# 6e42655838dd4b9b8ba192c58332866b
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:250
msgid ""
"There are a few dependencies common to the ``PythonPackage`` build system."
msgstr ""

# c309ed4d92a14f349aaae1a4048c02f7
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:254
msgid "Python"
msgstr ""

# 9a2d78f4d56944888a987791c8f66c7f
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:256
msgid ""
"Obviously, every ``PythonPackage`` needs Python at build-time to run "
"``python setup.py build && python setup.py install``. Python is also needed "
"at run-time if you want to import the module. Due to backwards incompatible "
"changes between Python 2 and 3, it is very important to specify which "
"versions of Python are supported. If the documentation mentions that Python "
"3 is required, this can be specified as:"
msgstr ""

# 1455fb23f473493284319591e98dc954
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:268
msgid "If Python 2 is required, this would look like:"
msgstr ""

# b6e3fcd4626b442cb3ace8c81cc02986
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:275
msgid "If Python 2.7 is the only version that works, you can use:"
msgstr ""

# 9c4f113015c44887b3619e823d6e0555
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:282
msgid ""
"The documentation may not always specify supported Python versions. Another "
"place to check is in the ``setup.py`` file. Look for a line containing "
"``python_requires``. An example from `py-numpy <https://github.com/spack/"
"spack/blob/develop/var/spack/repos/builtin/packages/py-numpy/package.py>`_ "
"looks like:"
msgstr ""

# e3020a182c2f44f4be0ada17d3805a92
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:293
msgid "More commonly, you will find a version check at the top of the file:"
msgstr ""

# cd722ddbb9fb4d7a82cca80090f46c21
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:301
msgid "This can be converted to Spack's spec notation like so:"
msgstr ""

# 4b7e796c00f844a48c8ef62d7eda7d61
# 6043c2f1d3c147feb4506a4a402d6ff7
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:310
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:466
msgid "setuptools"
msgstr ""

# 7323c9580e934c3981374e2c0ae95db2
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:312
msgid ""
"Originally, the Python language had a single build system called distutils, "
"which is built into Python. Distutils provided a common framework for "
"package authors to describe their project and how it should be built. "
"However, distutils was not without limitations. Most notably, there was no "
"way to list a project's dependencies with distutils. Along came setuptools, "
"a non-builtin build system designed to overcome the limitations of "
"distutils. Both projects use a similar API, making the transition easy while "
"adding much needed functionality. Today, setuptools is used in around 75% of "
"the Python packages in Spack."
msgstr ""

# 8ab22e3e9b574adbae7281dcf3906fb1
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:323
msgid ""
"Since setuptools isn't built-in to Python, you need to add it as a "
"dependency. To determine whether or not a package uses setuptools, search "
"the file for an import statement like:"
msgstr ""

# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# 92b9d8190e2d4c349f5079ec6e4cef98
# #-#-#-#-#  getting_started.pot (Spack 0.12)  #-#-#-#-#
# d3b09c4ed14440c6871f111b81b68c5a
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:332
#: ../spack/lib/spack/docs/getting_started.rst:1021
msgid "or:"
msgstr ""

# cefa3823aceb47d197f0b16db5b4f597
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:339
msgid ""
"Some packages are designed to work with both setuptools and distutils, so "
"you may find something like:"
msgstr ""

# ce756a1b456e42aca551070363b9986f
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:350
msgid ""
"This uses setuptools if available, and falls back to distutils if not. In "
"this case, you would still want to add a setuptools dependency, as it offers "
"us more control over the installation."
msgstr ""

# 167fa6047e584b5f94c009fa07e350c6
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:354
msgid ""
"Unless specified otherwise, setuptools is usually a build-only dependency. "
"That is, it is needed to install the software, but is not needed at run-"
"time. This can be specified as:"
msgstr ""

# 869c8fb197094ba6ab6a827101e28dee
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:365
msgid "cython"
msgstr ""

# 173147dce4bb4ffba861cce44ea046af
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:367
msgid ""
"Compared to compiled languages, interpreted languages like Python can be "
"quite a bit slower. To work around this, some Python developers rewrite "
"computationally demanding sections of code in C, a process referred to as "
"\"cythonizing\". In order to build these package, you need to add a build "
"dependency on cython:"
msgstr ""

# 6097c45a0c69470c9b8594f58d1df071
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:378
msgid ""
"Look for references to \"cython\" in the ``setup.py`` to determine whether "
"or not this is necessary. Cython may be optional, but even then you should "
"list it as a required dependency. Spack is designed to compile software, and "
"is meant for HPC facilities where speed is crucial. There is no reason why "
"someone would not want an optimized version of a library instead of the pure-"
"Python version."
msgstr ""

# d1833cdf1bb5441f91bc5e74877752f9
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:388
msgid "Python dependencies"
msgstr ""

# 636937c86dec4866a110758d4ee134f1
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:390
msgid ""
"When you install a package with ``pip``, it reads the ``setup.py`` file in "
"order to determine the dependencies of the package. If the dependencies are "
"not yet installed, ``pip`` downloads them and installs them for you. This "
"may sound convenient, but Spack cannot rely on this behavior for two reasons:"
msgstr ""

# 7a45b73789404043b459459fe9b95237
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:396
msgid "Spack needs to be able to install packages on air-gapped networks."
msgstr ""

# 9e5e5ee3f69040ce95afd4b0202477be
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:398
msgid ""
"If there is no internet connection, ``pip`` can't download the package "
"dependencies. By explicitly listing every dependency in the ``package.py``, "
"Spack knows what to download ahead of time."
msgstr ""

# 72db2e769e2349e9bc7ab965b154264c
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:402
msgid "Duplicate installations of the same dependency may occur."
msgstr ""

# dfa8814a692a4a04b6bd66ef0890f29c
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:404
msgid ""
"Spack supports *activation* of Python extensions, which involves symlinking "
"the package installation prefix to the Python installation prefix. If your "
"package is missing a dependency, that dependency will be installed to the "
"installation directory of the same package. If you try to activate the "
"package + dependency, it may cause a problem if that package has already "
"been activated."
msgstr ""

# be8c61910eb94e90934fa75cc5c3fc0c
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:411
msgid ""
"For these reasons, you must always explicitly list all dependencies. "
"Although the documentation may list the package's dependencies, often the "
"developers assume people will use ``pip`` and won't have to worry about it. "
"Always check the ``setup.py`` to find the true dependencies."
msgstr ""

# c51c3b186ab44fbe95c48cab2bd81e00
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:417
msgid ""
"If the package relies on ``distutils``, it may not explicitly list its "
"dependencies. Check for statements like:"
msgstr ""

# 9f1abd19da974711a45d9079f7002749
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:428
msgid "Obviously, this means that ``py-numpy`` is a dependency."
msgstr ""

# bae9ff425892407c821e4c3efbbe55c1
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:430
msgid "If the package uses ``setuptools``, check for the following clues:"
msgstr ""

# 336083eeec134b08afeddbc1846821a1
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:432
msgid "``install_requires``"
msgstr ""

# da2ac9ceff274de690041e422f824ba0
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:434
msgid "These packages are required for installation."
msgstr ""

# 6ca548f8338748d6b114ccc88348dbd5
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:436
msgid "``extra_requires``"
msgstr ""

# ed672ecb54924e93b9089c7ac7bb42b9
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:438
msgid ""
"These packages are optional dependencies that enable additional "
"functionality. You should add a variant that optionally adds these "
"dependencies."
msgstr ""

# 261947d1f5b04990a7bd872326d50a08
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:442
msgid "``test_requires``"
msgstr ""

# 2dbeb131b37a4af283753c31fe5db60a
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:444
msgid ""
"These are packages that are required to run the unit tests for the package. "
"These dependencies can be specified using the ``type='test'`` dependency "
"type."
msgstr ""

# 5a4c72ee167246cfac45c9c1126ad6c5
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:448
msgid ""
"In the root directory of the package, you may notice a ``requirements.txt`` "
"file. It may look like this file contains a list of all of the package's "
"dependencies. Don't be fooled. This file is used by tools like Travis to "
"install the pre-requisites for the package... and a whole bunch of other "
"things. It often contains dependencies only needed for unit tests, like:"
msgstr ""

# 90d001ae851f4dbbb64cd997ebd301c4
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:455
msgid "mock"
msgstr ""

# 539cea20080b4d0ba1f3df1640ea6124
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:456
msgid "nose"
msgstr ""

# ea1d390f625a4f11b60985add908de09
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:457
msgid "pytest"
msgstr ""

# 7f5911fb3a934ba5809d077fd5d2eec9
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:459
msgid ""
"It can also contain dependencies for building the documentation, like "
"sphinx. If you can't find any information about the package's dependencies, "
"you can take a look in ``requirements.txt``, but be sure not to add test or "
"documentation dependencies."
msgstr ""

# f0c7b0ae32904b78bb04694e60b96f83
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:468
msgid ""
"Setuptools is a bit of a special case. If a package requires setuptools at "
"run-time, how do they express this? They could add it to "
"``install_requires``, but setuptools is imported long before this and needed "
"to read this line. And since you can't install the package without "
"setuptools, the developers assume that setuptools will already be there, so "
"they never mention when it is required. We don't want to add run-time "
"dependencies if they aren't needed, so you need to determine whether or not "
"setuptools is needed. Grep the installation directory for any files "
"containing a reference to ``setuptools`` or ``pkg_resources``. Both modules "
"come from ``py-setuptools``. ``pkg_resources`` is particularly common in "
"scripts in ``prefix/bin``."
msgstr ""

# f62797b07bed42b5b67d6d6f0c85cd4c
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:482
msgid "Passing arguments to setup.py"
msgstr ""

# c512a148e7ea4190aa86737c2853a335
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:484
msgid ""
"The default build and install phases should be sufficient to install most "
"packages. However, you may want to pass additional flags to either phase."
msgstr ""

# 04aa2e9da35e4ae7ab686382ce12551b
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:488
msgid "You can view the available options for a particular phase with:"
msgstr ""

# 808feadcb4664b38990b7a1e09499d72
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:495
msgid ""
"Each phase provides a ``<phase_args>`` function that can be used to pass "
"arguments to that phase. For example, `py-numpy <https://github.com/spack/"
"spack/blob/develop/var/spack/repos/builtin/packages/py-numpy/package.py>`_ "
"adds:"
msgstr ""

# da346565f2484cd3bd02c7b4c3d9a1f0
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:520
msgid "``PythonPackage`` provides a couple of options for testing packages."
msgstr ""

# 36fbfcfbf7024a508126f75ecaa6b327
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:524
msgid "Import tests"
msgstr ""

# c77467e35b27483dabca117eccf4b75a
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:526
msgid ""
"Just because a package successfully built does not mean that it built "
"correctly. The most reliable test of whether or not the package was "
"correctly installed is to attempt to import all of the modules that get "
"installed. To get a list of modules, run the following command in the source "
"directory:"
msgstr ""

# ae6e09541761407f9d7f8d0ee77c8b63
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:540
msgid ""
"Large, complex packages like ``numpy`` will return a long list of packages, "
"while other packages like ``six`` will return an empty list. ``py-six`` "
"installs a single ``six.py`` file. In Python packaging lingo, a \"package\" "
"is a directory containing files like:"
msgstr ""

# b283e56e444e409caa90379803260385
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:552
msgid ""
"whereas a \"module\" is a single Python file. Since ``find_packages`` only "
"returns packages, you'll have to determine the correct module names "
"yourself. You can now add these packages and modules to the package like so:"
msgstr ""

# 9d272b122ed549ce9d2f08e3b97a7746
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:562
msgid ""
"When you run ``spack install --test=root py-six``, Spack will attempt to "
"import the ``six`` module after installation."
msgstr ""

# 53b0fbb694874dcea7101ee80f0fe81d
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:565
msgid ""
"These tests most often catch missing dependencies and non-RPATHed libraries. "
"Make sure not to add modules/packages containing the word \"test\", as these "
"likely won't end up in installation directory."
msgstr ""

# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# 545233ee3d324969a9db5b26d7f2bc6b
# #-#-#-#-#  developer_guide.pot (Spack 0.12)  #-#-#-#-#
# bfeb3eb1abe7491a9b3b7e3a8f1520d4
# 13e1e2d18d884a1084c21bda6cdbbbce
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:571
#: ../spack/lib/spack/docs/developer_guide.rst:244
#: ../spack/lib/spack/docs/developer_guide.rst:350
msgid "Unit tests"
msgstr ""

# 51573f5d787240b485452dc51a5c86e3
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:573
msgid ""
"The package you want to install may come with additional unit tests. By "
"default, Spack runs:"
msgstr ""

# 6ad2baddbe92431585ed9e29db13cca7
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:581
msgid ""
"if it detects that the ``setup.py`` file supports a ``test`` phase. You can "
"add additional build-time or install-time tests by overriding ``test`` and "
"``installtest``, respectively. For example, ``py-numpy`` adds:"
msgstr ""

# 97a75c7e7a3541409716c8e403aa9554
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:595
msgid "Setup file in a sub-directory"
msgstr ""

# c735f34940b94c68872c3cf248714ce3
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:597
msgid ""
"In order to be compatible with package managers like ``pip``, the package is "
"required to place its ``setup.py`` in the root of the tarball. However, not "
"every Python package cares about ``pip`` or PyPI. If you are installing a "
"package that is not hosted on PyPI, you may find that it places its ``setup."
"py`` in a sub-directory. To handle this, add the directory containing "
"``setup.py`` to the package like so:"
msgstr ""

# db70768a398044e9bb823eb949a3eda2
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:611
msgid "Alternate names for setup.py"
msgstr ""

# a9285598d07d4fac8ea156c4e244ae24
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:613
msgid ""
"As previously mentioned, packages need to call their setup script ``setup."
"py`` in order to be compatible with package managers like ``pip``. However, "
"some packages like `py-meep <https://github.com/spack/spack/blob/develop/var/"
"spack/repos/builtin/packages/py-meep/package.py>`_  and `py-adios <https://"
"github.com/spack/spack/blob/develop/var/spack/repos/builtin/packages/py-"
"adios/package.py>`_ come with multiple setup scripts, one for a serial build "
"and another for a parallel build. You can override the default name to use "
"like so:"
msgstr ""

# 819696b7725849d696904f6f135fc218
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:629
msgid "PythonPackage vs. packages that use Python"
msgstr ""

# bfd44ae5f3c5465cae5002be6e1deb67
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:631
msgid ""
"There are many packages that make use of Python, but packages that depend on "
"Python are not necessarily ``PythonPackages``."
msgstr ""

# a74def085cc74d8c804cf784a95570f2
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:636
msgid "Choosing a build system"
msgstr ""

# 6c70e6947618412a9ffe23d4c8133b03
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:638
msgid ""
"First of all, you need to select a build system. ``spack create`` usually "
"does this for you, but if for whatever reason you need to do this manually, "
"choose ``PythonPackage`` if and only if the package contains a ``setup.py`` "
"file."
msgstr ""

# 989f78d9f95e4b748538b04fb9702d48
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:645
msgid "Choosing a package name"
msgstr ""

# f190ccc0ffcd46ec9915bb157ec25ef7
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:647
msgid ""
"Selecting the appropriate package name is a little more complicated than "
"choosing the build system. By default, ``spack create`` will prepend ``py-`` "
"to the beginning of the package name if it detects that the package uses the "
"``PythonPackage`` build system. However, there are occasionally packages "
"that use ``PythonPackage`` that shouldn't start with ``py-``. For example:"
msgstr ""

# e1a89b8c9fb1451fbbc6aba12389c98b
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:654
msgid "busco"
msgstr ""

# d9a439648668445b94bb6dea7ad2970c
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:655
msgid "easybuild"
msgstr ""

# ab0faf18ae8647b48d537768a2716f54
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:656
msgid "httpie"
msgstr ""

# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# 1f52ce70cfee4724bcba5992dea12a88
# #-#-#-#-#  contribution_guide.pot (Spack 0.12)  #-#-#-#-#
# 4e9da19d75ea47c892e8d4b326c59e34
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:657
#: ../spack/lib/spack/docs/contribution_guide.rst:234
msgid "mercurial"
msgstr ""

# 4f22dfcb83b24699a885351a613cbcc0
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:658
msgid "scons"
msgstr ""

# dd77ffd213c2473ca65e32df7a54fef2
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:659
msgid "snakemake"
msgstr ""

# 5d2ff3d51b264151bdb657496e61c1d6
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:661
msgid ""
"The thing these packages have in common is that they are command-line tools "
"that just so happen to be written in Python. Someone who wants to install "
"``mercurial`` with Spack isn't going to realize that it is written in "
"Python, and they certainly aren't going to assume the package is called ``py-"
"mercurial``. For this reason, we manually renamed the package to "
"``mercurial``."
msgstr ""

# 701ffb5b00cf42039f1eac1b2e9f4eed
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:668
msgid ""
"Likewise, there are occasionally packages that don't use the "
"``PythonPackage`` build system but should still be prepended with ``py-``. "
"For example:"
msgstr ""

# da4075e449284e8b9b9703c7494f6f18
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:672
msgid "py-genders"
msgstr ""

# 5f46455af1f34906b2e5e5e60015f6cf
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:673
msgid "py-py2cairo"
msgstr ""

# 67411e3d4b554023964ce0b920ef50c6
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:674
msgid "py-pygobject"
msgstr ""

# 612e26d627484501b7ccb57ddfb5e062
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:675
msgid "py-pygtk"
msgstr ""

# b6f6782e745e47e1b1830d88d99db938
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:676
msgid "py-pyqt"
msgstr ""

# 1010a4ea90c34e3dbd76fd5caa708422
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:677
msgid "py-pyserial"
msgstr ""

# 621760eb951440638797c69c39e4db42
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:678
msgid "py-sip"
msgstr ""

# 6878df680c154a5f8f979e641a00bc56
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:679
msgid "py-xpyb"
msgstr ""

# 921266b062d942f49d9b70a8300f3b7d
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:681
msgid ""
"These packages are primarily used as Python libraries, not as command-line "
"tools. You may see C/C++ packages that have optional Python language-"
"bindings, such as:"
msgstr ""

# 2adfa23d63c94daaa252ee6824cd5056
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:685
msgid "antlr"
msgstr ""

# 6afbf6b78f8b48b6a24435f832c714d0
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:686
msgid "cantera"
msgstr ""

# 7f4290a9a95b44f4951147b7c30bd27b
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:687
msgid "conduit"
msgstr ""

# 37e5ac9ecc5d496aa4704b6ebd0af096
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:688
msgid "pagmo"
msgstr ""

# bd6a4fc513834b7a9f03ec44979e9bf2
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:689
msgid "vtk"
msgstr ""

# 43d0b8bd6c48463f825d938d53b1689a
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:691
msgid ""
"Don't prepend these kind of packages with ``py-``. When in doubt, think "
"about how this package will be used. Is it primarily a Python library that "
"will be imported in other Python scripts? Or is it a command-line tool, or C/"
"C++/Fortran program with optional Python modules? The former should be "
"prepended with ``py-``, while the latter should not."
msgstr ""

# 41065ee04e8d46e19f0010d71d4f1474
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:700
msgid "extends vs. depends_on"
msgstr ""

# 8bf03c28c62a4e538a48ff6a18b37311
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:702
msgid ""
"This is very similar to the naming dilemma above, with a slight twist. As "
"mentioned in the :ref:`Packaging Guide <packaging_extensions>`, ``extends`` "
"and ``depends_on`` are very similar, but ``extends`` adds the ability to "
"*activate* the package. Activation involves symlinking everything in the "
"installation prefix of the package to the installation prefix of Python. "
"This allows the user to import a Python module without having to add that "
"module to ``PYTHONPATH``."
msgstr ""

# 0dc8ce6878844c41b55d2f8849c99031
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:710
msgid ""
"When deciding between ``extends`` and ``depends_on``, the best rule of thumb "
"is to check the installation prefix. If Python libraries are installed to "
"``prefix/lib/python2.7/site-packages`` (where 2.7 is the MAJOR.MINOR version "
"of Python you used to install the package), then you should use ``extends``. "
"If Python libraries are installed elsewhere or the only files that get "
"installed reside in ``prefix/bin``, then don't use ``extends``, as "
"symlinking the package wouldn't be useful."
msgstr ""

# 227289fdae0f4b309a91509f4472b5a7
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:722
msgid ""
"PyPI has hundreds of thousands of packages that are not yet in Spack, and "
"``pip`` may be a perfectly valid alternative to using Spack. The main "
"advantage of Spack over ``pip`` is its ability to compile non-Python "
"dependencies. It can also build cythonized versions of a package or link to "
"an optimized BLAS/LAPACK library like MKL, resulting in calculations that "
"run orders of magnitude faster. Spack does not offer a significant advantage "
"to other python-management systems for installing and using tools like "
"flake8 and sphinx. But if you need packages with non-Python dependencies "
"like numpy and scipy, Spack will be very valuable to you."
msgstr ""

# 5a001776f0bd439aa6cee09e3ec540c3
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:733
msgid ""
"Anaconda is another great alternative to Spack, and comes with its own "
"``conda`` package manager. Like Spack, Anaconda is capable of compiling non-"
"Python dependencies. Anaconda contains many Python packages that are not yet "
"in Spack, and Spack contains many Python packages that are not yet in "
"Anaconda. The main advantage of Spack over Anaconda is its ability to choose "
"a specific compiler and BLAS/LAPACK or MPI library. Spack also has better "
"platform support for supercomputers. On the other hand, Anaconda offers "
"Windows support."
msgstr ""

# 225560d702b54d4d8dc91305e5bd1e61
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:746
msgid ""
"For more information on Python packaging, see: https://packaging.python.org/"
msgstr ""

# db135c12415845688cc050e5809667ea
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:10
msgid "QMakePackage"
msgstr ""

# d13875e322aa45fd821e7177b6b11d21
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:12
msgid ""
"Much like Autotools and CMake, QMake is a build-script generator designed by "
"the developers of Qt. In its simplest form, Spack's ``QMakePackage`` runs "
"the following steps:"
msgstr ""

# cdeb2c85df2a4e90b18e7b95f7f646b6
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:24
msgid ""
"QMake does not appear to have a standardized way of specifying the "
"installation directory, so you may have to set environment variables or edit "
"``*.pro`` files to get things working properly."
msgstr ""

# e87898fd55d841c1aa3ce2c801659d57
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:32
msgid "The ``QMakePackage`` base class comes with the following phases:"
msgstr ""

# a03296bacc234d93b6fc238b9dc0a3d6
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:34
msgid "``qmake`` - generate Makefiles"
msgstr ""

# 866d5b7ff36f4ffd900da9ac9d06e39c
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:47
msgid ""
"Any of these phases can be overridden in your package as necessary. There is "
"also a ``check`` method that looks for a ``check`` target in the Makefile. "
"If a ``check`` target exists and the user runs:"
msgstr ""

# 930bffe15f7c470e95fce66a6b7ea53f
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:56
msgid "Spack will run ``make check`` after the build phase."
msgstr ""

# 70fd160623f1486db0a15d4cdf76fc1b
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:62
msgid ""
"Packages that use the QMake build system can be identified by the presence "
"of a ``<project-name>.pro`` file. This file declares things like build "
"instructions and dependencies."
msgstr ""

# db1ee1490a334b62919c3ec2ccb77964
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:66
msgid "One thing to look for is the ``minQtVersion`` function:"
msgstr ""

# 913d9b2fb9c743c493472a3f1f7d862b
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:73
msgid ""
"This means that Qt 5.6.0 is the earliest release that will work. You should "
"specify this in a ``depends_on`` statement."
msgstr ""

# 5c5e32444a31446bba731995a14adeea
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:80
msgid ""
"At the bare minimum, packages that use the QMake build system need a ``qt`` "
"dependency. Since this is always the case, the ``QMakePackage`` base class "
"already contains:"
msgstr ""

# 11f56878caea480aa5d46d341d175e63
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:89
msgid ""
"If you want to specify a particular version requirement, or need to link to "
"the ``qt`` libraries, you can override this in your package:"
msgstr ""

# 93b8bcdab99b46a4bdc6a996773317aa
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:98
msgid "Passing arguments to qmake"
msgstr ""

# 968e6d3117374095b1b810acafee3547
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:100
msgid ""
"If you need to pass any arguments to the ``qmake`` call, you can override "
"the ``qmake_args`` method like so:"
msgstr ""

# 7a8b1ce773024859ac2d9ad38ae5624d
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:115
msgid ""
"For more information on the QMake build system, see: http://doc.qt.io/qt-5/"
"qmake-manual.html"
msgstr ""

# f43d0c41a24247be928669161d115aef
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:10
msgid "RPackage"
msgstr ""

# de0dfcda8d8043b59bcdcb8351285783
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:12
msgid "Like Python, R has its own built-in build system."
msgstr ""

# b7025d4de91a4c6eab3787d84b4352b0
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:14
msgid ""
"The R build system is remarkably uniform and well-tested. This makes it one "
"of the easiest build systems to create new Spack packages for."
msgstr ""

# ae4590c6ad4d473d9505eb543c11ae84
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:22
msgid "The ``RPackage`` base class has a single phase:"
msgstr ""

# c89b84e89fba43028cea5fd08116eea4
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:35
msgid "Finding R packages"
msgstr ""

# a68d57296c03458196858a95666dabf1
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:37
msgid ""
"The vast majority of R packages are hosted on CRAN - The Comprehensive R "
"Archive Network. If you are looking for a particular R package, search for "
"\"CRAN <package-name>\" and you should quickly find what you want. If it "
"isn't on CRAN, try Bioconductor, another common R repository."
msgstr ""

# 14c8383420b34cca96697747aed560a8
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:42
msgid ""
"For the purposes of this tutorial, we will be walking through `r-caret "
"<https://github.com/spack/spack/blob/develop/var/spack/repos/builtin/"
"packages/r-caret/package.py>`_ as an example. If you search for \"CRAN caret"
"\", you will quickly find what you are looking for at https://cran.r-project."
"org/web/packages/caret/index.html. If you search for \"Package source\", you "
"will find the download URL for the latest release. Use this URL with ``spack "
"create`` to create a new package."
msgstr ""

# f7fb719bcd5b483bb3c66f2460875755
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:54
msgid ""
"The first thing you'll notice is that Spack prepends ``r-`` to the front of "
"the package name. This is how Spack separates R package extensions from the "
"rest of the packages in Spack. Without this, we would end up with package "
"name collisions more frequently than we would like. For instance, there are "
"already packages for both:"
msgstr ""

# 4e830bb332ec46b2b6165d54834422e2
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:60
msgid "``ape`` and ``r-ape``"
msgstr ""

# f3e23043b4e74e4e868333567a1382da
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:61
msgid "``curl`` and ``r-curl``"
msgstr ""

# 8478799be90c4cb4acaf501b7aa5e558
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:62
msgid "``gmp`` and ``r-gmp``"
msgstr ""

# 50dbec3772c8487cb3abcba8c9be325e
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:63
msgid "``jpeg`` and ``r-jpeg``"
msgstr ""

# 021966efe3b24731950f90f754c329c6
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:64
msgid "``openssl`` and ``r-openssl``"
msgstr ""

# de7be9e5dab34969b1026fdea72cf34c
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:65
msgid "``uuid`` and ``r-uuid``"
msgstr ""

# dda745432ca84704ad8eb21491f27494
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:66
msgid "``xts`` and ``r-xts``"
msgstr ""

# 353b5ef0620c498988bc359a4f8124b6
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:68
msgid ""
"Many popular programs written in C/C++ are later ported to R as a separate "
"project."
msgstr ""

# 45e4418432544ad39bd66bdc4aaaae21
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:75
msgid ""
"The first thing you'll need to add to your new package is a description. The "
"top of the homepage for ``caret`` lists the following description:"
msgstr ""

# 297a8026c7124af0acb05d5df59200a8
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:78
msgid "caret: Classification and Regression Training"
msgstr ""

# 413f68b7da764e4c8772cf1d75b87bfb
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:80
msgid ""
"Misc functions for training and plotting classification and regression "
"models."
msgstr ""

# b7b93684126b4c9e97284d2901b98a87
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:82
msgid ""
"You can either use the short description (first line), long description "
"(second line), or both depending on what you feel is most appropriate."
msgstr ""

# 2fa27fb3ec37486bae6099af41642d61
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:89
msgid "If you look at the bottom of the page, you'll see:"
msgstr ""

# 54fd2e13670c4f2ead2bb973771eac7a
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:91
msgid "Linking:"
msgstr ""

# dcdb9dd27fc24f969d3e38640fbfa4b9
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:93
msgid ""
"Please use the canonical form https://CRAN.R-project.org/package=caret to "
"link to this page."
msgstr ""

# 1df3edb2ce2b4a7d9a61c0602be953f1
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:95
msgid ""
"Please uphold the wishes of the CRAN admins and use https://CRAN.R-project."
"org/package=caret as the homepage instead of https://cran.r-project.org/web/"
"packages/caret/index.html. The latter may change without notice."
msgstr ""

# 1e1422d0b20e4c74951a35a39e9f321c
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:104
msgid ""
"As previously mentioned, the download URL for the latest release can be "
"found by searching \"Package source\" on the homepage."
msgstr ""

# 45576cd73f6744fd9a1134dc93b3f941
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:109
msgid "List URL"
msgstr ""

# d989efd4c81d4e56a02afd1fc0aa089b
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:111
msgid ""
"CRAN maintains a single webpage containing the latest release of every "
"single package: https://cran.r-project.org/src/contrib/"
msgstr ""

# 47e36dbdd626456297082c23f8067484
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:114
msgid ""
"Of course, as soon as a new release comes out, the version you were using in "
"your package is no longer available at that URL. It is moved to an archive "
"directory. If you search for \"Old sources\", you will find: https://cran.r-"
"project.org/src/contrib/Archive/caret"
msgstr ""

# 1169236a353447b0beca73aef172b902
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:119
msgid ""
"If you only specify the URL for the latest release, your package will no "
"longer be able to fetch that version as soon as a new release comes out. To "
"get around this, add the archive directory as a ``list_url``."
msgstr ""

# 77296a99c88a4327b1edced1c46f15fd
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:127
msgid ""
"As an extension of the R ecosystem, your package will obviously depend on R "
"to build and run. Normally, we would use ``depends_on`` to express this, but "
"for R packages, we use ``extends``. ``extends`` is similar to "
"``depends_on``, but adds an additional feature: the ability to \"activate\" "
"the package by symlinking it to the R installation directory. Since every R "
"package needs this, the ``RPackage`` base class contains:"
msgstr ""

# d7652e5f8b014af7a738c62b487ef269
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:140
msgid ""
"Take a close look at the homepage for ``caret``. If you look at the \"Depends"
"\" section, you'll notice that ``caret`` depends on \"R (≥ 2.10)\". You "
"should add this to your package like so:"
msgstr ""

# dce21ac4a0e54c1ebe282d0b44b5cb3a
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:151
msgid "R dependencies"
msgstr ""

# 3164b0598832492d9cb1fb213ba1485a
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:153
msgid ""
"R packages are often small and follow the classic Unix philosophy of doing "
"one thing well. They are modular and usually depend on several other "
"packages. You may find a single package with over a hundred dependencies. "
"Luckily, CRAN packages are well-documented and list all of their "
"dependencies in the following sections:"
msgstr ""

# 1feebdd2e2e64a3296429e82e19cce9c
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:159
msgid "Depends"
msgstr ""

# c936fd4c3ce2476aa1624412d47c46dc
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:160
msgid "Imports"
msgstr ""

# f6dc34b739d745bfa101e577f57a44d8
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:161
msgid "LinkingTo"
msgstr ""

# c0c17595f7674ec7af72b621f8715b64
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:163
msgid ""
"As far as Spack is concerned, all 3 of these dependency types correspond to "
"``type=('build', 'run')``, so you don't have to worry about them. If you are "
"curious what they mean, https://github.com/spack/spack/issues/2951 has a "
"pretty good summary:"
msgstr ""

# 7ff5dd2c16a849a9a82ad90c0ef3e096
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:168
msgid ""
"``Depends`` is required and will cause those R packages to be *attached*, "
"that is, their APIs are exposed to the user. ``Imports`` *loads* packages so "
"that *the package* importing these packages can access their APIs, while "
"*not* being exposed to the user. When a user calls ``library(foo)`` s/he "
"*attaches* package ``foo`` and all of the packages under ``Depends``. Any "
"function in one of these package can be called directly as ``bar()``. If "
"there are conflicts, user can also specify ``pkgA::bar()`` and ``pkgB::"
"bar()`` to distinguish between them. Historically, there was only "
"``Depends`` and ``Suggests``, hence the confusing names. Today, maybe "
"``Depends`` would have been named ``Attaches``."
msgstr ""

# 34c67c2cdf454b48addd1b3b683fd258
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:179
msgid ""
"The ``LinkingTo`` is not perfect and there was recently an extensive "
"discussion about API/ABI among other things on the R-devel mailing list "
"among very skilled R developers:"
msgstr ""

# 3671419dd622435c96ba7310e88eabca
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:183
msgid "https://stat.ethz.ch/pipermail/r-devel/2016-December/073505.html"
msgstr ""

# 29ac7340fc7a476e9636b06b7b4bdbcc
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:184
msgid "https://stat.ethz.ch/pipermail/r-devel/2017-January/073647.html"
msgstr ""

# ff1e60549cf248dbb852e6de6509bef6
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:186
msgid "Some packages also have a fourth section:"
msgstr ""

# 3d036f1aa9164f11ab8a0a06d5dd3394
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:188
msgid "Suggests"
msgstr ""

# be27d18fa9be4bc499da965e4ad994d1
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:190
msgid ""
"These are optional, rarely-used dependencies that a user might find useful. "
"You should **NOT** add these dependencies to your package. R packages "
"already have enough dependencies as it is, and adding optional dependencies "
"can really slow down the concretization process. They can also introduce "
"circular dependencies."
msgstr ""

# 7e0b3cb896214913b3e4d3e04bccc73b
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:198
msgid "Core, recommended, and non-core packages"
msgstr ""

# 4f86b265e58647fab4d2a002e282abab
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:200
msgid ""
"If you look at \"Depends\", \"Imports\", and \"LinkingTo\", you will notice "
"3 different types of packages:"
msgstr ""

# 8805d6ab25e446b4aa96b402761f002a
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:205
msgid "Core packages"
msgstr ""

# cf8db71fba654dd09361bd23bea0c668
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:207
msgid ""
"If you look at the ``caret`` homepage, you'll notice a few dependencies that "
"don't have a link to the package, like ``methods``, ``stats``, and "
"``utils``. These packages are part of the core R distribution and are tied "
"to the R version installed. You can basically consider these to be \"R itself"
"\". These are so essential to R so it would not make sense that they could "
"be updated via CRAN. If so, you would basically get a different version of "
"R. Thus, they're updated when R is updated."
msgstr ""

# 7c1320ed001c4e9b9af87efa0ccfc39c
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:215
msgid ""
"You can find a list of these core libraries at: https://github.com/wch/r-"
"source/tree/trunk/src/library"
msgstr ""

# 83d1edeab97f4a0c9ca6dea7e56b0989
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:220
msgid "Recommended packages"
msgstr ""

# 3d6ab4feda364b9dbf87405c8f1bcf0e
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:222
msgid ""
"When you install R, there is an option called ``--with-recommended-"
"packages``. This flag causes the R installation to include a few "
"\"Recommended\" packages (legacy term). They are for historical reasons "
"quite tied to the core R distribution, developed by the R core team or "
"people closely related to it. The R core distribution \"knows\" about these "
"package, but they are indeed distributed via CRAN. Because they're "
"distributed via CRAN, they can also be updated between R version releases."
msgstr ""

# 92e21ee2009148708f659c4e1c562e45
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:230
msgid ""
"Spack explicitly adds the ``--without-recommended-packages`` flag to prevent "
"the installation of these packages. Due to the way Spack handles package "
"activation (symlinking packages to the R installation directory), pre-"
"existing recommended packages will cause conflicts for already-existing "
"files. We could either not include these recommended packages in Spack and "
"require them to be installed through ``--with-recommended-packages``, or we "
"could not install them with R and let users choose the version of the "
"package they want to install. We chose the latter."
msgstr ""

# f314093adaba4923aa65875a49b3931d
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:239
msgid ""
"Since these packages are so commonly distributed with the R system, many "
"developers may assume these packages exist and fail to list them as "
"dependencies. Watch out for this."
msgstr ""

# 1c29dbafd0ab4350b597c0dd5a1db512
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:243
msgid ""
"You can find a list of these recommended packages at: https://github.com/wch/"
"r-source/blob/trunk/share/make/vars.mk"
msgstr ""

# 2ee724e832ff4f0bb81b77c579626bcd
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:248
msgid "Non-core packages"
msgstr ""

# ad5f809677324bae9bf6622883ea1f12
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:250
msgid ""
"These are packages that are neither \"core\" nor \"recommended\". There are "
"more than 10,000 of these packages hosted on CRAN alone."
msgstr ""

# 43d4d0e1beef43d8991143490f5385ee
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:253
msgid ""
"For each of these package types, if you see that a specific version is "
"required, for example, \"lattice (≥ 0.20)\", please add this information to "
"the dependency:"
msgstr ""

# 41b9d69e831d466fb5e3cc24869dd519
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:264
msgid "Non-R dependencies"
msgstr ""

# f98442b0824945b0b194d7e410b2134f
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:266
msgid ""
"Some packages depend on non-R libraries for linking. Check out the `r-"
"stringi <https://github.com/spack/spack/blob/develop/var/spack/repos/builtin/"
"packages/r-stringi/package.py>`_ package for an example: https://CRAN.R-"
"project.org/package=stringi. If you search for the text \"SystemRequirements"
"\", you will see:"
msgstr ""

# 79506f48b3734da591d5a4af29ef064b
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:271
msgid "ICU4C (>= 52, optional)"
msgstr ""

# e6ae2f99a0ea4a2e8b2bf694cbe21d43
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:273
msgid ""
"This is how non-R dependencies are listed. Make sure to add these "
"dependencies. The default dependency type should suffice."
msgstr ""

# eaf644e3940c404792d08d05a9c86c67
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:278
msgid "Passing arguments to the installation"
msgstr ""

# dae1d31fa39b4967b053ad76d1cfba1b
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:280
msgid ""
"Some R packages provide additional flags that can be passed to ``R CMD "
"INSTALL``, often to locate non-R dependencies. `r-rmpi <https://github.com/"
"spack/spack/blob/develop/var/spack/repos/builtin/packages/r-rmpi/package."
"py>`_ is an example of this, and flags for linking to an MPI library. To "
"pass these to the installation command, you can override ``configure_args`` "
"like so:"
msgstr ""

# bbaec258a299448da2e5fd4ad228888b
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:307
msgid ""
"There is a similar ``configure_vars`` function that can be overridden to "
"pass variables to the build."
msgstr ""

# 8daffb61a2b94d89b6580c79d812c23c
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:314
msgid ""
"CRAN hosts over 10,000 R packages, most of which are not in Spack. Many "
"users may not need the advanced features of Spack, and may prefer to install "
"R packages the normal way:"
msgstr ""

# ae964c737c9d4ec9b0891a8186ff2236
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:324
msgid ""
"R will search CRAN for the ``ggplot2`` package and install all necessary "
"dependencies for you. If you want to update all installed R packages to the "
"latest release, you can use:"
msgstr ""

# e3796a9301b046cb97b296e068a3c88c
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:333
msgid ""
"This works great for users who have internet access, but those on an air-"
"gapped cluster will find it easier to let Spack build a download mirror and "
"install these packages for you."
msgstr ""

# d0be0045942442718f7e0f64a3f8d1fd
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:337
msgid ""
"Where Spack really shines is its ability to install non-R dependencies and "
"link to them properly, something the R installation mechanism cannot handle."
msgstr ""

# cb93bb9ebb4a49ac949e32368d803e24
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:345
msgid ""
"For more information on installing R packages, see: https://stat.ethz.ch/R-"
"manual/R-devel/library/utils/html/INSTALL.html"
msgstr ""

# 6351f56d156045cf94bd129a9e6fc5aa
#: ../spack/lib/spack/docs/build_systems/rubypackage.rst:10
msgid "RubyPackage"
msgstr ""

# 2a0a6aeca7fb4ac89cb17fe918d68443
#: ../spack/lib/spack/docs/build_systems/rubypackage.rst:12
msgid ""
"Like Perl, Python, and R, Ruby has its own build system for installing Ruby "
"gems."
msgstr ""

# ed1ec0c6a5bb48f9a3ae1888d0e61996
#: ../spack/lib/spack/docs/build_systems/rubypackage.rst:15
msgid ""
"This build system is a work-in-progress. See https://github.com/spack/spack/"
"pull/3127 for more information."
msgstr ""

# eedbd2ccac7b4e1fb6b2849371c0edf0
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:10
msgid "SConsPackage"
msgstr ""

# 29d4bfc64f5341cab4ca9a93b589d5c1
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:12
msgid ""
"SCons is a general-purpose build system that does not rely on Makefiles to "
"build software. SCons is written in Python, and handles all building and "
"linking itself."
msgstr ""

# 798171d54d6b4ad79c8b61c99864cf2d
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:16
msgid ""
"As far as build systems go, SCons is very non-uniform. It provides a common "
"framework for developers to write build scripts, but the build scripts "
"themselves can vary drastically. Some developers add subcommands like:"
msgstr ""

# 4e175af71c3940f6a89ff8bb3b2217f6
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:29
msgid ""
"Others don't add any subcommands. Some have configuration options that can "
"be specified through variables on the command line. Others don't."
msgstr ""

# 18318d85ec0e4f6798ede8653113a8ee
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:36
msgid ""
"As previously mentioned, SCons allows developers to add subcommands like "
"``build`` and ``install``, but by default, installation usually looks like:"
msgstr ""

# aaad5756307448abb58e2715aa0c6d7a
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:45
msgid ""
"To facilitate this, the ``SConsPackage`` base class provides the following "
"phases:"
msgstr ""

# c51a0653a6cd458684dbd1da0431d51a
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:51
msgid ""
"Package developers often add unit tests that can be invoked with ``scons "
"test`` or ``scons check``. Spack provides a ``test`` method to handle this. "
"Since we don't know which one the package developer chose, the ``test`` "
"method does nothing by default, but can be easily overridden like so:"
msgstr ""

# 8bc8c35209b94e3cbf36ea5e61c1d51f
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:67
msgid ""
"SCons packages can be identified by their ``SConstruct`` files. These files "
"handle everything from setting up subcommands and command-line options to "
"linking and compiling."
msgstr ""

# 8c87a7dda8854d1ab4984272f516b9b5
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:71
msgid "One thing to look for is the ``EnsureSConsVersion`` function:"
msgstr ""

# d5dacbfa2e794d00a6fe4e1a9456f63c
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:78
msgid ""
"This means that SCons 2.3.0 is the earliest release that will work. You "
"should specify this in a ``depends_on`` statement."
msgstr ""

# 48d26a8fb3ff447888f4016eb17582bb
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:85
msgid ""
"At the bare minimum, packages that use the SCons build system need a "
"``scons`` dependency. Since this is always the case, the ``SConsPackage`` "
"base class already contains:"
msgstr ""

# 24d7132db8c74e8b9c142f75beece880
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:94
msgid ""
"If you want to specify a particular version requirement, you can override "
"this in your package:"
msgstr ""

# a7ea7b97735f4b25bc805710122fecbc
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:104
msgid "Finding available options"
msgstr ""

# 5939a5c8b8044aad8de14bbd68363bd0
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:106
msgid ""
"The first place to start when looking for a list of valid options to build a "
"package is ``scons --help``. Some packages like `kahip <https://github.com/"
"spack/spack/blob/develop/var/spack/repos/builtin/packages/kahip/package."
"py>`_ don't bother overwriting the default SCons help message, so this isn't "
"very useful, but other packages like `serf <https://github.com/spack/spack/"
"blob/develop/var/spack/repos/builtin/packages/serf/package.py>`_ print a "
"list of valid command-line variables:"
msgstr ""

# 6c78cae96f5c4bef919bc20b064deca4
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:180
msgid ""
"More advanced packages like `cantera <https://github.com/spack/spack/blob/"
"develop/var/spack/repos/builtin/packages/cantera/package.py>`_ use ``scons --"
"help`` to print a list of subcommands:"
msgstr ""

# cc563992be0849858a29826bfbe090f5
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:227
msgid ""
"You'll notice that cantera provides a ``scons help`` subcommand. Running "
"``scons help`` prints a list of valid command-line variables."
msgstr ""

# fbde6195f7e543978ca5de66db167306
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:232
msgid "Passing arguments to scons"
msgstr ""

# 7c6827e7e9a34b5d826114054a1dbcd0
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:234
msgid ""
"Now that you know what arguments the project accepts, you can add them to "
"the package build phase. This is done by overriding ``build_args`` like so:"
msgstr ""

# 81c56de0d12040d1ba609e465e23db9c
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:253
msgid ""
"``SConsPackage`` also provides an ``install_args`` function that you can "
"override to pass additional arguments to ``scons install``."
msgstr ""

# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# 4be40776b36e47a0b09b7252f702e3d2
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# 9269a93841e5459b9cab9ee536a1e640
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:258
#: ../spack/lib/spack/docs/packaging_guide.rst:3329
msgid "Compiler wrappers"
msgstr ""

# 1514b02164ed4a21a6bd86b73107351c
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:260
msgid ""
"By default, SCons builds all packages in a separate execution environment, "
"and doesn't pass any environment variables from the user environment. Even "
"changes to ``PATH`` are not propagated unless the package developer does so."
msgstr ""

# 67a9336f886549aaaf83e4334fc41da7
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:265
msgid ""
"This is particularly troublesome for Spack's compiler wrappers, which depend "
"on environment variables to manage dependencies and linking flags. In many "
"cases, SCons packages are not compatible with Spack's compiler wrappers, and "
"linking must be done manually."
msgstr ""

# 9ff1d7115bca4027951e119b539c053b
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:270
msgid ""
"First of all, check the list of valid options for anything relating to "
"environment variables. For example, cantera has the following option:"
msgstr ""

# 96a8372719a44eeb9d680b762df51334
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:282
msgid ""
"In the case of cantera, using ``env_vars=all`` allows us to use Spack's "
"compiler wrappers. If you don't see an option related to environment "
"variables, try using Spack's compiler wrappers by passing ``spack_cc``, "
"``spack_cxx``, and ``spack_fc`` via the ``CC``, ``CXX``, and ``FC`` "
"arguments, respectively. If you pass them to the build and you see an error "
"message like:"
msgstr ""

# 7498101cf91247a6be86e11b939c3cfd
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:294
msgid ""
"you'll know that the package isn't compatible with Spack's compiler "
"wrappers. In this case, you'll have to use the path to the actual compilers, "
"which are stored in ``self.compiler.cc`` and friends. Note that this may "
"involve passing additional flags to the build to locate dependencies, a task "
"normally done by the compiler wrappers. serf is an example of a package with "
"this limitation."
msgstr ""

# 8d449e305eb5409e8b09b6a3a8b19829
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:305
msgid ""
"For more information on the SCons build system, see: http://scons.org/"
"documentation.html"
msgstr ""

# 6ed9500cfec8469eb1eb0bbe1f0c1bb1
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:10
msgid "WafPackage"
msgstr ""

# cfa7404c74fd4789aeeed6950495b031
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:12
msgid ""
"Like SCons, Waf is a general-purpose build system that does not rely on "
"Makefiles to build software."
msgstr ""

# 3550c521118b423186fb8481d112d3a3
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:19
msgid "The ``WafPackage`` base class comes with the following phases:"
msgstr ""

# 65ff0cabd2304702b5c7b725acb5da97
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:21
msgid "``configure`` - configure the project"
msgstr ""

# 3e7ccd21fb0d402288abae435d915573
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:34
msgid "Each of these are standard Waf commands and can be found by running:"
msgstr ""

# 16281d4c0fe24a26bc5c2c2f4b4f18e2
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:41
msgid "Each phase provides a ``<phase>`` function that runs:"
msgstr ""

# 1cf8b113c26f4a0eab66452659a04693
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:48
msgid ""
"where ``<jobs>`` is the number of parallel jobs to build with. Each phase "
"also has a ``<phase_args>`` function that can pass arguments to this call. "
"All of these functions are empty except for the ``configure_args`` function, "
"which passes ``--prefix=/path/to/installation/prefix``."
msgstr ""

# 93efac093a8a4ed28b9eb58016f38258
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:57
msgid ""
"``WafPackage`` also provides ``test`` and ``installtest`` methods, which are "
"run after the ``build`` and ``install`` phases, respectively. By default, "
"these phases do nothing, but you can override them to run package-specific "
"unit tests. For example, the `py-py2cairo <https://github.com/spack/spack/"
"blob/develop/var/spack/repos/builtin/packages/py-py2cairo/package.py>`_ "
"package uses:"
msgstr ""

# 49886a67e6ea4784ae209e262065e4a2
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:76
msgid ""
"Each Waf package comes with a custom ``waf`` build script, written in "
"Python. This script contains instructions to build the project."
msgstr ""

# 84dbb11882ea44148394b1cca2ba3042
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:79
msgid ""
"The package also comes with a ``wscript`` file. This file is used to "
"override the default ``configure``, ``build``, and ``install`` phases to "
"customize the Waf project. It also allows developers to override the default "
"``./waf --help`` message. Check this file to find useful information about "
"dependencies and the minimum versions that are supported."
msgstr ""

# c3e17c60c5bf4bbda7f857ebd07d8955
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:90
msgid ""
"``WafPackage`` does not require ``waf`` to build. ``waf`` is only needed to "
"create the ``./waf`` script. Since ``./waf`` is a Python script, Python is "
"needed to build the project. ``WafPackage`` adds the following dependency "
"automatically:"
msgstr ""

# 968c8d1c16bd4f4c8882739392183166
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:100
msgid "Waf only supports Python 2.5 and up."
msgstr ""

# f1f32ef798b54eaa95ba9f8ca0b2a382
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:104
msgid "Passing arguments to waf"
msgstr ""

# 92274850f7f54837b55c64dc064f6268
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:106
msgid ""
"As previously mentioned, each phase comes with a ``<phase_args>`` function "
"that can be used to pass arguments to that particular phase. For example, if "
"you need to pass arguments to the build phase, you can use:"
msgstr ""

# 0bb323dd6208482098a0ef0e968dcf5a
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:122
msgid "A list of valid options can be found by running ``./waf --help``."
msgstr ""

# 9a5464a070e74898a39576bda8390409
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:128
msgid "For more information on the Waf build system, see: https://waf.io/book/"
msgstr ""

# 25b8792d404b4d2d83efa7413d0d2199
#: ../spack/lib/spack/docs/chain.rst:10
msgid "Chaining Spack Installations"
msgstr ""

# 260fbb49ddf148bcbb278cd39fc9e46c
#: ../spack/lib/spack/docs/chain.rst:12
msgid ""
"You can point your Spack installation to another installation to use any "
"packages that are installed there. To register the other Spack instance, you "
"can add it as an entry to ``upstreams.yaml``:"
msgstr ""

# 5d52da4bddc34142ac96be9ff70be332
#: ../spack/lib/spack/docs/chain.rst:24
msgid ""
"``install_tree`` must point to the ``opt/spack`` directory inside of the "
"Spack base directory."
msgstr ""

# bcce1c0424b9474c99f1a00f618dfa18
#: ../spack/lib/spack/docs/chain.rst:27
msgid ""
"Once the upstream Spack instance has been added, ``spack find`` will "
"automatically check the upstream instance when querying installed packages, "
"and new package installations for the local Spack install will use any "
"dependencies that are installed in the upstream instance."
msgstr ""

# 47e97e0c33a647eda209d074593c5f32
#: ../spack/lib/spack/docs/chain.rst:32
msgid ""
"This other instance of Spack has no knowledge of the local Spack instance "
"and may not have the same permissions or ownership as the local Spack "
"instance. This has the following consequences:"
msgstr ""

# a95f9bf6f41d469baad7a7c0c19a2ccc
#: ../spack/lib/spack/docs/chain.rst:36
msgid ""
"Upstream Spack instances are not locked. Therefore it is up to users to make "
"sure that the local instance is not using an upstream instance when it is "
"being modified."
msgstr ""

# 3b6fc31e83f4472287ef01b524a95330
#: ../spack/lib/spack/docs/chain.rst:40
msgid ""
"Users should not uninstall packages from the upstream instance. Since the "
"upstream instance doesn't know about the local instance, it cannot prevent "
"the uninstallation of packages which the local instance depends on."
msgstr ""

# 19660610af1f4005b08fa275ea8d38b6
#: ../spack/lib/spack/docs/chain.rst:44
msgid "Other details about upstream installations:"
msgstr ""

# a5aefacdcbf74fef9369a5135b379f32
#: ../spack/lib/spack/docs/chain.rst:46
msgid ""
"If a package is installed both locally and upstream, the local installation "
"will always be used as a dependency. This can occur if the local Spack "
"installs a package which is not present in the upstream, but later on the "
"upstream Spack instance also installs that package."
msgstr ""

# b756155c1d30459ca2ba9a6c01b0c26b
#: ../spack/lib/spack/docs/chain.rst:51
msgid ""
"If an upstream Spack instance registers and installs an external package, "
"the local Spack instance will treat this the same as a Spack-installed "
"package. This feature will only work if the upstream Spack instance includes "
"the upstream functionality (i.e. if its commit is after March 27, 2019)."
msgstr ""

# d73eb86b3ca24e6cb05812ab3624f599
#: ../spack/lib/spack/docs/chain.rst:59
msgid "Using Multiple Upstream Spack Instances"
msgstr ""

# 547288c0525b4cdabd39a19ed131d20d
#: ../spack/lib/spack/docs/chain.rst:61
msgid ""
"A single Spack instance can use multiple upstream Spack installations. Spack "
"will search upstream instances in the order you list them in your "
"configuration. If your installation refers to instances X and Y, in that "
"order, then instance X must list Y as an upstream in its own ``upstreams."
"yaml``."
msgstr ""

# 5b0611c90fec459fba8c02178f00a099
#: ../spack/lib/spack/docs/chain.rst:68
msgid "Using Modules for Upstream Packages"
msgstr ""

# 3cbfbc0316364920ac9d46bdc7146859
#: ../spack/lib/spack/docs/chain.rst:70
msgid ""
"The local Spack instance does not generate modules for packages which are "
"installed upstream. The local Spack instance can be configured to use the "
"modules generated by the upstream Spack instance."
msgstr ""

# 67cc507ed8794e53bc2450ff63278554
#: ../spack/lib/spack/docs/chain.rst:74
msgid ""
"There are two requirements to use the modules created by an upstream Spack "
"instance: firstly the upstream instance must do a ``spack module tcl "
"refresh``, which generates an index file that maps installed packages to "
"their modules; secondly, the local Spack instance must add a ``modules`` "
"entry to the configuration:"
msgstr ""

# 6fddb2a39920473189141e5e24c35e6f
#: ../spack/lib/spack/docs/chain.rst:88
msgid ""
"Each time new packages are installed in the upstream Spack instance, the "
"upstream Spack maintainer should run ``spack module tcl refresh`` (or the "
"corresponding command for the type of module they intend to use)."
msgstr ""

# f866c2e439eb419ea84bb59868351cac
#: ../spack/lib/spack/docs/chain.rst:94
msgid ""
"Spack can generate modules that :ref:`automatically load <autoloading-"
"dependencies>` the modules of dependency packages. Spack cannot currently do "
"this for modules in upstream packages."
msgstr ""

# e9b7abef6b7d403f9b915582ad1d51f7
#: ../spack/lib/spack/docs/config_yaml.rst:10
msgid "Basic Settings"
msgstr ""

# 173bf03a965a4a4b9631c038a3a2a333
#: ../spack/lib/spack/docs/config_yaml.rst:12
msgid ""
"Spack's basic configuration options are set in ``config.yaml``.  You can see "
"the default settings by looking at ``etc/spack/defaults/config.yaml``:"
msgstr ""

# 6a5f7342068140acabf5d29d336880cd
#: ../spack/lib/spack/docs/config_yaml.rst:19
msgid ""
"These settings can be overridden in ``etc/spack/config.yaml`` or ``~/.spack/"
"config.yaml``.  See :ref:`configuration-scopes` for details."
msgstr ""

# 4fa7d778e9864dbab4707c66526e9754
#: ../spack/lib/spack/docs/config_yaml.rst:24
msgid "``install_tree``"
msgstr ""

# e787c3f52677466f87107fd6379aad4a
#: ../spack/lib/spack/docs/config_yaml.rst:26
msgid ""
"The location where Spack will install packages and their dependencies. "
"Default is ``$spack/opt/spack``."
msgstr ""

# e493f3d4fd9e4af690a989f992665ead
#: ../spack/lib/spack/docs/config_yaml.rst:31
msgid "``install_hash_length`` and ``install_path_scheme``"
msgstr ""

# 73a1aff0574e4b24a506875e64b4a310
#: ../spack/lib/spack/docs/config_yaml.rst:33
msgid ""
"The default Spack installation path can be very long and can create problems "
"for scripts with hardcoded shebangs. There are two parameters to help with "
"that. Firstly, the ``install_hash_length`` parameter can set the length of "
"the hash in the installation path from 1 to 32. The default path uses the "
"full 32 characters."
msgstr ""

# b3b5192c4e79405182ab0ac9a2c8e90f
#: ../spack/lib/spack/docs/config_yaml.rst:39
msgid ""
"Secondly, it is also possible to modify the entire installation scheme. By "
"default Spack uses ``{architecture}/{compiler.name}-{compiler.version}/"
"{name}-{version}-{hash}`` where the tokens that are available for use in "
"this directive are the same as those understood by the ``Spec.format`` "
"method. Using this parameter it is possible to use a different package "
"layout or reduce the depth of the installation paths. For example"
msgstr ""

# 5e0a9952a3a94ae3842f7fe30cc21ed8
#: ../spack/lib/spack/docs/config_yaml.rst:53
msgid ""
"would install packages into sub-directories using only the package name, "
"version and a hash length of 7 characters."
msgstr ""

# af22e5ba0ec24bcb9af7a9f5844a4d28
#: ../spack/lib/spack/docs/config_yaml.rst:56
msgid ""
"When using either parameter to set the hash length it only affects the "
"representation of the hash in the installation directory. You should be "
"aware that the smaller the hash length the more likely naming conflicts will "
"occur. These parameters are independent of those used to configure module "
"names."
msgstr ""

# 59a757e0a1304b4198d1c72ffa9f1061
#: ../spack/lib/spack/docs/config_yaml.rst:62
msgid ""
"Modifying the installation hash length or path scheme after packages have "
"been installed will prevent Spack from being able to find the old "
"installation directories."
msgstr ""

# 092845560e7d4171a7f0c3e84a2a1957
#: ../spack/lib/spack/docs/config_yaml.rst:68
msgid "``module_roots``"
msgstr ""

# c882cea7517b4db69786f9f6ddd2abde
#: ../spack/lib/spack/docs/config_yaml.rst:70
msgid ""
"Controls where Spack installs generated module files.  You can customize the "
"location for each type of module.  e.g.:"
msgstr ""

# 98bf2544fce84ca28442ac69db729e86
#: ../spack/lib/spack/docs/config_yaml.rst:80
msgid "See :ref:`modules` for details."
msgstr ""

# dbc3cf56b42f40ac8596b158116b6fb3
#: ../spack/lib/spack/docs/config_yaml.rst:84
msgid "``build_stage``"
msgstr ""

# 782d46ea5e2d455ea32e57e0b4e22191
#: ../spack/lib/spack/docs/config_yaml.rst:86
msgid ""
"Spack is designed to run out of a user home directory, and on many systems "
"the home directory is a (slow) network file system.  On most systems, "
"building in a temporary file system results in faster builds than building "
"in the home directory.  Usually, there is also more space available in the "
"temporary location than in the home directory. So, Spack tries to create "
"build stages in temporary space."
msgstr ""

# 8543f6d7d9bf44739fdf82c516c0b0e6
#: ../spack/lib/spack/docs/config_yaml.rst:93
msgid "By default, Spack's ``build_stage`` is configured like this:"
msgstr ""

# 1d33d91ff7b747dbb40756dac381f2ee
#: ../spack/lib/spack/docs/config_yaml.rst:101
msgid ""
"This is an ordered list of paths that Spack should search when trying to "
"find a temporary directory for the build stage.  The list is searched in "
"order, and Spack will use the first directory to which it has write access. "
"See :ref:`config-file-variables` for more on ``$tempdir`` and ``$spack``."
msgstr ""

# 6e760c89f6814db58c893a633a424b64
#: ../spack/lib/spack/docs/config_yaml.rst:106
msgid ""
"When Spack builds a package, it creates a temporary directory within the "
"``build_stage``, and it creates a symbolic link to that directory in ``"
"$spack/var/spack/stage``. This is used to track the temporary directory.  "
"After the package is successfully installed, Spack deletes the temporary "
"directory it used to build.  Unsuccessful builds are not deleted, but you "
"can manually purge them with :ref:`spack clean --stage <cmd-spack-clean>`."
msgstr ""

# c2ef2d452b624af5aada2665667ac4ae
#: ../spack/lib/spack/docs/config_yaml.rst:116
msgid ""
"The last item in the list is ``$spack/var/spack/stage``.  If this is the "
"only writable directory in the ``build_stage`` list, Spack will build "
"*directly* in ``$spack/var/spack/stage`` and will not link to temporary "
"space."
msgstr ""

# 573f8673490d43f7a3831fa82211486f
#: ../spack/lib/spack/docs/config_yaml.rst:123
msgid "``source_cache``"
msgstr ""

# e279d7a30be340328ca088edbaef8302
#: ../spack/lib/spack/docs/config_yaml.rst:125
msgid ""
"Location to cache downloaded tarballs and repositories.  By default these "
"are stored in ``$spack/var/spack/cache``.  These are stored indefinitely by "
"default. Can be purged with :ref:`spack clean --downloads <cmd-spack-clean>`."
msgstr ""

# 06fd077a1db5425194b996715b19dc1b
#: ../spack/lib/spack/docs/config_yaml.rst:132
msgid "``misc_cache``"
msgstr ""

# a6b04189aafd4897b4e6158ca1182cc9
#: ../spack/lib/spack/docs/config_yaml.rst:134
msgid ""
"Temporary directory to store long-lived cache files, such as indices of "
"packages available in repositories.  Defaults to ``~/.spack/cache``.  Can be "
"purged with :ref:`spack clean --misc-cache <cmd-spack-clean>`."
msgstr ""

# 2ebc005caa4644259908169fb6e1c69a
#: ../spack/lib/spack/docs/config_yaml.rst:140
msgid "``verify_ssl``"
msgstr ""

# a2af0fa59ec1409a9f76aee6d5b15534
#: ../spack/lib/spack/docs/config_yaml.rst:142
msgid ""
"When set to ``true`` (default) Spack will verify certificates of remote "
"hosts when making ``ssl`` connections.  Set to ``false`` to disable, and "
"tools like ``curl`` will use their ``--insecure`` options.  Disabling this "
"can expose you to attacks.  Use at your own risk."
msgstr ""

# 90b7719f5f0a407c9b97e0d990f2dcba
#: ../spack/lib/spack/docs/config_yaml.rst:149
msgid "``checksum``"
msgstr ""

# 63953de728d34b48826ba3a5d194cf17
#: ../spack/lib/spack/docs/config_yaml.rst:151
msgid ""
"When set to ``true``, Spack verifies downloaded source code using a "
"checksum, and will refuse to build packages that it cannot verify.  Set to "
"``false`` to disable these checks.  Disabling this can expose you to "
"attacks.  Use at your own risk."
msgstr ""

# 93045e2a1c3745f6812bf880c717eee2
#: ../spack/lib/spack/docs/config_yaml.rst:158
msgid "``locks``"
msgstr ""

# 0be9f1d451704961ab5f1c5b42999595
#: ../spack/lib/spack/docs/config_yaml.rst:160
msgid ""
"When set to ``true``, concurrent instances of Spack will use locks to avoid "
"modifying the install tree, database file, etc. If false, Spack will disable "
"all locking, but you must **not** run concurrent instances of Spack.  For "
"file systems that don't support locking, you should set this to ``false`` "
"and run one Spack at a time, but otherwise we recommend enabling locks."
msgstr ""

# 680a59471e7b40c2af16dd8b8bc9cade
#: ../spack/lib/spack/docs/config_yaml.rst:169
msgid "``dirty``"
msgstr ""

# def9adedf1fd459e824bb4ae9a88258b
#: ../spack/lib/spack/docs/config_yaml.rst:171
msgid ""
"By default, Spack unsets variables in your environment that can change the "
"way packages build. This includes ``LD_LIBRARY_PATH``, ``CPATH``, "
"``LIBRARY_PATH``, ``DYLD_LIBRARY_PATH``, and others."
msgstr ""

# 68ff755f7f0d41c18eadd73ff32861ba
#: ../spack/lib/spack/docs/config_yaml.rst:175
msgid ""
"By default, builds are ``clean``, but on some machines, compilers and other "
"tools may need custom ``LD_LIBRARY_PATH`` settings to run.  You can set "
"``dirty`` to ``true`` to skip the cleaning step and make all builds \"dirty"
"\" by default.  Be aware that this will reduce the reproducibility of builds."
msgstr ""

# 74a57dbb269046939e5cd3680d527f65
#: ../spack/lib/spack/docs/config_yaml.rst:183
msgid "``build_jobs``"
msgstr ""

# 855e810cfbaa4724b89a6f5a6ab1efbd
#: ../spack/lib/spack/docs/config_yaml.rst:185
msgid ""
"Unless overridden in a package or on the command line, Spack builds all "
"packages in parallel. For a build system that uses Makefiles, this means "
"running ``make -j<build_jobs>``, where ``build_jobs`` is the number of "
"threads to use."
msgstr ""

# 36b60c506da14bb0820a58fd14282f73
#: ../spack/lib/spack/docs/config_yaml.rst:190
msgid ""
"The default parallelism is equal to the number of cores on your machine. If "
"you work on a shared login node or have a strict ulimit, it may be necessary "
"to set the default to a lower value. By setting ``build_jobs`` to 4, for "
"example, commands like ``spack install`` will run ``make -j4`` instead of "
"hogging every core."
msgstr ""

# 36d74010451149d68c68e8cc0421392f
#: ../spack/lib/spack/docs/config_yaml.rst:196
msgid "To build all software in serial, set ``build_jobs`` to 1."
msgstr ""

# 070ad982b9a4406cb70fc41fef7cc3cc
#: ../spack/lib/spack/docs/config_yaml.rst:200
msgid "``ccache``"
msgstr ""

# 391864f5788f459295bed30eeeef8195
#: ../spack/lib/spack/docs/config_yaml.rst:202
msgid ""
"When set to ``true`` Spack will use ccache to cache compiles. This is useful "
"specifically in two cases: (1) when using ``spack setup``, and (2) when "
"building the same package with many different variants. The default is "
"``false``."
msgstr ""

# cd9c7cce338d48db9006f137d967bccb
#: ../spack/lib/spack/docs/config_yaml.rst:207
msgid ""
"When enabled, Spack will look inside your ``PATH`` for a ``ccache`` "
"executable and stop if it is not found. Some systems come with ``ccache``, "
"but it can also be installed using ``spack install ccache``. ``ccache`` "
"comes with reasonable defaults for cache size and location. (See the "
"*Configuration settings* section of ``man ccache`` to learn more about the "
"default settings and how to change them). Please note that we currently "
"disable ccache's ``hash_dir`` feature to avoid an issue with the stage "
"directory (see https://github.com/LLNL/spack/"
"pull/3761#issuecomment-294352232)."
msgstr ""

# f35e7203575a4d57a91262fe3ace6748
#: ../spack/lib/spack/docs/configuration.rst:10
msgid "Configuration Files"
msgstr ""

# 96435c1349d041ae8e41caedcad0e060
#: ../spack/lib/spack/docs/configuration.rst:12
msgid ""
"Spack has many configuration files.  Here is a quick list of them, in case "
"you want to skip directly to specific docs:"
msgstr ""

# 572b39549b31409dafc3093f2f20b977
#: ../spack/lib/spack/docs/configuration.rst:15
msgid ":ref:`compilers.yaml <compiler-config>`"
msgstr ""

# c6f33fbf087f45579a81751639b27435
#: ../spack/lib/spack/docs/configuration.rst:16
msgid ":ref:`config.yaml <config-yaml>`"
msgstr ""

# 273ca8dbb3094d65a1ecf0b3a0af7ae8
#: ../spack/lib/spack/docs/configuration.rst:17
msgid ":ref:`mirrors.yaml <mirrors>`"
msgstr ""

# 3a9e4f77e7b04d70a3e35529da062d15
#: ../spack/lib/spack/docs/configuration.rst:18
msgid ":ref:`modules.yaml <modules>`"
msgstr ""

# ac8ab7eea13e4133bf4cc52beef24947
#: ../spack/lib/spack/docs/configuration.rst:19
msgid ":ref:`packages.yaml <build-settings>`"
msgstr ""

# 8c895d154f8c4636ae8935584a49b05b
#: ../spack/lib/spack/docs/configuration.rst:20
msgid ":ref:`repos.yaml <repositories>`"
msgstr ""

# #-#-#-#-#  configuration.pot (Spack 0.12)  #-#-#-#-#
# f661a93b3ee74a7e9b9d52d96ffa7f66
# #-#-#-#-#  tutorial_configuration.pot (Spack 0.12)  #-#-#-#-#
# 2c239326476748c3aee87151efbcd8a5
#: ../spack/lib/spack/docs/configuration.rst:24
#: ../spack/lib/spack/docs/tutorial_configuration.rst:102
msgid "YAML Format"
msgstr ""

# 404a79bdf939460bbeb5c219b5b80a80
#: ../spack/lib/spack/docs/configuration.rst:26
msgid ""
"Spack configuration files are written in YAML.  We chose YAML because it's "
"human readable, but also versatile in that it supports dictionaries, lists, "
"and nested sections. For more details on the format, see `yaml.org <http://"
"yaml.org>`_ and `libyaml <http://pyyaml.org/wiki/LibYAML>`_. Here is an "
"example ``config.yaml`` file:"
msgstr ""

# 624e7b4d8282402dae4dbc0742254d6f
#: ../spack/lib/spack/docs/configuration.rst:42
msgid ""
"Each Spack configuration file is nested under a top-level section "
"corresponding to its name. So, ``config.yaml`` starts with ``config:``, "
"``mirrors.yaml`` starts with ``mirrors:``, etc."
msgstr ""

# #-#-#-#-#  configuration.pot (Spack 0.12)  #-#-#-#-#
# 790f9b8c9a2f4a7eb916c59361209ec3
# #-#-#-#-#  tutorial_configuration.pot (Spack 0.12)  #-#-#-#-#
# 4f6b69012af14c94bf7fb94c2c6c5ba8
#: ../spack/lib/spack/docs/configuration.rst:50
#: ../spack/lib/spack/docs/tutorial_configuration.rst:34
msgid "Configuration Scopes"
msgstr ""

# a50e6ae9de384581ab617039ff84bf78
#: ../spack/lib/spack/docs/configuration.rst:52
msgid ""
"Spack pulls configuration data from files in several directories. There are "
"six configuration scopes. From lowest to highest:"
msgstr ""

# f6061b78d5614768a2af13cac0fb2b10
#: ../spack/lib/spack/docs/configuration.rst:55
msgid ""
"**defaults**: Stored in ``$(prefix)/etc/spack/defaults/``. These are the "
"\"factory\" settings. Users should generally not modify the settings here, "
"but should override them in other configuration scopes. The defaults here "
"will change from version to version of Spack."
msgstr ""

# d7b07d1c283a4cd1a0bdfa9a41d4bc5e
#: ../spack/lib/spack/docs/configuration.rst:60
msgid ""
"**system**: Stored in ``/etc/spack/``. These are settings for this machine, "
"or for all machines on which this file system is mounted. The site scope can "
"be used for settings idiosyncratic to a particular machine, such as the "
"locations of compilers or external packages. These settings are presumably "
"controlled by someone with root access on the machine. They override the "
"defaults scope."
msgstr ""

# e812acdcca064a65ae452c924ff64934
#: ../spack/lib/spack/docs/configuration.rst:67
msgid ""
"**site**: Stored in ``$(prefix)/etc/spack/``. Settings here affect only "
"*this instance* of Spack, and they override the defaults and system scopes.  "
"The site scope can can be used for per-project settings (one Spack instance "
"per project) or for site-wide settings on a multi-user machine (e.g., for a "
"common Spack instance)."
msgstr ""

# e25c819efcdf454ab1c024472742c5a1
#: ../spack/lib/spack/docs/configuration.rst:73
msgid ""
"**user**: Stored in the home directory: ``~/.spack/``. These settings affect "
"all instances of Spack and take higher precedence than site, system, or "
"defaults scopes."
msgstr ""

# f2cd7b2628f247b7ae6f615aceb97ded
#: ../spack/lib/spack/docs/configuration.rst:77
msgid ""
"**custom**: Stored in a custom directory specified by ``--config-scope``. If "
"multiple scopes are listed on the command line, they are ordered from lowest "
"to highest precedence."
msgstr ""

# ca8e0ebf08264ed18a4c342a8f44c827
#: ../spack/lib/spack/docs/configuration.rst:81
msgid ""
"**command line**: Build settings specified on the command line take "
"precedence over all other scopes."
msgstr ""

# e146e65263844e359f2263f1dd30158b
#: ../spack/lib/spack/docs/configuration.rst:84
msgid ""
"Each configuration directory may contain several configuration files, such "
"as ``config.yaml``, ``compilers.yaml``, or ``mirrors.yaml``.  When "
"configurations conflict, settings from higher-precedence scopes override "
"lower-precedence settings."
msgstr ""

# 0fd3e7f56fca4d63b1b3f7048c916ee8
#: ../spack/lib/spack/docs/configuration.rst:89
msgid ""
"Commands that modify scopes (e.g., ``spack compilers``, ``spack repo``, "
"etc.) take a ``--scope=<name>`` parameter that you can use to control which "
"scope is modified.  By default, they modify the highest-precedence scope."
msgstr ""

# b8ae791c677d4539b75e78cc55e06d68
#: ../spack/lib/spack/docs/configuration.rst:98
msgid "Custom scopes"
msgstr ""

# 7cdc491655624dd1963ec0ab9c9d71dd
#: ../spack/lib/spack/docs/configuration.rst:100
msgid ""
"In addition to the ``defaults``, ``system``, ``site``, and ``user`` scopes, "
"you may add configuration scopes directly on the command line with the ``--"
"config-scope`` argument, or ``-C`` for short."
msgstr ""

# 6c0dad644f464a37b924efc158fc6fd2
#: ../spack/lib/spack/docs/configuration.rst:104
msgid ""
"For example, the following adds two configuration scopes, named ``scopea`` "
"and ``scopeb``, to a ``spack spec`` command:"
msgstr ""

# 655a329e91fc4996bb233952fa2a5119
#: ../spack/lib/spack/docs/configuration.rst:111
msgid ""
"Custom scopes come *after* the ``spack`` command and *before* the "
"subcommand, and they specify a single path to a directory full of "
"configuration files. You can add the same configuration files to that "
"directory that you can add to any other scope (``config.yaml``, ``packages."
"yaml``, etc.)."
msgstr ""

# 5f498516f7134baab4bf90baeff84c9e
#: ../spack/lib/spack/docs/configuration.rst:117
msgid "If multiple scopes are provided:"
msgstr ""

# 6c55462c230140cdbf9787c25b7452e2
#: ../spack/lib/spack/docs/configuration.rst:119
msgid "Each must be preceded with the ``--config-scope`` or ``-C`` flag."
msgstr ""

# 356670814d4a441da0b6ef1b4635692b
#: ../spack/lib/spack/docs/configuration.rst:120
msgid "They must be ordered from lowest to highest precedence."
msgstr ""

# cea7dc75fd53440a9dd7d6daa658949e
#: ../spack/lib/spack/docs/configuration.rst:124
msgid "Example: scopes for release and development"
msgstr ""

# 85adce72b95241c881f0d583b8cb3fd0
#: ../spack/lib/spack/docs/configuration.rst:126
msgid ""
"Suppose that you need to support simultaneous building of release and "
"development versions of ``mypackage``, where ``mypackage`` -> ``A`` -> "
"``B``. You could create The following files:"
msgstr ""

# aeac4a5afa2545d6a69f0c7d93d45771
#: ../spack/lib/spack/docs/configuration.rst:130
msgid "~/myscopes/release/packages.yaml"
msgstr ""

# e1271a953c994b0d896a9675cd1c8e7f
#: ../spack/lib/spack/docs/configuration.rst:141
msgid "~/myscopes/develop/packages.yaml"
msgstr ""

# c134f3aed71049809780628f211afedf
#: ../spack/lib/spack/docs/configuration.rst:152
msgid ""
"You can switch between ``release`` and ``develop`` configurations using "
"configuration arguments.  You would type ``spack -C ~/myscopes/release`` "
"when you want to build the designated release versions of ``mypackage``, "
"``A``, and ``B``, and you would type ``spack -C ~/myscopes/develop`` when "
"you want to build all of these packages at the ``develop`` version."
msgstr ""

# ce9c1238d2d74bf1bcd5b138baa0b009
#: ../spack/lib/spack/docs/configuration.rst:160
msgid "Example: swapping MPI providers"
msgstr ""

# ae315e1315d9476ab34b45cd7a7a1179
#: ../spack/lib/spack/docs/configuration.rst:162
msgid ""
"Suppose that you need to build two software packages, ``packagea`` and "
"``packageb``. ``packagea`` is Python 2-based and ``packageb`` is Python 3-"
"based. ``packagea`` only builds with OpenMPI and ``packageb`` only builds "
"with MPICH. You can create different configuration scopes for use with "
"``packagea`` and ``packageb``:"
msgstr ""

# 903653b3cd5d41a6afeb6a13eba9d516
#: ../spack/lib/spack/docs/configuration.rst:168
msgid "~/myscopes/packgea/packages.yaml"
msgstr ""

# 5cc7a8ea5b3f4b9e8ce5cdff34e90bb7
#: ../spack/lib/spack/docs/configuration.rst:178
msgid "~/myscopes/packageb/packages.yaml"
msgstr ""

# #-#-#-#-#  configuration.pot (Spack 0.12)  #-#-#-#-#
# 72d3f471963a4de0b6548bfd67d283d6
# #-#-#-#-#  tutorial_configuration.pot (Spack 0.12)  #-#-#-#-#
# 9dcf707076a444a9af7f759a177f6543
#: ../spack/lib/spack/docs/configuration.rst:193
#: ../spack/lib/spack/docs/tutorial_configuration.rst:80
msgid "Platform-specific Scopes"
msgstr ""

# b850324c7c8e407491ac3fd9a3824779
#: ../spack/lib/spack/docs/configuration.rst:195
msgid ""
"For each scope above, there can also be platform-specific settings. For "
"example, on most platforms, GCC is the preferred compiler. However, on macOS "
"(darwin), Clang often works for more packages, and is set as the default "
"compiler. This configuration is set in ``$(prefix)/etc/spack/defaults/darwin/"
"packages.yaml``. It will take precedence over settings in the ``defaults`` "
"scope, but can still be overridden by settings in ``system``, ``system/"
"darwin``, ``site``, ``site/darwin``, ``user``, ``user/darwin``, ``custom``, "
"or ``custom/darwin``. So, the full scope precedence is:"
msgstr ""

# d7862baac86e486fa2e5a0ec7c51a90d
#: ../spack/lib/spack/docs/configuration.rst:205
msgid "``defaults``"
msgstr ""

# a101e185ad384f4dbf38a9fd0f758968
#: ../spack/lib/spack/docs/configuration.rst:206
msgid "``defaults/<platform>``"
msgstr ""

# 28617645155d40f6b1fb135e6b02a0dd
#: ../spack/lib/spack/docs/configuration.rst:207
msgid "``system``"
msgstr ""

# 51b29e456d3c465ab0f8156ef160c3d8
#: ../spack/lib/spack/docs/configuration.rst:208
msgid "``system/<platform>``"
msgstr ""

# b8beeb91f0a247dda6406b5f2b64144e
#: ../spack/lib/spack/docs/configuration.rst:209
msgid "``site``"
msgstr ""

# 4b398075d2024b4cbfb7f34f5a4f292b
#: ../spack/lib/spack/docs/configuration.rst:210
msgid "``site/<platform>``"
msgstr ""

# db336a64341a4c6092ee99ba2ce58d56
#: ../spack/lib/spack/docs/configuration.rst:211
msgid "``user``"
msgstr ""

# cee42321746f403f9be73e69a4e9d2a1
#: ../spack/lib/spack/docs/configuration.rst:212
msgid "``user/<platform>``"
msgstr ""

# e2a0fe45ada945e6b39c300c894795cf
#: ../spack/lib/spack/docs/configuration.rst:213
msgid "``custom``"
msgstr ""

# f4b30f53078f4f3bbcc81944451b317b
#: ../spack/lib/spack/docs/configuration.rst:214
msgid "``custom/<platform>``"
msgstr ""

# 640cfb37593b4f9ea3dc4f44563eb6e1
#: ../spack/lib/spack/docs/configuration.rst:216
msgid ""
"You can get the name to use for ``<platform>`` by running ``spack arch --"
"platform``. The system config scope has a ``<platform>`` section for sites "
"at which ``/etc`` is mounted on multiple heterogeneous machines."
msgstr ""

# 2be07f11ab88457086efe5626187e6b2
#: ../spack/lib/spack/docs/configuration.rst:222
msgid "Scope Precedence"
msgstr ""

# dc702ca6b6d34f3eb3350848720d6471
#: ../spack/lib/spack/docs/configuration.rst:224
msgid ""
"When spack queries for configuration parameters, it searches in higher-"
"precedence scopes first. So, settings in a higher-precedence file can "
"override those with the same key in a lower-precedence one. For list-valued "
"settings, Spack *prepends* higher-precedence settings to lower-precedence "
"settings. Completely ignoring higher-level configuration options is "
"supported with the ``::`` notation for keys (see :ref:`config-overrides` "
"below)."
msgstr ""

# 175bcd7cc7134d42b29a974792716363
#: ../spack/lib/spack/docs/configuration.rst:234
msgid "Simple keys"
msgstr ""

# c182b5d994f34f1598baa01da0dccc65
#: ../spack/lib/spack/docs/configuration.rst:236
msgid ""
"Let's look at an example of overriding a single key in a Spack file. If your "
"configurations look like this:"
msgstr ""

# bcdd074dbf9f41f3ad9f53d7bb98c674
# 18d472d8ab2c4899b5c65cd5e5b714eb
#: ../spack/lib/spack/docs/configuration.rst:239
#: ../spack/lib/spack/docs/configuration.rst:311
msgid "$(prefix)/etc/spack/defaults/config.yaml"
msgstr ""

# 58df71296b994ce7b82230b150015696
# b7fccfdf801949baa6ca787b3e490a46
# b1b5e4ef303c48bc84a4e9fd439f1f7b
# 6c4c8a46860d42f18af1092e2b1fe51f
#: ../spack/lib/spack/docs/configuration.rst:251
#: ../spack/lib/spack/docs/configuration.rst:287
#: ../spack/lib/spack/docs/configuration.rst:322
#: ../spack/lib/spack/docs/configuration.rst:354
msgid "~/.spack/config.yaml"
msgstr ""

# 7bd4640d1de24fb98eae8fdcd1c40a7d
#: ../spack/lib/spack/docs/configuration.rst:258
msgid ""
"Spack will only override ``install_tree`` in the ``config`` section, and "
"will take the site preferences for other settings. You can see the final, "
"combined configuration with the ``spack config get <configtype>`` command:"
msgstr ""

# a5d912cfa4ce4a68b35bb341f6890631
#: ../spack/lib/spack/docs/configuration.rst:280
msgid "Overriding entire sections"
msgstr ""

# 369086cac2d249549faa4c8a504048ca
#: ../spack/lib/spack/docs/configuration.rst:282
msgid ""
"Above, the user ``config.yaml`` only overrides specific settings in the "
"default ``config.yaml``. Sometimes, it is useful to *completely* override "
"lower-precedence settings. To do this, you can use *two* colons at the end "
"of a key in a configuration file. For example:"
msgstr ""

# c568f16dd443467f8f8d8f8941d2b1d7
#: ../spack/lib/spack/docs/configuration.rst:294
msgid ""
"Spack will ignore all lower-precedence configuration under the ``config::`` "
"section:"
msgstr ""

# ba4b308305f74cc1800435c677578094
#: ../spack/lib/spack/docs/configuration.rst:306
msgid "List-valued settings"
msgstr ""

# 04316c9a5fab42b1954fcf156ece53bf
#: ../spack/lib/spack/docs/configuration.rst:308
msgid ""
"Let's revisit the ``config.yaml`` example one more time. The ``build_stage`` "
"setting's value is an ordered list of directories:"
msgstr ""

# 6e9a68a0326c4c12afa22fef67509754
#: ../spack/lib/spack/docs/configuration.rst:319
msgid ""
"Suppose the user configuration adds its *own* list of ``build_stage`` paths:"
msgstr ""

# f279a488efef45519124cc63548bfd81
#: ../spack/lib/spack/docs/configuration.rst:330
msgid ""
"Spack will first look at the paths in the defaults ``config.yaml``, then the "
"paths in the user's ``~/.spack/config.yaml``. The list in the higher-"
"precedence scope is *prepended* to the defaults. ``spack config get config`` "
"shows the result:"
msgstr ""

# 31468ebaead54aa7befbb4d2cc158c92
#: ../spack/lib/spack/docs/configuration.rst:350
msgid ""
"As in :ref:`config-overrides`, the higher-precedence scope can *completely* "
"override the lower-precedence scope using ``::``. So if the user config "
"looked like this:"
msgstr ""

# 5b30815b50524ef0a051480e807e8bcc
#: ../spack/lib/spack/docs/configuration.rst:363
msgid "The merged configuration would look like this:"
msgstr ""

# 9a3981a048d14af1bafd262d3c453d5c
#: ../spack/lib/spack/docs/configuration.rst:382
msgid "Config File Variables"
msgstr ""

# b912ac9857f64a11a395fda472b42b59
#: ../spack/lib/spack/docs/configuration.rst:384
msgid ""
"Spack understands several variables which can be used in config file paths "
"wherever they appear. There are three sets of these variables: Spack-"
"specific variables, environment variables, and user path variables. Spack-"
"specific variables and environment variables are both indicated by prefixing "
"the variable name with ``$``. User path variables are indicated at the start "
"of the path with ``~`` or ``~user``."
msgstr ""

# 2c0b8fc6b33741e5b0ff4e802eaa2009
#: ../spack/lib/spack/docs/configuration.rst:393
msgid "Spack-specific variables"
msgstr ""

# e6f4bff948f94711a48381205395459a
#: ../spack/lib/spack/docs/configuration.rst:395
msgid "Spack understands several special variables. These are:"
msgstr ""

# f2a3c22d65f74fc385b53d6636a1c09d
#: ../spack/lib/spack/docs/configuration.rst:397
msgid "``$spack``: path to the prefix of this Spack installation"
msgstr ""

# 4ba914f68b434b3a81ac54e6a377d693
#: ../spack/lib/spack/docs/configuration.rst:398
msgid ""
"``$tempdir``: default system temporary directory (as specified in Python's "
"`tempfile.tempdir <https://docs.python.org/2/library/tempfile.html#tempfile."
"tempdir>`_ variable."
msgstr ""

# cd385a037cc9497c8360154704b0b63c
#: ../spack/lib/spack/docs/configuration.rst:402
msgid "``$user``: name of the current user"
msgstr ""

# c5fe02972550408d95996324737f6663
#: ../spack/lib/spack/docs/configuration.rst:404
msgid ""
"Note that, as with shell variables, you can write these as ``$varname`` or "
"with braces to distinguish the variable from surrounding characters: ``"
"${varname}``. Their names are also case insensitive, meaning that ``$SPACK`` "
"works just as well as ``$spack``. These special variables are substituted "
"first, so any environment variables with the same name will not be used."
msgstr ""

# e9134eb6e5c34deca38779085526573c
#: ../spack/lib/spack/docs/configuration.rst:415
msgid ""
"After Spack-specific variables are evaluated, environment variables are "
"expanded. These are formatted like Spack-specific variables, e.g., ``"
"${varname}``. You can use this to insert environment variables in your Spack "
"configuration."
msgstr ""

# 0d9efeb187d34ecc8cf9b5fd2566d847
#: ../spack/lib/spack/docs/configuration.rst:422
msgid "User home directories"
msgstr ""

# a296ba89063348358e941a856d1d7587
#: ../spack/lib/spack/docs/configuration.rst:424
msgid ""
"Spack performs Unix-style tilde expansion on paths in configuration files. "
"This means that tilde (``~``) will expand to the current user's home "
"directory, and ``~user`` will expand to a specified user's home directory. "
"The ``~`` must appear at the beginning of the path, or Spack will not expand "
"it."
msgstr ""

# a460bf66902545fba46273724dcaa621
#: ../spack/lib/spack/docs/configuration.rst:432
msgid "Seeing Spack's Configuration"
msgstr ""

# 685a5d2eddce41ebbe2e7931fb7e399c
#: ../spack/lib/spack/docs/configuration.rst:434
msgid ""
"With so many scopes overriding each other, it can sometimes be difficult to "
"understand what Spack's final configuration looks like."
msgstr ""

# 2fb99195cc3f43348b6e062fc170f989
#: ../spack/lib/spack/docs/configuration.rst:437
msgid ""
"Spack provides two useful ways to view the final \"merged\" version of any "
"configuration file: ``spack config get`` and ``spack config blame``."
msgstr ""

# 422e685c3cf3499cad779ea0ace25ee7
#: ../spack/lib/spack/docs/configuration.rst:444
msgid "``spack config get``"
msgstr ""

# 4235cfc24f98426a99e8dda3d333c5e7
#: ../spack/lib/spack/docs/configuration.rst:446
msgid ""
"``spack config get`` shows a fully merged configuration file, taking into "
"account all scopes. For example, to see the fully merged ``config.yaml``, "
"you can type:"
msgstr ""

# f36aa3ea3b9547b796cf9481ed4dd3e8
#: ../spack/lib/spack/docs/configuration.rst:475
msgid "Likewise, this will show the fully merged ``packages.yaml``:"
msgstr ""

# ae59c7ac6a6b4e1baddde4074dc240c5
#: ../spack/lib/spack/docs/configuration.rst:481
msgid ""
"You can use this in conjunction with the ``-C`` / ``--config-scope`` "
"argument to see how your scope will affect Spack's configuration:"
msgstr ""

# 17f126c4f10b4dc6b666c38e9d1b5e2c
#: ../spack/lib/spack/docs/configuration.rst:493
msgid "``spack config blame``"
msgstr ""

# ac17f590e337442e806a54c50e8b474a
#: ../spack/lib/spack/docs/configuration.rst:495
msgid ""
"``spack config blame`` functions much like ``spack config get``, but it "
"shows exactly which configuration file each preference came from. If you do "
"not know why Spack is behaving a certain way, this can help you track down "
"the problem:"
msgstr ""

# fa31efa590924d3aab9998de209c1615
#: ../spack/lib/spack/docs/configuration.rst:526
msgid ""
"You can see above that the ``build_jobs`` and ``debug`` settings are built "
"in and are not overridden by a configuration file. The ``verify_ssl`` "
"setting comes from the ``--insceure`` option on the command line. ``dirty`` "
"and ``install_tree`` come from the custom scopes ``./my-scope`` and ``./my-"
"scope-2``, and all other configuration options come from the default "
"configuration files that ship with Spack."
msgstr ""

# f430a02a6fa444d3bb518496f6e3ae50
#: ../spack/lib/spack/docs/contribution_guide.rst:10
msgid "Contribution Guide"
msgstr ""

# 9c199c16b63144678b6854a2f0837cb2
#: ../spack/lib/spack/docs/contribution_guide.rst:12
msgid ""
"This guide is intended for developers or administrators who want to "
"contribute a new package, feature, or bugfix to Spack. It assumes that you "
"have at least some familiarity with Git VCS and Github. The guide will show "
"a few examples of contributing workflows and discuss the granularity of pull-"
"requests (PRs). It will also discuss the tests your PR must pass in order to "
"be accepted into Spack."
msgstr ""

# a1ff37ac6c264e719df599a9df0a84af
#: ../spack/lib/spack/docs/contribution_guide.rst:19
msgid ""
"First, what is a PR? Quoting `Bitbucket's tutorials <https://www.atlassian."
"com/git/tutorials/making-a-pull-request/>`_:"
msgstr ""

# 6b357c7ade6844d38cb0508e834e3626
#: ../spack/lib/spack/docs/contribution_guide.rst:21
msgid ""
"Pull requests are a mechanism for a developer to notify team members that "
"they have **completed a feature**. The pull request is more than just a "
"notification—it’s a dedicated forum for discussing the proposed feature."
msgstr ""

# d419696c2c95415d9ba1ba8e7d431dad
#: ../spack/lib/spack/docs/contribution_guide.rst:25
msgid ""
"Important is **completed feature**. The changes one proposes in a PR should "
"correspond to one feature/bugfix/extension/etc. One can create PRs with "
"changes relevant to different ideas, however reviewing such PRs becomes "
"tedious and error prone. If possible, try to follow the **one-PR-one-package/"
"feature** rule."
msgstr ""

# 318894737edb4dcfbe98491206af0c29
#: ../spack/lib/spack/docs/contribution_guide.rst:30
msgid ""
"Spack uses a rough approximation of the `Git Flow <http://nvie.com/posts/a-"
"successful-git-branching-model/>`_ branching model. The develop branch "
"contains the latest contributions, and master is always tagged and points to "
"the latest stable release. Therefore, when you send your request, make "
"``develop`` the destination branch on the `Spack repository <https://github."
"com/spack/spack>`_."
msgstr ""

# 0707a03a59e14994a6217ecce5d38829
#: ../spack/lib/spack/docs/contribution_guide.rst:38
msgid "Continuous Integration"
msgstr ""

# 21483af538d744a6a53af5a04a622144
#: ../spack/lib/spack/docs/contribution_guide.rst:40
msgid ""
"Spack uses `Travis CI <https://travis-ci.org/spack/spack>`_ for Continuous "
"Integration testing. This means that every time you submit a pull request, a "
"series of tests will be run to make sure you didn't accidentally introduce "
"any bugs into Spack. **Your PR will not be accepted until it passes all of "
"these tests.** While you can certainly wait for the results of these tests "
"after submitting a PR, we recommend that you run them locally to speed up "
"the review process."
msgstr ""

# 64f846806fdb4ea6a026ade523bb7b3e
#: ../spack/lib/spack/docs/contribution_guide.rst:49
msgid ""
"Oftentimes, Travis will fail for reasons other than a problem with your PR. "
"For example, apt-get, pip, or homebrew will fail to download one of the "
"dependencies for the test suite, or a transient bug will cause the unit "
"tests to timeout. If Travis fails, click the \"Details\" link and click on "
"the test(s) that is failing. If it doesn't look like it is failing for "
"reasons related to your PR, you have two options. If you have write "
"permissions for the Spack repository, you should see a \"Restart job\" "
"button on the right-hand side. If not, you can close and reopen your PR to "
"rerun all of the tests. If the same test keeps failing, there may be a "
"problem with your PR. If you notice that every recent PR is failing with the "
"same error message, it may be that Travis is down or one of Spack's "
"dependencies put out a new release that is causing problems. If this is the "
"case, please file an issue."
msgstr ""

# 43f257b103e140fb806b8a61e8d79ca2
#: ../spack/lib/spack/docs/contribution_guide.rst:63
msgid ""
"If you take a look in ``$SPACK_ROOT/.travis.yml``, you'll notice that we "
"test against Python 2.6, 2.7, and 3.4-3.7 on both macOS and Linux. We "
"currently perform 3 types of tests:"
msgstr ""

# 9f6f47e646194b5392278020ea00d55f
#: ../spack/lib/spack/docs/contribution_guide.rst:69
msgid "Unit Tests"
msgstr ""

# 0be6e8518027493e852c7999e223f6ee
#: ../spack/lib/spack/docs/contribution_guide.rst:71
msgid ""
"Unit tests ensure that core Spack features like fetching or spec resolution "
"are working as expected. If your PR only adds new packages or modifies "
"existing ones, there's very little chance that your changes could cause the "
"unit tests to fail. However, if you make changes to Spack's core libraries, "
"you should run the unit tests to make sure you didn't break anything."
msgstr ""

# 5974f9de1c9a45cdbb33f32ee5bb2331
#: ../spack/lib/spack/docs/contribution_guide.rst:77
msgid ""
"Since they test things like fetching from VCS repos, the unit tests require "
"`git <https://git-scm.com/>`_, `mercurial <https://www.mercurial-scm.org/"
">`_, and `subversion <https://subversion.apache.org/>`_ to run. Make sure "
"these are installed on your system and can be found in your ``PATH``. All of "
"these can be installed with Spack or with your system package manager."
msgstr ""

# 1068bcbbac3b4e0f97ab9c59d1541c35
#: ../spack/lib/spack/docs/contribution_guide.rst:83
msgid "To run *all* of the unit tests, use:"
msgstr ""

# 2020b8133c3347f8a1809fd490d1a83c
#: ../spack/lib/spack/docs/contribution_guide.rst:89
msgid ""
"These tests may take several minutes to complete. If you know you are only "
"modifying a single Spack feature, you can run a single unit test at a time:"
msgstr ""

# 0719ae6ff19846c48be633f9613cdb92
#: ../spack/lib/spack/docs/contribution_guide.rst:96
msgid ""
"This allows you to develop iteratively: make a change, test that change, "
"make another change, test that change, etc. To get a list of all available "
"unit tests, run:"
msgstr ""

# be90b5ca5cde44709fa8292fec38a339
#: ../spack/lib/spack/docs/contribution_guide.rst:102
msgid ""
"A more detailed list of available unit tests can be found by running ``spack "
"test --long-list``."
msgstr ""

# 266f89ebf7bd4c29b4d1c4a25c59f042
#: ../spack/lib/spack/docs/contribution_guide.rst:105
msgid ""
"By default, ``pytest`` captures the output of all unit tests. If you add "
"print statements to a unit test and want to see the output, simply run:"
msgstr ""

# 3260f786548843908d4cfff45540c100
#: ../spack/lib/spack/docs/contribution_guide.rst:112
msgid ""
"Unit tests are crucial to making sure bugs aren't introduced into Spack. If "
"you are modifying core Spack libraries or adding new functionality, please "
"consider adding new unit tests or strengthening existing tests."
msgstr ""

# eb659787c24849c6b7156b8b0c5ed9d7
#: ../spack/lib/spack/docs/contribution_guide.rst:118
msgid ""
"There is also a ``run-unit-tests`` script in ``share/spack/qa`` that runs "
"the unit tests. Afterwards, it reports back to Codecov with the percentage "
"of Spack that is covered by unit tests. This script is designed for Travis "
"CI. If you want to run the unit tests yourself, we suggest you use ``spack "
"test``."
msgstr ""

# 044bf564afd84d5fbe5457af3254a57a
#: ../spack/lib/spack/docs/contribution_guide.rst:126
msgid "Flake8 Tests"
msgstr ""

# a1e30f21ee05425c8f13fd9beab02487
#: ../spack/lib/spack/docs/contribution_guide.rst:128
msgid ""
"Spack uses `Flake8 <http://flake8.pycqa.org/en/latest/>`_ to test for `PEP 8 "
"<https://www.python.org/dev/peps/pep-0008/>`_ conformance. PEP 8 is a series "
"of style guides for Python that provide suggestions for everything from "
"variable naming to indentation. In order to limit the number of PRs that "
"were mostly style changes, we decided to enforce PEP 8 conformance. Your PR "
"needs to comply with PEP 8 in order to be accepted."
msgstr ""

# 86cafd99e294400da4ec1a6d40f93a47
#: ../spack/lib/spack/docs/contribution_guide.rst:135
msgid ""
"Testing for PEP 8 compliance is easy. Simply run the ``spack flake8`` "
"command:"
msgstr ""

# 2238a3de585f43f9a23026ef00140f9e
#: ../spack/lib/spack/docs/contribution_guide.rst:142
msgid ""
"``spack flake8`` has a couple advantages over running ``flake8`` by hand:"
msgstr ""

# d8fc18e4ffb34ffba0cf58ea12a15d56
#: ../spack/lib/spack/docs/contribution_guide.rst:144
msgid ""
"It only tests files that you have modified since branching off of "
"``develop``."
msgstr ""

# 46dea1d3a816450ea0d0e7e8ebe99e6f
#: ../spack/lib/spack/docs/contribution_guide.rst:147
msgid "It works regardless of what directory you are in."
msgstr ""

# 3580c28731f346b2b5f3834bca972eb8
#: ../spack/lib/spack/docs/contribution_guide.rst:149
msgid ""
"It automatically adds approved exemptions from the ``flake8`` checks. For "
"example, URLs are often longer than 80 characters, so we exempt them from "
"line length checks. We also exempt lines that start with \"homepage\", \"url"
"\", \"version\", \"variant\", \"depends_on\", and \"extends\" in ``package."
"py`` files."
msgstr ""

# cfe9afd3ba3e481ea256713ffaed1361
#: ../spack/lib/spack/docs/contribution_guide.rst:155
msgid ""
"More approved flake8 exemptions can be found `here <https://github.com/spack/"
"spack/blob/develop/.flake8>`_."
msgstr ""

# f5a6415b434946e6866b3ebe1245f98e
#: ../spack/lib/spack/docs/contribution_guide.rst:158
msgid "If all is well, you'll see something like this:"
msgstr ""

# 275147e18f5048d7865e139dc59ad164
#: ../spack/lib/spack/docs/contribution_guide.rst:175
msgid "However, if you aren't compliant with PEP 8, flake8 will complain:"
msgstr ""

# dea9ab2db77449168747a2e1c5e771bb
#: ../spack/lib/spack/docs/contribution_guide.rst:184
msgid ""
"Most of the error messages are straightforward, but if you don't understand "
"what they mean, just ask questions about them when you submit your PR. The "
"line numbers will change if you add or delete lines, so simply run ``spack "
"flake8`` again to update them."
msgstr ""

# 4b7ba518ef0348baa8eaffd6d33caf5d
#: ../spack/lib/spack/docs/contribution_guide.rst:191
msgid ""
"Try fixing flake8 errors in reverse order. This eliminates the need for "
"multiple runs of ``spack flake8`` just to re-compute line numbers and makes "
"it much easier to fix errors directly off of the Travis output."
msgstr ""

# 34f34828474d468c8e840ac4cfbce86b
#: ../spack/lib/spack/docs/contribution_guide.rst:197
msgid ""
"Flake8 and ``pep8-naming`` require a number of dependencies in order to "
"run.  If you installed ``py-flake8`` and ``py-pep8-naming``, the easiest way "
"to ensure the right packages are on your ``PYTHONPATH`` is to run::"
msgstr ""

# b413cce1a26847459f573011e6add194
# e6daee61206f40a18eb802f99f1123d3
#: ../spack/lib/spack/docs/contribution_guide.rst:205
#: ../spack/lib/spack/docs/contribution_guide.rst:249
msgid ""
"so that all of the dependencies are symlinked to a central location. If you "
"see an error message like:"
msgstr ""

# 9e2d4e93811f40cbb27c59f4cfef99ac
#: ../spack/lib/spack/docs/contribution_guide.rst:215
msgid "that means Flake8 couldn't find setuptools in your ``PYTHONPATH``."
msgstr ""

# a73f9e91971a403ea34375dd35f09cae
#: ../spack/lib/spack/docs/contribution_guide.rst:219
msgid "Documentation Tests"
msgstr ""

# 7e5a860f88394b6ea32afe85bed0a448
#: ../spack/lib/spack/docs/contribution_guide.rst:221
msgid ""
"Spack uses `Sphinx <http://www.sphinx-doc.org/en/stable/>`_ to build its "
"documentation. In order to prevent things like broken links and missing "
"imports, we added documentation tests that build the documentation and fail "
"if there are any warning or error messages."
msgstr ""

# 3167ae6f6a1e4e38b284195fb5a54146
#: ../spack/lib/spack/docs/contribution_guide.rst:226
msgid ""
"Building the documentation requires several dependencies, all of which can "
"be installed with Spack:"
msgstr ""

# 0e5cdba0a0e04d4cbbb114d8a9bdf7de
#: ../spack/lib/spack/docs/contribution_guide.rst:229
msgid "sphinx"
msgstr ""

# 73642bb509fe42ecaef52f0b1ca5e46e
#: ../spack/lib/spack/docs/contribution_guide.rst:230
msgid "sphinxcontrib-programoutput"
msgstr ""

# f36c405aaa1e45fb911626253f439188
#: ../spack/lib/spack/docs/contribution_guide.rst:231
msgid "sphinx-rtd-theme"
msgstr ""

# 78845515eb0441b197db4ef087e5ba31
#: ../spack/lib/spack/docs/contribution_guide.rst:232
msgid "graphviz"
msgstr ""

# b3d65e5718e34dc38086d1fb3f6e8ad7
#: ../spack/lib/spack/docs/contribution_guide.rst:233
msgid "git"
msgstr ""

# 08836c1c1e8c4cbe884299317e3beffb
#: ../spack/lib/spack/docs/contribution_guide.rst:235
msgid "subversion"
msgstr ""

# bb677dc4ee4d43b19d8e0d5f4e90105e
#: ../spack/lib/spack/docs/contribution_guide.rst:239
msgid ""
"Sphinx has `several required dependencies <https://github.com/spack/spack/"
"blob/develop/var/spack/repos/builtin/packages/py-sphinx/package.py>`_. If "
"you installed ``py-sphinx`` with Spack, make sure to add all of these "
"dependencies to your ``PYTHONPATH``. The easiest way to do this is to run:"
msgstr ""

# 5c7e2711f073478991451530e0485022
#: ../spack/lib/spack/docs/contribution_guide.rst:258
msgid ""
"that means Sphinx couldn't find ``py-sphinxcontrib-programoutput`` in your "
"``PYTHONPATH``."
msgstr ""

# 8b09abf5645b4dc6aeb3a28726a55b9c
#: ../spack/lib/spack/docs/contribution_guide.rst:261
msgid ""
"Once all of the dependencies are installed, you can try building the "
"documentation:"
msgstr ""

# bb07e8ac9b7540289536c3a69d8426d8
#: ../spack/lib/spack/docs/contribution_guide.rst:269
msgid ""
"If you see any warning or error messages, you will have to correct those "
"before your PR is accepted."
msgstr ""

# 7f8956ba194544299079e3a403501492
#: ../spack/lib/spack/docs/contribution_guide.rst:274
msgid ""
"There is also a ``run-doc-tests`` script in ``share/spack/qa``. The only "
"difference between running this script and running ``make`` by hand is that "
"the script will exit immediately if it encounters an error or warning. This "
"is necessary for Travis CI. If you made a lot of documentation changes, it "
"is much quicker to run ``make`` by hand so that you can see all of the "
"warnings at once."
msgstr ""

# 915969f8f2c740d49d43d79d33e4971f
#: ../spack/lib/spack/docs/contribution_guide.rst:281
msgid ""
"If you are editing the documentation, you should obviously be running the "
"documentation tests. But even if you are simply adding a new package, your "
"changes could cause the documentation tests to fail:"
msgstr ""

# c975cfbb5b76421784ec94eebeba1359
#: ../spack/lib/spack/docs/contribution_guide.rst:289
msgid ""
"At first, this error message will mean nothing to you, since you didn't edit "
"that file. Until you look at line 8745 of the file in question:"
msgstr ""

# 21e762c8df8e45f6be85717824a454c7
#: ../spack/lib/spack/docs/contribution_guide.rst:299
msgid ""
"Our documentation includes :ref:`a list of all Spack packages <package-"
"list>`. If you add a new package, its docstring is added to this page. The "
"problem in this case was that the docstring looked like:"
msgstr ""

# e49466425a9e47129061f07286c4f460
#: ../spack/lib/spack/docs/contribution_guide.rst:312
msgid ""
"Docstrings cannot start with a newline character, or else Sphinx will "
"complain. Instead, they should look like:"
msgstr ""

# 3046c5f1608e42b7942686935356a6c5
#: ../spack/lib/spack/docs/contribution_guide.rst:322
msgid ""
"Documentation changes can result in much more obfuscated warning messages. "
"If you don't understand what they mean, feel free to ask when you submit "
"your PR."
msgstr ""

# 3cd2b3fd91c94bd5afab2aa04a08cffa
#: ../spack/lib/spack/docs/contribution_guide.rst:328
msgid "Coverage"
msgstr ""

# d7b3c63b8b9f40e0b7f8c3d1c14b488e
#: ../spack/lib/spack/docs/contribution_guide.rst:330
msgid ""
"Spack uses `Codecov <https://codecov.io/>`_ to generate and report unit test "
"coverage. This helps us tell what percentage of lines of code in Spack are "
"covered by unit tests. Although code covered by unit tests can still contain "
"bugs, it is much less error prone than code that is not covered by unit "
"tests."
msgstr ""

# d540d5d0415d4d0ba019baee05d68a31
#: ../spack/lib/spack/docs/contribution_guide.rst:335
msgid ""
"Codecov provides `browser extensions <https://github.com/codecov/browser-"
"extension>`_ for Google Chrome, Firefox, and Opera. These extensions "
"integrate with GitHub and allow you to see coverage line-by-line when "
"viewing the Spack repository. If you are new to Spack, a great way to get "
"started is to write unit tests to increase coverage!"
msgstr ""

# 8449bcf3ed994f528eb67859b9ab0fce
#: ../spack/lib/spack/docs/contribution_guide.rst:341
msgid ""
"Unlike with Travis, Codecov tests are not required to pass in order for your "
"PR to be merged. If you modify core Spack libraries, we would greatly "
"appreciate unit tests that cover these changed lines. Otherwise, we have no "
"way of knowing whether or not your changes introduce a bug. If you make "
"substantial changes to the core, we may request unit tests to increase "
"coverage."
msgstr ""

# 30128e7de2034ef3b3411944b1cd042d
#: ../spack/lib/spack/docs/contribution_guide.rst:349
msgid ""
"If the only files you modified are package files, we do not care about "
"coverage on your PR. You may notice that the Codecov tests fail even though "
"you didn't modify any core files. This means that Spack's overall coverage "
"has increased since you branched off of develop. This is a good thing! If "
"you really want to get the Codecov tests to pass, you can rebase off of the "
"latest develop, but again, this is not required."
msgstr ""

# c10458d292cf4e909321a4f91a275915
#: ../spack/lib/spack/docs/contribution_guide.rst:359
msgid "Git Workflows"
msgstr ""

# 8e7fc97a4a4643dea5d2757eaaf79a49
#: ../spack/lib/spack/docs/contribution_guide.rst:361
msgid ""
"Spack is still in the beta stages of development. Most of our users run off "
"of the develop branch, and fixes and new features are constantly being "
"merged. So how do you keep up-to-date with upstream while maintaining your "
"own local differences and contributing PRs to Spack?"
msgstr ""

# e4bc066727d94fd594fe723c59ce2988
#: ../spack/lib/spack/docs/contribution_guide.rst:368
msgid "Branching"
msgstr ""

# 1aff1657fb3b459aa42a194937ab8b70
#: ../spack/lib/spack/docs/contribution_guide.rst:370
msgid ""
"The easiest way to contribute a pull request is to make all of your changes "
"on new branches. Make sure your ``develop`` is up-to-date and create a new "
"branch off of it:"
msgstr ""

# b6132b0936b54dd1ac89f223d0f9a344
#: ../spack/lib/spack/docs/contribution_guide.rst:381
msgid ""
"Here we assume that the local ``develop`` branch tracks the upstream develop "
"branch of Spack. This is not a requirement and you could also do the same "
"with remote branches. But for some it is more convenient to have a local "
"branch that tracks upstream."
msgstr ""

# facc3ec1e49846dea2e9cdb90112c38d
#: ../spack/lib/spack/docs/contribution_guide.rst:386
msgid ""
"Normally we prefer that commits pertaining to a package ``<package-name>`` "
"have a message ``<package-name>: descriptive message``. It is important to "
"add descriptive message so that others, who might be looking at your changes "
"later (in a year or maybe two), would understand the rationale behind them."
msgstr ""

# 1be1a534d726441dacbbc0b174ede87b
#: ../spack/lib/spack/docs/contribution_guide.rst:391
msgid ""
"Now, you can make your changes while keeping the ``develop`` branch pure. "
"Edit a few files and commit them by running:"
msgstr ""

# 56ea6e88cfea4d4fb642f2f633e0da13
#: ../spack/lib/spack/docs/contribution_guide.rst:399
msgid "Next, push it to your remote fork and create a PR:"
msgstr ""

# 937f9d6e6a244f1abadc48993d63a400
#: ../spack/lib/spack/docs/contribution_guide.rst:405
msgid ""
"GitHub provides a `tutorial <https://help.github.com/articles/about-pull-"
"requests/>`_ on how to file a pull request. When you send the request, make "
"``develop`` the destination branch."
msgstr ""

# fcfe03a5371240c0b38462986b2d0636
#: ../spack/lib/spack/docs/contribution_guide.rst:409
msgid ""
"If you need this change immediately and don't have time to wait for your PR "
"to be merged, you can always work on this branch. But if you have multiple "
"PRs, another option is to maintain a Frankenstein branch that combines all "
"of your other branches:"
msgstr ""

# ea7627daee3041c6b3c2b1681d5eec9f
#: ../spack/lib/spack/docs/contribution_guide.rst:421
msgid ""
"This can be done with each new PR you submit. Just make sure to keep this "
"local branch up-to-date with upstream ``develop`` too."
msgstr ""

# 4580d988453d4793a35b489bcc348f87
#: ../spack/lib/spack/docs/contribution_guide.rst:426
msgid "Cherry-Picking"
msgstr ""

# 277dcdef978e4e8db854c4acbe8e5011
#: ../spack/lib/spack/docs/contribution_guide.rst:428
msgid ""
"What if you made some changes to your local modified develop branch and "
"already committed them, but later decided to contribute them to Spack? You "
"can use cherry-picking to create a new branch with only these commits."
msgstr ""

# 62a7ffb5edb34195b42f2024b80b26dd
#: ../spack/lib/spack/docs/contribution_guide.rst:432
msgid "First, check out your local modified develop branch:"
msgstr ""

# dac350254c5f46eea2aa7f0f581be06b
#: ../spack/lib/spack/docs/contribution_guide.rst:438
msgid "Now, get the hashes of the commits you want from the output of:"
msgstr ""

# a8d4905c26fa4520b8f5b1ae370aa5c7
#: ../spack/lib/spack/docs/contribution_guide.rst:444
msgid ""
"Next, create a new branch off of upstream ``develop`` and copy the commits "
"that you want in your PR:"
msgstr ""

# 768a38cb667a4d32885a48de5ca2f459
#: ../spack/lib/spack/docs/contribution_guide.rst:456
msgid ""
"Now you can create a PR from the web-interface of GitHub. The net result is "
"as follows:"
msgstr ""

# 3fc7b11b1b5842a2a18ea9ea053378bd
#: ../spack/lib/spack/docs/contribution_guide.rst:459
msgid "You patched your local version of Spack and can use it further."
msgstr ""

# 12fecb3c9a2b46d39a1dbf45a81844d3
#: ../spack/lib/spack/docs/contribution_guide.rst:460
msgid ""
"You \"cherry-picked\" these changes in a stand-alone branch and submitted it "
"as a PR upstream."
msgstr ""

# 7fb943bd492940e982bc9ae199ed5c6a
#: ../spack/lib/spack/docs/contribution_guide.rst:463
msgid ""
"Should you have several commits to contribute, you could follow the same "
"procedure by getting hashes of all of them and cherry-picking to the PR "
"branch."
msgstr ""

# da7ee99a8fdb480fab2f677a1ab471bd
#: ../spack/lib/spack/docs/contribution_guide.rst:468
msgid ""
"It is important that whenever you change something that might be of "
"importance upstream, create a pull request as soon as possible. Do not wait "
"for weeks/months to do this, because:"
msgstr ""

# 94ea8f341a464a0588dc637c2cacc449
#: ../spack/lib/spack/docs/contribution_guide.rst:472
msgid "you might forget why you modified certain files"
msgstr ""

# 99ee9c8893b044baba964cd8dc13219d
#: ../spack/lib/spack/docs/contribution_guide.rst:473
msgid ""
"it could get difficult to isolate this change into a stand-alone clean PR."
msgstr ""

# 89261b3d860d4a08bfec5c64e81730ca
#: ../spack/lib/spack/docs/contribution_guide.rst:477
msgid "Rebasing"
msgstr ""

# 47901a19209c4cc5b92b1357d4b31420
#: ../spack/lib/spack/docs/contribution_guide.rst:479
msgid ""
"Other developers are constantly making contributions to Spack, possibly on "
"the same files that your PR changed. If their PR is merged before yours, it "
"can create a merge conflict. This means that your PR can no longer be "
"automatically merged without a chance of breaking your changes. In this "
"case, you will be asked to rebase on top of the latest upstream ``develop``."
msgstr ""

# 6b105e7c75104e8aae5c55f9fe1ea055
#: ../spack/lib/spack/docs/contribution_guide.rst:485
msgid "First, make sure your develop branch is up-to-date:"
msgstr ""

# 4df01dd108294a4eba6af10c228df5d3
#: ../spack/lib/spack/docs/contribution_guide.rst:492
msgid ""
"Now, we need to switch to the branch you submitted for your PR and rebase it "
"on top of develop:"
msgstr ""

# aec90008c2f74a048dc933cf98cc8d7d
#: ../spack/lib/spack/docs/contribution_guide.rst:500
msgid ""
"Git will likely ask you to resolve conflicts. Edit the file that it says "
"can't be merged automatically and resolve the conflict. Then, run:"
msgstr ""

# 192de6dcdabe4a98a5ddea7d8f63f250
#: ../spack/lib/spack/docs/contribution_guide.rst:508
msgid ""
"You may have to repeat this process multiple times until all conflicts are "
"resolved. Once this is done, simply force push your rebased branch to your "
"remote fork:"
msgstr ""

# 17c07d17e6304e788c2d8d42e5035b62
#: ../spack/lib/spack/docs/contribution_guide.rst:517
msgid "Rebasing with cherry-pick"
msgstr ""

# c0eb5e338a624bcd8f658bc1495c47a7
#: ../spack/lib/spack/docs/contribution_guide.rst:519
msgid ""
"You can also perform a rebase using ``cherry-pick``. First, create a "
"temporary backup branch:"
msgstr ""

# c043dacacbd7425c8c04396c79d3beb3
#: ../spack/lib/spack/docs/contribution_guide.rst:527
msgid ""
"If anything goes wrong, you can always go back to your ``tmp`` branch. Now, "
"look at the logs and save the hashes of any commits you would like to keep:"
msgstr ""

# 527bd0477f20456b80f6b8f3a256186a
#: ../spack/lib/spack/docs/contribution_guide.rst:534
msgid ""
"Next, go back to the original branch and reset it to ``develop``. Before "
"doing so, make sure that you local ``develop`` branch is up-to-date with "
"upstream:"
msgstr ""

# 0e41c41f88354d7d8975326634bb8b21
#: ../spack/lib/spack/docs/contribution_guide.rst:545
msgid "Now you can cherry-pick relevant commits:"
msgstr ""

# b1e604ae89b24da9ae8abee329291426
#: ../spack/lib/spack/docs/contribution_guide.rst:552
msgid "Push the modified branch to your fork:"
msgstr ""

# 683bb3219be444738c745057cab21ace
#: ../spack/lib/spack/docs/contribution_guide.rst:558
msgid "If everything looks good, delete the backup branch:"
msgstr ""

# 8ef54f32d70e44c191bf6ec2572b2a34
#: ../spack/lib/spack/docs/contribution_guide.rst:566
msgid "Re-writing History"
msgstr ""

# 2510346b7f8c495da670fb8531f73972
#: ../spack/lib/spack/docs/contribution_guide.rst:568
msgid ""
"Sometimes you may end up on a branch that has diverged so much from develop "
"that it cannot easily be rebased. If the current commits history is more of "
"an experimental nature and only the net result is important, you may rewrite "
"the history."
msgstr ""

# 3b44601e3765494a887ff44387a8032c
#: ../spack/lib/spack/docs/contribution_guide.rst:573
msgid ""
"First, merge upstream ``develop`` and reset you branch to it. On the branch "
"in question, run:"
msgstr ""

# fad6d45d7bc34b82a18357d4049abd5b
#: ../spack/lib/spack/docs/contribution_guide.rst:581
msgid ""
"At this point your branch will point to the same commit as develop and "
"thereby the two are indistinguishable. However, all the files that were "
"previously modified will stay as such. In other words, you do not lose the "
"changes you made. Changes can be reviewed by looking at diffs:"
msgstr ""

# 4e0a7c62a32545099ee17f3e67b465fd
#: ../spack/lib/spack/docs/contribution_guide.rst:591
msgid ""
"The next step is to rewrite the history by adding files and creating commits:"
msgstr ""

# 1b31e7d10d614f83945bc2e5045e600a
#: ../spack/lib/spack/docs/contribution_guide.rst:598
msgid ""
"After all changed files are committed, you can push the branch to your fork "
"and create a PR:"
msgstr ""

# e30582a797f14809b6c7ca2e05566255
#: ../spack/lib/spack/docs/developer_guide.rst:10
msgid "Developer Guide"
msgstr ""

# 4b488f652e4343769a0b03115b005264
#: ../spack/lib/spack/docs/developer_guide.rst:12
msgid ""
"This guide is intended for people who want to work on Spack itself. If you "
"just want to develop packages, see the :ref:`packaging-guide`."
msgstr ""

# 1a40279130454b4895e60f2506543844
#: ../spack/lib/spack/docs/developer_guide.rst:15
msgid ""
"It is assumed that you've read the :ref:`basic-usage` and :ref:`packaging-"
"guide` sections, and that you're familiar with the concepts discussed "
"there.  If you're not, we recommend reading those first."
msgstr ""

# #-#-#-#-#  developer_guide.pot (Spack 0.12)  #-#-#-#-#
# b49fd96e09c54b64ba0a7169d3ddbd03
# #-#-#-#-#  docker_for_developers.pot (Spack 0.12)  #-#-#-#-#
# fe1ae493f4da4cafa524eb97be5af746
#: ../spack/lib/spack/docs/developer_guide.rst:22
#: ../spack/lib/spack/docs/docker_for_developers.rst:18
msgid "Overview"
msgstr ""

# 58dd3c6f96e34155b6442ca139ba9497
#: ../spack/lib/spack/docs/developer_guide.rst:24
msgid "Spack is designed with three separate roles in mind:"
msgstr ""

# f3e1d8e6d7824250a94aeeff47062b9d
#: ../spack/lib/spack/docs/developer_guide.rst:26
msgid ""
"**Users**, who need to install software *without* knowing all the details "
"about how it is built."
msgstr ""

# 6f0b357f5d8f4409baa0a6901bbfb0f9
#: ../spack/lib/spack/docs/developer_guide.rst:28
msgid ""
"**Packagers** who know how a particular software package is built and encode "
"this information in package files."
msgstr ""

# 3012e59287dc4cf7b13a2c1eeb9419d6
#: ../spack/lib/spack/docs/developer_guide.rst:30
msgid ""
"**Developers** who work on Spack, add new features, and try to make the jobs "
"of packagers and users easier."
msgstr ""

# a80813db8e264a5ab26947335c057a80
#: ../spack/lib/spack/docs/developer_guide.rst:33
msgid ""
"Users could be end users installing software in their home directory, or "
"administrators installing software to a shared directory on a shared "
"machine.  Packagers could be administrators who want to automate software "
"builds, or application developers who want to make their software more "
"accessible to users."
msgstr ""

# 0efd8cd995b2420cacf1557d66550518
#: ../spack/lib/spack/docs/developer_guide.rst:39
msgid ""
"As you might expect, there are many types of users with different levels of "
"sophistication, and Spack is designed to accommodate both simple and complex "
"use cases for packages.  A user who only knows that he needs a certain "
"package should be able to type something simple, like ``spack install "
"<package name>``, and get the package that he wants.  If a user wants to ask "
"for a specific version, use particular compilers, or build several versions "
"with different configurations, then that should be possible with a minimal "
"amount of additional specification."
msgstr ""

# e424acd44b1541719194dc0c60caa25c
#: ../spack/lib/spack/docs/developer_guide.rst:49
msgid "This gets us to the two key concepts in Spack's software design:"
msgstr ""

# #-#-#-#-#  developer_guide.pot (Spack 0.12)  #-#-#-#-#
# ef4bbf5654534fd5a89ee9423843195f
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# 98701984c29c4c5f9f141e01341fc1ec
#: ../spack/lib/spack/docs/developer_guide.rst:51
#: ../spack/lib/spack/docs/packaging_guide.rst:20
msgid "**Specs**: expressions for describing builds of software, and"
msgstr ""

# bdc3b02eff2a4b16834d203fa9ab73f4
#: ../spack/lib/spack/docs/developer_guide.rst:52
msgid "**Packages**: Python modules that build software according to a spec."
msgstr ""

# b953e0f54bec4071a5a6e2c5353364fd
#: ../spack/lib/spack/docs/developer_guide.rst:55
msgid ""
"A package is a template for building particular software, and a spec as a "
"descriptor for one or more instances of that template.  Users express the "
"configuration they want using a spec, and a package turns the spec into a "
"complete build."
msgstr ""

# cf8e2f3724ed47e9949c935900bed136
#: ../spack/lib/spack/docs/developer_guide.rst:60
msgid ""
"The obvious difficulty with this design is that users under-specify what "
"they want.  To build a software package, the package object needs a "
"*complete* specification.  In Spack, if a spec describes only one instance "
"of a package, then we say it is **concrete**.  If a spec could describes "
"many instances, (i.e. it is under-specified in one way or another), then we "
"say it is **abstract**."
msgstr ""

# 62e725b185b54c38a64a167f64fe4a5a
#: ../spack/lib/spack/docs/developer_guide.rst:67
msgid ""
"Spack's job is to take an *abstract* spec from the user, find a *concrete* "
"spec that satisfies the constraints, and hand the task of building the "
"software off to the package object.  The rest of this document describes all "
"the pieces that come together to make that happen."
msgstr ""

# 946a3a617e584687ab480350c6d2d35f
#: ../spack/lib/spack/docs/developer_guide.rst:75
msgid "Directory Structure"
msgstr ""

# bdd21a6b80774406847ec89687e31175
#: ../spack/lib/spack/docs/developer_guide.rst:77
msgid ""
"So that you can familiarize yourself with the project, we'll start with a "
"high level view of Spack's directory structure:"
msgstr ""

# 6922b59ab92548fcb6be8adfd13eb50f
#: ../spack/lib/spack/docs/developer_guide.rst:115
msgid ""
"Spack is designed so that it could live within a `standard UNIX directory "
"hierarchy <http://linux.die.net/man/7/hier>`_, so ``lib``, ``var``, and "
"``opt`` all contain a ``spack`` subdirectory in case Spack is installed "
"alongside other software.  Most of the interesting parts of Spack live in "
"``lib/spack``."
msgstr ""

# 20e5048dabec465abdcaadbfe38bc881
#: ../spack/lib/spack/docs/developer_guide.rst:121
msgid ""
"Spack has *one* directory layout and there is no install process. Most "
"Python programs don't look like this (they use distutils, ``setup.py``, "
"etc.) but we wanted to make Spack *very* easy to use.  The simple layout "
"spares users from the need to install Spack into a Python environment. Many "
"users don't have write access to a Python installation, and installing an "
"entire new instance of Python to bootstrap Spack would be very complicated. "
"Users should not have to install a big, complicated package to use the thing "
"that's supposed to spare them from the details of big, complicated "
"packages.  The end result is that Spack works out of the box: clone it and "
"add ``bin`` to your PATH and you're ready to go."
msgstr ""

# feca20cee90e4f30978a7228c42ebe7e
#: ../spack/lib/spack/docs/developer_guide.rst:134
msgid "Code Structure"
msgstr ""

# 902d866a499b4cbdb3fc91a9c5e03400
#: ../spack/lib/spack/docs/developer_guide.rst:136
msgid ""
"This section gives an overview of the various Python modules in Spack, "
"grouped by functionality."
msgstr ""

# 8991917e968041a6adda43f66d14a1f2
#: ../spack/lib/spack/docs/developer_guide.rst:141
msgid "Package-related modules"
msgstr ""

# dd41b99ee4fc4e838fd5bd4ce44e9afa
#: ../spack/lib/spack/docs/developer_guide.rst:147
msgid ":mod:`spack.package`"
msgstr ""

# 809a531fb9784ff991995bb140bdb8c2
#: ../spack/lib/spack/docs/developer_guide.rst:144
msgid ""
"Contains the :class:`Package <spack.package.Package>` class, which is the "
"superclass for all packages in Spack.  Methods on ``Package`` implement all "
"phases of the :ref:`package lifecycle <package-lifecycle>` and manage the "
"build process."
msgstr ""

# 275236ac981249ce96f2c76393395065
#: ../spack/lib/spack/docs/developer_guide.rst:155
msgid ":mod:`spack.packages`"
msgstr ""

# 2c33b7a8807846c48d884d16bd8d18d3
#: ../spack/lib/spack/docs/developer_guide.rst:150
msgid ""
"Contains all of the packages in Spack and methods for managing them. "
"Functions like :func:`packages.get <spack.packages.get>` and :func:"
"`class_name_for_package_name <packages.class_name_for_package_name>` handle "
"mapping package module names to class names and dynamically instantiating "
"packages by name from module files."
msgstr ""

# a7c8d35165f84bfc8ef62878c5ed6093
#: ../spack/lib/spack/docs/developer_guide.rst:161
msgid ":mod:`spack.relations`"
msgstr ""

# 5b50d54813784cb4a5815d32da7fbe2d
#: ../spack/lib/spack/docs/developer_guide.rst:158
msgid ""
"*Relations* are relationships between packages, like :func:`depends_on "
"<spack.relations.depends_on>` and :func:`provides <spack.relations."
"provides>`.  See :ref:`dependencies` and :ref:`virtual-dependencies`."
msgstr ""

# 7fec51f86c1041bb92b549e9c0959c3c
#: ../spack/lib/spack/docs/developer_guide.rst:166
msgid ":mod:`spack.multimethod`"
msgstr ""

# 28d64804cda34736a8044702010f5e4b
#: ../spack/lib/spack/docs/developer_guide.rst:164
msgid ""
"Implementation of the :func:`@when <spack.multimethod.when>` decorator, "
"which allows :ref:`multimethods <multimethods>` in packages."
msgstr ""

# 58d7c0fcfe60445299610058f50e9296
#: ../spack/lib/spack/docs/developer_guide.rst:170
msgid "Spec-related modules"
msgstr ""

# 6a966a15a60e4291ac64544c759da7e0
#: ../spack/lib/spack/docs/developer_guide.rst:175
msgid ":mod:`spack.spec`"
msgstr ""

# 1accd0a6990245ebb5fc6ac34f142965
#: ../spack/lib/spack/docs/developer_guide.rst:173
msgid ""
"Contains :class:`Spec <spack.spec.Spec>` and :class:`SpecParser <spack.spec."
"SpecParser>`. Also implements most of the logic for normalization and "
"concretization of specs."
msgstr ""

# c3d5e195b2e345c8aa0af1031846637b
#: ../spack/lib/spack/docs/developer_guide.rst:181
msgid ":mod:`spack.parse`"
msgstr ""

# ec0b80fde12b4d71b439a56cc00cccc5
#: ../spack/lib/spack/docs/developer_guide.rst:178
msgid ""
"Contains some base classes for implementing simple recursive descent "
"parsers: :class:`Parser <spack.parse.Parser>` and :class:`Lexer <spack.parse."
"Lexer>`.  Used by :class:`SpecParser <spack.spec.SpecParser>`."
msgstr ""

# 21ee6f2985e546ab9d6676abc1955054
#: ../spack/lib/spack/docs/developer_guide.rst:186
msgid ":mod:`spack.concretize`"
msgstr ""

# 134b013148184a4b85aad92cdc8f7952
#: ../spack/lib/spack/docs/developer_guide.rst:184
msgid ""
"Contains :class:`DefaultConcretizer <spack.concretize.DefaultConcretizer>` "
"implementation, which allows site administrators to change Spack's :ref:"
"`concretization-policies`."
msgstr ""

# 61cc42058ac24b119e63c78860e84d74
#: ../spack/lib/spack/docs/developer_guide.rst:197
msgid ":mod:`spack.version`"
msgstr ""

# 9865ae2d887a4d8f88f0d69cea5ccd16
#: ../spack/lib/spack/docs/developer_guide.rst:189
msgid ""
"Implements a simple :class:`Version <spack.version.Version>` class with "
"simple comparison semantics.  Also implements :class:`VersionRange <spack."
"version.VersionRange>` and :class:`VersionList <spack.version."
"VersionList>`.  All three are comparable with each other and offer union and "
"intersection operations.  Spack uses these classes to compare versions and "
"to manage version constraints on specs.  Comparison semantics are similar to "
"the ``LooseVersion`` class in ``distutils`` and to the way RPM compares "
"version strings."
msgstr ""

# fc0c73b5a4f44ea582f727b5da1f0b7c
#: ../spack/lib/spack/docs/developer_guide.rst:207
msgid ":mod:`spack.compilers`"
msgstr ""

# 6eb88616c6204a0b91cad9cd53814619
#: ../spack/lib/spack/docs/developer_guide.rst:200
msgid ""
"Submodules contains descriptors for all valid compilers in Spack. This is "
"used by the build system to set up the build environment."
msgstr ""

# d2f4d5ac46854360bb4561731b9b158b
#: ../spack/lib/spack/docs/developer_guide.rst:205
msgid ""
"Not yet implemented.  Currently has two compiler descriptions, but compilers "
"aren't fully integrated with the build process yet."
msgstr ""

# 313ef1bdbe634fc4b30491dd2258b3d7
#: ../spack/lib/spack/docs/developer_guide.rst:216
msgid ":mod:`spack.architecture`"
msgstr ""

# 35a4a5f4bf5e4b37a52d2aa35ea3b97f
#: ../spack/lib/spack/docs/developer_guide.rst:210
msgid ""
":func:`architecture.sys_type <spack.architecture.sys_type>` is used to "
"determine the host architecture while building."
msgstr ""

# d62c821eb14444ceadfd38a612af2c91
#: ../spack/lib/spack/docs/developer_guide.rst:215
msgid ""
"Not yet implemented.  Should eventually have architecture descriptions for "
"cross-compiling."
msgstr ""

# 3f7fb91089db4fd7bbfd9fcc425f940e
#: ../spack/lib/spack/docs/developer_guide.rst:220
msgid "Build environment"
msgstr ""

# a8745ddc7eba40799bd206f407f04a36
#: ../spack/lib/spack/docs/developer_guide.rst:223
msgid ":mod:`spack.stage`"
msgstr ""

# b65dcf9c78c04694b7337da62ef46bbe
#: ../spack/lib/spack/docs/developer_guide.rst:223
msgid "Handles creating temporary directories for builds."
msgstr ""

# 239d5a0ea5ab49da954d66d0690b1c55
#: ../spack/lib/spack/docs/developer_guide.rst:227
msgid ":mod:`spack.compilation`"
msgstr ""

# 5bdcca2aada34a109a3851a4b3463128
#: ../spack/lib/spack/docs/developer_guide.rst:226
msgid ""
"This contains utility functions used by the compiler wrapper script, ``cc``."
msgstr ""

# ea7f9bb99d004cb79421685cbe732c08
#: ../spack/lib/spack/docs/developer_guide.rst:232
msgid ":mod:`spack.directory_layout`"
msgstr ""

# bb4da05de84140f5b2d27858b2649427
#: ../spack/lib/spack/docs/developer_guide.rst:230
msgid ""
"Classes that control the way an installation directory is laid out. Create "
"more implementations of this to change the hierarchy and naming scheme in ``"
"$spack_prefix/opt``"
msgstr ""

# 757233db70164c56bda99d9ce30b92f5
#: ../spack/lib/spack/docs/developer_guide.rst:236
msgid "Spack Subcommands"
msgstr ""

# e16b018b60594dd5852647c2c86fa10d
#: ../spack/lib/spack/docs/developer_guide.rst:240
msgid ":mod:`spack.cmd`"
msgstr ""

# 0ea29656700a4f168be6d7975fb4f2cb
#: ../spack/lib/spack/docs/developer_guide.rst:239
msgid ""
"Each module in this package implements a Spack subcommand.  See :ref:"
"`writing commands <writing-commands>` for details."
msgstr ""

# da10c470bdc2406bb5d58bf1bef29217
#: ../spack/lib/spack/docs/developer_guide.rst:248
msgid ":mod:`spack.test`"
msgstr ""

# 61ce5738b3cc498b95f656145c7c5faf
#: ../spack/lib/spack/docs/developer_guide.rst:247
msgid ""
"Implements Spack's test suite.  Add a module and put its name in the test "
"suite in ``__init__.py`` to add more unit tests."
msgstr ""

# 131940c386724c99ad1c800d46a38a39
#: ../spack/lib/spack/docs/developer_guide.rst:252
msgid ":mod:`spack.test.mock_packages`"
msgstr ""

# a1d620c4816749b282cbbdf96fee8ab2
#: ../spack/lib/spack/docs/developer_guide.rst:251
msgid ""
"This is a fake package hierarchy used to mock up packages for Spack's test "
"suite."
msgstr ""

# e578bd5efc0c43bca97e7ec9843384d2
#: ../spack/lib/spack/docs/developer_guide.rst:256
msgid "Other Modules"
msgstr ""

# b86e6a25b7074024971d8e6d4acecb53
#: ../spack/lib/spack/docs/developer_guide.rst:260
msgid ":mod:`spack.url`"
msgstr ""

# d6f7b3a3a6d647beb71c43c51c41066b
#: ../spack/lib/spack/docs/developer_guide.rst:259
msgid ""
"URL parsing, for deducing names and versions of packages from tarball URLs."
msgstr ""

# d66bba66741a4c92b2ba5b67f717e04e
#: ../spack/lib/spack/docs/developer_guide.rst:264
msgid ":mod:`spack.error`"
msgstr ""

# c2c1c7a68cd84374963fc79dce3d695d
#: ../spack/lib/spack/docs/developer_guide.rst:263
msgid ""
":class:`SpackError <spack.error.SpackError>`, the base class for Spack's "
"exception hierarchy."
msgstr ""

# 9402e99d37f74d4faa67569b16377078
#: ../spack/lib/spack/docs/developer_guide.rst:268
msgid ":mod:`llnl.util.tty`"
msgstr ""

# 013d52bb31ec496a8d5c0f43207c07ff
#: ../spack/lib/spack/docs/developer_guide.rst:267
msgid ""
"Basic output functions for all of the messages Spack writes to the terminal."
msgstr ""

# e8de4ced31054d9981d83c63592628bd
#: ../spack/lib/spack/docs/developer_guide.rst:271
msgid ":mod:`llnl.util.tty.color`"
msgstr ""

# 0e2d7a6f838a4e1ba25e10f27a64edb1
#: ../spack/lib/spack/docs/developer_guide.rst:271
msgid "Implements a color formatting syntax used by ``spack.tty``."
msgstr ""

# 8ebd005c67a94a56bd14a179d3cb0f85
#: ../spack/lib/spack/docs/developer_guide.rst:275
msgid ":mod:`llnl.util`"
msgstr ""

# 10f3201d3b1e4f329ca1da52ece2fb8e
#: ../spack/lib/spack/docs/developer_guide.rst:274
msgid "In this package are a number of utility modules for the rest of Spack."
msgstr ""

# #-#-#-#-#  developer_guide.pot (Spack 0.12)  #-#-#-#-#
# 2f991080cba847a0a1d9a0720c986de2
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# 5c5e5a5d3c3d4d55b88d0480c2073e9e
#: ../spack/lib/spack/docs/developer_guide.rst:279
#: ../spack/lib/spack/docs/packaging_guide.rst:3111
msgid "Spec objects"
msgstr ""

# e7fbed3e064242f9ab939814565a3c77
#: ../spack/lib/spack/docs/developer_guide.rst:283
msgid "Package objects"
msgstr ""

# b43ab9e470e34ea9abe46c246687e551
#: ../spack/lib/spack/docs/developer_guide.rst:285
msgid "Most spack commands look something like this:"
msgstr ""

# 625bb7e3461f4600a00cc549adf663eb
#: ../spack/lib/spack/docs/developer_guide.rst:287
msgid "Parse an abstract spec (or specs) from the command line,"
msgstr ""

# c8557c2d633a42e9a6c6a0fd72c9e4cb
#: ../spack/lib/spack/docs/developer_guide.rst:288
msgid "*Normalize* the spec based on information in package files,"
msgstr ""

# bb80e522f0cd4987943aefc305c3bf8b
#: ../spack/lib/spack/docs/developer_guide.rst:289
msgid "*Concretize* the spec according to some customizable policies,"
msgstr ""

# 820f87edcfd3429e84dfd3bad8f3da70
#: ../spack/lib/spack/docs/developer_guide.rst:290
msgid "Instantiate a package based on the spec, and"
msgstr ""

# 1a98985ab0e34819a17954c2cc8020c0
#: ../spack/lib/spack/docs/developer_guide.rst:291
msgid "Call methods (e.g., ``install()``) on the package object."
msgstr ""

# b0fbe86bbc054a739ae3834b7d4189f0
#: ../spack/lib/spack/docs/developer_guide.rst:293
msgid "The information in Package files is used at all stages in this process."
msgstr ""

# 95dedd7cfb514041a04330aa49459005
#: ../spack/lib/spack/docs/developer_guide.rst:296
msgid "Conceptually, packages are overloaded.  They contain:"
msgstr ""

# a7658a2c4abf4676956975d9374a4afc
#: ../spack/lib/spack/docs/developer_guide.rst:300
msgid "Stage objects"
msgstr ""

# 181173128b7848e88508863943651d52
#: ../spack/lib/spack/docs/developer_guide.rst:306
msgid "Writing commands"
msgstr ""

# c5063c7b5ffb4a5da63d0f4efb24aed5
#: ../spack/lib/spack/docs/developer_guide.rst:308
msgid ""
"Adding a new command to Spack is easy. Simply add a ``<name>.py`` file to "
"``lib/spack/spack/cmd/``, where ``<name>`` is the name of the subcommand. At "
"the bare minimum, two functions are required in this file:"
msgstr ""

# dcbe56ebf45143a392c852688fbc993a
#: ../spack/lib/spack/docs/developer_guide.rst:314
msgid "``setup_parser()``"
msgstr ""

# ee94d34cc6a44780a28c06a32c01bee8
#: ../spack/lib/spack/docs/developer_guide.rst:316
msgid ""
"Unless your command doesn't accept any arguments, a ``setup_parser()`` "
"function is required to define what arguments and flags your command takes. "
"See the `Argparse documentation <https://docs.python.org/2.7/library/"
"argparse.html>`_ for more details on how to add arguments."
msgstr ""

# 9114c9694646452ebc1151133ce122e3
#: ../spack/lib/spack/docs/developer_guide.rst:321
msgid ""
"Some commands have a set of subcommands, like ``spack compiler find`` or "
"``spack module lmod refresh``. You can add subparsers to your parser to "
"handle this. Check out ``spack edit --command compiler`` for an example of "
"this."
msgstr ""

# a892e70303cd48d2ba526b63d1e31c6c
#: ../spack/lib/spack/docs/developer_guide.rst:325
msgid ""
"A lot of commands take the same arguments and flags. These arguments should "
"be defined in ``lib/spack/spack/cmd/common/arguments.py`` so that they don't "
"need to be redefined in multiple commands."
msgstr ""

# da1213eb081440aa8a627dae1dc5ec20
#: ../spack/lib/spack/docs/developer_guide.rst:331
msgid "``<name>()``"
msgstr ""

# 23a8476521fc4b4daabfb1b251a23bdb
#: ../spack/lib/spack/docs/developer_guide.rst:333
msgid ""
"In order to run your command, Spack searches for a function with the same "
"name as your command in ``<name>.py``. This is the main method for your "
"command, and can call other helper methods to handle common tasks."
msgstr ""

# f98245b71e2d477e88eb1db9d969e611
#: ../spack/lib/spack/docs/developer_guide.rst:337
msgid ""
"Remember, before adding a new command, think to yourself whether or not this "
"new command is actually necessary. Sometimes, the functionality you desire "
"can be added to an existing command. Also remember to add unit tests for "
"your command. If it isn't used very frequently, changes to the rest of Spack "
"can cause your command to break without sufficient unit tests to prevent "
"this from happening."
msgstr ""

# 2f10fb6b3653438fa839f635c1818a8f
#: ../spack/lib/spack/docs/developer_guide.rst:344
msgid ""
"Whenever you add/remove/rename a command or flags for an existing command, "
"make sure to update Spack's `Bash tab completion script <https://github.com/"
"adamjstewart/spack/blob/develop/share/spack/spack-completion.bash>`_."
msgstr ""

# 75bfb590c9db48388167f82f9cdb81c2
#: ../spack/lib/spack/docs/developer_guide.rst:354
msgid "Unit testing"
msgstr ""

# a95de39a55934caf975a41fac1c410e1
#: ../spack/lib/spack/docs/developer_guide.rst:358
msgid "Developer commands"
msgstr ""

# 7e7a4c05b424438fa5b5564b1610ca66
#: ../spack/lib/spack/docs/developer_guide.rst:364
msgid "``spack doc``"
msgstr ""

# a6a841168277496ca00826987f2e0d21
#: ../spack/lib/spack/docs/developer_guide.rst:370
msgid "``spack test``"
msgstr ""

# 4c880cd8cd794495ba9a9f539335f967
#: ../spack/lib/spack/docs/developer_guide.rst:376
msgid "``spack python``"
msgstr ""

# 96f5352f87b64674ba2376c0d428a7f8
#: ../spack/lib/spack/docs/developer_guide.rst:378
msgid ""
"``spack python`` is a command that lets you import and debug things as if "
"you were in a Spack interactive shell. Without any arguments, it is similar "
"to a normal interactive Python shell, except you can import spack and any "
"other Spack modules:"
msgstr ""

# f2cde4974d3646c09efc4bcc67804af3
#: ../spack/lib/spack/docs/developer_guide.rst:398
msgid "You can also run a single command:"
msgstr ""

# f4088350bbf84d489e6e5f9138a6e9b4
#: ../spack/lib/spack/docs/developer_guide.rst:405
msgid "or a file:"
msgstr ""

# 43f94433ff0d4b04b794732903458d3e
#: ../spack/lib/spack/docs/developer_guide.rst:411
msgid "just like you would with the normal ``python`` command."
msgstr ""

# 5ddf5597a9354bfbbfa6d2624c3fdbad
#: ../spack/lib/spack/docs/developer_guide.rst:417
msgid "``spack url``"
msgstr ""

# cf33ce7714194370af00aa4dfb2b489d
#: ../spack/lib/spack/docs/developer_guide.rst:419
msgid ""
"A package containing a single URL can be used to download several different "
"versions of the package. If you've ever wondered how this works, all of the "
"magic is in :mod:`spack.url`. This module contains methods for extracting "
"the name and version of a package from its URL. The name is used by ``spack "
"create`` to guess the name of the package. By determining the version from "
"the URL, Spack can replace it with other versions to determine where to "
"download them from."
msgstr ""

# 2c4113aec0234771b81cc007e872a16f
#: ../spack/lib/spack/docs/developer_guide.rst:427
msgid ""
"The regular expressions in ``parse_name_offset`` and "
"``parse_version_offset`` are used to extract the name and version, but they "
"aren't perfect. In order to debug Spack's URL parsing support, the ``spack "
"url`` command can be used."
msgstr ""

# 04e6589ae9504c92ac4c7780cf3929eb
#: ../spack/lib/spack/docs/developer_guide.rst:433
msgid "``spack url parse``"
msgstr ""

# cc23879766c64a6384f7b4e091bd42fd
#: ../spack/lib/spack/docs/developer_guide.rst:435
msgid "If you need to debug a single URL, you can use the following command:"
msgstr ""

# 9bcf5d6f9d614f158d9ad524afd3ac26
#: ../spack/lib/spack/docs/developer_guide.rst:439
msgid ""
"You'll notice that the name and version of this URL are correctly detected, "
"and you can even see which regular expressions it was matched to. However, "
"you'll notice that when it substitutes the version number in, it doesn't "
"replace the ``2.2`` with ``9.9`` where we would expect ``9.9.9b`` to live. "
"This particular package may require a ``list_url`` or ``url_for_version`` "
"function."
msgstr ""

# 573a18e3c7a14c23ad2d30de5210e181
#: ../spack/lib/spack/docs/developer_guide.rst:446
msgid ""
"This command also accepts a ``--spider`` flag. If provided, Spack searches "
"for other versions of the package and prints the matching URLs."
msgstr ""

# 042fb0631dda49d7b9e9a11345e61ada
#: ../spack/lib/spack/docs/developer_guide.rst:451
msgid "``spack url list``"
msgstr ""

# 4d0ee1010fc5497484455cea47945fe8
#: ../spack/lib/spack/docs/developer_guide.rst:453
msgid ""
"This command lists every URL in every package in Spack. If given the ``--"
"color`` and ``--extrapolation`` flags, it also colors the part of the string "
"that it detected to be the name and version. The ``--incorrect-name`` and "
"``--incorrect-version`` flags can be used to print URLs that were not being "
"parsed correctly."
msgstr ""

# 5e3d00eeacd5459aba251777bdc04fb1
#: ../spack/lib/spack/docs/developer_guide.rst:461
msgid "``spack url summary``"
msgstr ""

# e0046920c257401e94c28ccaf4cee7f0
#: ../spack/lib/spack/docs/developer_guide.rst:463
msgid ""
"This command attempts to parse every URL for every package in Spack and "
"prints a summary of how many of them are being correctly parsed. It also "
"prints a histogram showing which regular expressions are being matched and "
"how frequently:"
msgstr ""

# fc5bee0350d94ea1b8ece2526fb3acce
#: ../spack/lib/spack/docs/developer_guide.rst:470
msgid ""
"This command is essential for anyone adding or changing the regular "
"expressions that parse names and versions. By running this command before "
"and after the change, you can make sure that your regular expression fixes "
"more packages than it breaks."
msgstr ""

# 7931dffba49749628c7e62e306cb7952
#: ../spack/lib/spack/docs/developer_guide.rst:477
msgid "Profiling"
msgstr ""

# c6df8b3c95c8478d86634c02f0829d5c
#: ../spack/lib/spack/docs/developer_guide.rst:479
msgid ""
"Spack has some limited built-in support for profiling, and can report "
"statistics using standard Python timing tools.  To use this feature, supply "
"``--profile`` to Spack on the command line, before any subcommands."
msgstr ""

# 018e805b88344b1a96f4e547fdaa8788
#: ../spack/lib/spack/docs/developer_guide.rst:487
msgid "``spack --profile``"
msgstr ""

# 97ae872090624f1f8fb087b9090a741c
#: ../spack/lib/spack/docs/developer_guide.rst:489
msgid "``spack --profile`` output looks like this:"
msgstr ""

# ad745374fa3e4b0a83fabeb07e722977
#: ../spack/lib/spack/docs/developer_guide.rst:494
msgid ""
"The bottom of the output shows the top most time consuming functions, "
"slowest on top.  The profiling support is from Python's built-in tool, "
"`cProfile <https://docs.python.org/2/library/profile.html#module-cProfile>`_."
msgstr ""

# e9125e5c4cdd404e9a022b3b3f408b93
#: ../spack/lib/spack/docs/docker_for_developers.rst:10
msgid "Docker for Developers"
msgstr ""

# a33b28aca7004fbb84e5e1fdf3d22867
#: ../spack/lib/spack/docs/docker_for_developers.rst:12
msgid ""
"This guide is intended for people who want to use our prepared docker "
"environments to work on developing Spack or working on spack packages. It is "
"meant to serve as the companion documentation for the :ref:`packaging-guide`."
msgstr ""

# df11874442c347bea75aec515a53a96a
#: ../spack/lib/spack/docs/docker_for_developers.rst:20
msgid "To get started, all you need is the latest version of ``docker``."
msgstr ""

# e0b5ac2687fb404da07c3021a4167c51
#: ../spack/lib/spack/docs/docker_for_developers.rst:28
msgid ""
"This command should drop you into an interactive shell where you can run "
"spack within an isolated docker container running ubuntu.  The copy of spack "
"being used should be tied to the working copy of your cloned git repo, so "
"any changes you make should be immediately reflected in the running docker "
"container.  Feel free to add or modify any packages or to hack on spack, "
"itself.  Your contained copy of spack should immediately reflect all changes."
msgstr ""

# ee800b34f11949ec979604e94306fcb4
#: ../spack/lib/spack/docs/docker_for_developers.rst:35
msgid ""
"To work within a container running a different linux distro, source one of "
"the other environment files under ``config``."
msgstr ""

# 5ff8dfde27454a328f6b1fa782276fe4
#: ../spack/lib/spack/docs/extensions.rst:10
msgid "Custom Extensions"
msgstr ""

# 4218df0d7bdc442b8b4e21f01590619d
#: ../spack/lib/spack/docs/extensions.rst:14
msgid ""
"The support for extending Spack with custom commands is still experimental. "
"Users should expect APIs or prescribed directory structures to change at any "
"time."
msgstr ""

# 912e556210354a42938ed0d2bdf6a389
#: ../spack/lib/spack/docs/extensions.rst:18
msgid ""
"*Spack extensions* permit you to extend Spack capabilities by deploying your "
"own custom commands or logic in an arbitrary location on your filesystem. "
"This might be extremely useful e.g. to develop and maintain a command whose "
"purpose is too specific to be considered for reintegration into the mainline "
"or to evolve a command through its early stages before starting a discussion "
"to merge it upstream. From Spack's point of view an extension is any path in "
"your filesystem which respects a prescribed naming and layout for files:"
msgstr ""

# 07499c1062be4115a282afdefc608522
#: ../spack/lib/spack/docs/extensions.rst:39
msgid ""
"In the example above the extension named *scripting* adds an additional "
"command (``filter``) and unit tests to verify its behavior. The code for "
"this example can be obtained by cloning the corresponding git repository:"
msgstr ""

# 44f87dab95724cba9d399e4f0ebb6eba
#: ../spack/lib/spack/docs/extensions.rst:57
msgid ""
"As you can see by inspecting the sources, Python modules that are part of "
"the extension can import any core Spack module."
msgstr ""

# 0ffaa8706c2e4bb396140de7e8e60cd1
#: ../spack/lib/spack/docs/extensions.rst:62
msgid "Configure Spack to Use Extensions"
msgstr ""

# d3717e65d0764fd4a67b1bf7aae826d4
#: ../spack/lib/spack/docs/extensions.rst:64
msgid ""
"To make your current Spack instance aware of extensions you should add their "
"root paths to ``config.yaml``. In the case of our example this means "
"ensuring that:"
msgstr ""

# 19828b835aad41cd9d617e741cd46059
#: ../spack/lib/spack/docs/extensions.rst:73
msgid ""
"is part of your configuration file. Once this is setup any command that the "
"extension provides will be available from the command line:"
msgstr ""

# 7f94e7d3273f4c71a02e007122869594
#: ../spack/lib/spack/docs/extensions.rst:96
msgid ""
"The corresponding unit tests can be run giving the appropriate options to "
"``spack test``:"
msgstr ""

# 785b262a65094f9ea9d5ee5a52d2cba9
#: ../spack/lib/spack/docs/features.rst:8
msgid "Feature Overview"
msgstr ""

# d25da4f37ae34721bf124b1f8154dcad
#: ../spack/lib/spack/docs/features.rst:10
msgid ""
"This is a high-level overview of features that make Spack different from "
"other `package managers <http://en.wikipedia.org/wiki/"
"Package_management_system>`_ and `port systems <http://en.wikipedia.org/wiki/"
"Ports_collection>`_."
msgstr ""

# d09eddf105394e939f468e08b2ec5d9e
#: ../spack/lib/spack/docs/features.rst:17
msgid "Simple package installation"
msgstr ""

# 4bbcdd83a6d74e26ae85ef4986d6242f
#: ../spack/lib/spack/docs/features.rst:19
msgid ""
"Installing the default version of a package is simple. This will install the "
"latest version of the ``mpileaks`` package and all of its dependencies:"
msgstr ""

# a90120f31fda49b89114091597fb8bb6
#: ../spack/lib/spack/docs/features.rst:28
msgid "Custom versions & configurations"
msgstr ""

# a4c8c10e606f4418ba71ba2d9abd10e8
#: ../spack/lib/spack/docs/features.rst:30
msgid ""
"Spack allows installation to be customized.  Users can specify the version, "
"build compiler, compile-time options, and cross-compile platform, all on the "
"command line."
msgstr ""

# a8bdd18563ef429bb1e6cb0cadc0b770
#: ../spack/lib/spack/docs/features.rst:54
msgid ""
"Users can specify as many or few options as they care about. Spack will fill "
"in the unspecified values with sensible defaults. The two listed syntaxes "
"for variants are identical when the value is boolean."
msgstr ""

# 666f91cc3cbd4d21ba2d8c402a8408f6
#: ../spack/lib/spack/docs/features.rst:60
msgid "Customize dependencies"
msgstr ""

# 22e47d0b910d4d178507128a603ba436
#: ../spack/lib/spack/docs/features.rst:62
msgid ""
"Spack allows *dependencies* of a particular installation to be customized "
"extensively.  Suppose that ``mpileaks`` depends indirectly on ``libelf`` and "
"``libdwarf``.  Using ``^``, users can add custom configurations for the "
"dependencies:"
msgstr ""

# 324ac1bed46643c6a5230c96d41676c5
#: ../spack/lib/spack/docs/features.rst:74
msgid "Non-destructive installs"
msgstr ""

# ac1589853a654ee28185cbfa5c676ced
#: ../spack/lib/spack/docs/features.rst:76
msgid ""
"Spack installs every unique package/dependency configuration into its own "
"prefix, so new installs will not break existing ones."
msgstr ""

# 0f166fca734146b5b805aa0bee3345cf
#: ../spack/lib/spack/docs/features.rst:81
msgid "Packages can peacefully coexist"
msgstr ""

# 800ce960e0f9470d8889f70df3f05ce4
#: ../spack/lib/spack/docs/features.rst:83
msgid ""
"Spack avoids library misconfiguration by using ``RPATH`` to link "
"dependencies.  When a user links a library or runs a program, it is tied to "
"the dependencies it was built with, so there is no need to manipulate "
"``LD_LIBRARY_PATH`` at runtime."
msgstr ""

# 5bc5623830ee4804afb47baf261d0109
#: ../spack/lib/spack/docs/features.rst:90
msgid "Creating packages is easy"
msgstr ""

# 735c0b1c5586408e98a3d5fa51062ccb
#: ../spack/lib/spack/docs/features.rst:92
msgid ""
"To create a new packages, all Spack needs is a URL for the source archive.  "
"The ``spack create`` command will create a boilerplate package file, and the "
"package authors can fill in specific build steps in pure Python."
msgstr ""

# 4d7c692247834c25b80fd1e2cc330414
#: ../spack/lib/spack/docs/features.rst:97
msgid "For example, this command:"
msgstr ""

# 4084842cc0f14dbe8c58c1c7a72c6897
#: ../spack/lib/spack/docs/features.rst:103
msgid "creates a simple python file:"
msgstr ""

# 108f9c752647428ab9911b8bde2c0e06
#: ../spack/lib/spack/docs/features.rst:130
msgid ""
"It doesn't take much python coding to get from there to a working package:"
msgstr ""

# f34a037662444a60850980ef0a4a9bbf
#: ../spack/lib/spack/docs/features.rst:136
msgid ""
"Spack also provides wrapper functions around common commands like "
"``configure``, ``make``, and ``cmake`` to make writing packages simple."
msgstr ""

# #-#-#-#-#  getting_started.pot (Spack 0.12)  #-#-#-#-#
# 1ed1a38dd4354392ac8aef20fefd372e
# #-#-#-#-#  tutorial_packaging.pot (Spack 0.12)  #-#-#-#-#
# d4a21b6163d2434687ed9714e36d7794
#: ../spack/lib/spack/docs/getting_started.rst:10
#: ../spack/lib/spack/docs/tutorial_packaging.rst:33
msgid "Getting Started"
msgstr ""

# 6238a08f6e584bf591dd36be88fea08c
#: ../spack/lib/spack/docs/getting_started.rst:14
msgid "Prerequisites"
msgstr ""

# f13b2d25fcfa4e20af0dc423b87cb4dd
#: ../spack/lib/spack/docs/getting_started.rst:16
msgid ""
"Spack has the following minimum requirements, which must be installed before "
"Spack is run:"
msgstr ""

# c7dcf398c7344976be9f3fbc3676a418
#: ../spack/lib/spack/docs/getting_started.rst:19
msgid "Python 2 (2.6 or 2.7) or 3 (3.4 - 3.7) to run Spack"
msgstr ""

# 3a0ca5817632458d9b32c9e4e24aab08
#: ../spack/lib/spack/docs/getting_started.rst:20
msgid "A C/C++ compiler for building"
msgstr ""

# 9cde741796ed44e8bb4c78685d2c013a
#: ../spack/lib/spack/docs/getting_started.rst:21
msgid "The ``make`` executable for building"
msgstr ""

# 22dcdb920fbd4b209a717f57fc4d83b0
#: ../spack/lib/spack/docs/getting_started.rst:22
msgid "The ``git`` and ``curl`` commands for fetching"
msgstr ""

# ff8df7ba65ab4285adb36915fc88fbde
#: ../spack/lib/spack/docs/getting_started.rst:23
msgid "If using the ``gpg`` subcommand, ``gnupg2`` is required"
msgstr ""

# b57219775b3b45dda3b4fdb17e52864f
#: ../spack/lib/spack/docs/getting_started.rst:25
msgid ""
"These requirements can be easily installed on most modern Linux systems; on "
"Macintosh, XCode is required.  Spack is designed to run on HPC platforms "
"like Cray and BlueGene/Q.  Not all packages should be expected to work on "
"all platforms.  A build matrix showing which packages are working on which "
"systems is planned but not yet available."
msgstr ""

# 56f1eff359f34303b1a60c5dc5ada5a8
#: ../spack/lib/spack/docs/getting_started.rst:33
msgid "Installation"
msgstr ""

# bf238b9c6fa94b4ea3d63422ad6a667e
#: ../spack/lib/spack/docs/getting_started.rst:35
msgid ""
"Getting Spack is easy.  You can clone it from the `github repository "
"<https://github.com/spack/spack>`_ using this command:"
msgstr ""

# ebc56223e2954a07993ea85e71e3d0bd
#: ../spack/lib/spack/docs/getting_started.rst:42
msgid "This will create a directory called ``spack``."
msgstr ""

# e42caca44838473381487946252a6337
#: ../spack/lib/spack/docs/getting_started.rst:46
msgid "Add Spack to the Shell"
msgstr ""

# 7412ccb0b5b14b87a27d0e4199296f62
#: ../spack/lib/spack/docs/getting_started.rst:48
msgid ""
"We'll assume that the full path to your downloaded Spack directory is in the "
"``SPACK_ROOT`` environment variable.  Add ``$SPACK_ROOT/bin`` to your path "
"and you're ready to go:"
msgstr ""

# ba954735bb0545188ac27d9b90640298
#: ../spack/lib/spack/docs/getting_started.rst:57
msgid "For a richer experience, use Spack's shell support:"
msgstr ""

# 213e96b83e19456180aaac4c075172b6
#: ../spack/lib/spack/docs/getting_started.rst:70
msgid ""
"This automatically adds Spack to your ``PATH`` and allows the ``spack`` "
"command to be used to execute spack :ref:`commands <shell-support>` and :ref:"
"`useful packaging commands <packaging-shell-support>`."
msgstr ""

# 85adecc42ef347bea1094f7d92c2d426
#: ../spack/lib/spack/docs/getting_started.rst:74
msgid ""
"If :ref:`environment-modules or dotkit <InstallEnvironmentModules>` is "
"installed and available, the ``spack`` command can also load and unload :ref:"
"`modules <modules>`."
msgstr ""

# 8fb0a983077e4913a28f9f454d47b3bd
#: ../spack/lib/spack/docs/getting_started.rst:80
msgid "Clean Environment"
msgstr ""

# 5c574e4683534ff28950df8fc694754b
#: ../spack/lib/spack/docs/getting_started.rst:82
msgid ""
"Many packages' installs can be broken by changing environment variables.  "
"For example, a package might pick up the wrong build-time dependencies (most "
"of them not specified) depending on the setting of ``PATH``.  ``GCC`` seems "
"to be particularly vulnerable to these issues."
msgstr ""

# 131246fc357e4048b188305bc755d17c
#: ../spack/lib/spack/docs/getting_started.rst:87
msgid ""
"Therefore, it is recommended that Spack users run with a *clean "
"environment*, especially for ``PATH``.  Only software that comes with the "
"system, or that you know you wish to use with Spack, should be included.  "
"This procedure will avoid many strange build errors."
msgstr ""

# 2b4c3605124d4fa3975923b1827e0f10
#: ../spack/lib/spack/docs/getting_started.rst:95
msgid "Check Installation"
msgstr ""

# 7a9bc56f04634e03804db11673668997
#: ../spack/lib/spack/docs/getting_started.rst:97
msgid ""
"With Spack installed, you should be able to run some basic Spack commands.  "
"For example:"
msgstr ""

# c2dd7f33b8ed4e02901de244dbd75bf0
#: ../spack/lib/spack/docs/getting_started.rst:105
msgid "Optional: Alternate Prefix"
msgstr ""

# c2576d1ef29f4f73838c14589d9eb404
#: ../spack/lib/spack/docs/getting_started.rst:107
msgid ""
"You may want to run Spack out of a prefix other than the git repository you "
"cloned.  The ``spack clone`` command provides this functionality.  To "
"install spack in a new directory, simply type:"
msgstr ""

# adaa357bd00a4fb68c99dabe1342550b
#: ../spack/lib/spack/docs/getting_started.rst:115
msgid ""
"This will install a new spack script in ``/my/favorite/prefix/bin``, which "
"you can use just like you would the regular spack script.  Each copy of "
"spack installs packages into its own ``$PREFIX/opt`` directory."
msgstr ""

# 3e6f465de5bf425fa5c7b2a69f192693
#: ../spack/lib/spack/docs/getting_started.rst:123
msgid "Next Steps"
msgstr ""

# 46de745b60384c5aae22e1bc36b68cd0
#: ../spack/lib/spack/docs/getting_started.rst:125
msgid ""
"In theory, Spack doesn't need any additional installation; just download and "
"run!  But in real life, additional steps are usually required before Spack "
"can work in a practical sense.  Read on..."
msgstr ""

# af3bff44e6584a46b7142927b3a67e5e
#: ../spack/lib/spack/docs/getting_started.rst:134
msgid "Compiler configuration"
msgstr ""

# 8ab1f751792443daba297adb21324327
#: ../spack/lib/spack/docs/getting_started.rst:136
msgid ""
"Spack has the ability to build packages with multiple compilers and compiler "
"versions. Spack searches for compilers on your machine automatically the "
"first time it is run. It does this by inspecting your ``PATH``."
msgstr ""

# 222c274bde8641f2a8a1ae4157dcf4c8
#: ../spack/lib/spack/docs/getting_started.rst:145
msgid "``spack compilers``"
msgstr ""

# ea8551c1a5214bbb8f4ae6060dd1a086
#: ../spack/lib/spack/docs/getting_started.rst:147
msgid ""
"You can see which compilers spack has found by running ``spack compilers`` "
"or ``spack compiler list``:"
msgstr ""

# 84e6ed9e0d9e4a59a8bd2aa4a55fb2fe
#: ../spack/lib/spack/docs/getting_started.rst:169
msgid ""
"Any of these compilers can be used to build Spack packages.  More on how "
"this is done is in :ref:`sec-specs`."
msgstr ""

# 6d48ab331781419e9bc8fcad9ad103c8
#: ../spack/lib/spack/docs/getting_started.rst:176
msgid "``spack compiler add``"
msgstr ""

# 3f48bef6bd5a428681cba21e6671c294
#: ../spack/lib/spack/docs/getting_started.rst:178
msgid "An alias for ``spack compiler find``."
msgstr ""

# 4ba909991a8c4fbeb7a90892f10fc377
#: ../spack/lib/spack/docs/getting_started.rst:184
msgid "``spack compiler find``"
msgstr ""

# 90b36f6b178b4c9cbacbe944a3da4e7a
#: ../spack/lib/spack/docs/getting_started.rst:186
msgid ""
"If you do not see a compiler in this list, but you want to use it with "
"Spack, you can simply run ``spack compiler find`` with the path to where the "
"compiler is installed.  For example:"
msgstr ""

# c69489c802774ddaaf32b1a6122a0260
#: ../spack/lib/spack/docs/getting_started.rst:196
msgid ""
"Or you can run ``spack compiler find`` with no arguments to force auto-"
"detection.  This is useful if you do not know where compilers are installed, "
"but you know that new compilers have been added to your ``PATH``.  For "
"example, you might load a module, like this:"
msgstr ""

# 720db217e07a43d7aa79c7e0f408a152
#: ../spack/lib/spack/docs/getting_started.rst:208
msgid ""
"This loads the environment module for gcc-4.9.0 to add it to ``PATH``, and "
"then it adds the compiler to Spack."
msgstr ""

# fd399d870a5b44da8943a613a839cfdd
#: ../spack/lib/spack/docs/getting_started.rst:213
msgid ""
"By default, spack does not fill in the ``modules:`` field in the ``compilers."
"yaml`` file.  If you are using a compiler from a module, then you should add "
"this field manually. See the section on :ref:`compilers-requiring-modules`."
msgstr ""

# 7052d889bb2c4b3c9e13ed3ed6d95df6
#: ../spack/lib/spack/docs/getting_started.rst:222
msgid "``spack compiler info``"
msgstr ""

# 8d24b6836fb34b0198c8f7898a898f42
#: ../spack/lib/spack/docs/getting_started.rst:224
msgid ""
"If you want to see specifics on a particular compiler, you can run ``spack "
"compiler info`` on it:"
msgstr ""

# 33139792d27846b396efc30cb2a24bc5
#: ../spack/lib/spack/docs/getting_started.rst:240
msgid ""
"This shows which C, C++, and Fortran compilers were detected by Spack. "
"Notice also that we didn't have to be too specific about the version. We "
"just said ``intel@15``, and information about the only matching Intel "
"compiler was displayed."
msgstr ""

# 07d2ed3085d94d7ea082cd7bc1d8014c
#: ../spack/lib/spack/docs/getting_started.rst:247
msgid "Manual compiler configuration"
msgstr ""

# 9ab5c01b7f854a41a213eefaf00a468d
#: ../spack/lib/spack/docs/getting_started.rst:249
msgid ""
"If auto-detection fails, you can manually configure a compiler by editing "
"your ``~/.spack/compilers.yaml`` file.  You can do this by running ``spack "
"config edit compilers``, which will open the file in your ``$EDITOR``."
msgstr ""

# 18ba1fad0afd438088895e40b89888a6
#: ../spack/lib/spack/docs/getting_started.rst:253
msgid "Each compiler configuration in the file looks like this:"
msgstr ""

# 4ab208c78def48c596c8b6e709fb5556
#: ../spack/lib/spack/docs/getting_started.rst:268
msgid ""
"For compilers that do not support Fortran (like ``clang``), put ``None`` for "
"``f77`` and ``fc``:"
msgstr ""

# 456ff2dc577e484d9d02609c55aab0ba
#: ../spack/lib/spack/docs/getting_started.rst:284
msgid ""
"Once you save the file, the configured compilers will show up in the list "
"displayed by ``spack compilers``."
msgstr ""

# f11545d5e4aa427488f58871a3071c7a
#: ../spack/lib/spack/docs/getting_started.rst:287
msgid ""
"You can also add compiler flags to manually configured compilers. These "
"flags should be specified in the ``flags`` section of the compiler "
"specification. The valid flags are ``cflags``, ``cxxflags``, ``fflags``, "
"``cppflags``, ``ldflags``, and ``ldlibs``. For example:"
msgstr ""

# 5391904caabb429182344c48be6b28e7
#: ../spack/lib/spack/docs/getting_started.rst:309
msgid ""
"These flags will be treated by spack as if they were entered from the "
"command line each time this compiler is used. The compiler wrappers then "
"inject those flags into the compiler command. Compiler flags entered from "
"the command line will be discussed in more detail in the following section."
msgstr ""

# 851f32e17d754ffeb47f3aacb304f216
#: ../spack/lib/spack/docs/getting_started.rst:317
msgid "Build Your Own Compiler"
msgstr ""

# 3a4a624dd0904fd69fba40e054b3763b
#: ../spack/lib/spack/docs/getting_started.rst:319
msgid ""
"If you are particular about which compiler/version you use, you might wish "
"to have Spack build it for you.  For example:"
msgstr ""

# 04647f03ffae48458e6f9b93482004e2
#: ../spack/lib/spack/docs/getting_started.rst:326
msgid ""
"Once that has finished, you will need to add it to your ``compilers.yaml`` "
"file.  You can then set Spack to use it by default by adding the following "
"to your ``packages.yaml`` file:"
msgstr ""

# 06ac16ccb47c4bcdaaf45d673e5c9e1c
#: ../spack/lib/spack/docs/getting_started.rst:340
msgid "Compilers Requiring Modules"
msgstr ""

# 28ffc063b4354aef8bc00c06464212b7
#: ../spack/lib/spack/docs/getting_started.rst:342
msgid ""
"Many installed compilers will work regardless of the environment they are "
"called with.  However, some installed compilers require ``$LD_LIBRARY_PATH`` "
"or other environment variables to be set in order to run; this is typical "
"for Intel and other proprietary compilers."
msgstr ""

# f2c1035d90a44185b1ba96c5ef3d15fb
#: ../spack/lib/spack/docs/getting_started.rst:347
msgid ""
"In such a case, you should tell Spack which module(s) to load in order to "
"run the chosen compiler (If the compiler does not come with a module file, "
"you might consider making one by hand).  Spack will load this module into "
"the environment ONLY when the compiler is run, and NOT in general for a "
"package's ``install()`` method.  See, for example, this ``compilers.yaml`` "
"file:"
msgstr ""

# 38cb3c84b76d4cef9c4cc5e7562646bd
#: ../spack/lib/spack/docs/getting_started.rst:367
msgid ""
"Some compilers require special environment settings to be loaded not just to "
"run, but also to execute the code they build, breaking packages that need to "
"execute code they just compiled.  If it's not possible or practical to use a "
"better compiler, you'll need to ensure that environment settings are "
"preserved for compilers like this (i.e., you'll need to load the module or "
"source the compiler's shell script)."
msgstr ""

# 44bebe5b76454a958b456aecbe889a73
#: ../spack/lib/spack/docs/getting_started.rst:374
msgid ""
"By default, Spack tries to ensure that builds are reproducible by cleaning "
"the environment before building.  If this interferes with your compiler "
"settings, you CAN use ``spack install --dirty`` as a workaround. Note that "
"this MAY interfere with package builds."
msgstr ""

# 0bbaabf8b3944018bb3e5174bbd04235
#: ../spack/lib/spack/docs/getting_started.rst:383
msgid "Licensed Compilers"
msgstr ""

# 35805933ba954facab23b2b0b424b67f
#: ../spack/lib/spack/docs/getting_started.rst:385
msgid ""
"Some proprietary compilers require licensing to use.  If you need to use a "
"licensed compiler (eg, PGI), the process is similar to a mix of build your "
"own, plus modules:"
msgstr ""

# df4feb55c18b4b589ce45a1c5d5877a3
#: ../spack/lib/spack/docs/getting_started.rst:389
msgid ""
"Create a Spack package (if it doesn't exist already) to install your "
"compiler.  Follow instructions on installing :ref:`license`."
msgstr ""

# b6d223f18ad643debfca4a05682a2c41
#: ../spack/lib/spack/docs/getting_started.rst:392
msgid ""
"Once the compiler is installed, you should be able to test it by using Spack "
"to load the module it just created, and running simple builds (eg: ``cc "
"helloWorld.c && ./a.out``)"
msgstr ""

# 567e57cdc004496aba527780f06133fa
#: ../spack/lib/spack/docs/getting_started.rst:396
msgid "Add the newly-installed compiler to ``compilers.yaml`` as shown above."
msgstr ""

# 174e3e94460046a19734da956c818eac
#: ../spack/lib/spack/docs/getting_started.rst:403
msgid "Mixed Toolchains"
msgstr ""

# 9838ea3fc59f4f53880a42e7fbb0f350
#: ../spack/lib/spack/docs/getting_started.rst:405
msgid ""
"Modern compilers typically come with related compilers for C, C++ and "
"Fortran bundled together.  When possible, results are best if the same "
"compiler is used for all languages."
msgstr ""

# 5c14b350f6514e0096130af39d487e5e
#: ../spack/lib/spack/docs/getting_started.rst:409
msgid ""
"In some cases, this is not possible.  For example, starting with macOS El "
"Capitan (10.11), many packages no longer build with GCC, but XCode provides "
"no Fortran compilers.  The user is therefore forced to use a mixed "
"toolchain: XCode-provided Clang for C/C++ and GNU ``gfortran`` for Fortran."
msgstr ""

# 5eff402eff774154a3bd81c6de0bd3eb
#: ../spack/lib/spack/docs/getting_started.rst:415
msgid ""
"You need to make sure that Xcode is installed. Run the following command:"
msgstr ""

# 41bde548dc6d4e8e917b2bc21af2311d
#: ../spack/lib/spack/docs/getting_started.rst:422
msgid ""
"If the Xcode command-line tools are already installed, you will see an error "
"message:"
msgstr ""

# 4516064845db48fa8b8dc2f04073e8c0
#: ../spack/lib/spack/docs/getting_started.rst:430
msgid ""
"For most packages, the Xcode command-line tools are sufficient. However, "
"some packages like ``qt`` require the full Xcode suite. You can check to see "
"which you have installed by running:"
msgstr ""

# 7e4000c8d83d4160a80758c9de4c90c3
#: ../spack/lib/spack/docs/getting_started.rst:439
msgid "If the output is:"
msgstr ""

# 9e96924b1b084e2182bc0c12e6c2dc56
#: ../spack/lib/spack/docs/getting_started.rst:446
msgid "you already have the full Xcode suite installed. If the output is:"
msgstr ""

# b1698984022347d9a9e02fb868dfaabc
#: ../spack/lib/spack/docs/getting_started.rst:453
msgid ""
"you only have the command-line tools installed. The full Xcode suite can be "
"installed through the App Store. Make sure you launch the Xcode application "
"and accept the license agreement before using Spack. It may ask you to "
"install additional components. Alternatively, the license can be accepted "
"through the command line:"
msgstr ""

# f8b546363997423da4d5eadd7e02a491
#: ../spack/lib/spack/docs/getting_started.rst:464
msgid "Note: the flag is ``-license``, not ``--license``."
msgstr ""

# 9f89568f3d944bffaa7927ec92f3e631
#: ../spack/lib/spack/docs/getting_started.rst:466
msgid "Run ``spack compiler find`` to locate Clang."
msgstr ""

# f5dae1f58b854a62b2217ba23e07055f
#: ../spack/lib/spack/docs/getting_started.rst:468
msgid ""
"There are different ways to get ``gfortran`` on macOS. For example, you can "
"install GCC with Spack (``spack install gcc``) or with Homebrew (``brew "
"install gcc``)."
msgstr ""

# 53d4a50dddb94fcc8949bc81912a90cc
#: ../spack/lib/spack/docs/getting_started.rst:472
msgid ""
"The only thing left to do is to edit ``~/.spack/compilers.yaml`` to provide "
"the path to ``gfortran``:"
msgstr ""

# 3a842e1f4a614ac98db9a57bcb61b48b
#: ../spack/lib/spack/docs/getting_started.rst:485
msgid ""
"If you used Spack to install GCC, you can get the installation prefix by "
"``spack location -i gcc`` (this will only work if you have a single version "
"of GCC installed). Whereas for Homebrew, GCC is installed in ``/usr/local/"
"Cellar/gcc/x.y.z``."
msgstr ""

# 534f070bb8204d7bbc5ae23f7bbdf6a9
#: ../spack/lib/spack/docs/getting_started.rst:492
msgid "Compiler Verification"
msgstr ""

# 4459851310214ec2b13c20c728c2b036
#: ../spack/lib/spack/docs/getting_started.rst:494
msgid ""
"You can verify that your compilers are configured properly by installing a "
"simple package.  For example:"
msgstr ""

# 648956251ae44b629241303d1433854e
#: ../spack/lib/spack/docs/getting_started.rst:506
msgid "Vendor-Specific Compiler Configuration"
msgstr ""

# 99c431641ed14e57afe358de8394fd38
#: ../spack/lib/spack/docs/getting_started.rst:508
msgid ""
"With Spack, things usually \"just work\" with GCC.  Not so for other "
"compilers.  This section provides details on how to get specific compilers "
"working."
msgstr ""

# ef88b38798d440ee8fd7766777925078
#: ../spack/lib/spack/docs/getting_started.rst:514
msgid "Intel Compilers"
msgstr ""

# 51519922ca954739a373e44b238d3a21
#: ../spack/lib/spack/docs/getting_started.rst:516
msgid ""
"Intel compilers are unusual because a single Intel compiler version can "
"emulate multiple GCC versions.  In order to provide this functionality, the "
"Intel compiler needs GCC to be installed. Therefore, the following steps are "
"necessary to successfully use Intel compilers:"
msgstr ""

# 9c9392bc36824ebdba0d9621e085507a
#: ../spack/lib/spack/docs/getting_started.rst:522
msgid ""
"Install a version of GCC that implements the desired language features "
"(``spack install gcc``)."
msgstr ""

# 47863340509541958c0e29665b865243
#: ../spack/lib/spack/docs/getting_started.rst:525
msgid ""
"Tell the Intel compiler how to find that desired GCC.  This may be done in "
"one of two ways:"
msgstr ""

# 8db63d68d3274511b6f50e4cfa47c71c
#: ../spack/lib/spack/docs/getting_started.rst:528
msgid ""
"\"By default, the compiler determines which version of ``gcc`` or ``g++`` "
"you have installed from the ``PATH`` environment variable."
msgstr ""

# d6de326b57f94619ad7ec3c5a04a326b
#: ../spack/lib/spack/docs/getting_started.rst:531
msgid ""
"If you want use a version of ``gcc`` or ``g++`` other than the default "
"version on your system, you need to use either the ``-gcc-name`` or ``-gxx-"
"name`` compiler option to specify the path to the version of ``gcc`` or ``g+"
"+`` that you want to use.\""
msgstr ""

# a2a363e5c3544421af9b09662f7e73af
#: ../spack/lib/spack/docs/getting_started.rst:538
msgid ""
"Intel compilers may therefore be configured in one of two ways with Spack: "
"using modules, or using compiler flags."
msgstr ""

# e9a3e1e007b941e787836d95769e8173
#: ../spack/lib/spack/docs/getting_started.rst:543
msgid "Configuration with Modules"
msgstr ""

# 50a56a2870c54800abcfbc0c99f4daa8
#: ../spack/lib/spack/docs/getting_started.rst:545
msgid ""
"One can control which GCC is seen by the Intel compiler with modules. A "
"module must be loaded both for the Intel Compiler (so it will run) and GCC "
"(so the compiler can find the intended GCC).  The following configuration in "
"``compilers.yaml`` illustrates this technique:"
msgstr ""

# a11ed2385651486385e29582846a9b10
#: ../spack/lib/spack/docs/getting_started.rst:566
msgid ""
"The version number on the Intel compiler is a combination of the \"native\" "
"Intel version number and the GNU compiler it is targeting."
msgstr ""

# 7a396be2686342aab1dd99a37c2e1ba6
#: ../spack/lib/spack/docs/getting_started.rst:572
msgid "Command Line Configuration"
msgstr ""

# e66c8b90054945f29d60454b2b467e3c
#: ../spack/lib/spack/docs/getting_started.rst:574
msgid ""
"One can also control which GCC is seen by the Intel compiler by adding flags "
"to the ``icc`` command:"
msgstr ""

# f1869e09edb942f4beb7143d87983086
#: ../spack/lib/spack/docs/getting_started.rst:577
msgid "Identify the location of the compiler you just installed:"
msgstr ""

# 0660f3c61cb24867b62fed4c6a62dd0f
#: ../spack/lib/spack/docs/getting_started.rst:584
msgid "Set up ``compilers.yaml``, for example:"
msgstr ""

# c40fa530962e4e7db770496b200cb960
#: ../spack/lib/spack/docs/getting_started.rst:605
msgid "PGI"
msgstr ""

# b1bc88d2ca5f4a0991142a64c9ff10b6
#: ../spack/lib/spack/docs/getting_started.rst:607
msgid ""
"PGI comes with two sets of compilers for C++ and Fortran, distinguishable by "
"their names.  \"Old\" compilers:"
msgstr ""

# d5dfbd1714194a99ad3b505fe062d068
#: ../spack/lib/spack/docs/getting_started.rst:617
msgid "\"New\" compilers:"
msgstr ""

# 87df18733ba94bb496def518935bdd4e
#: ../spack/lib/spack/docs/getting_started.rst:626
msgid ""
"Older installations of PGI contains just the old compilers; whereas newer "
"installations contain the old and the new.  The new compiler is considered "
"preferable, as some packages (``hdf``) will not build with the old compiler."
msgstr ""

# 835da4782f6445c486223cef5c118927
#: ../spack/lib/spack/docs/getting_started.rst:631
msgid ""
"When auto-detecting a PGI compiler, there are cases where Spack will find "
"the old compilers, when you really want it to find the new compilers.  It is "
"best to check this ``compilers.yaml``; and if the old compilers are being "
"used, change ``pgf77`` and ``pgf90`` to ``pgfortran``."
msgstr ""

# 2cf38138e2c048d89c584e73a0ceace0
#: ../spack/lib/spack/docs/getting_started.rst:637
msgid "Other issues:"
msgstr ""

# d6572213e2e541eca57d8b2d7fe1b429
#: ../spack/lib/spack/docs/getting_started.rst:639
msgid ""
"There are reports that some packages will not build with PGI, including "
"``libpciaccess`` and ``openssl``.  A workaround is to build these packages "
"with another compiler and then use them as dependencies for PGI-build "
"packages.  For example:"
msgstr ""

# 799a5fc481864314840d188be44de0ea
#: ../spack/lib/spack/docs/getting_started.rst:649
msgid ""
"PGI requires a license to use; see :ref:`licensed-compilers` for more "
"information on installation."
msgstr ""

# 2536ebced1854bc09d436286c421adce
#: ../spack/lib/spack/docs/getting_started.rst:654
msgid ""
"It is believed the problem with HDF 4 is that everything is compiled with "
"the ``F77`` compiler, but at some point some Fortran 90 code slipped in "
"there. So compilers that can handle both FORTRAN 77 and Fortran 90 "
"(``gfortran``, ``pgfortran``, etc) are fine.  But compilers specific to one "
"or the other (``pgf77``, ``pgf90``) won't work."
msgstr ""

# be4115964f27479ea822c24131422f23
#: ../spack/lib/spack/docs/getting_started.rst:664
msgid "NAG"
msgstr ""

# 8917ecd7ad7147cf82c97a2f4b474bda
#: ../spack/lib/spack/docs/getting_started.rst:666
msgid ""
"The Numerical Algorithms Group provides a licensed Fortran compiler. Like "
"Clang, this requires you to set up a :ref:`mixed-toolchains`. It is "
"recommended to use GCC for your C/C++ compilers."
msgstr ""

# a286396b924f41db85fad2f648feeeed
#: ../spack/lib/spack/docs/getting_started.rst:670
msgid ""
"The NAG Fortran compilers are a bit more strict than other compilers, and "
"many packages will fail to install with error messages like:"
msgstr ""

# 31a92adaa37740ecb5a19a9fd0613821
#: ../spack/lib/spack/docs/getting_started.rst:677
msgid ""
"In order to convince the NAG compiler not to be too picky about calling "
"conventions, you can use ``FFLAGS=-mismatch`` and ``FCFLAGS=-mismatch``. "
"This can be done through the command line:"
msgstr ""

# 8944c91d9aa84df3b5b7cd86fdb21965
#: ../spack/lib/spack/docs/getting_started.rst:685
msgid "Or it can be set permanently in your ``compilers.yaml``:"
msgstr ""

# bbd8ec46c44845d0af600a5ee12e52e6
#: ../spack/lib/spack/docs/getting_started.rst:704
msgid "System Packages"
msgstr ""

# 854938b35d854ec38326b24788fa71bb
#: ../spack/lib/spack/docs/getting_started.rst:706
msgid ""
"Once compilers are configured, one needs to determine which pre-installed "
"system packages, if any, to use in builds.  This is configured in the file "
"``~/.spack/packages.yaml``.  For example, to use an OpenMPI installed in /"
"opt/local, one would use:"
msgstr ""

# de90286458384066979fd22674550783
#: ../spack/lib/spack/docs/getting_started.rst:719
msgid ""
"In general, Spack is easier to use and more reliable if it builds all of its "
"own dependencies.  However, there are two packages for which one commonly "
"needs to use system versions:"
msgstr ""

# #-#-#-#-#  getting_started.pot (Spack 0.12)  #-#-#-#-#
# 68c58c821f114441b17cdb9545049b00
# #-#-#-#-#  workflows.pot (Spack 0.12)  #-#-#-#-#
# 3b5d9a7600ce4fb882b0521ace0a075b
#: ../spack/lib/spack/docs/getting_started.rst:725
#: ../spack/lib/spack/docs/workflows.rst:1271
msgid "MPI"
msgstr ""

# 7ce3798c006344c0bbf84f2ddb6ef07a
#: ../spack/lib/spack/docs/getting_started.rst:727
msgid ""
"On supercomputers, sysadmins have already built MPI versions that take into "
"account the specifics of that computer's hardware.  Unless you know how they "
"were built and can choose the correct Spack variants, you are unlikely to "
"get a working MPI from Spack.  Instead, use an appropriate pre-installed MPI."
msgstr ""

# c515eea4eff64a329c3940a59cde8a31
#: ../spack/lib/spack/docs/getting_started.rst:733
msgid ""
"If you choose a pre-installed MPI, you should consider using the pre-"
"installed compiler used to build that MPI; see above on ``compilers.yaml``."
msgstr ""

# fc8ed6177e0c4037b59ec3b19116b01e
#: ../spack/lib/spack/docs/getting_started.rst:739
msgid "OpenSSL"
msgstr ""

# 6d4a68fece6b41fd91eda9ac83eaa77f
#: ../spack/lib/spack/docs/getting_started.rst:741
msgid ""
"The ``openssl`` package underlies much of modern security in a modern OS; an "
"attacker can easily \"pwn\" any computer on which they can modify SSL. "
"Therefore, any ``openssl`` used on a system should be created in a \"trusted "
"environment\" --- for example, that of the OS vendor."
msgstr ""

# eaf431d073e14db5850efb4fe9b6a371
#: ../spack/lib/spack/docs/getting_started.rst:746
msgid ""
"OpenSSL is also updated by the OS vendor from time to time, in response to "
"security problems discovered in the wider community.  It is in everyone's "
"best interest to use any newly updated versions as soon as they come out.  "
"Modern Linux installations have standard procedures for security updates "
"without user involvement."
msgstr ""

# eb951be7fba240ef8a67c3e627d0406f
#: ../spack/lib/spack/docs/getting_started.rst:752
msgid ""
"Spack running at user-level is not a trusted environment, nor do Spack users "
"generally keep up-to-date on the latest security holes in SSL.  For these "
"reasons, a Spack-installed OpenSSL should likely not be trusted."
msgstr ""

# 47959a1fc72f45d9b77347999d6399d5
#: ../spack/lib/spack/docs/getting_started.rst:756
msgid ""
"As long as the system-provided SSL works, you can use it instead.  One can "
"check if it works by trying to download an ``https://``.  For example:"
msgstr ""

# c29ff332582545a8b74ddfbf59c4d175
#: ../spack/lib/spack/docs/getting_started.rst:764
msgid ""
"To tell Spack to use the system-supplied OpenSSL, first determine what "
"version you have:"
msgstr ""

# b2453f722c0f4706a3da66f23f573048
#: ../spack/lib/spack/docs/getting_started.rst:772
msgid "Then add the following to ``~/.spack/packages.yaml``:"
msgstr ""

# bf59342cff994f8e92d187a4526311fc
#: ../spack/lib/spack/docs/getting_started.rst:785
msgid "BLAS / LAPACK"
msgstr ""

# cf759360c589492e9768bdccd2852e79
#: ../spack/lib/spack/docs/getting_started.rst:787
msgid ""
"The recommended way to use system-supplied BLAS / LAPACK packages is to add "
"the following to ``packages.yaml``:"
msgstr ""

# fa5ccff214ed4f7e82182a3c16c3d908
#: ../spack/lib/spack/docs/getting_started.rst:804
msgid ""
"Above we pretend that the system-provided BLAS / LAPACK is ``netlib-lapack`` "
"only because it is the only BLAS / LAPACK provider which use standard names "
"for libraries (as opposed to, for example, ``libopenblas.so``)."
msgstr ""

# 52dd05665b714bcf9bdaceb205dd0344
#: ../spack/lib/spack/docs/getting_started.rst:808
msgid ""
"Although we specify external package in ``/usr``, Spack is smart enough not "
"to add ``/usr/lib`` to RPATHs, where it could cause unrelated system "
"libraries to be used instead of their Spack equivalents. ``usr/bin`` will be "
"present in PATH, however it will have lower precedence compared to paths "
"from other dependencies. This ensures that binaries in Spack dependencies "
"are preferred over system binaries."
msgstr ""

# #-#-#-#-#  getting_started.pot (Spack 0.12)  #-#-#-#-#
# 1e15245fb9d74100b2b6d9a67ea8ca42
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# 15be21e633914977879a25e7d4c69de5
#: ../spack/lib/spack/docs/getting_started.rst:817
#: ../spack/lib/spack/docs/packaging_guide.rst:872
msgid "Git"
msgstr ""

# e262c71968cb4aad83d2ca5d400de498
#: ../spack/lib/spack/docs/getting_started.rst:819
msgid ""
"Some Spack packages use ``git`` to download, which might not work on some "
"computers.  For example, the following error was encountered on a Macintosh "
"during ``spack install julia-master``:"
msgstr ""

# efa2e9f393584f2e9b191a2e68f7ad4d
#: ../spack/lib/spack/docs/getting_started.rst:832
msgid ""
"This problem is related to OpenSSL, and in some cases might be solved by "
"installing a new version of ``git`` and ``openssl``:"
msgstr ""

# 30519f59add64f559b078f046ba3ae38
#: ../spack/lib/spack/docs/getting_started.rst:835
msgid "Run ``spack install git``"
msgstr ""

# 583ae54d5aaf47daa51ae035eb7f5319
#: ../spack/lib/spack/docs/getting_started.rst:836
msgid "Add the output of ``spack module tcl loads git`` to your ``.bashrc``."
msgstr ""

# 38de4300a1c343e293ae164e16259fd3
#: ../spack/lib/spack/docs/getting_started.rst:838
msgid ""
"If this doesn't work, it is also possible to disable checking of SSL "
"certificates by using:"
msgstr ""

# 8ae7dd308b45408b9944b55f5bf51f75
#: ../spack/lib/spack/docs/getting_started.rst:845
msgid ""
"Using ``--insecure`` makes Spack disable SSL checking when fetching from "
"websites and from git."
msgstr ""

# d4ed17fea8ff4895bff7717c077f09b0
#: ../spack/lib/spack/docs/getting_started.rst:850
msgid ""
"This workaround should be used ONLY as a last resort!  Wihout SSL "
"certificate verification, spack and git will download from sites you "
"wouldn't normally trust.  The code you download and run may then be "
"compromised!  While this is not a major issue for archives that will be "
"checksummed, it is especially problematic when downloading from name Git "
"branches or tags, which relies entirely on trusting a certificate for "
"security (no verification)."
msgstr ""

# fee1085ae66d4487a5eadbdfe1413b28
#: ../spack/lib/spack/docs/getting_started.rst:856
msgid "certificate for security (no verification)."
msgstr ""

# 4ecfcb1dd1244b69bdd85b06bd6d595c
#: ../spack/lib/spack/docs/getting_started.rst:860
msgid "Utilities Configuration"
msgstr ""

# 86e64a6372d249d6afadf041a616ce04
#: ../spack/lib/spack/docs/getting_started.rst:862
msgid ""
"Although Spack does not need installation *per se*, it does rely on other "
"packages to be available on its host system.  If those packages are out of "
"date or missing, then Spack will not work.  Sometimes, an appeal to the "
"system's package manager can fix such problems.  If not, the solution is "
"have Spack install the required packages, and then have Spack use them."
msgstr ""

# a455e26c77134491838d8bca7fc5eb7f
#: ../spack/lib/spack/docs/getting_started.rst:869
msgid ""
"For example, if ``curl`` doesn't work, one could use the following steps to "
"provide Spack a working ``curl``:"
msgstr ""

# dd199d1e04f64a46b8bad1b4ad6b41fa
#: ../spack/lib/spack/docs/getting_started.rst:877
msgid "or alternately:"
msgstr ""

# dcc50a5def96406199b8e4b0681d0c8f
#: ../spack/lib/spack/docs/getting_started.rst:883
msgid "or if environment modules don't work:"
msgstr ""

# 7d781c0d7b5942ebb51b4772aa9349fa
#: ../spack/lib/spack/docs/getting_started.rst:890
msgid ""
"External commands are used by Spack in two places: within core Spack, and in "
"the package recipes. The bootstrapping procedure for these two cases is "
"somewhat different, and is treated separately below."
msgstr ""

# 9ac43b1384534fc4a822a6015bcbd985
#: ../spack/lib/spack/docs/getting_started.rst:896
msgid "Core Spack Utilities"
msgstr ""

# 178d9224a26d431d8008032c47b83caa
#: ../spack/lib/spack/docs/getting_started.rst:898
msgid ""
"Core Spack uses the following packages, mainly to download and unpack source "
"code, and to load generated environment modules: ``curl``, ``env``, ``git``, "
"``go``, ``hg``, ``svn``, ``tar``, ``unzip``, ``patch``, ``environment-"
"modules``."
msgstr ""

# 80c16ac6c4b1435e90bf61151a4d0ff4
#: ../spack/lib/spack/docs/getting_started.rst:903
msgid ""
"As long as the user's environment is set up to successfully run these "
"programs from outside of Spack, they should work inside of Spack as well.  "
"They can generally be activated as in the ``curl`` example above; or some "
"systems might already have an appropriate hand-built environment module that "
"may be loaded.  Either way works."
msgstr ""

# 7cfa2b3f80284211811667f2fd8762ff
#: ../spack/lib/spack/docs/getting_started.rst:909
msgid ""
"If you find that you are missing some of these programs, ``spack`` can build "
"some of them for you with ``spack bootstrap``. Currently supported programs "
"are ``environment-modules``."
msgstr ""

# 666ea19c177d44249c534dc73db2c7ce
#: ../spack/lib/spack/docs/getting_started.rst:913
msgid "A few notes on specific programs in this list:"
msgstr ""

# f0c533cf2ec84564ad529becc542c9ea
#: ../spack/lib/spack/docs/getting_started.rst:917
msgid "cURL, git, Mercurial, etc."
msgstr ""

# e7f6486dc6a04187833aff3e8b716036
#: ../spack/lib/spack/docs/getting_started.rst:919
msgid ""
"Spack depends on cURL to download tarballs, the format that most Spack-"
"installed packages come in.  Your system's cURL should always be able to "
"download unencrypted ``http://``.  However, the cURL on some systems has "
"problems with SSL-enabled ``https://`` URLs, due to outdated / insecure "
"versions of OpenSSL on those systems.  This will prevent Spack from "
"installing any software requiring ``https://`` until a new cURL has been "
"installed, using the technique above."
msgstr ""

# d0f55545a8b3465f9971f6d6ef4f5133
#: ../spack/lib/spack/docs/getting_started.rst:929
msgid ""
"remember that if you install ``curl`` via Spack that it may rely on a user-"
"space OpenSSL that is not upgraded regularly.  It may fall out of date "
"faster than your system OpenSSL."
msgstr ""

# 96bae6c0f9844f1689a8fe14822b8a66
#: ../spack/lib/spack/docs/getting_started.rst:933
msgid ""
"Some packages use source code control systems as their download method: "
"``git``, ``hg``, ``svn`` and occasionally ``go``.  If you had to install a "
"new ``curl``, then chances are the system-supplied version of these other "
"programs will also not work, because they also rely on OpenSSL. Once "
"``curl`` has been installed, you can similarly install the others."
msgstr ""

# 5fe77d60325c4715a255f1a9361953ca
#: ../spack/lib/spack/docs/getting_started.rst:944
msgid "Environment Modules"
msgstr ""

# 7bcf7566b7d4471380d730a0f8f69d6f
#: ../spack/lib/spack/docs/getting_started.rst:946
msgid ""
"In order to use Spack's generated module files, you must have installed "
"``environment-modules`` or ``lmod``. The simplest way to get the latest "
"version of either of these tools is installing it as part of Spack's "
"bootstrap procedure:"
msgstr ""

# 593a447cd134473882019b04a26623f3
#: ../spack/lib/spack/docs/getting_started.rst:956
msgid ""
"At the moment ``spack bootstrap`` is only able to install ``environment-"
"modules``. Extending its capabilities to prefer ``lmod`` where possible is "
"in the roadmap, and likely to happen before the next release."
msgstr ""

# ff01f62e64ca44deba8f3579b9f40772
#: ../spack/lib/spack/docs/getting_started.rst:960
msgid ""
"Alternatively, on many Linux distributions, you can install a pre-built "
"binary from the vendor's repository. On Fedora/RHEL/CentOS, for example, "
"this can be done with the command:"
msgstr ""

# 0fdd94b3978d432e9c31c4d389eb4ce0
#: ../spack/lib/spack/docs/getting_started.rst:968
msgid ""
"Once you have the tool installed and available in your path, you can source "
"Spack's setup file:"
msgstr ""

# 91ef076bdb5446538abb689abe708ae1
#: ../spack/lib/spack/docs/getting_started.rst:975
msgid ""
"This activates :ref:`shell support <shell-support>` and makes commands like "
"``spack load`` available for use."
msgstr ""

# 4a09a3bb584044dcaeef631826cc4615
#: ../spack/lib/spack/docs/getting_started.rst:981
msgid "Package Utilities"
msgstr ""

# f50b28bfa4a845249d7f2f0b1239da31
#: ../spack/lib/spack/docs/getting_started.rst:983
msgid ""
"Spack may also encounter bootstrapping problems inside a package's "
"``install()`` method.  In this case, Spack will normally be running inside a "
"*sanitized build environment*.  This includes all of the package's "
"dependencies, but none of the environment Spack inherited from the user: if "
"you load a module or modify ``$PATH`` before launching Spack, it will have "
"no effect."
msgstr ""

# 8c7d5b4d888040baab4f2cfde394972e
#: ../spack/lib/spack/docs/getting_started.rst:990
msgid ""
"In this case, you will likely need to use the ``--dirty`` flag when running "
"``spack install``, causing Spack to **not** sanitize the build environment.  "
"You are now responsible for making sure that environment does not do strange "
"things to Spack or its installs."
msgstr ""

# a195b71a39f846f78b70488398400425
#: ../spack/lib/spack/docs/getting_started.rst:995
msgid ""
"Another way to get Spack to use its own version of something is to add that "
"something to a package that needs it.  For example:"
msgstr ""

# 93f74082db0544f38cba9fc5a3372ef9
#: ../spack/lib/spack/docs/getting_started.rst:1002
msgid ""
"This is considered best practice for some common build dependencies, such as "
"``autotools`` (if the ``autoreconf`` command is needed) and ``cmake`` --- "
"``cmake`` especially, because different packages require a different version "
"of CMake."
msgstr ""

# 9e170a416b36477394aca93dc026a650
#: ../spack/lib/spack/docs/getting_started.rst:1009
msgid "binutils"
msgstr ""

# ace3609329934492a89e948e813057fb
#: ../spack/lib/spack/docs/getting_started.rst:1013
msgid ""
"Sometimes, strange error messages can happen while building a package. For "
"example, ``ld`` might crash.  Or one receives a message like:"
msgstr ""

# 9f8749869cbc494cb8a37e21749c19fb
#: ../spack/lib/spack/docs/getting_started.rst:1027
msgid ""
"These problems are often caused by an outdated ``binutils`` on your system.  "
"Unlike CMake or Autotools, adding ``depends_on('binutils')`` to every "
"package is not considered a best practice because every package written in C/"
"C++/Fortran would need it.  A potential workaround is to load a recent "
"``binutils`` into your environment and use the ``--dirty`` flag."
msgstr ""

# ca320841803c41459e5cf2772fca3104
#: ../spack/lib/spack/docs/getting_started.rst:1036
msgid "GPG Signing"
msgstr ""

# 1f0b8ceedb364d7a815842d1fde6fb53
#: ../spack/lib/spack/docs/getting_started.rst:1042
msgid "``spack gpg``"
msgstr ""

# 5b6d2f1d8761431d95283299f4dcc91a
#: ../spack/lib/spack/docs/getting_started.rst:1044
msgid ""
"Spack has support for signing and verifying packages using GPG keys. A "
"separate keyring is used for Spack, so any keys available in the user's home "
"directory are not used."
msgstr ""

# 27e94ccab97f408b88950e07a2d09a92
#: ../spack/lib/spack/docs/getting_started.rst:1050
msgid "``spack gpg init``"
msgstr ""

# 81a7083e39904f04a28eee42fa3a57e5
#: ../spack/lib/spack/docs/getting_started.rst:1052
msgid ""
"When Spack is first installed, its keyring is empty. Keys stored in :file:"
"`var/spack/gpg` are the default keys for a Spack installation. These keys "
"may be imported by running ``spack gpg init``. This will import the default "
"keys into the keyring as trusted keys."
msgstr ""

# 33a919d8ff294de9a8cf3686be6e5be6
#: ../spack/lib/spack/docs/getting_started.rst:1059
msgid "Trusting keys"
msgstr ""

# 225548fcc0e6462c912d89551217a934
#: ../spack/lib/spack/docs/getting_started.rst:1061
msgid ""
"Additional keys may be added to the keyring using ``spack gpg trust "
"<keyfile>``. Once a key is trusted, packages signed by the owner of they key "
"may be installed."
msgstr ""

# c148fe8e763b46a7831ea38b0ed7a6b5
#: ../spack/lib/spack/docs/getting_started.rst:1067
msgid "Creating keys"
msgstr ""

# cea0e2418b1b42f284d5125303e104cd
#: ../spack/lib/spack/docs/getting_started.rst:1069
msgid ""
"You may also create your own key so that you may sign your own packages "
"using ``spack gpg create <name> <email>``. By default, the key has no "
"expiration, but it may be set with the ``--expires <date>`` flag (see the "
"``gnupg2`` documentation for accepted date formats). It is also recommended "
"to add a comment as to the use of the key using the ``--comment <comment>`` "
"flag. The public half of the key can also be exported for sharing with "
"others so that they may use packages you have signed using the ``--export "
"<keyfile>`` flag. Secret keys may also be later exported using the ``spack "
"gpg export <location> [<key>...]`` command."
msgstr ""

# b4865b6b0e4e4aa99930e7e13f8f2221
#: ../spack/lib/spack/docs/getting_started.rst:1107
msgid "Key creation speed"
msgstr ""

# e7e28d69b56c4df5a1f5b9d9d78c9afd
#: ../spack/lib/spack/docs/getting_started.rst:1082
msgid ""
"The creation of a new GPG key requires generating a lot of random numbers. "
"Depending on the entropy produced on your system, the entire process may "
"take a long time (*even appearing to hang*). Virtual machines and cloud "
"instances are particularly likely to display this behavior."
msgstr ""

# 4370554f5d4e46c1ab5b61c75312fa8a
#: ../spack/lib/spack/docs/getting_started.rst:1087
msgid ""
"To speed it up you may install tools like ``rngd``, which is usually "
"available as a package in the host OS.  On e.g. an Ubuntu machine you need "
"to give the following commands:"
msgstr ""

# f91a01cf33be4c2094b0fec0cfa7ff8c
#: ../spack/lib/spack/docs/getting_started.rst:1096
msgid "before generating the keys."
msgstr ""

# cdf6e57f33be499fbe3d996688f7779e
#: ../spack/lib/spack/docs/getting_started.rst:1098
msgid ""
"Another alternative is ``haveged``, which can be installed on RHEL/CentOS "
"machines as follows:"
msgstr ""

# e8ac81a8b5f941309b962ee7b679996d
#: ../spack/lib/spack/docs/getting_started.rst:1106
msgid ""
"`This Digital Ocean tutorial <https://www.digitalocean.com/community/"
"tutorials/how-to-setup-additional-entropy-for-cloud-servers-using-haveged>`_ "
"provides a good overview of sources of randomness."
msgstr ""

# b49593001fa44847b2e0b8a8dcac693e
#: ../spack/lib/spack/docs/getting_started.rst:1112
msgid "Listing keys"
msgstr ""

# 50aca031a1604bdcb80f38c45f0ac695
#: ../spack/lib/spack/docs/getting_started.rst:1114
msgid ""
"In order to list the keys available in the keyring, the ``spack gpg list`` "
"command will list trusted keys with the ``--trusted`` flag and keys "
"available for signing using ``--signing``. If you would like to remove keys "
"from your keyring, ``spack gpg untrust <keyid>``. Key IDs can be email "
"addresses, names, or (best) fingerprints."
msgstr ""

# 02f0a45aa7cb489185332110b2db47ff
#: ../spack/lib/spack/docs/getting_started.rst:1122
msgid "Signing and Verifying Packages"
msgstr ""

# 975ced75e1244d83b12f95e2d08d97cf
#: ../spack/lib/spack/docs/getting_started.rst:1124
msgid ""
"In order to sign a package, ``spack gpg sign <file>`` should be used. By "
"default, the signature will be written to ``<file>.asc``, but that may be "
"changed by using the ``--output <file>`` flag. If there is only one signing "
"key available, it will be used, but if there is more than one, the key to "
"use must be specified using the ``--key <keyid>`` flag. The ``--clearsign`` "
"flag may also be used to create a signed file which contains the contents, "
"but it is not recommended. Signed packages may be verified by using ``spack "
"gpg verify <file>``."
msgstr ""

# 98a58b56dd094e50ba35438967bd858b
#: ../spack/lib/spack/docs/getting_started.rst:1137
msgid "Spack on Cray"
msgstr ""

# bdd283bc34b0486b946d6c0790b36cae
#: ../spack/lib/spack/docs/getting_started.rst:1139
msgid ""
"Spack differs slightly when used on a Cray system. The architecture spec can "
"differentiate between the front-end and back-end processor and operating "
"system. For example, on Edison at NERSC, the back-end target processor is "
"\"Ivy Bridge\", so you can specify to use the back-end this way:"
msgstr ""

# 0edc2877a24c4396b58fdbbff11657cc
#: ../spack/lib/spack/docs/getting_started.rst:1148
msgid "You can also use the operating system to build against the back-end:"
msgstr ""

# b5dcf74c101a45e08e47a3d262f259f0
#: ../spack/lib/spack/docs/getting_started.rst:1154
msgid ""
"Notice that the name includes both the operating system name and the major "
"version number concatenated together."
msgstr ""

# d228c7926cff49c4960fffb753e687b2
#: ../spack/lib/spack/docs/getting_started.rst:1157
msgid ""
"Alternatively, if you want to build something for the front-end, you can "
"specify the front-end target processor. The processor for a login node on "
"Edison is \"Sandy bridge\" so we specify on the command line like so:"
msgstr ""

# 744ecafa015c45e0bd896f5cb7b46847
#: ../spack/lib/spack/docs/getting_started.rst:1165
msgid "And the front-end operating system is:"
msgstr ""

# d12224a071d34a6db05e8a3e9227c55b
#: ../spack/lib/spack/docs/getting_started.rst:1173
msgid "Cray compiler detection"
msgstr ""

# 335e073c75344440b9ad69968d819589
#: ../spack/lib/spack/docs/getting_started.rst:1175
msgid ""
"Spack can detect compilers using two methods. For the front-end, we treat "
"everything the same. The difference lies in back-end compiler detection. "
"Back-end compiler detection is made via the Tcl module avail command. Once "
"it detects the compiler it writes the appropriate PrgEnv and compiler module "
"name to compilers.yaml and sets the paths to each compiler with Cray\\'s "
"compiler wrapper names (i.e. cc, CC, ftn). During build time, Spack will "
"load the correct PrgEnv and compiler module and will call appropriate "
"wrapper."
msgstr ""

# b9a6e92250a64cc68bb310f31560d61b
#: ../spack/lib/spack/docs/getting_started.rst:1183
msgid ""
"The compilers.yaml config file will also differ. There is a modules section "
"that is filled with the compiler's Programming Environment and module name. "
"On other systems, this field is empty []:"
msgstr ""

# ef201855d341430dad88f46f3623598a
#: ../spack/lib/spack/docs/getting_started.rst:1194
msgid ""
"As mentioned earlier, the compiler paths will look different on a Cray "
"system. Since most compilers are invoked using cc, CC and ftn, the paths for "
"each compiler are replaced with their respective Cray compiler wrapper names:"
msgstr ""

# 29efca10351e4086a0376e564026a0c7
#: ../spack/lib/spack/docs/getting_started.rst:1206
msgid ""
"As opposed to an explicit path to the compiler executable. This allows Spack "
"to call the Cray compiler wrappers during build time."
msgstr ""

# 2bb2a3bac7d244edad603e329344a141
#: ../spack/lib/spack/docs/getting_started.rst:1209
msgid "For more on compiler configuration, check out :ref:`compiler-config`."
msgstr ""

# ce05a6f7552643fe80d126e313e17ea8
#: ../spack/lib/spack/docs/getting_started.rst:1211
msgid ""
"Spack sets the default Cray link type to dynamic, to better match other "
"other platforms. Individual packages can enable static linking (which is the "
"default outside of Spack on cray systems) using the ``-static`` flag."
msgstr ""

# 26c9a803aa224002a4db93be77001fb1
#: ../spack/lib/spack/docs/getting_started.rst:1217
msgid "Setting defaults and using Cray modules"
msgstr ""

# e3f6a1842fd648c1b5ffe1d2cecae3b9
#: ../spack/lib/spack/docs/getting_started.rst:1219
msgid ""
"If you want to use default compilers for each PrgEnv and also be able to "
"load cray external modules, you will need to set up a ``packages.yaml``."
msgstr ""

# c93ac79ae62e41879f66b03d7ba61ca9
#: ../spack/lib/spack/docs/getting_started.rst:1222
msgid "Here's an example of an external configuration for cray modules:"
msgstr ""

# b7a9300d0d724a08bc9219c7dcf217fe
#: ../spack/lib/spack/docs/getting_started.rst:1235
msgid ""
"This tells Spack that for whatever package that depends on mpi, load the "
"cray-mpich module into the environment. You can then be able to use whatever "
"environment variables, libraries, etc, that are brought into the environment "
"via module load."
msgstr ""

# 4dc691da65ff428e981a11e9af6e3265
#: ../spack/lib/spack/docs/getting_started.rst:1242
msgid ""
"For Cray-provided packages, it is best to use ``modules:`` instead of "
"``paths:`` in ``packages.yaml``, because the Cray Programming Environment "
"heavily relies on modules (e.g., loading the ``cray-mpich`` module adds MPI "
"libraries to the compiler wrapper link line)."
msgstr ""

# 2726df77e3694c9c897a417369b0c58a
#: ../spack/lib/spack/docs/getting_started.rst:1247
msgid ""
"You can set the default compiler that Spack can use for each compiler type. "
"If you want to use the Cray defaults, then set them under ``all:`` in "
"packages.yaml. In the compiler field, set the compiler specs in your order "
"of preference. Whenever you build with that compiler type, Spack will "
"concretize to that version."
msgstr ""

# 549da5142ceb4b498e383ac9429fdce6
#: ../spack/lib/spack/docs/getting_started.rst:1252
msgid "Here is an example of a full packages.yaml used at NERSC"
msgstr ""

# c7490e1bc5d4478d8cda5b5535c4463c
#: ../spack/lib/spack/docs/getting_started.rst:1277
msgid ""
"Here we tell spack that whenever we want to build with gcc use version 5.2.0 "
"or if we want to build with intel compilers, use version 16.0.0.109. We add "
"a spec for each compiler type for each cray modules. This ensures that for "
"each compiler on our system we can use that external module."
msgstr ""

# 77a609b0f830480f80dc2dbc55e27712
#: ../spack/lib/spack/docs/getting_started.rst:1282
msgid ""
"For more on external packages check out the section :ref:`sec-external-"
"packages`."
msgstr ""

# 1784274253cf4ca4bd8339abe51ec087
#: ../spack/lib/spack/docs/getting_started.rst:1286
msgid "Using Linux containers on Cray machines"
msgstr ""

# 34a0bcb4bdf54cb88a46cb529b437967
#: ../spack/lib/spack/docs/getting_started.rst:1288
msgid ""
"Spack uses environment variables particular to the Cray programming "
"environment to determine which systems are Cray platforms. These environment "
"variables may be propagated into containers that are not using the Cray "
"programming environment."
msgstr ""

# 0beb574250f44f97a6ff379410dd6bb8
#: ../spack/lib/spack/docs/getting_started.rst:1293
msgid ""
"To ensure that Spack does not autodetect the Cray programming environment, "
"unset the environment variable ``CRAYPE_VERSION``. This will cause Spack to "
"treat a linux container on a Cray system as a base linux distro."
msgstr ""

# f8651acaf3d6494eb3cc74bc37e83705
#: ../spack/lib/spack/docs/index.rst:13
msgid "Spack"
msgstr ""

# 2d5552bec9914c52b6ab16ae2a8156e5
#: ../spack/lib/spack/docs/index.rst:17
msgid ""
"`These are docs for the Spack package manager. For sphere packing, see` "
"`pyspack <https://pyspack.readthedocs.io>`_."
msgstr ""

# ba8a580cc1bd4f6588635152c955d963
#: ../spack/lib/spack/docs/index.rst:19
msgid ""
"Spack is a package management tool designed to support multiple versions and "
"configurations of software on a wide variety of platforms and environments.  "
"It was designed for large supercomputing centers, where many users and "
"application teams share common installations of software on clusters with "
"exotic architectures, using libraries that do not have a standard ABI.  "
"Spack is non-destructive: installing a new version does not break existing "
"installations, so many configurations can coexist on the same system."
msgstr ""

# cd7b2416fae747d79165d11fa14d4c1d
#: ../spack/lib/spack/docs/index.rst:28
msgid ""
"Most importantly, Spack is *simple*.  It offers a simple *spec* syntax so "
"that users can specify versions and configuration options concisely.  Spack "
"is also simple for package authors: package files are written in pure "
"Python, and specs allow package authors to maintain a single file for many "
"different builds of the same package."
msgstr ""

# 435aaab564c3439a84671295880c0dc5
#: ../spack/lib/spack/docs/index.rst:34
msgid "See the :doc:`features` for examples and highlights."
msgstr ""

# 65025eab05e448589a72bf56d5946d10
#: ../spack/lib/spack/docs/index.rst:36
msgid ""
"Get spack from the `github repository <https://github.com/spack/spack>`_ and "
"install your first package:"
msgstr ""

# fc722e9acb904d72b949e69d12e3344b
#: ../spack/lib/spack/docs/index.rst:46
msgid ""
"If you're new to spack and want to start using it, see :doc:"
"`getting_started`, or refer to the full manual below."
msgstr ""

# 49b34590330a40768ffaf5040864d79c
#: ../spack/lib/spack/docs/index.rst:50
msgid "Basics"
msgstr ""

# 9dd2376cf4c74d238ccf780607a7141f
#: ../spack/lib/spack/docs/index.rst:61
msgid "Reference"
msgstr ""

# 9edd93b9e1644710bb5331faf53f3e9c
#: ../spack/lib/spack/docs/index.rst:77
msgid "Contributing"
msgstr ""

# 25ac49d343954b97982d10b963870dd6
#: ../spack/lib/spack/docs/index.rst:87
msgid "API Docs"
msgstr ""

# 2118a08996d744659b06dd0f9d6732dc
#: ../spack/lib/spack/docs/index.rst:96
msgid "Indices and tables"
msgstr ""

# 96f1c3f899bb4eeeb772c7af5fd0a280
#: ../spack/lib/spack/docs/index.rst:98
msgid ":ref:`genindex`"
msgstr ""

# 76b76fa726e9445e921e779f817464dd
#: ../spack/lib/spack/docs/index.rst:99
msgid ":ref:`modindex`"
msgstr ""

# 2fc4f842a0254561abfa208857270f90
#: ../spack/lib/spack/docs/index.rst:100
msgid ":ref:`search`"
msgstr ""

# 35efff99c23543488b9a70eaf1ed0477
#: ../spack/lib/spack/docs/known_issues.rst:8
msgid "Known Issues"
msgstr ""

# 751ed3a277eb44498a21672e5998c8b7
#: ../spack/lib/spack/docs/known_issues.rst:10
msgid ""
"This is a list of known bugs in Spack. It provides ways of getting around "
"these problems if you encounter them."
msgstr ""

# f5e468d6b0a2489183415902a987fc6c
#: ../spack/lib/spack/docs/known_issues.rst:15
msgid "Variants are not properly forwarded to dependencies"
msgstr ""

# cc3baba154cc4fcfb8100e4faf7d7a05
#: ../spack/lib/spack/docs/known_issues.rst:17
msgid "**Status:** Expected to be fixed in the next release"
msgstr ""

# e00ffcc6100640d1bc824c2f69064083
#: ../spack/lib/spack/docs/known_issues.rst:19
msgid ""
"Sometimes, a variant of a package can also affect how its dependencies are "
"built. For example, in order to build MPI support for a package, it may "
"require that its dependencies are also built with MPI support. In the "
"``package.py``, this looks like:"
msgstr ""

# 6b203aba60394cfc88ffa21eea432225
#: ../spack/lib/spack/docs/known_issues.rst:29
msgid ""
"Spack handles this situation properly for *immediate* dependencies, and "
"builds ``hdf5`` with the same variant you used for the package that depends "
"on it. However, for *indirect* dependencies (dependencies of dependencies), "
"Spack does not backtrack up the DAG far enough to handle this. Users "
"commonly run into this situation when trying to build R with X11 support:"
msgstr ""

# d0a6fab04bd3471b9b56ba0ccdf0bf90
#: ../spack/lib/spack/docs/known_issues.rst:43
msgid ""
"A workaround is to explicitly activate the variants of dependencies as well:"
msgstr ""

# c5cd462fe92a48eb819dade1ea341d1d
#: ../spack/lib/spack/docs/known_issues.rst:49
msgid ""
"See https://github.com/spack/spack/issues/267 and https://github.com/spack/"
"spack/issues/2546 for further details."
msgstr ""

# b12a990cd05a48f79e9e902effc49e83
#: ../spack/lib/spack/docs/known_issues.rst:55
msgid "``spack setup`` doesn't work"
msgstr ""

# 6eb186a459ba431ea99032cd20a5b25d
#: ../spack/lib/spack/docs/known_issues.rst:57
msgid "**Status:** Work in progress"
msgstr ""

# fbc5e7649436433fbd36baa254d28200
#: ../spack/lib/spack/docs/known_issues.rst:59
msgid ""
"Spack provides a ``setup`` command that is useful for the development of "
"software outside of Spack. Unfortunately, this command no longer works. See "
"https://github.com/spack/spack/issues/2597 and https://github.com/spack/"
"spack/issues/2662 for details. This is expected to be fixed by https://"
"github.com/spack/spack/pull/2664."
msgstr ""

# 5cdb39b87ba84fc9946a750eb9e42b2e
#: ../spack/lib/spack/docs/mirrors.rst:10
msgid "Mirrors"
msgstr ""

# 0cc917bfe2bb4ba5b450e8f2bdbf63fc
#: ../spack/lib/spack/docs/mirrors.rst:12
msgid ""
"Some sites may not have access to the internet for fetching packages. These "
"sites will need a local repository of tarballs from which they can get their "
"files.  Spack has support for this with *mirrors*.  A mirror is a URL that "
"points to a directory, either on the local filesystem or on some server, "
"containing tarballs for all of Spack's packages."
msgstr ""

# 5c962c65ec9f40d5bc77302d5e4eb9e0
#: ../spack/lib/spack/docs/mirrors.rst:19
msgid "Here's an example of a mirror's directory structure:"
msgstr ""

# e899e0c4a02349858fcc4ab31007c8ee
#: ../spack/lib/spack/docs/mirrors.rst:43
msgid ""
"The structure is very simple.  There is a top-level directory.  The second "
"level directories are named after packages, and the third level contains "
"tarballs for each package, named after each package."
msgstr ""

# e0c7d7c9d44142a98938d5c46dd81cf8
#: ../spack/lib/spack/docs/mirrors.rst:49
msgid ""
"Archives are **not** named exactly the way they were in the package's fetch "
"URL.  They have the form ``<name>-<version>.<extension>``, where ``<name>`` "
"is Spack's name for the package, ``<version>`` is the version of the "
"tarball, and ``<extension>`` is whatever format the package's fetch URL "
"contains."
msgstr ""

# 7f35ff50f1de4e10a107e776d39f8c9a
#: ../spack/lib/spack/docs/mirrors.rst:55
msgid ""
"In order to make mirror creation reasonably fast, we copy the tarball in its "
"original format to the mirror directory, but we do not standardize on a "
"particular compression algorithm, because this would potentially require "
"expanding and re-compressing each archive."
msgstr ""

# b1b4296c7fa24f0a87eded7b8f619609
#: ../spack/lib/spack/docs/mirrors.rst:64
msgid "``spack mirror``"
msgstr ""

# 37ad00ebca1945c8918f30ef4ee3ee28
#: ../spack/lib/spack/docs/mirrors.rst:66
msgid ""
"Mirrors are managed with the ``spack mirror`` command.  The help for ``spack "
"mirror`` looks like this:"
msgstr ""

# d3e61a055391415c8c93241ac245ecb5
#: ../spack/lib/spack/docs/mirrors.rst:71
msgid ""
"The ``create`` command actually builds a mirror by fetching all of its "
"packages from the internet and checksumming them."
msgstr ""

# 526cda4dc7064655b5ac546e988287c2
#: ../spack/lib/spack/docs/mirrors.rst:74
msgid ""
"The other three commands are for managing mirror configuration.  They "
"control the URL(s) from which Spack downloads its packages."
msgstr ""

# 74b9857fffa84023b84f30e3dffe092e
#: ../spack/lib/spack/docs/mirrors.rst:81
msgid "``spack mirror create``"
msgstr ""

# 58ecd2b6f52d4cd588a9350c87b87003
#: ../spack/lib/spack/docs/mirrors.rst:83
msgid ""
"You can create a mirror using the ``spack mirror create`` command, assuming "
"you're on a machine where you can access the internet."
msgstr ""

# 744aa4c76cd74c2aa162191056ac3d92
#: ../spack/lib/spack/docs/mirrors.rst:86
msgid ""
"The command will iterate through all of Spack's packages and download the "
"safe ones into a directory structure like the one above.  Here is what it "
"looks like:"
msgstr ""

# 8b6cabd03fba440f8058226814012912
#: ../spack/lib/spack/docs/mirrors.rst:121
msgid ""
"Once this is done, you can tar up the ``spack-mirror-2014-06-24`` directory "
"and copy it over to the machine you want it hosted on."
msgstr ""

# b8f74ea6bd8d476c8bad6d6cab2e244d
#: ../spack/lib/spack/docs/mirrors.rst:126
msgid "Custom package sets"
msgstr ""

# 8fa23f0c6fda4844b971533dc2d37d1a
#: ../spack/lib/spack/docs/mirrors.rst:128
msgid ""
"Normally, ``spack mirror create`` downloads all the archives it has "
"checksums for.  If you want to only create a mirror for a subset of "
"packages, you can do that by supplying a list of package specs on the "
"command line after ``spack mirror create``.  For example, this command:"
msgstr ""

# c80fd4bb721642d1858f3790bbda7483
#: ../spack/lib/spack/docs/mirrors.rst:138
msgid ""
"Will create a mirror for libelf versions greater than or equal to 0.8.12 and "
"boost versions greater than or equal to 1.44."
msgstr ""

# e4581a1bb3724f5c8325353a3dfbaca3
#: ../spack/lib/spack/docs/mirrors.rst:143
msgid "Mirror files"
msgstr ""

# e5d5f5620e464cd999a3c7dc891a46e3
#: ../spack/lib/spack/docs/mirrors.rst:145
msgid ""
"If you have a *very* large number of packages you want to mirror, you can "
"supply a file with specs in it, one per line:"
msgstr ""

# ec35e9ab940d42a78bb55536478d5e86
#: ../spack/lib/spack/docs/mirrors.rst:159
msgid ""
"This is useful if there is a specific suite of software managed by your site."
msgstr ""

# d1b7f420edd7499ab3748141c2b575eb
#: ../spack/lib/spack/docs/mirrors.rst:166
msgid "``spack mirror add``"
msgstr ""

# 8387fb35eff14eedbd141be5f55aed66
#: ../spack/lib/spack/docs/mirrors.rst:168
msgid ""
"Once you have a mirror, you need to let spack know about it.  This is "
"relatively simple.  First, figure out the URL for the mirror.  If it's a "
"directory, you can use a file URL like this one:"
msgstr ""

# 40752891d7c146e8be532d97c1673eb4
#: ../spack/lib/spack/docs/mirrors.rst:176
msgid ""
"That points to the directory on the local filesystem.  If it were on a web "
"server, you could use a URL like this one:"
msgstr ""

# 4ab6a80525b841c397b96d5a2186872a
#: ../spack/lib/spack/docs/mirrors.rst:179
msgid "https://example.com/some/web-hosted/directory/spack-mirror-2014-06-24"
msgstr ""

# cbc4d14a61be4b128022aa25f950e522
#: ../spack/lib/spack/docs/mirrors.rst:181
msgid ""
"Spack will use the URL as the root for all of the packages it fetches. You "
"can tell your Spack installation to use that mirror like this:"
msgstr ""

# c4abda6b73de4850a6193babedd56479
#: ../spack/lib/spack/docs/mirrors.rst:188
msgid "Each mirror has a name so that you can refer to it again later."
msgstr ""

# 9d17e6cf865b440ca5d65a3abb7d0d7f
#: ../spack/lib/spack/docs/mirrors.rst:194
msgid "``spack mirror list``"
msgstr ""

# bb1ebc7047964b9594930918749541b2
#: ../spack/lib/spack/docs/mirrors.rst:196
msgid "To see all the mirrors Spack knows about, run ``spack mirror list``:"
msgstr ""

# d464924f302b49b68e34bd579121cd8e
#: ../spack/lib/spack/docs/mirrors.rst:207
msgid "``spack mirror remove``"
msgstr ""

# 0b9f261589f9491a93537f3a40a91f08
#: ../spack/lib/spack/docs/mirrors.rst:209
msgid "To remove a mirror by name, run:"
msgstr ""

# 66efa7e3c7994b8aa761c4c543fc63cc
#: ../spack/lib/spack/docs/mirrors.rst:219
msgid "Mirror precedence"
msgstr ""

# acf9870d27e7428a81ce19e870181bb7
#: ../spack/lib/spack/docs/mirrors.rst:221
msgid "Adding a mirror really adds a line in ``~/.spack/mirrors.yaml``:"
msgstr ""

# 7613d88c736b4a33b1d7828344fd26df
#: ../spack/lib/spack/docs/mirrors.rst:229
msgid ""
"If you want to change the order in which mirrors are searched for packages, "
"you can edit this file and reorder the sections.  Spack will search the "
"topmost mirror first and the bottom-most mirror last."
msgstr ""

# e35e851274f64d33b2c16e0c32234614
#: ../spack/lib/spack/docs/mirrors.rst:237
msgid "Local Default Cache"
msgstr ""

# 242398876a314662814476a9d544485d
#: ../spack/lib/spack/docs/mirrors.rst:239
msgid ""
"Spack caches resources that are downloaded as part of installs. The cache is "
"a valid spack mirror: it uses the same directory structure and naming scheme "
"as other Spack mirrors (so it can be copied anywhere and referenced with a "
"URL like other mirrors). The mirror is maintained locally (within the Spack "
"installation directory) at :file:`var/spack/cache/`. It is always enabled "
"(and is always searched first when attempting to retrieve files for an "
"installation) but can be cleared with :ref:`clean <cmd-spack-clean>`; the "
"cache directory can also be deleted manually without issue."
msgstr ""

# 78a9ce5cfc8c450b9829a434b0c5e0d4
#: ../spack/lib/spack/docs/mirrors.rst:248
msgid ""
"Caching includes retrieved tarball archives and source control repositories, "
"but only resources with an associated digest or commit ID (e.g. a revision "
"number for SVN) will be cached."
msgstr ""

# a3d97aa2b2374046be7dee13525da536
# 343c4c981d18469f892e1982a7f1c2cc
#: ../spack/lib/spack/docs/module_file_support.rst:10
#: ../spack/lib/spack/docs/module_file_support.rst:114
msgid "Modules"
msgstr ""

# 1bd19f0c3b99418eb8e4fa02750c0266
#: ../spack/lib/spack/docs/module_file_support.rst:12
msgid ""
"The use of module systems to manage user environment in a controlled way is "
"a common practice at HPC centers that is often embraced also by individual "
"programmers on their development machines. To support this common practice "
"Spack integrates with `Environment Modules <http://modules.sourceforge.net/"
">`_ ,  `LMod <http://lmod.readthedocs.io/en/latest/>`_ and `Dotkit <https://"
"computing.llnl.gov/?set=jobs&page=dotkit>`_ by providing post-install hooks "
"that generate module files and commands to manipulate them."
msgstr ""

# 3b37de767a70465c82ab887e0aeeeeb7
#: ../spack/lib/spack/docs/module_file_support.rst:22
msgid ""
"If your machine does not already have a module system installed, we advise "
"you to use either Environment Modules or LMod. See :ref:"
"`InstallEnvironmentModules` for more details."
msgstr ""

# fcbe2fbfa0af43019740fa2d7b1d381b
#: ../spack/lib/spack/docs/module_file_support.rst:30
msgid "Using module files via Spack"
msgstr ""

# 6bb95f47000c4e809eebc5d525651611
#: ../spack/lib/spack/docs/module_file_support.rst:32
msgid ""
"If you have installed a supported module system either manually or through "
"``spack bootstrap``, you should be able to run either ``module avail`` or "
"``use -l spack`` to see what module files have been installed.  Here is "
"sample output of those programs, showing lots of installed packages:"
msgstr ""

# 84604e3c0fa0452890d3528294c33f8b
#: ../spack/lib/spack/docs/module_file_support.rst:57
msgid ""
"The names should look familiar, as they resemble the output from ``spack "
"find``. You *can* use the modules here directly.  For example, you could "
"type either of these commands to load the ``cmake`` module:"
msgstr ""

# 5b7e242ff4fd4465bb338272eb7a5641
#: ../spack/lib/spack/docs/module_file_support.rst:69
msgid ""
"Neither of these is particularly pretty, easy to remember, or easy to type. "
"Luckily, Spack has its own interface for using modules and dotkits."
msgstr ""

# edf2d573444d42229c6dbf8dd73edf33
#: ../spack/lib/spack/docs/module_file_support.rst:74
msgid "Shell support"
msgstr ""

# fc0c767ffdda45a3b2874299ec9b3b4d
#: ../spack/lib/spack/docs/module_file_support.rst:76
msgid ""
"To enable additional Spack commands for loading and unloading module files, "
"and to add the correct path to ``MODULEPATH``,  you need to source the "
"appropriate setup file in the ``$SPACK_ROOT/share/spack`` directory. This "
"will activate shell support for the commands that need it. For ``bash``, "
"``ksh`` or ``zsh`` users:"
msgstr ""

# 9df1c8b97dae41fa87dfd396149bccad
#: ../spack/lib/spack/docs/module_file_support.rst:85
msgid "For ``csh`` and ``tcsh`` instead:"
msgstr ""

# 4d96c28d24f141cbacd6b30a864c2ddc
#: ../spack/lib/spack/docs/module_file_support.rst:92
msgid ""
"Note that in the latter case it is necessary to explicitly set "
"``SPACK_ROOT`` before sourcing the setup file (you will get a meaningful "
"error message if you don't)."
msgstr ""

# 718172bccc58450aa3f2183b5089f0af
#: ../spack/lib/spack/docs/module_file_support.rst:96
msgid ""
"When ``bash`` and ``ksh`` users update their environment with ``setup-env."
"sh``, it will check for spack-installed environment modules and add the "
"``module`` command to their environment; This only occurs if the module "
"command is not already available. You can install ``environment-modules`` "
"with ``spack bootstrap`` as described in :ref:`InstallEnvironmentModules`."
msgstr ""

# b41e8b1026944302bfb6f78cfc20cdef
#: ../spack/lib/spack/docs/module_file_support.rst:98
msgid ""
"Finally, if you want to have Spack's shell support available on the command "
"line at any login you can put this source line in one of the files that are "
"sourced at startup (like ``.profile``, ``.bashrc`` or ``.cshrc``). Be aware "
"though that the startup time may be slightly increased because of that."
msgstr ""

# a2fce6a298724a709c23e823058cb55b
#: ../spack/lib/spack/docs/module_file_support.rst:108
msgid "``spack load / unload``"
msgstr ""

# e6956bb73bca48e4a8baea4ff880a562
#: ../spack/lib/spack/docs/module_file_support.rst:110
msgid ""
"Once you have shell support enabled you can use the same spec syntax you're "
"used to:"
msgstr ""

# 3050c9e3271749af84813d5cfb303d2e
#: ../spack/lib/spack/docs/module_file_support.rst:114
msgid "Dotkit"
msgstr ""

# 77fa75e8ae424d9ebca4f7e1d806a869
#: ../spack/lib/spack/docs/module_file_support.rst:116
msgid "``spack load <spec>``"
msgstr ""

# 787e5afe17624345b0cc98d390821234
#: ../spack/lib/spack/docs/module_file_support.rst:116
msgid "``spack use <spec>``"
msgstr ""

# 56499b754c044ada9d1cc6edbc0555b5
#: ../spack/lib/spack/docs/module_file_support.rst:117
msgid "``spack unload <spec>``"
msgstr ""

# 641118a24b814b9db2fecb7ff49e9db5
#: ../spack/lib/spack/docs/module_file_support.rst:117
msgid "``spack unuse <spec>``"
msgstr ""

# b9feb0ab65054819bd52b316a34574bc
#: ../spack/lib/spack/docs/module_file_support.rst:120
msgid ""
"And you can use the same shortened names you use everywhere else in Spack."
msgstr ""

# 926ca2864dd844a8aed2f9439a3b9d60
#: ../spack/lib/spack/docs/module_file_support.rst:123
msgid ""
"For example, if you are using dotkit, this will add the ``mpich`` package "
"built with ``gcc`` to your path:"
msgstr ""

# 6bff089be98b4149a33f30418196eb03
#: ../spack/lib/spack/docs/module_file_support.rst:137
msgid "Or, similarly if you are using modules, you could type:"
msgstr ""

# d3db3d2e01314a5fa54a45d0d2bd2cc2
#: ../spack/lib/spack/docs/module_file_support.rst:143
msgid ""
"These commands will add appropriate directories to your ``PATH``, "
"``MANPATH``, ``CPATH``, and ``LD_LIBRARY_PATH``.  When you no longer want to "
"use a package, you can type unload or unuse similarly:"
msgstr ""

# 293c5494184a4b71a7ddfb72cd62948e
#: ../spack/lib/spack/docs/module_file_support.rst:154
msgid ""
"These ``use``, ``unuse``, ``load``, and ``unload`` subcommands are only "
"available if you have enabled Spack's shell support *and* you have dotkit or "
"modules installed on your machine."
msgstr ""

# 52bff170d9f34246bf237b67cdcda939
#: ../spack/lib/spack/docs/module_file_support.rst:160
msgid "Ambiguous module names"
msgstr ""

# 487ef8cc461b4edeafe35be8602998fc
#: ../spack/lib/spack/docs/module_file_support.rst:162
msgid ""
"If a spec used with load/unload or use/unuse is ambiguous (i.e. more than "
"one installed package matches it), then Spack will warn you:"
msgstr ""

# 31caeb2bec654c41b16029731dd01fe6
#: ../spack/lib/spack/docs/module_file_support.rst:172
msgid ""
"You can either type the ``spack load`` command again with a fully qualified "
"argument, or you can add just enough extra constraints to identify one "
"package.  For example, above, the key differentiator is that one ``libelf`` "
"is built with the Intel compiler, while the other used ``gcc``.  You could "
"therefore just type:"
msgstr ""

# 2e6fd1290b8d4a3c975d304fd6664b17
#: ../spack/lib/spack/docs/module_file_support.rst:182
msgid "To identify just the one built with the Intel compiler."
msgstr ""

# 1b501abe20ca4686b25b43167106ef7d
#: ../spack/lib/spack/docs/module_file_support.rst:190
msgid "``spack module tcl loads``"
msgstr ""

# 85545d9a74d74473bf07f3034ae70e59
#: ../spack/lib/spack/docs/module_file_support.rst:192
msgid ""
"In some cases, it is desirable to load not just a module, but also all the "
"modules it depends on.  This is not required for most modules because Spack "
"builds binaries with RPATH support.  However, not all packages use RPATH to "
"find their dependencies: this can be true in particular for Python "
"extensions, which are currently *not* built with RPATH."
msgstr ""

# f3b1fd5518c24d3db31b6feb48e55a03
#: ../spack/lib/spack/docs/module_file_support.rst:199
msgid "Scripts to load modules recursively may be made with the command:"
msgstr ""

# 13227dab9a784a0aa1d0e365924b510e
#: ../spack/lib/spack/docs/module_file_support.rst:205
msgid ""
"An equivalent alternative using `process substitution <http://tldp.org/LDP/"
"abs/html/process-sub.html>`_ is:"
msgstr ""

# d7e52775e3c04f38951c43d13c35006b
#: ../spack/lib/spack/docs/module_file_support.rst:214
msgid "Module Commands for Shell Scripts"
msgstr ""

# 43ad3900e7c941299f8b091e6584c744
#: ../spack/lib/spack/docs/module_file_support.rst:216
msgid ""
"Although Spack is flexible, the ``module`` command is much faster. This "
"could become an issue when emitting a series of ``spack load`` commands "
"inside a shell script.  By adding the ``--shell`` flag, ``spack module tcl "
"find`` may also be used to generate code that can be cut-and-pasted into a "
"shell script.  For example:"
msgstr ""

# 8f3b3df66b774c318adcdde1405cb4bd
#: ../spack/lib/spack/docs/module_file_support.rst:256
msgid "The script may be further edited by removing unnecessary modules."
msgstr ""

# f630d2b610a14e99ac37f602f3aaf40b
#: ../spack/lib/spack/docs/module_file_support.rst:261
msgid "Module Prefixes"
msgstr ""

# 14d32f03bde54f72b4d4244be37f6464
#: ../spack/lib/spack/docs/module_file_support.rst:263
msgid ""
"On some systems, modules are automatically prefixed with a certain string; "
"``spack module tcl loads`` needs to know about that prefix when it issues "
"``module load`` commands.  Add the ``--prefix`` option to your ``spack "
"module tcl loads`` commands if this is necessary."
msgstr ""

# db8f0238365b45bf9cebd0da71085f75
#: ../spack/lib/spack/docs/module_file_support.rst:268
msgid "For example, consider the following on one system:"
msgstr ""

# e3c02535faa448b99ad98c54bf4f50e7
#: ../spack/lib/spack/docs/module_file_support.rst:285
msgid "Module file customization"
msgstr ""

# cd5a28f830b44255b4114b3704ceb72a
#: ../spack/lib/spack/docs/module_file_support.rst:287
msgid ""
"Module files are generated by post-install hooks after the successful "
"installation of a package. The table below summarizes the essential "
"information associated with the different file formats that can be generated "
"by Spack:"
msgstr ""

# c47af1a2c0de475396458ae834284058
#: ../spack/lib/spack/docs/module_file_support.rst:293
msgid "**Hook name**"
msgstr ""

# 6d379475c1ad4f568a282d90e3f6b4fb
#: ../spack/lib/spack/docs/module_file_support.rst:293
msgid "**Default root directory**"
msgstr ""

# 86b10e4d614043e5b4ba51c3688583ff
#: ../spack/lib/spack/docs/module_file_support.rst:293
msgid "**Default template file**"
msgstr ""

# 1c98c2bea967401ba8cdca46bdcaafd7
#: ../spack/lib/spack/docs/module_file_support.rst:293
msgid "**Compatible tools**"
msgstr ""

# 386f4f354be449349d0e59db6069ac61
#: ../spack/lib/spack/docs/module_file_support.rst:295
msgid "**Dotkit**"
msgstr ""

# 5435da92c6c843ab86c49f6f5ccc31fd
#: ../spack/lib/spack/docs/module_file_support.rst:295
msgid "``dotkit``"
msgstr ""

# aa755421efcf4025b6efab6f5679c661
#: ../spack/lib/spack/docs/module_file_support.rst:295
msgid "share/spack/dotkit"
msgstr ""

# d7d8ed9bb535454e82bcce7e00be3392
#: ../spack/lib/spack/docs/module_file_support.rst:295
msgid "share/spack/templates/modules/modulefile.dk"
msgstr ""

# 68ac4f2be59544d09f14e1f5b23d47ee
#: ../spack/lib/spack/docs/module_file_support.rst:295
msgid "DotKit"
msgstr ""

# d0debc399f4c45d4a736e9fe5b899676
#: ../spack/lib/spack/docs/module_file_support.rst:297
msgid "**TCL - Non-Hierarchical**"
msgstr ""

# 8079dc0299354c69b54d7521a381f325
#: ../spack/lib/spack/docs/module_file_support.rst:297
msgid "``tcl``"
msgstr ""

# a902408fe8834b72ae730ff50748dbb2
#: ../spack/lib/spack/docs/module_file_support.rst:297
msgid "share/spack/modules"
msgstr ""

# b78279acade544d3b0a37c70e6ebde74
#: ../spack/lib/spack/docs/module_file_support.rst:297
msgid "share/spack/templates/modules/modulefile.tcl"
msgstr ""

# bcf31a488f1d426187f8ab2e987126f4
#: ../spack/lib/spack/docs/module_file_support.rst:297
msgid "Env. Modules/LMod"
msgstr ""

# bdcc6a0648074cf8aa0f5a12f6614aac
#: ../spack/lib/spack/docs/module_file_support.rst:299
msgid "**Lua - Hierarchical**"
msgstr ""

# 8dcfa5ff554d4c30a923307dff32a6fb
#: ../spack/lib/spack/docs/module_file_support.rst:299
msgid "``lmod``"
msgstr ""

# 9937c713a47941d2a138a313aa045ec4
#: ../spack/lib/spack/docs/module_file_support.rst:299
msgid "share/spack/lmod"
msgstr ""

# dd0804c45bfe430281a747724f502aa9
#: ../spack/lib/spack/docs/module_file_support.rst:299
msgid "share/spack/templates/modules/modulefile.lua"
msgstr ""

# 9fcbf6824a5e45fa8eeac4583ba36e15
#: ../spack/lib/spack/docs/module_file_support.rst:299
msgid "LMod"
msgstr ""

# 4623576d5d654c80a07ef0c7f5af9823
#: ../spack/lib/spack/docs/module_file_support.rst:303
msgid ""
"Spack ships with sensible defaults for the generation of module files, but "
"you can customize many aspects of it to accommodate package or site specific "
"needs. In general you can override or extend the default behavior by:"
msgstr ""

# 9c8a64673e624ea1b435d2b22d2533e3
#: ../spack/lib/spack/docs/module_file_support.rst:307
msgid "overriding certain callback APIs in the Python packages"
msgstr ""

# 981342108d264d4f849758009a12bd44
#: ../spack/lib/spack/docs/module_file_support.rst:308
msgid "writing specific rules in the ``modules.yaml`` configuration file"
msgstr ""

# 82cc807eaa84441289434d3503979e7d
#: ../spack/lib/spack/docs/module_file_support.rst:309
msgid "writing your own templates to override or extend the defaults"
msgstr ""

# a63d823d824746708197f7a172b8e071
#: ../spack/lib/spack/docs/module_file_support.rst:311
msgid ""
"The former method let you express changes in the run-time environment that "
"are needed to use the installed software properly, e.g. injecting variables "
"from language interpreters into their extensions. The latter two instead "
"permit to fine tune the filesystem layout, content and creation of module "
"files to meet site specific conventions."
msgstr ""

# a17c6ebab77d43f8b0840f1d28185918
#: ../spack/lib/spack/docs/module_file_support.rst:319
msgid "Override API calls in ``package.py``"
msgstr ""

# c32fe5dbd53d445c80c18e26c68e4611
#: ../spack/lib/spack/docs/module_file_support.rst:321
msgid ""
"There are two methods that you can override in any ``package.py`` to affect "
"the content of the module files generated by Spack. The first one:"
msgstr ""

# fc0ab84b7df345fb8df6f39d853d2f54
#: ../spack/lib/spack/docs/module_file_support.rst:330
msgid ""
"can alter the content of the module file associated with the same package "
"where it is overridden. The second method:"
msgstr ""

# 52d83857e0564072a269a6c5464b0d0d
#: ../spack/lib/spack/docs/module_file_support.rst:339
msgid ""
"can instead inject run-time environment modifications in the module files of "
"packages that depend on it. In both cases you need to fill ``run_env`` with "
"the desired list of environment modifications."
msgstr ""

# b2f7365303d040eb8fb8102fa662cdaf
#: ../spack/lib/spack/docs/module_file_support.rst:365
msgid "The ``r`` package and callback APIs"
msgstr ""

# 69c75bd855b5415abe702be67d957390
#: ../spack/lib/spack/docs/module_file_support.rst:345
msgid ""
"An example in which it is crucial to override both methods is given by the "
"``r`` package. This package installs libraries and headers in non-standard "
"locations and it is possible to prepend the appropriate directory to the "
"corresponding environment variables:"
msgstr ""

# 3afbc567a24f4d9ca3c5bd6348b0fe90
#: ../spack/lib/spack/docs/module_file_support.rst:351
msgid "LIBRARY_PATH"
msgstr ""

# 0d2f9e51f59e4712a68d03fc2687e13d
# a835a024515c4dd9b9f13dd708cf0462
#: ../spack/lib/spack/docs/module_file_support.rst:351
#: ../spack/lib/spack/docs/module_file_support.rst:352
msgid "``self.prefix/rlib/R/lib``"
msgstr ""

# 0ee26d5ddfd54178b914ac9706f9f885
#: ../spack/lib/spack/docs/module_file_support.rst:352
msgid "LD_LIBRARY_PATH"
msgstr ""

# a6111cbba86442eaaabe0852e690fc27
#: ../spack/lib/spack/docs/module_file_support.rst:353
msgid "CPATH"
msgstr ""

# 0d9e3b76491443b0a22c44266c77b565
#: ../spack/lib/spack/docs/module_file_support.rst:353
msgid "``self.prefix/rlib/R/include``"
msgstr ""

# 81cb1a94a6b94ee28e3f1fb0bbc8f726
#: ../spack/lib/spack/docs/module_file_support.rst:356
msgid "with the following snippet:"
msgstr ""

# 45ba18b6e2514cd6a6cac15f1d1fe10b
#: ../spack/lib/spack/docs/module_file_support.rst:361
msgid ""
"The ``r`` package also knows which environment variable should be modified "
"to make language extensions provided by other packages available, and "
"modifies it appropriately in the override of the second method:"
msgstr ""

# 14b7df1d0c3e48c0802cd8b881af48c0
#: ../spack/lib/spack/docs/module_file_support.rst:372
msgid "Write a configuration file"
msgstr ""

# b9c4ab1d561d4b87a1d48f3a4c922dd9
#: ../spack/lib/spack/docs/module_file_support.rst:374
msgid ""
"The configuration files that control module generation behavior are named "
"``modules.yaml``. The default configuration:"
msgstr ""

# d49c4077822745bab10de648f702c051
#: ../spack/lib/spack/docs/module_file_support.rst:380
msgid ""
"activates the hooks to generate ``tcl`` and ``dotkit`` module files and "
"inspects the installation folder of each package for the presence of a set "
"of subdirectories (``bin``, ``man``, ``share/man``, etc.). If any is found "
"its full path is prepended to the environment variables listed below the "
"folder name."
msgstr ""

# 5c96bbd6266341279be7baf291332b1c
#: ../spack/lib/spack/docs/module_file_support.rst:387
msgid "Activate other hooks"
msgstr ""

# 3e3116f4332d48c2a019fbff49878cd3
#: ../spack/lib/spack/docs/module_file_support.rst:389
msgid ""
"Any other module file generator shipped with Spack can be activated adding "
"it to the list under the ``enable`` key in the module file. Currently the "
"only generator that is not active by default is ``lmod``, which produces "
"hierarchical lua module files."
msgstr ""

# 9928a15f43c949ec88f4af279b1eea09
#: ../spack/lib/spack/docs/module_file_support.rst:393
msgid ""
"Each module system can then be configured separately. In fact, you should "
"list configuration options that affect a particular type of module files "
"under a top level key corresponding to the generator being customized:"
msgstr ""

# 1773824daab0401ea767393824509f7c
#: ../spack/lib/spack/docs/module_file_support.rst:411
msgid ""
"In general, the configuration options that you can use in ``modules.yaml`` "
"will either change the layout of the module files on the filesystem, or they "
"will affect their content. For the latter point it is possible to use "
"anonymous specs to fine tune the set of packages on which the modifications "
"should be applied."
msgstr ""

# e6b3d9ef08ed404986d338a5dbaf1f38
#: ../spack/lib/spack/docs/module_file_support.rst:420
msgid "Selection by anonymous specs"
msgstr ""

# 8ceba52846754638b1d3bdccccbd28da
#: ../spack/lib/spack/docs/module_file_support.rst:422
msgid ""
"In the configuration file you can use *anonymous specs* (i.e. specs that "
"**are not required to have a root package** and are thus used just to "
"express constraints) to apply certain modifications on a selected set of the "
"installed software. For instance, in the snippet below:"
msgstr ""

# 024f648a7f074960bc2b2a8313847ef7
#: ../spack/lib/spack/docs/module_file_support.rst:454
msgid ""
"you are instructing Spack to set the environment variable ``BAR=bar`` for "
"every module, unless the associated spec satisfies ``^openmpi`` in which "
"case ``BAR=baz``. In addition in any spec that satisfies ``zlib`` the value "
"``foo`` will be prepended to ``LD_LIBRARY_PATH`` and in any spec that "
"satisfies ``zlib%gcc@4.8`` the variable ``FOOBAR`` will be unset."
msgstr ""

# 3efae378550d40cb83004aba75464561
#: ../spack/lib/spack/docs/module_file_support.rst:463
msgid "Order does matter"
msgstr ""

# a23892fb2fda4bceb019929814757d4a
#: ../spack/lib/spack/docs/module_file_support.rst:462
msgid ""
"The modifications associated with the ``all`` keyword are always evaluated "
"first, no matter where they appear in the configuration file. All the other "
"spec constraints are instead evaluated top to bottom."
msgstr ""

# 5e793f8886c044b088e515b9e573851b
#: ../spack/lib/spack/docs/module_file_support.rst:468
msgid "Blacklist or whitelist specific module files"
msgstr ""

# 277e6a65aa934f55826b791bc4b03375
#: ../spack/lib/spack/docs/module_file_support.rst:470
msgid ""
"You can use anonymous specs also to prevent module files from being written "
"or to force them to be written. Consider the case where you want to hide "
"from users all the boilerplate software that you had to build in order to "
"bootstrap a new compiler. Suppose for instance that ``gcc@4.4.7`` is the "
"compiler provided by your system. If you write a configuration file like:"
msgstr ""

# 30cd2ca93f3b4daeb1c5f4e267611725
#: ../spack/lib/spack/docs/module_file_support.rst:483
msgid ""
"you will prevent the generation of module files for any package that is "
"compiled with ``gcc@4.4.7``, with the only exception of any ``gcc`` or any "
"``llvm`` installation."
msgstr ""

# 02a78679e60e45b6abd720329239e1e6
#: ../spack/lib/spack/docs/module_file_support.rst:492
msgid "Customize the naming scheme"
msgstr ""

# 131312622fd148d18def3491804fc79b
#: ../spack/lib/spack/docs/module_file_support.rst:494
msgid ""
"The names of environment modules generated by spack are not always easy to "
"fully comprehend due to the long hash in the name. There are two module "
"configuration options to help with that. The first is a global setting to "
"adjust the hash length. It can be set anywhere from 0 to 32 and has a "
"default length of 7. This is the representation of the hash in the module "
"file name and does not affect the size of the package hash. Be aware that "
"the smaller the hash length the more likely naming conflicts will occur. The "
"following snippet shows how to set hash length in the module file names:"
msgstr ""

# ebc8c996878347989300298ebcaf9f72
#: ../spack/lib/spack/docs/module_file_support.rst:509
msgid ""
"To help make module names more readable, and to help alleviate name "
"conflicts with a short hash, one can use the ``suffixes`` option in the "
"modules configuration file. This option will add strings to modules that "
"match a spec. For instance, the following config options,"
msgstr ""

# 9f37659271b84f59ba3d2f206a6aa9fc
#: ../spack/lib/spack/docs/module_file_support.rst:523
msgid ""
"will add a ``python-2.7.12`` version string to any packages compiled with "
"python matching the spec, ``python@2.7.12``. This is useful to know which "
"version of python a set of python extensions is associated with. Likewise, "
"the ``openblas`` string is attached to any program that has openblas in the "
"spec, most likely via the ``+blas`` variant specification."
msgstr ""

# 5517fff601d54ee58d9918dba33f5ff5
#: ../spack/lib/spack/docs/module_file_support.rst:547
msgid "TCL module files"
msgstr ""

# eadd8c1851cf48f4a7996a61888a53ed
#: ../spack/lib/spack/docs/module_file_support.rst:531
msgid ""
"A modification that is specific to ``tcl`` module files is the possibility "
"to change the naming scheme of modules."
msgstr ""

# e1d0a6594e274b8a8005a13c1c232080
#: ../spack/lib/spack/docs/module_file_support.rst:544
msgid ""
"will create module files that will conflict with ``intel/14.0.1`` and with "
"the base directory of the same module, effectively preventing the "
"possibility to load two or more versions of the same software at the same "
"time. The tokens that are available for use in this directive are the same "
"understood by the ``Spec.format`` method."
msgstr ""

# 90e058b638c645abb190e1256a480c12
#: ../spack/lib/spack/docs/module_file_support.rst:573
msgid "LMod hierarchical module files"
msgstr ""

# 869d41ae5f8a4284a4863eb03ac747d2
#: ../spack/lib/spack/docs/module_file_support.rst:553
msgid ""
"When ``lmod`` is activated Spack will generate a set of hierarchical lua "
"module files that are understood by LMod. The hierarchy will always contain "
"the two layers ``Core`` / ``Compiler`` but can be further extended to any of "
"the virtual dependencies present in Spack. A case that could be useful in "
"practice is for instance:"
msgstr ""

# 3aaf8f13980a4ca6ac6794fce6c98367
#: ../spack/lib/spack/docs/module_file_support.rst:571
msgid ""
"that will generate a hierarchy in which the ``lapack`` and ``mpi`` layer can "
"be switched independently. This allows a site to build the same libraries or "
"applications against different implementations of ``mpi`` and ``lapack``, "
"and let LMod switch safely from one to the other."
msgstr ""

# c2d156479af147c6b040e16b87c77c9b
#: ../spack/lib/spack/docs/module_file_support.rst:578
msgid "Deep hierarchies and ``lmod spider``"
msgstr ""

# 5f7469b14941493b9a8ee643ff10b485
#: ../spack/lib/spack/docs/module_file_support.rst:578
msgid ""
"For hierarchies that are deeper than three layers ``lmod spider`` may have "
"some issues. See `this discussion on the LMod project <https://github.com/"
"TACC/Lmod/issues/114>`_."
msgstr ""

# 0fdc899f5a334138b3bc9ef15c054554
#: ../spack/lib/spack/docs/module_file_support.rst:583
msgid "Filter out environment modifications"
msgstr ""

# ff8618a057fb4356b6f69ad39adeaded
#: ../spack/lib/spack/docs/module_file_support.rst:585
msgid ""
"Modifications to certain environment variables in module files are there by "
"default, for instance because they are generated by prefix inspections. If "
"you want to prevent modifications to some environment variables, you can do "
"so by using the environment blacklist:"
msgstr ""

# 061713dc2766417faf47e0b8e3a49aca
#: ../spack/lib/spack/docs/module_file_support.rst:599
msgid ""
"The configuration above will generate dotkit module files that will not "
"contain modifications to either ``CPATH`` or ``LIBRARY_PATH`` and "
"environment module files that instead will contain these modifications."
msgstr ""

# #-#-#-#-#  module_file_support.pot (Spack 0.12)  #-#-#-#-#
# 95b32a6e95ee4f31a28501e206fd201c
# #-#-#-#-#  tutorial_modules.pot (Spack 0.12)  #-#-#-#-#
# 0c009132c5144a60bdc0556e6e5416f5
#: ../spack/lib/spack/docs/module_file_support.rst:608
#: ../spack/lib/spack/docs/tutorial_modules.rst:886
msgid "Autoload dependencies"
msgstr ""

# 84088d1c894e4cd79a82b4cd6e51281e
#: ../spack/lib/spack/docs/module_file_support.rst:610
msgid ""
"In some cases it can be useful to have module files that automatically load "
"their dependencies.  This may be the case for Python extensions, if not "
"activated using ``spack activate``:"
msgstr ""

# 5f6825d56a5047dbaf113ecc09cf23ee
#: ../spack/lib/spack/docs/module_file_support.rst:621
msgid ""
"The configuration file above will produce module files that will load their "
"direct dependencies if the package installed depends on ``python``. The "
"allowed values for the ``autoload`` statement are either ``none``, "
"``direct`` or ``all``.  The default is ``none``."
msgstr ""

# 80f2734df56a4adfa9325172559ede89
#: ../spack/lib/spack/docs/module_file_support.rst:631
msgid "Building external software"
msgstr ""

# 7e728c1f919a4e68b7a57a819c48fc69
#: ../spack/lib/spack/docs/module_file_support.rst:628
msgid ""
"Setting ``autoload`` to ``direct`` for all packages can be useful when "
"building software outside of a Spack installation that depends on artifacts "
"in that installation.  E.g. (adjust ``lmod`` vs ``tcl`` as appropriate):"
msgstr ""

# 2240d85038ba427c8cbb041c02771ba9
#: ../spack/lib/spack/docs/module_file_support.rst:644
msgid "TCL prerequisites"
msgstr ""

# 6fb025e88956421381e37750fca301ab
#: ../spack/lib/spack/docs/module_file_support.rst:642
msgid ""
"In the ``tcl`` section of the configuration file it is possible to use the "
"``prerequisites`` directive that accepts the same values as ``autoload``. It "
"will produce module files that have a ``prereq`` statement instead of "
"automatically loading other modules."
msgstr ""

# f48431d0359346c28dcc76a02c07ba19
#: ../spack/lib/spack/docs/module_file_support.rst:649
msgid "Maintaining Module Files"
msgstr ""

# a824e7a03ed745c9b36b8a49c8c9d093
#: ../spack/lib/spack/docs/module_file_support.rst:651
msgid ""
"Each type of module file has a command with the same name associated with "
"it. The actions these commands permit are usually associated with the "
"maintenance of a production environment. Here's, for instance, a sample of "
"the features of the ``spack module tcl`` command:"
msgstr ""

# 7fbf8f2024e8468eb16f3126df9548ac
#: ../spack/lib/spack/docs/module_file_support.rst:662
msgid "Refresh the set of modules"
msgstr ""

# d03596609b0e4253b063650db22b8396
#: ../spack/lib/spack/docs/module_file_support.rst:664
msgid ""
"The subcommand that regenerates module files to update their content or "
"their layout is ``refresh``:"
msgstr ""

# e791db83d93246c88bc5ec75c5da3cd0
#: ../spack/lib/spack/docs/module_file_support.rst:669
msgid ""
"A set of packages can be selected using anonymous specs for the optional "
"``constraint`` positional argument. Optionally the entire tree can be "
"deleted before regeneration if the change in layout is radical."
msgstr ""

# ebe23223fe904a5fa77d8e269c915aee
#: ../spack/lib/spack/docs/module_file_support.rst:677
msgid "Delete module files"
msgstr ""

# ef3ae22239064c84bd3a632ed7abeda3
#: ../spack/lib/spack/docs/module_file_support.rst:679
msgid ""
"If instead what you need is just to delete a few module files, then the "
"right subcommand is ``rm``:"
msgstr ""

# c8fd4f97a4a54c289bfd2fcc7c01756f
#: ../spack/lib/spack/docs/module_file_support.rst:688
msgid "We care about your module files!"
msgstr ""

# 529053880779404ea0b1916446710a04
#: ../spack/lib/spack/docs/module_file_support.rst:686
msgid ""
"Every modification done on modules that are already existing will ask for a "
"confirmation by default. If the command is used in a script it is possible "
"though to pass the ``-y`` argument, that will skip this safety measure."
msgstr ""

# 70dd00f1bb77405ba39ac73629659bdf
#: ../spack/lib/spack/docs/package_list.rst:10
msgid "Package List"
msgstr ""

# b1288ac277b24defa3f16bbbba581dfa
#: ../spack/lib/spack/docs/package_list.rst:12
msgid ""
"This is a list of things you can install using Spack.  It is automatically "
"generated based on the packages in the latest Spack release."
msgstr ""

# 86cde19a68f242719248db1deb378ea4
#: ../spack/lib/spack/docs/packaging_guide.rst:10
msgid "Packaging Guide"
msgstr ""

# 4b8ee04a33f64072bee1f8be8e8f2ae9
#: ../spack/lib/spack/docs/packaging_guide.rst:12
msgid ""
"This guide is intended for developers or administrators who want to package "
"software so that Spack can install it.  It assumes that you have at least "
"some familiarity with Python, and that you've read the :ref:`basic usage "
"guide <basic-usage>`, especially the part about :ref:`specs <sec-specs>`."
msgstr ""

# 020ab591cdb547039d885eb00a99e805
#: ../spack/lib/spack/docs/packaging_guide.rst:18
msgid "There are two key parts of Spack:"
msgstr ""

# a37e9e2dd34c492f822ff7f435a4e82f
#: ../spack/lib/spack/docs/packaging_guide.rst:21
msgid ""
"**Packages**: Python modules that describe how to build software according "
"to a spec."
msgstr ""

# 08563bd41f3b4b40bef038f3b4a87d74
#: ../spack/lib/spack/docs/packaging_guide.rst:24
msgid ""
"Specs allow a user to describe a *particular* build in a way that a package "
"author can understand.  Packages allow the packager to encapsulate the build "
"logic for different versions, compilers, options, platforms, and dependency "
"combinations in one place. Essentially, a package translates a spec into "
"build logic."
msgstr ""

# e81126cba0344b1db9e412730bb6ea87
#: ../spack/lib/spack/docs/packaging_guide.rst:30
msgid ""
"Packages in Spack are written in pure Python, so you can do anything in "
"Spack that you can do in Python.  Python was chosen as the implementation "
"language for two reasons.  First, Python is becoming ubiquitous in the "
"scientific software community. Second, it's a modern language and has many "
"powerful features to help make package writing easy."
msgstr ""

# b4c0d894c01443e69408f9d32e6aa5c2
#: ../spack/lib/spack/docs/packaging_guide.rst:39
msgid "Creating & editing packages"
msgstr ""

# 8e56b48219ac4bfe8d2b23f5fc8bad37
#: ../spack/lib/spack/docs/packaging_guide.rst:45
msgid "``spack create``"
msgstr ""

# 745201b5eacf46ec8cf2644332a81747
#: ../spack/lib/spack/docs/packaging_guide.rst:47
msgid ""
"The ``spack create`` command creates a directory with the package name and "
"generates a ``package.py`` file with a boilerplate package template. If "
"given a URL pointing to a tarball or other software archive, ``spack "
"create`` is smart enough to determine basic information about the package, "
"including its name and build system. In most cases, ``spack create`` plus a "
"few modifications is all you need to get a package working."
msgstr ""

# aacf596ee50644e196e1c3cb9d37df77
#: ../spack/lib/spack/docs/packaging_guide.rst:54
msgid "Here's an example:"
msgstr ""

# 47e32654b53d4449bbd20dc84596911c
#: ../spack/lib/spack/docs/packaging_guide.rst:60
msgid ""
"Spack examines the tarball URL and tries to figure out the name of the "
"package to be created. If the name contains uppercase letters, these are "
"automatically converted to lowercase. If the name contains underscores or "
"periods, these are automatically converted to dashes."
msgstr ""

# 3b1e9fa89cd7494189900d7563b1a6e0
#: ../spack/lib/spack/docs/packaging_guide.rst:65
msgid ""
"Spack also searches for *additional* versions located in the same directory "
"of the website. Spack prompts you to tell you how many versions it found and "
"asks you how many you would like to download and checksum:"
msgstr ""

# 42541b8bb598444980b2e9b8d646b8e6
#: ../spack/lib/spack/docs/packaging_guide.rst:83
msgid ""
"Spack will automatically download the number of tarballs you specify "
"(starting with the most recent) and checksum each of them."
msgstr ""

# 92e576e812d54c84bd09d8ec5c20952f
#: ../spack/lib/spack/docs/packaging_guide.rst:86
msgid ""
"You do not *have* to download all of the versions up front. You can always "
"choose to download just one tarball initially, and run :ref:`cmd-spack-"
"checksum` later if you need more versions."
msgstr ""

# 348348f668624579961f68dfb1a2ffac
#: ../spack/lib/spack/docs/packaging_guide.rst:90
msgid "Let's say you download 3 tarballs:"
msgstr ""

# cdacf89a74244e5b817a58df8b3bd630
#: ../spack/lib/spack/docs/packaging_guide.rst:107
msgid ""
"Spack automatically creates a directory in the appropriate repository, "
"generates a boilerplate template for your package, and opens up the new "
"``package.py`` in your favorite ``$EDITOR``:"
msgstr ""

# 0d1f8fd78fc547138347ffddc9901335
#: ../spack/lib/spack/docs/packaging_guide.rst:152
msgid ""
"The tedious stuff (creating the class, checksumming archives) has been done "
"for you. You'll notice that ``spack create`` correctly detected that ``gmp`` "
"uses the Autotools build system. It created a new ``Gmp`` package that "
"subclasses the ``AutotoolsPackage`` base class. This base class provides "
"basic installation methods common to all Autotools packages:"
msgstr ""

# 3f98047479c644428c7ef1f5b118ce45
#: ../spack/lib/spack/docs/packaging_guide.rst:166
msgid ""
"For most Autotools packages, this is sufficient. If you need to add "
"additional arguments to the ``./configure`` call, add them via the "
"``configure_args`` function."
msgstr ""

# 0f497b3ec7044dd4a691b4e60ed36163
#: ../spack/lib/spack/docs/packaging_guide.rst:170
msgid ""
"In the generated package, the download ``url`` attribute is already set. All "
"the things you still need to change are marked with ``FIXME`` labels. You "
"can delete the commented instructions between the license and the first "
"import statement after reading them. The rest of the tasks you need to do "
"are as follows:"
msgstr ""

# 3aa33be73a474e9f8a67a4eec41d9b79
#: ../spack/lib/spack/docs/packaging_guide.rst:176
msgid "Add a description."
msgstr ""

# 2ff76ef4ed1a46ce9f7a86be1d65fe3b
#: ../spack/lib/spack/docs/packaging_guide.rst:178
msgid ""
"Immediately inside the package class is a *docstring* in triple-quotes (``"
"\"\"\"``).  It is used to generate the description shown when users run "
"``spack info``."
msgstr ""

# bd377ae20f0942d097257060dda9554a
#: ../spack/lib/spack/docs/packaging_guide.rst:182
msgid "Change the ``homepage`` to a useful URL."
msgstr ""

# b0cce995d47d428ea329dccb2c915fc0
#: ../spack/lib/spack/docs/packaging_guide.rst:184
msgid ""
"The ``homepage`` is displayed when users run ``spack info`` so that they can "
"learn more about your package."
msgstr ""

# a393d948b9794f74906ab2a1ca653131
#: ../spack/lib/spack/docs/packaging_guide.rst:187
msgid "Add ``depends_on()`` calls for the package's dependencies."
msgstr ""

# 11e7e916e44d4ab099e5ac73c33ddc0c
#: ../spack/lib/spack/docs/packaging_guide.rst:189
msgid ""
"``depends_on`` tells Spack that other packages need to be built and "
"installed before this one. See :ref:`dependencies`."
msgstr ""

# 4f1eecff49b349889bc8c0b606d1937a
#: ../spack/lib/spack/docs/packaging_guide.rst:192
msgid "Get the installation working."
msgstr ""

# 5d27606c3bd84b33a693d1a2ed111184
#: ../spack/lib/spack/docs/packaging_guide.rst:194
msgid ""
"Your new package may require specific flags during ``configure``. These can "
"be added via ``configure_args``. Specifics will differ depending on the "
"package and its build system. :ref:`Implementing the install method <install-"
"method>` is covered in detail later."
msgstr ""

# e8e830901d934a09a2b30bd11f003bb0
#: ../spack/lib/spack/docs/packaging_guide.rst:200
msgid ""
"Passing a URL to ``spack create`` is a convenient and easy way to get a "
"basic package template, but what if your software is licensed and cannot be "
"downloaded from a URL? You can still create a boilerplate ``package.py`` by "
"telling ``spack create`` what name you want to use:"
msgstr ""

# 17e7913cede7499eb77d9485cc8d3b9e
#: ../spack/lib/spack/docs/packaging_guide.rst:209
msgid ""
"This will create a simple ``intel`` package with an ``install()`` method "
"that you can craft to install your package."
msgstr ""

# 984d129a67ff4a13a43fa978d6b24dba
#: ../spack/lib/spack/docs/packaging_guide.rst:212
msgid ""
"What if ``spack create <url>`` guessed the wrong name or build system? For "
"example, if your package uses the Autotools build system but does not come "
"with a ``configure`` script, Spack won't realize it uses Autotools. You can "
"overwrite the old package with ``--force`` and specify a name with ``--"
"name`` or a build system template to use with ``--template``:"
msgstr ""

# 76746ba72403413ea138641ec8f08f93
#: ../spack/lib/spack/docs/packaging_guide.rst:225
msgid ""
"If you are creating a package that uses the Autotools build system but does "
"not come with a ``configure`` script, you'll need to add an ``autoreconf`` "
"method to your package that explains how to generate the ``configure`` "
"script. You may also need the following dependencies:"
msgstr ""

# 810ac9fee0ee4470a328371da9ea8ce4
#: ../spack/lib/spack/docs/packaging_guide.rst:237
msgid ""
"A complete list of available build system templates can be found by running "
"``spack create --help``."
msgstr ""

# 710707d02787475394fe9566be3d5489
#: ../spack/lib/spack/docs/packaging_guide.rst:244
msgid "``spack edit``"
msgstr ""

# 6bb70b02f29f42fbbe8240c9495987ac
#: ../spack/lib/spack/docs/packaging_guide.rst:246
msgid ""
"One of the easiest ways to learn how to write packages is to look at "
"existing ones.  You can edit a package file by name with the ``spack edit`` "
"command:"
msgstr ""

# 4b9e1733133c4dabb7c21de94311b9b4
#: ../spack/lib/spack/docs/packaging_guide.rst:254
msgid ""
"So, if you used ``spack create`` to create a package, then saved and closed "
"the resulting file, you can get back to it with ``spack edit``. The ``gmp`` "
"package actually lives in ``$SPACK_ROOT/var/spack/repos/builtin/packages/gmp/"
"package.py``, but ``spack edit`` provides a much simpler shortcut and saves "
"you the trouble of typing the full path."
msgstr ""

# 95d494e5047f42778a43d866a4c4ba82
#: ../spack/lib/spack/docs/packaging_guide.rst:263
msgid "Naming & directory structure"
msgstr ""

# e3fdaf5986154479af273f989ac8f215
#: ../spack/lib/spack/docs/packaging_guide.rst:265
msgid ""
"This section describes how packages need to be named, and where they live in "
"Spack's directory structure.  In general, :ref:`cmd-spack-create` handles "
"creating package files for you, so you can skip most of the details here."
msgstr ""

# 6f4bface156e4393afbe993858bbaf47
#: ../spack/lib/spack/docs/packaging_guide.rst:272
msgid "``var/spack/repos/builtin/packages``"
msgstr ""

# bc221351ec444333bf8ee29216197a51
#: ../spack/lib/spack/docs/packaging_guide.rst:274
msgid ""
"A Spack installation directory is structured like a standard UNIX install "
"prefix (``bin``, ``lib``, ``include``, ``var``, ``opt``, etc.).  Most of the "
"code for Spack lives in ``$SPACK_ROOT/lib/spack``. Packages themselves live "
"in ``$SPACK_ROOT/var/spack/repos/builtin/packages``."
msgstr ""

# afee5da353ec43ccb8c46b5b50c11e38
#: ../spack/lib/spack/docs/packaging_guide.rst:279
msgid ""
"If you ``cd`` to that directory, you will see directories for each package:"
msgstr ""

# 9abeff2099cb4ece9b44e5b8692bb362
#: ../spack/lib/spack/docs/packaging_guide.rst:286
msgid ""
"Each directory contains a file called ``package.py``, which is where all the "
"python code for the package goes.  For example, the ``libelf`` package lives "
"in:"
msgstr ""

# d05def0f33b04908a167acb84998e21d
#: ../spack/lib/spack/docs/packaging_guide.rst:294
msgid ""
"Alongside the ``package.py`` file, a package may contain extra directories "
"or files (like patches) that it needs to build."
msgstr ""

# d2e2345847cc4e17bc76ae72806b6142
#: ../spack/lib/spack/docs/packaging_guide.rst:299
msgid "Package Names"
msgstr ""

# f319a234274b462cb0e043104346ccb0
#: ../spack/lib/spack/docs/packaging_guide.rst:301
msgid ""
"Packages are named after the directory containing ``package.py``. So, "
"``libelf``'s ``package.py`` lives in a directory called ``libelf``. The "
"``package.py`` file defines a class called ``Libelf``, which extends Spack's "
"``Package`` class.  For example, here is ``$SPACK_ROOT/var/spack/repos/"
"builtin/packages/libelf/package.py``:"
msgstr ""

# c3f8882fa45b4f93a9018f7dd692402a
#: ../spack/lib/spack/docs/packaging_guide.rst:322
msgid ""
"The **directory name** (``libelf``) determines the package name that users "
"should provide on the command line. e.g., if you type any of these:"
msgstr ""

# 6f5d4143e9b1457cbe8ffd3e509bf7b7
#: ../spack/lib/spack/docs/packaging_guide.rst:332
msgid ""
"Spack sees the package name in the spec and looks for ``libelf/package.py`` "
"in ``var/spack/repos/builtin/packages``. Likewise, if you run ``spack "
"install py-numpy``, Spack looks for ``py-numpy/package.py``."
msgstr ""

# 678a3cae5d5745ba95fe4003997dde9e
#: ../spack/lib/spack/docs/packaging_guide.rst:337
msgid ""
"Spack uses the directory name as the package name in order to give packagers "
"more freedom in naming their packages. Package names can contain letters, "
"numbers, and dashes. Using a Python identifier (e.g., a class name or a "
"module name) would make it difficult to support these options.  So, you can "
"name a package ``3proxy`` or ``foo-bar`` and Spack won't care. It just needs "
"to see that name in the packages directory."
msgstr ""

# 4cec28d20180428da5097394e19fdee9
#: ../spack/lib/spack/docs/packaging_guide.rst:347
msgid "Package class names"
msgstr ""

# 6b59a135b89746599c332f27121f21f3
#: ../spack/lib/spack/docs/packaging_guide.rst:349
msgid ""
"Spack loads ``package.py`` files dynamically, and it needs to find a special "
"class name in the file for the load to succeed.  The **class name** "
"(``Libelf`` in our example) is formed by converting words separated by ``-`` "
"in the file name to CamelCase. If the name starts with a number, we prefix "
"the class name with ``_``. Here are some examples:"
msgstr ""

# 88e10ce5a5f2490e9788874ab8caf192
#: ../spack/lib/spack/docs/packaging_guide.rst:357
msgid "Module Name"
msgstr ""

# b138680f3936446eb254c6dc78104906
#: ../spack/lib/spack/docs/packaging_guide.rst:357
msgid "Class Name"
msgstr ""

# 8d36ff9f9fa9425eb72d66b5091541f2
#: ../spack/lib/spack/docs/packaging_guide.rst:359
msgid "``foo-bar``"
msgstr ""

# bbbef34445aa428f9be651f6dc71638b
#: ../spack/lib/spack/docs/packaging_guide.rst:359
msgid "``FooBar``"
msgstr ""

# d9c7de6daee44ee6a5d92d539196e943
#: ../spack/lib/spack/docs/packaging_guide.rst:360
msgid "``3proxy``"
msgstr ""

# b0bafc3fc4ec48b99495107ecc940b36
#: ../spack/lib/spack/docs/packaging_guide.rst:360
msgid "``_3proxy``"
msgstr ""

# 7a2e77ff0be64321926101898ae61da1
#: ../spack/lib/spack/docs/packaging_guide.rst:363
msgid ""
"In general, you won't have to remember this naming convention because :ref:"
"`cmd-spack-create` and :ref:`cmd-spack-edit` handle the details for you."
msgstr ""

# 11efad928f6d4f479b0b533b89491309
#: ../spack/lib/spack/docs/packaging_guide.rst:368
msgid "Trusted Downloads"
msgstr ""

# 5799e825e66d403db60e5c8755427ddc
#: ../spack/lib/spack/docs/packaging_guide.rst:370
msgid ""
"Spack verifies that the source code it downloads is not corrupted or "
"compromised; or at least, that it is the same version the author of the "
"Spack package saw when the package was created.  If Spack uses a download "
"method it can verify, we say the download method is *trusted*.  Trust is "
"important for *all downloads*: Spack has no control over the security of the "
"various sites from which it downloads source code, and can never assume that "
"any particular site hasn't been compromised."
msgstr ""

# 8a9bdaf2d4f340b7aa35e5db4d6d8b6d
#: ../spack/lib/spack/docs/packaging_guide.rst:379
msgid ""
"Trust is established in different ways for different download methods. For "
"the most common download method --- a single-file tarball --- the tarball is "
"checksummed.  Git downloads using ``commit=`` are trusted implicitly, as "
"long as a hash is specified."
msgstr ""

# d16d50ef10424e419039c7ff28235479
#: ../spack/lib/spack/docs/packaging_guide.rst:384
msgid ""
"Spack also provides untrusted download methods: tarball URLs may be supplied "
"without a checksum, or Git downloads may specify a branch or tag instead of "
"a hash.  If the user does not control or trust the source of an untrusted "
"download, it is a security risk.  Unless otherwise specified by the user for "
"special cases, Spack should by default use *only* trusted download methods."
msgstr ""

# fce5574d5ef945ffa7f786c90c364057
#: ../spack/lib/spack/docs/packaging_guide.rst:391
msgid ""
"Unfortunately, Spack does not currently provide that guarantee.  It does "
"provide the following mechanisms for safety:"
msgstr ""

# b968fcc1788541599ae2ba192e17bb73
#: ../spack/lib/spack/docs/packaging_guide.rst:394
msgid ""
"By default, Spack will only install a tarball package if it has a checksum "
"and that checksum matches.  You can override this with ``spack install --no-"
"checksum``."
msgstr ""

# 3e16822ed43e43cf81ace8b301bb19f2
#: ../spack/lib/spack/docs/packaging_guide.rst:398
msgid ""
"Numeric versions are almost always tarball downloads, whereas non-numeric "
"versions not named ``develop`` frequently download untrusted branches or "
"tags from a version control system.  As long as a package has at least one "
"numeric version, and no non-numeric version named ``develop``, Spack will "
"prefer it over any non-numeric versions."
msgstr ""

# 2c95a3f8386a464f8b28d67d2a71e65b
#: ../spack/lib/spack/docs/packaging_guide.rst:407
msgid "Checksums"
msgstr ""

# 09b832f9f52a496aac40052da1be5096
#: ../spack/lib/spack/docs/packaging_guide.rst:409
msgid ""
"For tarball downloads, Spack can currently support checksums using the MD5, "
"SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512 algorithms.  It determines the "
"algorithm to use based on the hash length."
msgstr ""

# 60efc49e0c8d4da8a25d102aa91587be
#: ../spack/lib/spack/docs/packaging_guide.rst:415
msgid "Versions and fetching"
msgstr ""

# b74b1af532454349a52858e8b98dac68
#: ../spack/lib/spack/docs/packaging_guide.rst:417
msgid ""
"The most straightforward way to add new versions to your package is to add a "
"line like this in the package class:"
msgstr ""

# 8105d555b53f4e0fb19f8836aee3324d
#: ../spack/lib/spack/docs/packaging_guide.rst:430
msgid "Versions should be listed in descending order, from newest to oldest."
msgstr ""

# c4082ea9ab7d4187a02cb6dfb61cb232
#: ../spack/lib/spack/docs/packaging_guide.rst:434
msgid "Date Versions"
msgstr ""

# ea53cfd5972c439f9d852055439c64bf
#: ../spack/lib/spack/docs/packaging_guide.rst:436
msgid ""
"If you wish to use dates as versions, it is best to use the format ``@yyyy-"
"mm-dd``.  This will ensure they sort in the correct order."
msgstr ""

# f0ef891d3ae24b1c9b30d6206dbeb614
#: ../spack/lib/spack/docs/packaging_guide.rst:439
msgid ""
"Alternately, you might use a hybrid release-version / date scheme. For "
"example, ``@1.3_2016-08-31`` would mean the version from the ``1.3`` branch, "
"as of August 31, 2016."
msgstr ""

# 34d85a7441a145e8b8092d56be53d8b2
#: ../spack/lib/spack/docs/packaging_guide.rst:445
msgid "Version URLs"
msgstr ""

# 26130f6e5747418ebd6d186008e41f9f
#: ../spack/lib/spack/docs/packaging_guide.rst:447
msgid ""
"By default, each version's URL is extrapolated from the ``url`` field in the "
"package.  For example, Spack is smart enough to download version ``8.2.1`` "
"of the ``Foo`` package above from http://example.com/foo-8.2.1.tar.gz."
msgstr ""

# b43eb4e937f04cffadc85399d814046a
#: ../spack/lib/spack/docs/packaging_guide.rst:452
msgid ""
"If the URL is particularly complicated or changes based on the release, you "
"can override the default URL generation algorithm by defining your own "
"``url_for_version()`` function. For example, the download URL for OpenMPI "
"contains the major.minor version in one spot and the major.minor.patch "
"version in another:"
msgstr ""

# ac20532425e74390a5037a2083c79307
#: ../spack/lib/spack/docs/packaging_guide.rst:458
msgid ""
"https://www.open-mpi.org/software/ompi/v2.1/downloads/openmpi-2.1.1.tar.bz2"
msgstr ""

# 4a46949745bb427db2d6a84e6d26a061
#: ../spack/lib/spack/docs/packaging_guide.rst:460
msgid ""
"In order to handle this, you can define a ``url_for_version()`` function "
"like so:"
msgstr ""

# 89455644e4ec4dc88f13ee2924b10638
#: ../spack/lib/spack/docs/packaging_guide.rst:466
msgid ""
"With the use of this ``url_for_version()``, Spack knows to download OpenMPI "
"``2.1.1`` from http://www.open-mpi.org/software/ompi/v2.1/downloads/"
"openmpi-2.1.1.tar.bz2 but download OpenMPI ``1.10.7`` from http://www.open-"
"mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.7.tar.bz2."
msgstr ""

# 72f982bf379c422b840a774a1f5a9f80
#: ../spack/lib/spack/docs/packaging_guide.rst:470
msgid ""
"You'll notice that OpenMPI's ``url_for_version()`` function makes use of a "
"special ``Version`` function called ``up_to()``. When you call ``version."
"up_to(2)`` on a version like ``1.10.0``, it returns ``1.10``. ``version."
"up_to(1)`` would return ``1``. This can be very useful for packages that "
"place all ``X.Y.*`` versions in a single directory and then places all ``X.Y."
"Z`` versions in a sub-directory."
msgstr ""

# e840a2fc72b94921ad5889949bd38153
#: ../spack/lib/spack/docs/packaging_guide.rst:476
msgid ""
"There are a few ``Version`` properties you should be aware of. We generally "
"prefer numeric versions to be separated by dots for uniformity, but not all "
"tarballs are named that way. For example, ``icu4c`` separates its major and "
"minor versions with underscores, like ``icu4c-57_1-src.tgz``. The value "
"``57_1`` can be obtained with the use of the ``version.underscored`` "
"property. Note that Python properties don't need parentheses. There are "
"other separator properties as well:"
msgstr ""

# c4f2f5ac89434915bc5ce7be8129c2b9
#: ../spack/lib/spack/docs/packaging_guide.rst:484
msgid "Property"
msgstr ""

# 79e940592f5c4f5cbd5bfc09000ea4e4
#: ../spack/lib/spack/docs/packaging_guide.rst:484
msgid "Result"
msgstr ""

# 769395adac9e46738a25ba539b48c9db
#: ../spack/lib/spack/docs/packaging_guide.rst:486
msgid "version.dotted"
msgstr ""

# 22e1d1fbb34e4b24be21f34addcd7be8
#: ../spack/lib/spack/docs/packaging_guide.rst:486
msgid "1.2.3"
msgstr ""

# 63f410c9d76e4dc788d4c10f5f9edae2
#: ../spack/lib/spack/docs/packaging_guide.rst:487
msgid "version.dashed"
msgstr ""

# bf27b4c369ef43da834266dc9cde658f
#: ../spack/lib/spack/docs/packaging_guide.rst:487
msgid "1-2-3"
msgstr ""

# 57eb88dc10c74426bf30652d3d8046fe
#: ../spack/lib/spack/docs/packaging_guide.rst:488
msgid "version.underscored"
msgstr ""

# 59449e951a384f41935805cc58de96ff
#: ../spack/lib/spack/docs/packaging_guide.rst:488
msgid "1_2_3"
msgstr ""

# 60c449d348f6430e9fecec9ea41d4e14
#: ../spack/lib/spack/docs/packaging_guide.rst:489
msgid "version.joined"
msgstr ""

# 538fbb23f55246918d3a08a7c51797ea
#: ../spack/lib/spack/docs/packaging_guide.rst:489
msgid "123"
msgstr ""

# aa54f3daf6e742c29d1286e627c489e1
#: ../spack/lib/spack/docs/packaging_guide.rst:494
msgid ""
"Python properties don't need parentheses. ``version.dashed`` is correct. "
"``version.dashed()`` is incorrect."
msgstr ""

# a6154569977a47dabc76442e4fb40912
#: ../spack/lib/spack/docs/packaging_guide.rst:497
msgid ""
"In addition, these version properties can be combined with ``up_to()``. For "
"example:"
msgstr ""

# 863607bf59c8421e8a0459fb1661fa95
#: ../spack/lib/spack/docs/packaging_guide.rst:509
msgid ""
"As you can see, order is not important. Just keep in mind that ``up_to()`` "
"and the other version properties return ``Version`` objects, not strings."
msgstr ""

# e59b1591f4ed4645a2ccf98f34be2124
#: ../spack/lib/spack/docs/packaging_guide.rst:512
msgid ""
"If a URL cannot be derived systematically, or there is a special URL for one "
"of its versions, you can add an explicit URL for a particular version:"
msgstr ""

# 09b641f46c734606a0455a654cb8326a
#: ../spack/lib/spack/docs/packaging_guide.rst:521
msgid ""
"When you supply a custom URL for a version, Spack uses that URL *verbatim* "
"and does not perform extrapolation. The order of precedence of these methods "
"is:"
msgstr ""

# f29d7c7e0f2a42c6ac2334e521b8f019
#: ../spack/lib/spack/docs/packaging_guide.rst:525
msgid "package-level ``url``"
msgstr ""

# 55c92ac614d54d3eb5072ed48d90085a
#: ../spack/lib/spack/docs/packaging_guide.rst:526
msgid "``url_for_version()``"
msgstr ""

# 462c36021d934649b27bd62fc932c1fc
#: ../spack/lib/spack/docs/packaging_guide.rst:527
msgid "version-specific ``url``"
msgstr ""

# 2188a5f946fb43e4a416bd71d0c33739
#: ../spack/lib/spack/docs/packaging_guide.rst:529
msgid ""
"so if your package contains a ``url_for_version()``, it can be overridden by "
"a version-specific ``url``."
msgstr ""

# 459aee8c69a04bf19d453e283e0bbb18
#: ../spack/lib/spack/docs/packaging_guide.rst:532
msgid ""
"If your package does not contain a package-level ``url`` or "
"``url_for_version()``, Spack can determine which URL to download from even "
"if only some of the versions specify their own ``url``. Spack will use the "
"nearest URL *before* the requested version. This is useful for packages that "
"have an easy to extrapolate URL, but keep changing their URL format every "
"few releases. With this method, you only need to specify the ``url`` when "
"the URL changes."
msgstr ""

# 4383cfd1171b4182a6157a78997c0bc6
#: ../spack/lib/spack/docs/packaging_guide.rst:541
msgid "Skipping the expand step"
msgstr ""

# b3adad277ddd473eb50fbb02f7787697
#: ../spack/lib/spack/docs/packaging_guide.rst:543
msgid ""
"Spack normally expands archives (e.g. ``*.tar.gz`` and ``*.zip``) "
"automatically after downloading them. If you want to skip this step (e.g., "
"for self-extracting executables and other custom archive types), you can add "
"``expand=False`` to a ``version`` directive."
msgstr ""

# d32700ca407f49358bfedd301d7bc818
#: ../spack/lib/spack/docs/packaging_guide.rst:553
msgid ""
"When ``expand`` is set to ``False``, Spack sets the current working "
"directory to the directory containing the downloaded archive before it calls "
"your ``install`` method.  Within ``install``, the path to the downloaded "
"archive is available as ``self.stage.archive_file``."
msgstr ""

# bec24d36ef994eb6bfb353a2b07821a9
#: ../spack/lib/spack/docs/packaging_guide.rst:558
msgid ""
"Here is an example snippet for packages distributed as self-extracting "
"archives.  The example sets permissions on the downloaded file to make it "
"executable, then runs it with some arguments."
msgstr ""

# 5330c3f8b8924b7f850f3d0c2ac4b674
#: ../spack/lib/spack/docs/packaging_guide.rst:571
msgid "Download caching"
msgstr ""

# 4d66ead1f5364665ab045f9acf46e101
#: ../spack/lib/spack/docs/packaging_guide.rst:573
msgid ""
"Spack maintains a cache (described :ref:`here <caching>`) which saves files "
"retrieved during package installations to avoid re-downloading in the case "
"that a package is installed with a different specification (but the same "
"version) or reinstalled on account of a change in the hashing scheme."
msgstr ""

# ceeaa099d9c941b18b1be03088d5bc10
#: ../spack/lib/spack/docs/packaging_guide.rst:580
msgid "Version comparison"
msgstr ""

# 9149316bf35042aabf4060e97ccf9a7d
#: ../spack/lib/spack/docs/packaging_guide.rst:582
msgid ""
"Most Spack versions are numeric, a tuple of integers; for example, "
"``apex@0.1``, ``ferret@6.96`` or ``py-netcdf@1.2.3.1``.  Spack knows how to "
"compare and sort numeric versions."
msgstr ""

# de4249a6fa9e4fe4a4391c84f4628779
#: ../spack/lib/spack/docs/packaging_guide.rst:586
msgid ""
"Some Spack versions involve slight extensions of numeric syntax; for "
"example, ``py-sphinx-rtd-theme@0.1.10a0``.  In this case, numbers are always "
"considered to be \"newer\" than letters.  This is for consistency with `RPM "
"<https://bugzilla.redhat.com/show_bug.cgi?id=50977>`_."
msgstr ""

# cf7e724e494e47a7b8cf13034096ae1f
#: ../spack/lib/spack/docs/packaging_guide.rst:591
msgid ""
"Spack versions may also be arbitrary non-numeric strings; any string here "
"will suffice; for example, ``@develop``, ``@master``, ``@local``. Versions "
"are compared as follows. First, a version string is split into multiple "
"fields based on delimiters such as ``.``, ``-`` etc. Then matching fields "
"are compared using the rules below:"
msgstr ""

# f04e8db5443b49ed83fa3f43fcc38c11
#: ../spack/lib/spack/docs/packaging_guide.rst:597
msgid ""
"The following develop-like strings are greater (newer) than all numbers and "
"are ordered as ``develop > master > head > trunk``."
msgstr ""

# 2a5b85f521284d6795f5671a2753f7af
#: ../spack/lib/spack/docs/packaging_guide.rst:600
msgid ""
"Numbers are all less than the chosen develop-like strings above, and are "
"sorted numerically."
msgstr ""

# a357b308ace146f2a3f4ecd9a6016c23
#: ../spack/lib/spack/docs/packaging_guide.rst:603
msgid ""
"All other non-numeric versions are less than numeric versions, and are "
"sorted alphabetically."
msgstr ""

# 7239aafd77f8496eba92143bf6712bd6
#: ../spack/lib/spack/docs/packaging_guide.rst:606
msgid "The logic behind this sort order is two-fold:"
msgstr ""

# 794670dc819e4c15bd298d689a1f8114
#: ../spack/lib/spack/docs/packaging_guide.rst:608
msgid ""
"Non-numeric versions are usually used for special cases while developing or "
"debugging a piece of software.  Keeping most of them less than numeric "
"versions ensures that Spack chooses numeric versions by default whenever "
"possible."
msgstr ""

# 55fec26250174656bcbb2dd39fbb327b
#: ../spack/lib/spack/docs/packaging_guide.rst:613
msgid ""
"The most-recent development version of a package will usually be newer than "
"any released numeric versions.  This allows the ``@develop`` version to "
"satisfy dependencies like ``depends_on(abc, when=\"@x.y.z:\")``"
msgstr ""

# cb25c6f0a890451a803643c6636d7d2a
#: ../spack/lib/spack/docs/packaging_guide.rst:620
msgid "Version selection"
msgstr ""

# e13c81d5176244d782b402ab7544c802
#: ../spack/lib/spack/docs/packaging_guide.rst:622
msgid ""
"When concretizing, many versions might match a user-supplied spec. For "
"example, the spec ``python`` matches all available versions of the package "
"``python``.  Similarly, ``python@3:`` matches all versions of Python3.  "
"Given a set of versions that match a spec, Spack concretization uses the "
"following priorities to decide which one to use:"
msgstr ""

# a73b9f9dd2e943e99cc92a708ad3df78
#: ../spack/lib/spack/docs/packaging_guide.rst:629
msgid ""
"If the user provided a list of versions in ``packages.yaml``, the first "
"matching version in that list will be used."
msgstr ""

# faa9d6655fa849cea307bc937d427d11
#: ../spack/lib/spack/docs/packaging_guide.rst:632
msgid ""
"If one or more versions is specified as ``preferred=True``, in either "
"``packages.yaml`` or ``package.py``, the largest matching version will be "
"used.  (\"Latest\" is defined by the sort order above)."
msgstr ""

# 9a7a59ca13b84a51b6a613c705f11ab0
#: ../spack/lib/spack/docs/packaging_guide.rst:637
msgid ""
"If no preferences in particular are specified in the package or in "
"``packages.yaml``, then the largest matching non-develop version will be "
"used.  By avoiding ``@develop``, this prevents users from accidentally "
"installing a ``@develop`` version."
msgstr ""

# 13e70f2168e64fb9a7ed7ecb5d2611a4
#: ../spack/lib/spack/docs/packaging_guide.rst:642
msgid ""
"If all else fails and ``@develop`` is the only matching version, it will be "
"used."
msgstr ""

# 7cc19548358a4af9aaeef268297e8f00
#: ../spack/lib/spack/docs/packaging_guide.rst:650
msgid "``spack checksum``"
msgstr ""

# 4dd1b4ed2afb416b9fc9d596adb9b128
#: ../spack/lib/spack/docs/packaging_guide.rst:652
msgid ""
"If you want to add new versions to a package you've already created, this is "
"automated with the ``spack checksum`` command.  Here's an example for "
"``libelf``:"
msgstr ""

# 235ed7782cf5414d8d66063365c869ce
#: ../spack/lib/spack/docs/packaging_guide.rst:674
msgid ""
"This does the same thing that ``spack create`` does, but it allows you to go "
"back and add new versions easily as you need them (e.g., as they're "
"released).  It fetches the tarballs you ask for and prints out a list of "
"``version`` commands ready to copy/paste into your package file:"
msgstr ""

# 40ebf7f0d98c49cea349b063e4a25e55
#: ../spack/lib/spack/docs/packaging_guide.rst:688
msgid ""
"By default, Spack will search for new tarball downloads by scraping the "
"parent directory of the tarball you gave it.  So, if your tarball is at "
"``http://example.com/downloads/foo-1.0.tar.gz``, Spack will look in ``http://"
"example.com/downloads/`` for links to additional versions. If you need to "
"search another path for download links, you can supply some extra attributes "
"that control how your package finds new versions. See the documentation on :"
"ref:`attribute_list_url` and :ref:`attribute_list_depth`."
msgstr ""

# f68466c2e7f944c792469854c1cdd351
#: ../spack/lib/spack/docs/packaging_guide.rst:699
msgid ""
"This command assumes that Spack can extrapolate new URLs from an existing "
"URL in the package, and that Spack can find similar URLs on a webpage.  If "
"that's not possible, e.g. if the package's developers don't name their "
"tarballs consistently, you'll need to manually add ``version`` calls "
"yourself."
msgstr ""

# 7d5d039a329347eea8f23309bd9d273b
#: ../spack/lib/spack/docs/packaging_guide.rst:705
msgid ""
"For ``spack checksum`` to work, Spack needs to be able to ``import`` your "
"package in Python.  That means it can't have any syntax errors, or the "
"``import`` will fail.  Use this once you've got your package in working "
"order."
msgstr ""

# fa6e41147c484c01a26fc3e3e405b707
#: ../spack/lib/spack/docs/packaging_guide.rst:712
msgid "Finding new versions"
msgstr ""

# 400e317071244f7c80c4c4b66adf3578
#: ../spack/lib/spack/docs/packaging_guide.rst:714
msgid "You've already seen the ``homepage`` and ``url`` package attributes:"
msgstr ""

# 633472af37ca46668ed298039402e63e
#: ../spack/lib/spack/docs/packaging_guide.rst:728
msgid ""
"These are class-level attributes used by Spack to show users information "
"about the package, and to determine where to download its source code."
msgstr ""

# 4ad3b1caa20b4cb6aa5d0d3312a30716
#: ../spack/lib/spack/docs/packaging_guide.rst:732
msgid ""
"Spack uses the tarball URL to extrapolate where to find other tarballs of "
"the same package (e.g. in :ref:`cmd-spack-checksum`, but this does not "
"always work.  This section covers ways you can tell Spack to find tarballs "
"elsewhere."
msgstr ""

# 23ea65495fd346329c95bd58bf82f546
#: ../spack/lib/spack/docs/packaging_guide.rst:741
msgid "``list_url``"
msgstr ""

# 1123de1e41bd42b0a7149640174157b6
#: ../spack/lib/spack/docs/packaging_guide.rst:743
msgid ""
"When spack tries to find available versions of packages (e.g. with :ref:`cmd-"
"spack-checksum`), it spiders the parent directory of the tarball in the "
"``url`` attribute.  For example, for libelf, the url is:"
msgstr ""

# dc9b36e7ac354164bf16ecdc14afedfb
#: ../spack/lib/spack/docs/packaging_guide.rst:752
msgid ""
"Here, Spack spiders ``http://www.mr511.de/software/`` to find similar "
"tarball links and ultimately to make a list of available versions of "
"``libelf``."
msgstr ""

# 4699dae84f4a4b9ebe1b7ad36e88df36
#: ../spack/lib/spack/docs/packaging_guide.rst:756
msgid ""
"For many packages, the tarball's parent directory may be unlistable, or it "
"may not contain any links to source code archives.  In fact, many times "
"additional package downloads aren't even available in the same directory as "
"the download URL."
msgstr ""

# 04457ac4020f4cea9989e70b48ff7e48
#: ../spack/lib/spack/docs/packaging_guide.rst:761
msgid ""
"For these, you can specify a separate ``list_url`` indicating the page to "
"search for tarballs.  For example, ``libdwarf`` has the homepage as the "
"``list_url``, because that is where links to old versions are:"
msgstr ""

# 8baba17277cd4076a639e4fb43f199cc
#: ../spack/lib/spack/docs/packaging_guide.rst:777
msgid "``list_depth``"
msgstr ""

# e80ca19eee8b42ecab7997d0f6865e4a
#: ../spack/lib/spack/docs/packaging_guide.rst:779
msgid ""
"``libdwarf`` and many other packages have a listing of available versions on "
"a single webpage, but not all do.  For example, ``mpich`` has a tarball URL "
"that looks like this:"
msgstr ""

# c59e8f8d880948339e88a83d49fc6a1d
#: ../spack/lib/spack/docs/packaging_guide.rst:787
msgid ""
"But its downloads are in many different subdirectories of ``http://www.mpich."
"org/static/downloads/``.  So, we need to add a ``list_url`` *and* a "
"``list_depth`` attribute:"
msgstr ""

# 66c7d71baf14483ca21ebe95cf981d15
#: ../spack/lib/spack/docs/packaging_guide.rst:800
msgid ""
"By default, Spack only looks at the top-level page available at "
"``list_url``.  ``list_depth = 1`` tells it to follow up to 1 level of links "
"from the top-level page.  Note that here, this implies 1 level of "
"subdirectories, as the ``mpich`` website is structured much like a "
"filesystem.  But ``list_depth`` really refers to link depth when spidering "
"the page."
msgstr ""

# 9f4846cb4877401f9ee3262d5b797d0b
#: ../spack/lib/spack/docs/packaging_guide.rst:811
msgid "Fetching from code repositories"
msgstr ""

# b60a5d17b40c499d82f9ff46b876a92d
#: ../spack/lib/spack/docs/packaging_guide.rst:813
msgid ""
"For some packages, source code is provided in a Version Control System (VCS) "
"repository rather than in a tarball.  Spack can fetch packages from VCS "
"repositories. Currently, Spack supports fetching with `Git <git-fetch_>`_, "
"`Mercurial (hg) <hg-fetch_>`_, `Subversion (svn) <svn-fetch_>`_, and `Go <go-"
"fetch_>`_."
msgstr ""

# b0a735efe42a48cfab2eee4ffd79fc92
#: ../spack/lib/spack/docs/packaging_guide.rst:819
msgid ""
"To fetch a package from a source repository, Spack needs to know which VCS "
"to use and where to download from. Much like with ``url``, package authors "
"can specify a class-level ``git``, ``hg``, ``svn``, or ``go`` attribute "
"containing the correct download location."
msgstr ""

# 95e18ad5490b492ca785acae9bbfec6c
#: ../spack/lib/spack/docs/packaging_guide.rst:824
msgid ""
"Many packages developed with Git have both a Git repository as well as "
"release tarballs available for download. Packages can define both a class-"
"level tarball URL and VCS. For example:"
msgstr ""

# 89bac6ffb2b84599a744c55d681615ba
#: ../spack/lib/spack/docs/packaging_guide.rst:842
msgid ""
"If a package contains both a ``url`` and ``git`` class-level attribute, "
"Spack decides which to use based on the arguments to the ``version()`` "
"directive. Versions containing a specific branch, tag, or revision are "
"assumed to be for VCS download methods, while versions containing a checksum "
"are assumed to be for URL download methods."
msgstr ""

# 06c6c35a706b411b85706dea7f2a9893
#: ../spack/lib/spack/docs/packaging_guide.rst:848
msgid ""
"Like ``url``, if a specific version downloads from a different repository "
"than the default repo, it can be overridden with a version-specific argument."
msgstr ""

# 2b7ef85f9c1e43bdbda6477b55b20ea2
#: ../spack/lib/spack/docs/packaging_guide.rst:853
msgid ""
"In order to reduce ambiguity, each package can only have a single VCS top-"
"level attribute in addition to ``url``. In the rare case that a package uses "
"multiple VCS, a fetch strategy can be specified for each version. For "
"example, the ``rockstar`` package contains:"
msgstr ""

# dd49798f3fcf4795b48590015629aff0
#: ../spack/lib/spack/docs/packaging_guide.rst:874
msgid "Git fetching supports the following parameters to ``version``:"
msgstr ""

# f9c8aaa585e64cf0850864c827d6bc85
#: ../spack/lib/spack/docs/packaging_guide.rst:876
msgid ""
"``git``: URL of the git repository, if different than the class-level "
"``git``."
msgstr ""

# 543735269f874a7781b1c204439095f9
#: ../spack/lib/spack/docs/packaging_guide.rst:877
msgid "``branch``: Name of a branch to fetch."
msgstr ""

# 396f6a40233a483dbfaf0cf90f4fa713
#: ../spack/lib/spack/docs/packaging_guide.rst:878
msgid "``tag``: Name of a tag to fetch."
msgstr ""

# 8390ab495c0442d38af03030ca3f9506
#: ../spack/lib/spack/docs/packaging_guide.rst:879
msgid "``commit``: SHA hash (or prefix) of a commit to fetch."
msgstr ""

# f0468118727e4494a4764e56428cc762
#: ../spack/lib/spack/docs/packaging_guide.rst:880
msgid ""
"``submodules``: Also fetch submodules recursively when checking out this "
"repository."
msgstr ""

# ba4bbc6d9f8b4d58bbda95c47aaf8032
#: ../spack/lib/spack/docs/packaging_guide.rst:882
msgid "Only one of ``tag``, ``branch``, or ``commit`` can be used at a time."
msgstr ""

# 8ec690971cac4bd2a38ce5f62904c7c2
# 17056291e42c4eea94742a4d63871e71
#: ../spack/lib/spack/docs/packaging_guide.rst:899
#: ../spack/lib/spack/docs/packaging_guide.rst:998
msgid "Default branch"
msgstr ""

# 4543ffdf55784968a22a7d555e424e93
#: ../spack/lib/spack/docs/packaging_guide.rst:885
msgid "To fetch a repository's default branch:"
msgstr ""

# 8e1d7930047b433e88cc8d813cff51df
#: ../spack/lib/spack/docs/packaging_guide.rst:895
msgid ""
"This download method is untrusted, and is not recommended. Aside from HTTPS, "
"there is no way to verify that the repository has not been compromised, and "
"the commit you get when you install the package likely won't be the same "
"commit that was used when the package was first written. Additionally, the "
"default branch may change. It is best to at least specify a branch name."
msgstr ""

# f495d4bcbd9547f3b3f18d5a1f7c4114
#: ../spack/lib/spack/docs/packaging_guide.rst:910
msgid "Branches"
msgstr ""

# 9a0a612a74714024b3dd9d79e745cf81
#: ../spack/lib/spack/docs/packaging_guide.rst:902
msgid "To fetch a particular branch, use the ``branch`` parameter:"
msgstr ""

# f85fd4640bc94070bd92cb54d61ed859
#: ../spack/lib/spack/docs/packaging_guide.rst:908
msgid ""
"This download method is untrusted, and is not recommended. Branches are "
"moving targets, so the commit you get when you install the package likely "
"won't be the same commit that was used when the package was first written."
msgstr ""

# d15848c80858406b8644276662ef4858
#: ../spack/lib/spack/docs/packaging_guide.rst:922
msgid "Tags"
msgstr ""

# b20922f023a84e5aac699fe11439a37a
#: ../spack/lib/spack/docs/packaging_guide.rst:913
msgid "To fetch from a particular tag, use ``tag`` instead:"
msgstr ""

# 28ba46c7c0e14087a94aed8677c36998
#: ../spack/lib/spack/docs/packaging_guide.rst:919
msgid ""
"This download method is untrusted, and is not recommended. Although tags are "
"generally more stable than branches, Git allows tags to be moved. Many "
"developers use tags to denote rolling releases, and may move the tag when a "
"bug is patched."
msgstr ""

# f347949ba4d0441aba3c83e6d0129a4d
#: ../spack/lib/spack/docs/packaging_guide.rst:946
msgid "Commits"
msgstr ""

# c9e1c7eac270469ca61db723c888f5c0
#: ../spack/lib/spack/docs/packaging_guide.rst:925
msgid "Finally, to fetch a particular commit, use ``commit``:"
msgstr ""

# 887431edf4a5471986a0e978719180a6
#: ../spack/lib/spack/docs/packaging_guide.rst:931
msgid ""
"This doesn't have to be a full hash; you can abbreviate it as you'd expect "
"with git:"
msgstr ""

# 6fd81e92d11d42ac9894742ed219ce42
#: ../spack/lib/spack/docs/packaging_guide.rst:938
msgid ""
"This download method *is trusted*.  It is the recommended way to securely "
"download from a Git repository."
msgstr ""

# 7569343a8bad4a4ba6fbd69c5ae907f4
#: ../spack/lib/spack/docs/packaging_guide.rst:941
msgid ""
"It may be useful to provide a saner version for commits like this, e.g. you "
"might use the date as the version, as done above. Or, if you know the commit "
"at which a release was cut, you can use the release version. It's up to the "
"package author to decide what makes the most sense. Although you can use the "
"commit hash as the version number, this is not recommended, as it won't sort "
"properly."
msgstr ""

# c90e5a2c50a74bab9e6a1067dc71dee0
#: ../spack/lib/spack/docs/packaging_guide.rst:956
msgid "Submodules"
msgstr ""

# 962613aa6bdd4c4f9218666625b0203e
#: ../spack/lib/spack/docs/packaging_guide.rst:949
msgid ""
"You can supply ``submodules=True`` to cause Spack to fetch submodules "
"recursively along with the repository at fetch time. For more information "
"about git submodules see the manpage of git: ``man git-submodule``."
msgstr ""

# f7807ceb6b0b4a3c988cb82dc372b300
#: ../spack/lib/spack/docs/packaging_guide.rst:962
msgid "GitHub"
msgstr ""

# 730efe51c940434fbdd219f11ef1979d
#: ../spack/lib/spack/docs/packaging_guide.rst:964
msgid ""
"If a project is hosted on GitHub, *any* valid Git branch, tag, or hash may "
"be downloaded as a tarball.  This is accomplished simply by constructing an "
"appropriate URL.  Spack can checksum any package downloaded this way, "
"thereby producing a trusted download.  For example, the following downloads "
"a particular hash, and then applies a checksum."
msgstr ""

# ffde0e20a0a34f01a4f7b190aba9c7be
#: ../spack/lib/spack/docs/packaging_guide.rst:980
msgid "Mercurial"
msgstr ""

# 0b341e0a24cc4b51a79eb9f19b0e78dd
#: ../spack/lib/spack/docs/packaging_guide.rst:982
msgid ""
"Fetching with Mercurial works much like `Git <git-fetch>`_, but you use the "
"``hg`` parameter."
msgstr ""

# 1ea2fc02b86d48ef99ca2d5c6164ea53
#: ../spack/lib/spack/docs/packaging_guide.rst:986
msgid "Add the ``hg`` attribute with no ``revision`` passed to ``version``:"
msgstr ""

# 0cfdb671b5314a29bce11dfada1afd07
#: ../spack/lib/spack/docs/packaging_guide.rst:996
msgid ""
"This download method is untrusted, and is not recommended. As with Git's "
"default fetching strategy, there is no way to verify the integrity of the "
"download."
msgstr ""

# 2b0a1a928c674bb382bb1ae16ecc173e
#: ../spack/lib/spack/docs/packaging_guide.rst:1013
msgid "Revisions"
msgstr ""

# b6c48c266ec84ddeb86c6707bf58f6b6
#: ../spack/lib/spack/docs/packaging_guide.rst:1001
msgid "To fetch a particular revision, use the ``revision`` parameter:"
msgstr ""

# ef55909c27a04168a8343c1ddf778c20
#: ../spack/lib/spack/docs/packaging_guide.rst:1007
msgid ""
"Unlike ``git``, which has special parameters for different types of "
"revisions, you can use ``revision`` for branches, tags, and commits when you "
"fetch with Mercurial. Like Git, fetching specific branches or tags is an "
"untrusted download method, and is not recommended. The recommended fetch "
"strategy is to specify a particular commit hash as the revision."
msgstr ""

# 087f7b8c0315426d87038761fb4d7184
#: ../spack/lib/spack/docs/packaging_guide.rst:1019
msgid "Subversion"
msgstr ""

# 7791cc784e434dc0abfff20d489b03d2
#: ../spack/lib/spack/docs/packaging_guide.rst:1021
msgid "To fetch with subversion, use the ``svn`` and ``revision`` parameters."
msgstr ""

# 04a9710cc55147e6850b4f5622a6a81d
#: ../spack/lib/spack/docs/packaging_guide.rst:1035
msgid "Fetching the head"
msgstr ""

# ef68d738e5224fe0b6086a57f3bd6ba0
#: ../spack/lib/spack/docs/packaging_guide.rst:1024
msgid "Simply add an ``svn`` parameter to the package:"
msgstr ""

# a47b6286d35d4323b9e4f7ca16426f71
#: ../spack/lib/spack/docs/packaging_guide.rst:1034
msgid ""
"This download method is untrusted, and is not recommended for the same "
"reasons as mentioned above."
msgstr ""

# 9120ac1fb3274c23905fa086c7e53cdb
#: ../spack/lib/spack/docs/packaging_guide.rst:1050
msgid "Fetching a revision"
msgstr ""

# dcfbf4504701400594e1f16985ad9023
#: ../spack/lib/spack/docs/packaging_guide.rst:1038
msgid ""
"To fetch a particular revision, add a ``revision`` argument to the version "
"directive:"
msgstr ""

# 1854440f976f48108e74664172a8864b
#: ../spack/lib/spack/docs/packaging_guide.rst:1045
msgid "This download method is untrusted, and is not recommended."
msgstr ""

# 3954955d10d84c8a8c71f4a9931367bf
#: ../spack/lib/spack/docs/packaging_guide.rst:1047
msgid ""
"Unfortunately, Subversion has no commit hashing scheme like Git and "
"Mercurial do, so there is no way to guarantee that the download you get is "
"the same as the download used when the package was created. Use at your own "
"risk."
msgstr ""

# aaec64315763498ba694e13a8a98dff9
#: ../spack/lib/spack/docs/packaging_guide.rst:1052
msgid ""
"Subversion branches are handled as part of the directory structure, so you "
"can check out a branch or tag by changing the URL. If you want to package "
"multiple branches, simply add a ``svn`` argument to each version directive."
msgstr ""

# 827f06b0997a4d1c99ef2d1171b59313
#: ../spack/lib/spack/docs/packaging_guide.rst:1061
msgid "Go"
msgstr ""

# c2949d8189134cfcae8ec6db1bce3db4
#: ../spack/lib/spack/docs/packaging_guide.rst:1063
msgid ""
"Go isn't a VCS, it is a programming language with a builtin command, `go get "
"<https://golang.org/cmd/go/#hdr-"
"Download_and_install_packages_and_dependencies>`_, that fetches packages and "
"their dependencies automatically. It can clone a Git repository, or download "
"from another source location. For example:"
msgstr ""

# af502c5a2e3244e9a28a05eb4a0bfe32
#: ../spack/lib/spack/docs/packaging_guide.rst:1078
msgid ""
"Go cannot be used to fetch a particular commit or branch, it always "
"downloads the head of the repository. This download method is untrusted, and "
"is not recommended. Use another fetch strategy whenever possible."
msgstr ""

# 367fdf09fe6844128c982854d429a905
#: ../spack/lib/spack/docs/packaging_guide.rst:1080
msgid "and is not recommended. Use another fetch strategy whenever possible."
msgstr ""

# d39dca50c2ed4703ae30ac71f30ad3b3
#: ../spack/lib/spack/docs/packaging_guide.rst:1086
msgid ""
"Many software packages can be configured to enable optional features, which "
"often come at the expense of additional dependencies or longer build-times. "
"To be flexible enough and support a wide variety of use cases, Spack permits "
"to expose to the end-user the ability to choose which features should be "
"activated in a package at the time it is installed. The mechanism to be "
"employed is the :py:func:`spack.directives.variant` directive."
msgstr ""

# 2df7152336ab4325863bcee908fb53ea
#: ../spack/lib/spack/docs/packaging_guide.rst:1095
msgid "Boolean variants"
msgstr ""

# f63a9230c99d4604a0e62b5ac6f2e618
#: ../spack/lib/spack/docs/packaging_guide.rst:1097
msgid ""
"In their simplest form variants are boolean options specified at the package "
"level:"
msgstr ""

# 4d270c26eff84e2c8453234802da0bd8
#: ../spack/lib/spack/docs/packaging_guide.rst:1108
msgid ""
"with a default value and a description of their meaning / use in the "
"package. *Variants can be tested in any context where a spec constraint is "
"expected.* In the example above the ``shared`` variant is tied to the build "
"of shared dynamic libraries. To pass the right option at configure time we "
"can branch depending on its value:"
msgstr ""

# dd75732960d94e8b9295e9ea9bd79844
#: ../spack/lib/spack/docs/packaging_guide.rst:1124
msgid ""
"As explained in :ref:`basic-variants` the constraint ``+shared`` means that "
"the boolean variant is set to ``True``, while ``~shared`` means it is set to "
"``False``. Another common example is the optional activation of an extra "
"dependency which requires to use the variant in the ``when`` argument of :py:"
"func:`spack.directives.depends_on`:"
msgstr ""

# e1e8c6e2cb6444c6b2551ad0d464b695
#: ../spack/lib/spack/docs/packaging_guide.rst:1138
msgid ""
"as shown in the snippet above where ``szip`` is modeled to be an optional "
"dependency of ``hdf5``."
msgstr ""

# dd0be324d92741439a1dfbefc587de36
#: ../spack/lib/spack/docs/packaging_guide.rst:1143
msgid "Multi-valued variants"
msgstr ""

# 60886dc123414f8c9274bf1395f0781e
#: ../spack/lib/spack/docs/packaging_guide.rst:1145
msgid ""
"If need be, Spack can go beyond Boolean variants and permit an arbitrary "
"number of allowed values. This might be useful when modeling options that "
"are tightly related to each other. The values in this case are passed to "
"the :py:func:`spack.directives.variant` directive as a tuple:"
msgstr ""

# a41ebecb56764eb5aa4ea906fbc3682e
#: ../spack/lib/spack/docs/packaging_guide.rst:1160
msgid ""
"In the example above the argument ``multi`` is set to ``False`` to indicate "
"that only one among all the variant values can be active at any time. This "
"constraint is enforced by the parser and an error is emitted if a user "
"specifies two or more values at the same time:"
msgstr ""

# a67bcc9e37684db094647f7b4d85731d
#: ../spack/lib/spack/docs/packaging_guide.rst:1176
msgid ""
"Another useful note is that *Python's* ``None`` *is not allowed as a default "
"value* and therefore it should not be used to denote that no feature was "
"selected. Users should instead select another value, like ``'none'``, and "
"handle it explicitly within the package recipe if need be:"
msgstr ""

# 479b66a3459b40bdbded7cfa28fc6ac1
#: ../spack/lib/spack/docs/packaging_guide.rst:1186
msgid ""
"In cases where multiple values can be selected at the same time ``multi`` "
"should be set to ``True``:"
msgstr ""

# 64e18dda8ec54591aeb0a3f5c2b1789a
#: ../spack/lib/spack/docs/packaging_guide.rst:1201
msgid ""
"Within a package recipe a multi-valued variant is tested using a "
"``key=value`` syntax:"
msgstr ""

# ea37820f4aac4acf8af320513869b8cb
#: ../spack/lib/spack/docs/packaging_guide.rst:1210
msgid "Complex validation logic for variant values"
msgstr ""

# 5ac36b24b60c4924a5b4615ef196e502
#: ../spack/lib/spack/docs/packaging_guide.rst:1211
msgid ""
"To cover complex use cases, the :py:func:`spack.directives.variant` "
"directive could accept as the ``values`` argument a full-fledged object "
"which has ``default`` and other arguments of the directive embedded as "
"attributes."
msgstr ""

# 92edb7d8458f4d10be8245e96b4d99bf
#: ../spack/lib/spack/docs/packaging_guide.rst:1215
msgid ""
"An example, already implemented in Spack's core, is :py:class:`spack.variant."
"DisjointSetsOfValues`. This class is used to implement a few convenience "
"functions, like :py:func:`spack.variant.any_combination_of`:"
msgstr ""

# 9e562f946cb845938b666d3a579e4c6e
#: ../spack/lib/spack/docs/packaging_guide.rst:1229
msgid ""
"that allows any combination of the specified values, and also allows the "
"user to specify ``'none'`` (as a string) to choose none of them. The objects "
"returned by these functions can be modified at will by chaining method calls "
"to change the default value, customize the error message or other similar "
"operations:"
msgstr ""

# d46dec38e87044d098a341761e3d13b0
#: ../spack/lib/spack/docs/packaging_guide.rst:1252
msgid "Resources (expanding extra tarballs)"
msgstr ""

# b027b44cf0cf435cb3d0ab8c9a316976
#: ../spack/lib/spack/docs/packaging_guide.rst:1254
msgid ""
"Some packages (most notably compilers) provide optional features if "
"additional resources are expanded within their source tree before building. "
"In Spack it is possible to describe such a need with the ``resource`` "
"directive :"
msgstr ""

# 3f37241a99d54d7b8ca8d7f9d47f37a8
#: ../spack/lib/spack/docs/packaging_guide.rst:1267
msgid ""
"Based on the keywords present among the arguments the appropriate "
"``FetchStrategy`` will be used for the resource. The keyword ``destination`` "
"is relative to the source root of the package and should point to where the "
"resource is to be expanded."
msgstr ""

# d079aab1a424496b98b985318da864c4
#: ../spack/lib/spack/docs/packaging_guide.rst:1275
msgid "Licensed software"
msgstr ""

# 1527d86e8dc442cab68a0be1183c82e2
#: ../spack/lib/spack/docs/packaging_guide.rst:1277
msgid ""
"In order to install licensed software, Spack needs to know a few more "
"details about a package. The following class attributes should be defined."
msgstr ""

# 57196fac65764b45b5c8cc7a325d7690
#: ../spack/lib/spack/docs/packaging_guide.rst:1282
msgid "``license_required``"
msgstr ""

# 48bb08fd5deb45378781a10c61aefc1b
#: ../spack/lib/spack/docs/packaging_guide.rst:1284
msgid ""
"Boolean. If set to ``True``, this software requires a license. If set to "
"``False``, all of the following attributes will be ignored. Defaults to "
"``False``."
msgstr ""

# 8cf90137518f413089fc0d0681703880
#: ../spack/lib/spack/docs/packaging_guide.rst:1290
msgid "``license_comment``"
msgstr ""

# 588f87352b3040eab81bc55fd6425af8
#: ../spack/lib/spack/docs/packaging_guide.rst:1292
msgid ""
"String. Contains the symbol used by the license manager to denote a comment. "
"Defaults to ``#``."
msgstr ""

# b9cd31dc383440318d09156f75c7b322
#: ../spack/lib/spack/docs/packaging_guide.rst:1297
msgid "``license_files``"
msgstr ""

# 92d2ea74ae6e4bcaadd4aaad6d2dd4f3
#: ../spack/lib/spack/docs/packaging_guide.rst:1299
msgid ""
"List of strings. These are files that the software searches for when looking "
"for a license. All file paths must be relative to the installation "
"directory. More complex packages like Intel may require multiple licenses "
"for individual components. Defaults to the empty list."
msgstr ""

# b42d5a091fb4476b9a3dedf624712cef
#: ../spack/lib/spack/docs/packaging_guide.rst:1306
msgid "``license_vars``"
msgstr ""

# 1084a324d98d4a858f00e2aa162cba36
#: ../spack/lib/spack/docs/packaging_guide.rst:1308
msgid ""
"List of strings. Environment variables that can be set to tell the software "
"where to look for a license if it is not in the usual location. Defaults to "
"the empty list."
msgstr ""

# e787c8175c354b299916c78bba30ea57
#: ../spack/lib/spack/docs/packaging_guide.rst:1314
msgid "``license_url``"
msgstr ""

# 170289dd830d4fb8adf3fc1e39b203d7
#: ../spack/lib/spack/docs/packaging_guide.rst:1316
msgid ""
"String. A URL pointing to license setup instructions for the software. "
"Defaults to the empty string."
msgstr ""

# 101efe30ec524f2e89c4a00882c05ded
#: ../spack/lib/spack/docs/packaging_guide.rst:1319
msgid "For example, let's take a look at the package for the PGI compilers."
msgstr ""

# 34df884f1b814662b0982e2079011ca8
#: ../spack/lib/spack/docs/packaging_guide.rst:1330
msgid ""
"As you can see, PGI requires a license. Its license manager, FlexNet, uses "
"the ``#`` symbol to denote a comment. It expects the license file to be "
"named ``license.dat`` and to be located directly in the installation prefix. "
"If you would like the installation file to be located elsewhere, simply set "
"``PGROUPD_LICENSE_FILE`` or ``LM_LICENSE_FILE`` after installation. For "
"further instructions on installation and licensing, see the URL provided."
msgstr ""

# d64a076024294a4d907a28793aacec37
#: ../spack/lib/spack/docs/packaging_guide.rst:1337
msgid ""
"Let's walk through a sample PGI installation to see exactly what Spack is "
"and isn't capable of. Since PGI does not provide a download URL, it must be "
"downloaded manually. It can either be added to a mirror or located in the "
"current directory when ``spack install pgi`` is run. See :ref:`mirrors` for "
"instructions on setting up a mirror."
msgstr ""

# e2cb208b87674d698fb69a8955a4180c
#: ../spack/lib/spack/docs/packaging_guide.rst:1343
msgid ""
"After running ``spack install pgi``, the first thing that will happen is "
"Spack will create a global license file located at ``$SPACK_ROOT/etc/spack/"
"licenses/pgi/license.dat``. It will then open up the file using the editor "
"set in ``$EDITOR``, or vi if unset. It will look like this:"
msgstr ""

# 4d6569c2806d4216b95f48a370bad77c
#: ../spack/lib/spack/docs/packaging_guide.rst:1376
msgid ""
"You can add your license directly to this file, or tell FlexNet to use a "
"license stored on a separate license server. Here is an example that points "
"to a license server called licman1:"
msgstr ""

# 1b086540c600406182538739adde287a
#: ../spack/lib/spack/docs/packaging_guide.rst:1385
msgid ""
"If your package requires the license to install, you can reference the "
"location of this global license using ``self.global_license_file``. After "
"installation, symlinks for all of the files given in ``license_files`` will "
"be created, pointing to this global license. If you install a different "
"version or variant of the package, Spack will automatically detect and reuse "
"the already existing global license."
msgstr ""

# 08de8e38e34049059640930958d8e5b7
#: ../spack/lib/spack/docs/packaging_guide.rst:1392
msgid ""
"If the software you are trying to package doesn't rely on license files, "
"Spack will print a warning message, letting the user know that they need to "
"set an environment variable or pointing them to installation documentation."
msgstr ""

# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# cd65a76f2f8f4303a475258c088e8f07
# #-#-#-#-#  workflows.pot (Spack 0.12)  #-#-#-#-#
# 18c8ed473b6b44c2b81eead6a4bf5654
#: ../spack/lib/spack/docs/packaging_guide.rst:1401
#: ../spack/lib/spack/docs/workflows.rst:1477
msgid "Patches"
msgstr ""

# f106a07593414058b7e9a0bbbd34e830
#: ../spack/lib/spack/docs/packaging_guide.rst:1403
msgid ""
"Depending on the host architecture, package version, known bugs, or other "
"issues, you may need to patch your software to get it to build correctly.  "
"Like many other package systems, spack allows you to store patches alongside "
"your package files and apply them to source code after it's downloaded."
msgstr ""

# d8d056f0d25a47f085e33f835077569c
#: ../spack/lib/spack/docs/packaging_guide.rst:1411
msgid "``patch``"
msgstr ""

# 39673601fa4a48d882047f6ed2050b53
#: ../spack/lib/spack/docs/packaging_guide.rst:1413
msgid ""
"You can specify patches in your package file with the ``patch()`` "
"directive.  ``patch`` looks like this:"
msgstr ""

# c2ed746167ee4e46833ad791b2de5935
#: ../spack/lib/spack/docs/packaging_guide.rst:1422
msgid ""
"The first argument can be either a URL or a filename.  It specifies a patch "
"file that should be applied to your source.  If the patch you supply is a "
"filename, then the patch needs to live within the spack source tree.  For "
"example, the patch above lives in a directory structure like this:"
msgstr ""

# 97020b7a819541a38aac1abbbd72ad05
#: ../spack/lib/spack/docs/packaging_guide.rst:1435
msgid ""
"If you supply a URL instead of a filename, you need to supply a ``sha256`` "
"checksum, like this:"
msgstr ""

# 18a424243268473594f3d32ca80418fe
#: ../spack/lib/spack/docs/packaging_guide.rst:1443
msgid ""
"Spack includes the hashes of patches in its versioning information, so that "
"the same package with different patches applied will have different hash "
"identifiers.  To ensure that the hashing scheme is consistent, you must use "
"a ``sha256`` checksum for the patch.  Patches will be fetched from their "
"URLs, checked, and applied to your source code.  You can use the ``spack "
"sha256`` command to generate a checksum for a patch file or URL."
msgstr ""

# ec723a94a3c04a0f9ec04a2e15e2726a
#: ../spack/lib/spack/docs/packaging_guide.rst:1451
msgid ""
"Spack can also handle compressed patches.  If you use these, Spack needs a "
"little more help.  Specifically, it needs *two* checksums: the ``sha256`` of "
"the patch and ``archive_sha256`` for the compressed archive.  "
"``archive_sha256`` helps Spack ensure that the downloaded file is not "
"corrupted or malicious, before running it through a tool like ``tar`` or "
"``zip``.  The ``sha256`` of the patch is still required so that it can be "
"included in specs.  Providing it in the package file ensures that Spack "
"won't have to download and decompress patches it won't end up using at "
"install time.  Both the archive and patch checksum are checked when patch "
"archives are downloaded."
msgstr ""

# a9bbaa57ce7a47528d2706ecd7d4d56f
#: ../spack/lib/spack/docs/packaging_guide.rst:1468
msgid "``patch`` keyword arguments are described below."
msgstr ""

# 047a5b9d6f024eac8e3fe915b66fe299
#: ../spack/lib/spack/docs/packaging_guide.rst:1472
msgid "``sha256``, ``archive_sha256``"
msgstr ""

# 21da359d945e46579b2a485d0273ce3f
#: ../spack/lib/spack/docs/packaging_guide.rst:1474
msgid ""
"Hashes of downloaded patch and compressed archive, respectively.  Only "
"needed for patches fetched from URLs."
msgstr ""

# 09296e5c59ea4188965df85e4933324e
#: ../spack/lib/spack/docs/packaging_guide.rst:1479
msgid "``when``"
msgstr ""

# e27aa707f98d40d4a0844bc8c121e41c
#: ../spack/lib/spack/docs/packaging_guide.rst:1481
msgid ""
"If supplied, this is a spec that tells spack when to apply the patch.  If "
"the installed package spec matches this spec, the patch will be applied.  In "
"our example above, the patch is applied when mvapich is at version ``1.9`` "
"or higher."
msgstr ""

# bfe972f673cc494c9fe72fd125909b2c
#: ../spack/lib/spack/docs/packaging_guide.rst:1488
msgid "``level``"
msgstr ""

# 35ae2506b7ab4b34b3690f7a2c1c9090
#: ../spack/lib/spack/docs/packaging_guide.rst:1490
msgid ""
"This tells spack how to run the ``patch`` command.  By default, the level is "
"1 and spack runs ``patch -p 1``.  If level is 2, spack will run ``patch -p "
"2``, and so on."
msgstr ""

# b856390aeac941838cc78305a7b1de4c
#: ../spack/lib/spack/docs/packaging_guide.rst:1494
msgid ""
"A lot of people are confused by level, so here's a primer.  If you look in "
"your patch file, you may see something like this:"
msgstr ""

# 916fad0396ae4b13b25944d5bc307d62
#: ../spack/lib/spack/docs/packaging_guide.rst:1512
msgid ""
"Lines 1-2 show paths with synthetic ``a/`` and ``b/`` prefixes.  These are "
"placeholders for the two ``mvapich2`` source directories that ``diff`` "
"compared when it created the patch file.  This is git's default behavior "
"when creating patch files, but other programs may behave differently."
msgstr ""

# 4481728a65b04fecbe66765006c29d13
#: ../spack/lib/spack/docs/packaging_guide.rst:1518
msgid ""
"``-p1`` strips off the first level of the prefix in both paths, allowing the "
"patch to be applied from the root of an expanded mvapich2 archive.  If you "
"set level to ``2``, it would strip off ``src``, and so on."
msgstr ""

# bb7c38c2474d4ecab00e56736763f0a7
#: ../spack/lib/spack/docs/packaging_guide.rst:1523
msgid ""
"It's generally easier to just structure your patch file so that it applies "
"cleanly with ``-p1``, but if you're using a patch you didn't create "
"yourself, ``level`` can be handy."
msgstr ""

# a38fff8b98f04ba7bcc65fab2acb0c0f
#: ../spack/lib/spack/docs/packaging_guide.rst:1529
msgid "``working_dir``"
msgstr ""

# da103c128667433d81b644f82a3d9c83
#: ../spack/lib/spack/docs/packaging_guide.rst:1531
msgid ""
"This tells spack where to run the ``patch`` command.  By default, the "
"working directory is the source path of the stage (``.``). However, "
"sometimes patches are made with respect to a subdirectory and this is where "
"the working directory comes in handy. Internally, the working directory is "
"given to ``patch`` via the ``-d`` option. Let's take the example patch from "
"above and assume for some reason, it can only be downloaded in the following "
"form:"
msgstr ""

# 4516a1e9fa7c46348b695694d9a06dd9
#: ../spack/lib/spack/docs/packaging_guide.rst:1554
msgid ""
"Hence, the patch needs to applied in the ``src/mpi`` subdirectory, and the "
"``working_dir='src/mpi'`` option would exactly do that."
msgstr ""

# 9edb28da6b0746018235b2a43998451a
#: ../spack/lib/spack/docs/packaging_guide.rst:1559
msgid "Patch functions"
msgstr ""

# 7d23595c89d24010ab06ba286a8cce8c
#: ../spack/lib/spack/docs/packaging_guide.rst:1561
msgid ""
"In addition to supplying patch files, you can write a custom function to "
"patch a package's source.  For example, the ``py-pyside`` package contains "
"some custom code for tweaking the way the PySide build handles ``RPATH``:"
msgstr ""

# c424a102a84c4142b7b4a954fbd3348f
#: ../spack/lib/spack/docs/packaging_guide.rst:1572
msgid ""
"A ``patch`` function, if present, will be run after patch files are applied "
"and before ``install()`` is run."
msgstr ""

# 4479075fce414fdf9875d935307760d9
#: ../spack/lib/spack/docs/packaging_guide.rst:1575
msgid ""
"You could put this logic in ``install()``, but putting it in a patch "
"function gives you some benefits.  First, spack ensures that the ``patch()`` "
"function is run once per code checkout.  That means that if you run install, "
"hit ctrl-C, and run install again, the code in the patch function is only "
"run once.  Also, you can tell Spack to run only the patching part of the "
"build using the :ref:`cmd-spack-patch` command."
msgstr ""

# 38c192b91d4146e2b1e55b4f689087b6
# f4f48c4eed3f4c07a8189b09edc766a1
#: ../spack/lib/spack/docs/packaging_guide.rst:1586
#: ../spack/lib/spack/docs/packaging_guide.rst:1933
msgid "Dependency patching"
msgstr ""

# 9d1a072c0737469a9af77558c3d7880e
#: ../spack/lib/spack/docs/packaging_guide.rst:1588
msgid ""
"So far we've covered how the ``patch`` directive can be used by a package to "
"patch *its own* source code. Packages can *also* specify patches to be "
"applied to their dependencies, if they require special modifications.  As "
"with all packages in Spack, a patched dependency library can coexist with "
"other versions of that library.  See the `section on depends_on "
"<dependency_dependency_patching_>`_ for more details."
msgstr ""

# 21d4dfbe414842e8ae7bdf63c709e138
#: ../spack/lib/spack/docs/packaging_guide.rst:1599
msgid "Inspecting patches"
msgstr ""

# 883e3f7d018449469123f0b977ff690a
#: ../spack/lib/spack/docs/packaging_guide.rst:1601
msgid ""
"If you want to better understand the patches that Spack applies to your "
"packages, you can do that using ``spack spec``, ``spack find``, and other "
"query commands.  Let's look at ``m4``.  If you run ``spack spec m4``, you "
"can see the patches that would be applied to ``m4``::"
msgstr ""

# 96184ef5b70345d29feb2182f4594cda
#: ../spack/lib/spack/docs/packaging_guide.rst:1616
msgid ""
"You can also see patches that have been applied to installed packages with "
"``spack find -v``::"
msgstr ""

# bf8bd1eaed96473a8816bf5cb135bc41
#: ../spack/lib/spack/docs/packaging_guide.rst:1626
msgid ""
"In both cases above, you can see that the patches' sha256 hashes are stored "
"on the spec as a variant.  As mentioned above, this means that you can have "
"multiple, differently-patched versions of a package installed at once."
msgstr ""

# 9b2b4712791b408b84125beb2fc8d96a
#: ../spack/lib/spack/docs/packaging_guide.rst:1631
msgid ""
"You can look up a patch by its sha256 hash (or a short version of it) using "
"the ``spack resource show`` command::"
msgstr ""

# fd65633246f24ee4b6eee4d918c917de
#: ../spack/lib/spack/docs/packaging_guide.rst:1639
msgid ""
"``spack resource show`` looks up downloadable resources from package files "
"by hash and prints out information about them.  Above, we see that the "
"``3877ab54`` patch applies to the ``m4`` package.  The output also tells us "
"where to find the patch."
msgstr ""

# 1a532d769dc5499db21a7adbd9ce0279
#: ../spack/lib/spack/docs/packaging_guide.rst:1644
msgid ""
"Things get more interesting if you want to know about dependency patches. "
"For example, when ``dealii`` is built with ``boost@1.68.0``, it has to patch "
"boost to work correctly.  If you didn't know this, you might wonder where "
"the extra boost patches are coming from::"
msgstr ""

# 7238f28c5d8f4c0a93b2098792afd9ac
#: ../spack/lib/spack/docs/packaging_guide.rst:1658
msgid ""
"Here you can see that the patch is applied to ``boost`` by ``dealii``, and "
"that it lives in ``dealii``'s directory in Spack's ``builtin`` package "
"repository."
msgstr ""

# 18863b380f58477090eeb0ef307846fb
#: ../spack/lib/spack/docs/packaging_guide.rst:1666
msgid "Handling RPATHs"
msgstr ""

# ad1f0fbf84cf4d5ab4545d45dbfec3da
#: ../spack/lib/spack/docs/packaging_guide.rst:1668
msgid ""
"Spack installs each package in a way that ensures that all of its "
"dependencies are found when it runs.  It does this using `RPATHs <http://en."
"wikipedia.org/wiki/Rpath>`_.  An RPATH is a search path, stored in a binary "
"(an executable or library), that tells the dynamic loader where to find its "
"dependencies at runtime. You may be familiar with `LD_LIBRARY_PATH <http://"
"tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html>`_ on Linux or "
"`DYLD_LIBRARY_PATH <https://developer.apple.com/library/mac/documentation/"
"Darwin/Reference/ManPages/man1/dyld.1.html>`_ on Mac OS X.  RPATH is similar "
"to these paths, in that it tells the loader where to find libraries.  Unlike "
"them, it is embedded in the binary and not set in each user's environment."
msgstr ""

# 873b8d8d08eb4199a17b4869a4a49bb9
#: ../spack/lib/spack/docs/packaging_guide.rst:1681
msgid "RPATHs in Spack are handled in one of three ways:"
msgstr ""

# b7ae01602c8f4b4f9370c7507bd338c0
#: ../spack/lib/spack/docs/packaging_guide.rst:1683
msgid ""
"For most packages, RPATHs are handled automatically using Spack's :ref:"
"`compiler wrappers <compiler-wrappers>`.  These wrappers are set in standard "
"variables like ``CC``, ``CXX``, ``F77``, and ``FC``, so most build systems "
"(autotools and many gmake systems) pick them up and use them."
msgstr ""

# 632d1a50c79b489c8f3f62064704c3bd
#: ../spack/lib/spack/docs/packaging_guide.rst:1688
msgid ""
"CMake also respects Spack's compiler wrappers, but many CMake builds have "
"logic to overwrite RPATHs when binaries are installed. Spack provides the "
"``std_cmake_args`` variable, which includes parameters necessary for CMake "
"build use the right installation RPATH.  It can be used like this when "
"``cmake`` is invoked:"
msgstr ""

# 30b1ea816b2048e5af373b978daa8513
#: ../spack/lib/spack/docs/packaging_guide.rst:1704
msgid ""
"If you need to modify the build to add your own RPATHs, you can use the "
"``self.rpath`` property of your package, which will return a list of all the "
"RPATHs that Spack will use when it links.  You can see this how this is used "
"in the :ref:`PySide example <pyside-patch>` above."
msgstr ""

# 298c8a1a702b42b0b41bd27b07331d25
#: ../spack/lib/spack/docs/packaging_guide.rst:1714
msgid "Parallel builds"
msgstr ""

# 12a14ae5d7ac4cad8c8912bc83131c99
#: ../spack/lib/spack/docs/packaging_guide.rst:1716
msgid ""
"By default, Spack will invoke ``make()`` with a ``-j <njobs>`` argument, so "
"that builds run in parallel.  It figures out how many jobs to run by "
"determining how many cores are on the host machine. Specifically, it uses "
"the number of CPUs reported by Python's `multiprocessing.cpu_count() <http://"
"docs.python.org/library/multiprocessing.html#multiprocessing.cpu_count>`_."
msgstr ""

# 58728abb3ac344d9a3da07b09a15e027
#: ../spack/lib/spack/docs/packaging_guide.rst:1723
msgid ""
"If a package does not build properly in parallel, you can override this "
"setting by adding ``parallel = False`` to your package.  For example, "
"OpenSSL's build does not work in parallel, so its package looks like this:"
msgstr ""

# 4eea7f29ee34466dad80bab729e67068
#: ../spack/lib/spack/docs/packaging_guide.rst:1741
msgid ""
"Similarly, you can disable parallel builds only for specific make commands, "
"as ``libdwarf`` does:"
msgstr ""

# db3bb08764374aebbdcfd7ea40556849
#: ../spack/lib/spack/docs/packaging_guide.rst:1761
msgid ""
"The first make will run in parallel here, but the second will not.  If you "
"set ``parallel`` to ``False`` at the package level, then each call to "
"``make()`` will be sequential by default, but packagers can call "
"``make(parallel=True)`` to override it."
msgstr ""

# 23805ad2705e48c987d37aec795f3268
#: ../spack/lib/spack/docs/packaging_guide.rst:1772
msgid ""
"We've covered how to build a simple package, but what if one package relies "
"on another package to build?  How do you express that in a package file?  "
"And how do you refer to the other package in the build script for your own "
"package?"
msgstr ""

# ae936f6e539b4eb5854d9c6a31311b2e
#: ../spack/lib/spack/docs/packaging_guide.rst:1777
msgid ""
"Spack makes this relatively easy.  Let's take a look at the ``libdwarf`` "
"package to see how it's done:"
msgstr ""

# bbeedef2cd174f59a20383a54eabadc3
#: ../spack/lib/spack/docs/packaging_guide.rst:1799
msgid "``depends_on()``"
msgstr ""

# e94361e7904c458da67252ba7d261038
#: ../spack/lib/spack/docs/packaging_guide.rst:1801
msgid ""
"The highlighted ``depends_on('libelf')`` call tells Spack that it needs to "
"build and install the ``libelf`` package before it builds ``libdwarf``.  "
"This means that in your ``install()`` method, you are guaranteed that "
"``libelf`` has been built and installed successfully, so you can rely on it "
"for your libdwarf build."
msgstr ""

# 94c51293779843feb1c1f8b7d391b114
#: ../spack/lib/spack/docs/packaging_guide.rst:1809
msgid "Dependency specs"
msgstr ""

# 0984faf964524424a08c4a9d7a84bb23
#: ../spack/lib/spack/docs/packaging_guide.rst:1811
msgid ""
"``depends_on`` doesn't just take the name of another package. It can take a "
"full spec as well. This means that you can restrict the versions or other "
"configuration options of ``libelf`` that ``libdwarf`` will build with. For "
"example, suppose that in the ``libdwarf`` package you write:"
msgstr ""

# 3643d47016234db29a34201cf7116e60
#: ../spack/lib/spack/docs/packaging_guide.rst:1820
msgid ""
"Now ``libdwarf`` will require ``libelf`` at *exactly* version ``0.8``. You "
"can also specify a requirement for a particular variant or for specific "
"compiler flags:"
msgstr ""

# 4a6abd4fb02343bc827f693b80bc6544
#: ../spack/lib/spack/docs/packaging_guide.rst:1830
msgid ""
"Both users *and* package authors can use the same spec syntax to refer to "
"different package configurations. Users use the spec syntax on the command "
"line to find installed packages or to install packages with particular "
"constraints, and package authors can use specs to describe relationships "
"between packages."
msgstr ""

# 151f3fecb5cd41de8981d60a7bde9a41
#: ../spack/lib/spack/docs/packaging_guide.rst:1838
msgid "Version ranges"
msgstr ""

# 8a140110551d4603a3e8cc82be065787
#: ../spack/lib/spack/docs/packaging_guide.rst:1840
msgid ""
"Although some packages require a specific version for their dependencies, "
"most can be built with a range of version. For example, if you are writing a "
"package for a legacy Python module that only works with Python 2.4 through "
"2.6, this would look like:"
msgstr ""

# 84fb8ae96f8b4e29b80596b953395941
#: ../spack/lib/spack/docs/packaging_guide.rst:1849
msgid ""
"Version ranges in Spack are *inclusive*, so ``2.4:2.6`` means any version "
"greater than or equal to ``2.4`` and up to and including ``2.6``. If you "
"want to specify that a package works with any version of Python 3, this "
"would look like:"
msgstr ""

# e309a36e30c7412dbd367b9c110af8f6
#: ../spack/lib/spack/docs/packaging_guide.rst:1858
msgid ""
"Here we leave out the upper bound. If you want to say that a package "
"requires Python 2, you can similarly leave out the lower bound:"
msgstr ""

# e8903eb6044c4994a7504a2a1c055e18
#: ../spack/lib/spack/docs/packaging_guide.rst:1865
msgid ""
"Notice that we didn't use ``@:3``. Version ranges are *inclusive*, so "
"``@:3`` means \"up to and including 3\"."
msgstr ""

# b61d41d616d74e0a8bd4074b581ba2be
#: ../spack/lib/spack/docs/packaging_guide.rst:1868
msgid ""
"What if a package can only be built with Python 2.6? You might be inclined "
"to use:"
msgstr ""

# 5b7b6c3401fb4feebc0336c8e2bb0443
#: ../spack/lib/spack/docs/packaging_guide.rst:1875
msgid ""
"However, this would be wrong. Spack assumes that all version constraints are "
"absolute, so it would try to install Python at exactly ``2.6``. The correct "
"way to specify this would be:"
msgstr ""

# 5f46de12f247412c8e4769bb916d4251
#: ../spack/lib/spack/docs/packaging_guide.rst:1883
msgid ""
"A spec can contain multiple version ranges separated by commas. For example, "
"if you need Boost 1.59.0 or newer, but there are known issues with 1.64.0, "
"1.65.0, and 1.66.0, you can say:"
msgstr ""

# 8193240b827b4dba95c6546cc62d41c9
#: ../spack/lib/spack/docs/packaging_guide.rst:1894
msgid "Dependency types"
msgstr ""

# 9f4f06297b384a6c8e440d0f95aa9e8d
#: ../spack/lib/spack/docs/packaging_guide.rst:1896
msgid ""
"Not all dependencies are created equal, and Spack allows you to specify "
"exactly what kind of a dependency you need. For example:"
msgstr ""

# c58546457e774b9baf67d0b546845f3a
#: ../spack/lib/spack/docs/packaging_guide.rst:1905
msgid "The following dependency types are available:"
msgstr ""

# 8320b6f9cd1547eeb4154e48611b8fe9
#: ../spack/lib/spack/docs/packaging_guide.rst:1907
msgid ""
"**\"build\"**: made available during the project's build. The package will "
"be added to ``PATH``, the compiler include paths, and ``PYTHONPATH``. Other "
"projects which depend on this one will not have these modified (building "
"project X doesn't need project Y's build dependencies)."
msgstr ""

# 627232a96454451c93140b55f520d188
#: ../spack/lib/spack/docs/packaging_guide.rst:1911
msgid ""
"**\"link\"**: the project is linked to by the project. The package will be "
"added to the current package's ``rpath``."
msgstr ""

# 7870d1da0ed34846bb09cb37721cd79a
#: ../spack/lib/spack/docs/packaging_guide.rst:1913
msgid ""
"**\"run\"**: the project is used by the project at runtime. The package will "
"be added to ``PATH`` and ``PYTHONPATH``."
msgstr ""

# 577817efa3a742668b7db4806ee89276
#: ../spack/lib/spack/docs/packaging_guide.rst:1916
msgid ""
"One of the advantages of the ``build`` dependency type is that although the "
"dependency needs to be installed in order for the package to be built, it "
"can be uninstalled without concern afterwards. ``link`` and ``run`` disallow "
"this because uninstalling the dependency would break the package."
msgstr ""

# 04310d0a84eb4980bf4a5d409b312b9b
#: ../spack/lib/spack/docs/packaging_guide.rst:1921
msgid ""
"If the dependency type is not specified, Spack uses a default of ``('build', "
"'link')``. This is the common case for compiler languages. Non-compiled "
"packages like Python modules commonly use ``('build', 'run')``. This means "
"that the compiler wrappers don't need to inject the dependency's ``prefix/"
"lib`` directory, but the package needs to be in ``PATH`` and ``PYTHONPATH`` "
"during the build process and later when a user wants to run the package."
msgstr ""

# 3e7b855e04884feeb1ce7422a95d58fd
#: ../spack/lib/spack/docs/packaging_guide.rst:1935
msgid ""
"Some packages maintain special patches on their dependencies, either to add "
"new features or to fix bugs.  This typically makes a package harder to "
"maintain, and we encourage developers to upstream (contribute back) their "
"changes rather than maintaining patches.  However, in some cases it's not "
"possible to upstream. Maybe the dependency's developers don't accept "
"changes, or maybe they just haven't had time to integrate them."
msgstr ""

# 244f22807c0d4e05b819262a3f5c3032
#: ../spack/lib/spack/docs/packaging_guide.rst:1942
msgid ""
"For times like these, Spack's ``depends_on`` directive can optionally take a "
"patch or list of patches:"
msgstr ""

# 5ada1b53521a44af9f1695b5a1b1e16e
#: ../spack/lib/spack/docs/packaging_guide.rst:1952
msgid ""
"Here, the ``special-tool`` package requires a special feature in "
"``binutils``, so it provides an extra ``patches=<filename>`` keyword "
"argument.  This is similar to the `patch directive <patching_>`_, with one "
"small difference.  Here, ``special-tool`` is responsible for the patch, so "
"it should live in ``special-tool``'s directory in the package repository, "
"not the ``binutils`` directory."
msgstr ""

# 453c17e95a154496adf0867babdd09f1
#: ../spack/lib/spack/docs/packaging_guide.rst:1959
msgid ""
"If you need something more sophisticated than this, you can simply nest a "
"``patch()`` directive inside of ``depends_on``:"
msgstr ""

# 8267fd73c56c413f9d24349a7d13699f
#: ../spack/lib/spack/docs/packaging_guide.rst:1974
msgid ""
"Note that there are two optional ``when`` conditions here -- one on the "
"``patch`` directive and the other on ``depends_on``.  The condition in the "
"``patch`` directive applies to ``binutils`` (the package being patched), "
"while the condition in ``depends_on`` applies to ``special-tool``.  See "
"`patch directive <patching_>`_ for details on all the arguments the "
"``patch`` directive can take."
msgstr ""

# dd0b3846c1264e25abad6779a4c601c6
#: ../spack/lib/spack/docs/packaging_guide.rst:1981
msgid ""
"Finally, if you need *multiple* patches on a dependency, you can provide a "
"list for ``patches``, e.g.:"
msgstr ""

# 26a6d8c1c1c84fb1bb05161e44dfbd34
#: ../spack/lib/spack/docs/packaging_guide.rst:1999
msgid ""
"As with ``patch`` directives, patches are applied in the order they appear "
"in the package file (or in this case, in the list)."
msgstr ""

# f12d6fb493bd454c972c03ff17799487
#: ../spack/lib/spack/docs/packaging_guide.rst:2004
msgid ""
"You may wonder whether dependency patching will interfere with other "
"packages that depend on ``binutils``.  It won't."
msgstr ""

# c58dffe33d9641ecb10079e3eef33308
#: ../spack/lib/spack/docs/packaging_guide.rst:2007
msgid ""
"As described in patching_, Patching a package adds the ``sha256`` of the "
"patch to the package's spec, which means it will have a *different* unique "
"hash than other versions without the patch.  The patched version coexists "
"with unpatched versions, and Spack's support for handling_rpaths_ guarantees "
"that each installation finds the right version. If two packages depend on "
"``binutils`` patched *the same* way, they can both use a single installation "
"of ``binutils``."
msgstr ""

# 9ca6636cd8d647a5a9a293adb8bc3b14
#: ../spack/lib/spack/docs/packaging_guide.rst:2019
msgid "``setup_dependent_environment()``"
msgstr ""

# 41c25ff20d414fe9b206f0031e438465
#: ../spack/lib/spack/docs/packaging_guide.rst:2021
msgid ""
"Spack provides a mechanism for dependencies to provide variables that can be "
"used in their dependents' build.  Any package can declare a "
"``setup_dependent_environment()`` function, and this function will be called "
"before the ``install()`` method of any dependent packages. This allows "
"dependencies to set up environment variables and other properties to be used "
"by dependents."
msgstr ""

# 35895f01928b4ac88c9b46d20903fa64
#: ../spack/lib/spack/docs/packaging_guide.rst:2028
msgid "The function declaration should look like this:"
msgstr ""

# cad89e6ba576443e9bfa83355caf9e1d
#: ../spack/lib/spack/docs/packaging_guide.rst:2034
msgid ""
"Here, the Qt package sets the ``QTDIR`` environment variable so that "
"packages that depend on a particular Qt installation will find it."
msgstr ""

# e2eb54551ca04b9bb90e02a348d7308a
#: ../spack/lib/spack/docs/packaging_guide.rst:2037
msgid "The arguments to this function are:"
msgstr ""

# 570dfa353a9d4d08a539ff45d081ee4b
#: ../spack/lib/spack/docs/packaging_guide.rst:2039
msgid ""
"**spack_env**: List of environment modifications to be applied when the "
"dependent package is built within Spack."
msgstr ""

# 010d4ddbf3cf45dcac747015bcbf4541
#: ../spack/lib/spack/docs/packaging_guide.rst:2041
msgid ""
"**run_env**: List of environment modifications to be applied when the "
"dependent package is run outside of Spack. These are added to the resulting "
"module file."
msgstr ""

# eec5ebec5ec342b1bd009edb0ed8cfca
#: ../spack/lib/spack/docs/packaging_guide.rst:2044
msgid ""
"**dependent_spec**: The spec of the dependent package about to be built. "
"This allows the extendee (self) to query the dependent's state. Note that "
"*this* package's spec is available as ``self.spec``."
msgstr ""

# 782fb84375e64a82a157f24d29f3c24b
#: ../spack/lib/spack/docs/packaging_guide.rst:2048
msgid "A good example of using these is in the Python package:"
msgstr ""

# 9105e74f3bb84326b72e76e3fe4e7f67
#: ../spack/lib/spack/docs/packaging_guide.rst:2054
msgid ""
"The first thing that happens here is that the ``python`` command is inserted "
"into module scope of the dependent.  This allows most python packages to "
"have a very simple install method, like this:"
msgstr ""

# 71ddbce9a305489c9b654380bfaab1bf
#: ../spack/lib/spack/docs/packaging_guide.rst:2063
msgid ""
"Python's ``setup_dependent_environment`` method also sets up some other "
"variables, creates a directory, and sets up the ``PYTHONPATH`` so that "
"dependent packages can find their dependencies at build time."
msgstr ""

# 84b5bfe9eb414cd2a75e6842dcacc7b1
#: ../spack/lib/spack/docs/packaging_guide.rst:2071
msgid "Conflicts"
msgstr ""

# c0b4cbda30ce4a1d8a547ef78641355a
#: ../spack/lib/spack/docs/packaging_guide.rst:2073
msgid ""
"Sometimes packages have known bugs, or limitations, that would prevent them "
"to build e.g. against other dependencies or with certain compilers. Spack "
"makes it possible to express such constraints with the ``conflicts`` "
"directive."
msgstr ""

# ca88469671b04589a2fbe9a1a0bc3724
#: ../spack/lib/spack/docs/packaging_guide.rst:2077
msgid "Adding the following to a package:"
msgstr ""

# 249c2ebac80d42f89a2adaada5b704c3
#: ../spack/lib/spack/docs/packaging_guide.rst:2083
msgid ""
"we express the fact that the current package *cannot be built* with the "
"Intel compiler when we are trying to install version \"1.2\". The ``when`` "
"argument can be omitted, in which case the conflict will always be active. "
"Conflicts are always evaluated after the concretization step has been "
"performed, and if any match is found a detailed error message is shown to "
"the user."
msgstr ""

# 56cbfb80e05143819379a4641aa5a1e0
#: ../spack/lib/spack/docs/packaging_guide.rst:2093
msgid "Extensions"
msgstr ""

# a118e06e8fcc4bf8890035c3afbb397b
#: ../spack/lib/spack/docs/packaging_guide.rst:2095
msgid ""
"Spack's support for package extensions is documented extensively in :ref:"
"`extensions`.  This section documents how to make your own extendable "
"packages and extensions."
msgstr ""

# 24c7161b6922473b80a17e7ad7b43fb4
#: ../spack/lib/spack/docs/packaging_guide.rst:2099
msgid ""
"To support extensions, a package needs to set its ``extendable`` property to "
"``True``, e.g.:"
msgstr ""

# d68e69dc887d4fbb83e39281cfc7df1d
#: ../spack/lib/spack/docs/packaging_guide.rst:2109
msgid ""
"To make a package into an extension, simply add simply add an ``extends`` "
"call in the package definition, and pass it the name of an extendable "
"package:"
msgstr ""

# 5ba8d0ba07c34f91a563da8db09a642f
#: ../spack/lib/spack/docs/packaging_guide.rst:2120
msgid ""
"Now, the ``py-numpy`` package can be used as an argument to ``spack "
"activate``.  When it is activated, all the files in its prefix will be "
"symbolically linked into the prefix of the python package."
msgstr ""

# d67da78fe12e4abd8d5b96587c7471d2
#: ../spack/lib/spack/docs/packaging_guide.rst:2124
msgid ""
"Some packages produce a Python extension, but are only compatible with "
"Python 3, or with Python 2.  In those cases, a ``depends_on()`` declaration "
"should be made in addition to the ``extends()`` declaration:"
msgstr ""

# 26d120c47aec47409b00e9ae15571260
#: ../spack/lib/spack/docs/packaging_guide.rst:2135
msgid ""
"Many packages produce Python extensions for *some* variants, but not others: "
"they should extend ``python`` only if the appropriate variant(s) are "
"selected.  This may be accomplished with conditional ``extends()`` "
"declarations:"
msgstr ""

# 8d6ea638fc414ba4be01c71607e1c29d
#: ../spack/lib/spack/docs/packaging_guide.rst:2148
msgid ""
"Sometimes, certain files in one package will conflict with those in another, "
"which means they cannot both be activated (symlinked) at the same time.  In "
"this case, you can tell Spack to ignore those files when it does the "
"activation:"
msgstr ""

# 7910fcf186634f6a82ad3ac224f33561
#: ../spack/lib/spack/docs/packaging_guide.rst:2162
msgid ""
"The code above will prevent everything in the ``$prefix/bin/`` directory "
"from being linked in at activation time."
msgstr ""

# fa708d21150a479ea579ef8e354b7594
#: ../spack/lib/spack/docs/packaging_guide.rst:2167
msgid ""
"You can call *either* ``depends_on`` or ``extends`` on any one package, but "
"not both.  For example you cannot both ``depends_on('python')`` and "
"``extends(python)`` in the same package.  ``extends`` implies ``depends_on``."
msgstr ""

# 97ff926b60854a6696eb5ad5a68bed15
#: ../spack/lib/spack/docs/packaging_guide.rst:2174
msgid "Views"
msgstr ""

# 08684af582b2429ebb514930c402bc84
#: ../spack/lib/spack/docs/packaging_guide.rst:2176
msgid ""
"As covered in :ref:`filesystem-views`, the ``spack view`` command can be "
"used to symlink a number of packages into a merged prefix. The methods of "
"``PackageViewMixin`` can be overridden to customize how packages are added "
"to views. Generally this can be used to create copies of specific files "
"rather than symlinking them when symlinking does not work. For example, "
"``Python`` overrides ``add_files_to_view`` in order to create a copy of the "
"``python`` binary since the real path of the Python executable is used to "
"detect extensions; as a consequence python extension packages (those "
"inheriting from ``PythonPackage``) likewise override ``add_files_to_view`` "
"in order to rewrite shebang lines which point to the Python interpreter."
msgstr ""

# 857ce70e29b4498eb5da91d444321a91
#: ../spack/lib/spack/docs/packaging_guide.rst:2189
msgid "Activation & deactivation"
msgstr ""

# dc8f0cc1f15f4969b7b4b7d4965a16d9
#: ../spack/lib/spack/docs/packaging_guide.rst:2191
msgid ""
"Adding an extension to a view is referred to as an activation. If the view "
"is maintained in the Spack installation prefix of the extendee this is "
"called a global activation. Activations may involve updating some "
"centralized state that is maintained by the extendee package, so there can "
"be additional work for adding extensions compared with non-extension "
"packages."
msgstr ""

# c426a450c6904c09824359a55585f17d
#: ../spack/lib/spack/docs/packaging_guide.rst:2197
msgid ""
"Spack's ``Package`` class has default ``activate`` and ``deactivate`` "
"implementations that handle symbolically linking extensions' prefixes into a "
"specified view. Extendable packages can override these methods to add custom "
"activate/deactivate logic of their own.  For example, the ``activate`` and "
"``deactivate`` methods in the Python class handle symbolic linking of "
"extensions, but they also handle details surrounding Python's ``.pth`` "
"files, and other aspects of Python packaging."
msgstr ""

# 755600d57fcf4e3cbdccfb2fb126486d
#: ../spack/lib/spack/docs/packaging_guide.rst:2205
msgid ""
"Spack's extensions mechanism is designed to be extensible, so that other "
"packages (like Ruby, R, Perl, etc.)  can provide their own custom extension "
"management logic, as they may not handle modules the same way that Python "
"does."
msgstr ""

# ea6080d3f82a415bb5195d12bc7b4626
#: ../spack/lib/spack/docs/packaging_guide.rst:2210
msgid "Let's look at Python's activate function:"
msgstr ""

# 4a4535b098eb430591b40df92ae14cd8
#: ../spack/lib/spack/docs/packaging_guide.rst:2216
msgid ""
"This function is called on the *extendee* (Python).  It first calls "
"``activate`` in the superclass, which handles symlinking the extension "
"package's prefix into the specified view.  It then does some special "
"handling of the ``easy-install.pth`` file, part of Python's setuptools."
msgstr ""

# db93a55418bf48d99d520f1310cd0650
#: ../spack/lib/spack/docs/packaging_guide.rst:2222
msgid "Deactivate behaves similarly to activate, but it unlinks files:"
msgstr ""

# d9f90c80b49840d4bf80a464a36818c7
#: ../spack/lib/spack/docs/packaging_guide.rst:2228
msgid ""
"Both of these methods call some custom functions in the Python package.  See "
"the source for Spack's Python package for details."
msgstr ""

# d2215f35ca604523b03d7c4e205232b5
#: ../spack/lib/spack/docs/packaging_guide.rst:2233
msgid "Activation arguments"
msgstr ""

# fc288b8d79b84505894cdfad9f34c5d3
#: ../spack/lib/spack/docs/packaging_guide.rst:2235
msgid ""
"You may have noticed that the ``activate`` function defined above takes "
"keyword arguments.  These are the keyword arguments from ``extends()``, and "
"they are passed to both activate and deactivate."
msgstr ""

# 0fc4d65918804c189afa1132f2f4b2df
#: ../spack/lib/spack/docs/packaging_guide.rst:2239
msgid ""
"This capability allows an extension to customize its own activation by "
"passing arguments to the extendee.  Extendees can likewise implement custom "
"``activate()`` and ``deactivate()`` functions to suit their needs."
msgstr ""

# 26863db935e04474a288ffa1187c4349
#: ../spack/lib/spack/docs/packaging_guide.rst:2244
msgid ""
"The only keyword argument supported by default is the ``ignore`` argument, "
"which can take a regex, list of regexes, or a predicate to determine which "
"files *not* to symlink during activation."
msgstr ""

# cbfe7a60c0fa4e14aaf0ab039783976d
#: ../spack/lib/spack/docs/packaging_guide.rst:2254
msgid ""
"In some cases, more than one package can satisfy another package's "
"dependency.  One way this can happen is if a package depends on a particular "
"*interface*, but there are multiple *implementations* of the interface, and "
"the package could be built with any of them.  A *very* common interface in "
"HPC is the `Message Passing Interface (MPI) <http://www.mcs.anl.gov/research/"
"projects/mpi/>`_, which is used in many large-scale parallel applications."
msgstr ""

# 58142b5c08bf4923840ffe49d55858ec
#: ../spack/lib/spack/docs/packaging_guide.rst:2262
msgid ""
"MPI has several different implementations (e.g., `MPICH <http://www.mpich."
"org>`_, `OpenMPI <http://www.open-mpi.org>`_, and `MVAPICH <http://mvapich."
"cse.ohio-state.edu>`_) and scientific applications can be built with any one "
"of them.  Complicating matters, MPI does not have a standardized ABI, so a "
"package built with one implementation cannot simply be relinked with another "
"implementation. Many package managers handle interfaces like this by "
"requiring many similar package files, e.g., ``foo``, ``foo-mvapich``, ``foo-"
"mpich``, but Spack avoids this explosion of package files by providing "
"support for *virtual dependencies*."
msgstr ""

# 5215906eb08047b0b8172a95af21ac7c
#: ../spack/lib/spack/docs/packaging_guide.rst:2275
msgid "``provides``"
msgstr ""

# 337afa67d24c459db5b12ea92abac709
#: ../spack/lib/spack/docs/packaging_guide.rst:2277
msgid ""
"In Spack, ``mpi`` is handled as a *virtual package*.  A package like "
"``mpileaks`` can depend on it just like any other package, by supplying a "
"``depends_on`` call in the package definition.  For example:"
msgstr ""

# 25d11faa989043208c1b31056daaf01a
#: ../spack/lib/spack/docs/packaging_guide.rst:2295
msgid ""
"Here, ``callpath`` and ``adept-utils`` are concrete packages, but there is "
"no actual package file for ``mpi``, so we say it is a *virtual* package.  "
"The syntax of ``depends_on``, is the same for both.  If we look inside the "
"package file of an MPI implementation, say MPICH, we'll see something like "
"this:"
msgstr ""

# 1e50b492b53e480f93c1458e9af25d28
#: ../spack/lib/spack/docs/packaging_guide.rst:2307
msgid ""
"The ``provides(\"mpi\")`` call tells Spack that the ``mpich`` package can be "
"used to satisfy the dependency of any package that ``depends_on('mpi')``."
msgstr ""

# 2a62a3b0db4b44ca9019803aab8b0946
#: ../spack/lib/spack/docs/packaging_guide.rst:2313
msgid "Versioned Interfaces"
msgstr ""

# 9f5cbfc7e9474d4a9d7c07ba6a6d0860
#: ../spack/lib/spack/docs/packaging_guide.rst:2315
msgid ""
"Just as you can pass a spec to ``depends_on``, so can you pass a spec to "
"``provides`` to add constraints.  This allows Spack to support the notion of "
"*versioned interfaces*.  The MPI standard has gone through many revisions, "
"each with new functions added, and each revision of the standard has a "
"version number.  Some packages may require a recent implementation that "
"supports MPI-3 functions, but some MPI versions may only provide up to "
"MPI-2.  Others may need MPI 2.1 or higher.  You can indicate this by adding "
"a version constraint to the spec passed to ``provides``:"
msgstr ""

# 3e1088f1e60a420c96421516be80e080
#: ../spack/lib/spack/docs/packaging_guide.rst:2329
msgid ""
"Suppose that the above ``provides`` call is in the ``mpich2`` package. This "
"says that ``mpich2`` provides MPI support *up to* version 2, but if a "
"package ``depends_on(\"mpi@3\")``, then Spack will *not* build that package "
"with ``mpich2``."
msgstr ""

# 75bdfa0808f846a1bd746d47a28cb548
#: ../spack/lib/spack/docs/packaging_guide.rst:2336
msgid "``provides when``"
msgstr ""

# e8b6960b16444e4097e80f83e19d3e71
#: ../spack/lib/spack/docs/packaging_guide.rst:2338
msgid ""
"The same package may provide different versions of an interface depending on "
"*its* version.  Above, we simplified the ``provides`` call in ``mpich`` to "
"make the explanation easier.  In reality, this is how ``mpich`` calls "
"``provides``:"
msgstr ""

# 54cf08dfc8694ab8b214ccba15611853
#: ../spack/lib/spack/docs/packaging_guide.rst:2348
msgid ""
"The ``when`` argument to ``provides`` allows you to specify optional "
"constraints on the *providing* package, or the *provider*.  The provider "
"only provides the declared virtual spec when *it* matches the constraints in "
"the when clause.  Here, when ``mpich`` is at version 3 or higher, it "
"provides MPI up to version 3.  When ``mpich`` is at version 1 or higher, it "
"provides the MPI virtual package at version 1."
msgstr ""

# 11f47bfb08e54df09875a50d5af5dbec
#: ../spack/lib/spack/docs/packaging_guide.rst:2356
msgid ""
"The ``when`` qualifier ensures that Spack selects a suitably high version of "
"``mpich`` to satisfy some other package that ``depends_on`` a particular "
"version of MPI.  It will also prevent a user from building with too low a "
"version of ``mpich``.  For example, suppose the package ``foo`` declares "
"this:"
msgstr ""

# 8adf77e6d22f4632aa8b0399eecafa76
#: ../spack/lib/spack/docs/packaging_guide.rst:2368
msgid "Suppose a user invokes ``spack install`` like this:"
msgstr ""

# 3480ad05e6754864a073e86f173804b4
#: ../spack/lib/spack/docs/packaging_guide.rst:2374
msgid ""
"Spack will fail with a constraint violation, because the version of MPICH "
"requested is too low for the ``mpi`` requirement in ``foo``."
msgstr ""

# a88fed77fcbb429288a19e0970e8bfc6
#: ../spack/lib/spack/docs/packaging_guide.rst:2381
msgid "Abstract & concrete specs"
msgstr ""

# 0953bd1df59d4d58aa04cb2342256959
#: ../spack/lib/spack/docs/packaging_guide.rst:2383
msgid ""
"Now that we've seen how spec constraints can be specified :ref:`on the "
"command line <sec-specs>` and within package definitions, we can talk about "
"how Spack puts all of this information together.  When you run this:"
msgstr ""

# c0696ed40ced43cf9422f67301cc0628
#: ../spack/lib/spack/docs/packaging_guide.rst:2392
msgid ""
"Spack parses the command line and builds a spec from the description. The "
"spec says that ``mpileaks`` should be built with the ``callpath`` library at "
"1.0 and with the debug option enabled, and with ``libelf`` version 0.8.11.  "
"Spack will also look at the ``depends_on`` calls in all of these packages, "
"and it will build a spec from that.  The specs from the command line and the "
"specs built from package descriptions are then combined, and the constraints "
"are checked against each other to make sure they're satisfiable."
msgstr ""

# dfaef5a4262e471daa828bfe016ab9f0
#: ../spack/lib/spack/docs/packaging_guide.rst:2401
msgid ""
"What we have after this is done is called an *abstract spec*.  An abstract "
"spec is partially specified.  In other words, it could describe more than "
"one build of a package.  Spack does this to make things easier on the user: "
"they should only have to specify as much of the package spec as they care "
"about.  Here's an example partial spec DAG, based on the constraints above:"
msgstr ""

# e5c04b09f12a413782c6ba18846f85be
#: ../spack/lib/spack/docs/packaging_guide.rst:2427
msgid ""
"This diagram shows a spec DAG output as a tree, where successive levels of "
"indentation represent a depends-on relationship.  In the above DAG, we can "
"see some packages annotated with their constraints, and some packages with "
"no annotations at all.  When there are no annotations, it means the user "
"doesn't care what configuration of that package is built, just so long as it "
"works."
msgstr ""

# 9d70fa15e92c4744a499e1690f6f1c80
#: ../spack/lib/spack/docs/packaging_guide.rst:2436
msgid "Concretization"
msgstr ""

# 048947b998114560a51336bcce5e5632
#: ../spack/lib/spack/docs/packaging_guide.rst:2438
msgid ""
"An abstract spec is useful for the user, but you can't install an abstract "
"spec.  Spack has to take the abstract spec and \"fill in\" the remaining "
"unspecified parts in order to install.  This process is called "
"**concretization**.  Concretization happens in between the time the user "
"runs ``spack install`` and the time the ``install()`` method is called.  The "
"concretized version of the spec above might look like this:"
msgstr ""

# b7fd42fd28704b6d9b33dce0b4ee3299
#: ../spack/lib/spack/docs/packaging_guide.rst:2465
msgid ""
"Here, all versions, compilers, and platforms are filled in, and there is a "
"single version (no version ranges) for each package.  All decisions about "
"configuration have been made, and only after this point will Spack call the "
"``install()`` method for your package."
msgstr ""

# 9dfef7027ce24b0883348534feecf599
#: ../spack/lib/spack/docs/packaging_guide.rst:2470
msgid ""
"Concretization in Spack is based on certain selection policies that tell "
"Spack how to select, e.g., a version, when one is not specified explicitly.  "
"Concretization policies are discussed in more detail in :ref:"
"`configuration`.  Sites using Spack can customize them to match the "
"preferences of their own users."
msgstr ""

# 21ecaf1e581447a39c4515cdb6398f5c
#: ../spack/lib/spack/docs/packaging_guide.rst:2480
msgid "``spack spec``"
msgstr ""

# 8fd0b543a2e648b3809997ebf3642b8b
#: ../spack/lib/spack/docs/packaging_guide.rst:2482
msgid ""
"For an arbitrary spec, you can see the result of concretization by running "
"``spack spec``.  For example:"
msgstr ""

# aeda352220b644f2bd3a357c4772f656
#: ../spack/lib/spack/docs/packaging_guide.rst:2496
msgid ""
"This is useful when you want to know exactly what Spack will do when you ask "
"for a particular spec."
msgstr ""

# 56cbff0ed9d44bceb472ee894d01abe6
#: ../spack/lib/spack/docs/packaging_guide.rst:2503
msgid "``Concretization Policies``"
msgstr ""

# 792e76282d8e41b1bb1243c6ea9ceb1a
#: ../spack/lib/spack/docs/packaging_guide.rst:2505
msgid ""
"A user may have certain preferences for how packages should be concretized "
"on their system.  For example, one user may prefer packages built with "
"OpenMPI and the Intel compiler.  Another user may prefer packages be built "
"with MVAPICH and GCC."
msgstr ""

# e9818bd75db14341a85267322c740a8c
#: ../spack/lib/spack/docs/packaging_guide.rst:2510
msgid "See the :ref:`concretization-preferences` section for more details."
msgstr ""

# fc6faea773f740b29355910e329a6bc4
#: ../spack/lib/spack/docs/packaging_guide.rst:2516
msgid "Conflicting Specs"
msgstr ""

# 7d7a15de3fbe45ab93ea368db3e9c863
#: ../spack/lib/spack/docs/packaging_guide.rst:2518
msgid ""
"Suppose a user needs to install package C, which depends on packages A and "
"B.  Package A builds a library with a Python2 extension, and package B "
"builds a library with a Python3 extension.  Packages A and B cannot be "
"loaded together in the same Python runtime:"
msgstr ""

# 79f8feabd3a54705af6ca271d9624135
#: ../spack/lib/spack/docs/packaging_guide.rst:2539
msgid ""
"Package C needs to use the libraries from packages A and B, but does not "
"need either of the Python extensions.  In this case, package C should simply "
"depend on the ``~python`` variant of A and B:"
msgstr ""

# cd01816669f34beb8fc770bf99cf83d6
#: ../spack/lib/spack/docs/packaging_guide.rst:2549
msgid ""
"This may require that A or B be built twice, if the user wishes to use the "
"Python extensions provided by them: once for ``+python`` and once for "
"``~python``.  Other than using a little extra disk space, that solution has "
"no serious problems."
msgstr ""

# 88db3f4d71fd4cc59451ebc2cb034c5c
#: ../spack/lib/spack/docs/packaging_guide.rst:2558
msgid "Implementing the installation procedure"
msgstr ""

# f10063907d5b4cae9442d81b1f0cf36b
#: ../spack/lib/spack/docs/packaging_guide.rst:2560
msgid ""
"The last element of a package is its **installation procedure**.  This is "
"where the real work of installation happens, and it's the main part of the "
"package you'll need to customize for each piece of software."
msgstr ""

# b2c08bbf9e1c443994b3394a82cea98e
#: ../spack/lib/spack/docs/packaging_guide.rst:2564
msgid ""
"Defining an installation procedure means overriding a set of methods or "
"attributes that will be called at some point during the installation of the "
"package. The package base class, usually specialized for a given build "
"system, determines the actual set of entities available for overriding. The "
"classes that are currently provided by Spack are:"
msgstr ""

# 2158297dec514fb4a002974dd576d36d
#: ../spack/lib/spack/docs/packaging_guide.rst:2571
msgid "**Base Class**"
msgstr ""

# 3f4c0acaf31747ab99ba00a96bc69468
#: ../spack/lib/spack/docs/packaging_guide.rst:2571
msgid "**Purpose**"
msgstr ""

# 46a6ba18cad64772af79357ec838beab
#: ../spack/lib/spack/docs/packaging_guide.rst:2573
msgid ":py:class:`.Package`"
msgstr ""

# 9a8925ebb87444bca931e842122dd36f
#: ../spack/lib/spack/docs/packaging_guide.rst:2573
msgid "General base class not specialized for any build system"
msgstr ""

# 4e62b57c644b4c8c83d7367a58aaab89
#: ../spack/lib/spack/docs/packaging_guide.rst:2576
msgid ":py:class:`.MakefilePackage`"
msgstr ""

# aac69ed9c76b49799dc6d36c42964084
#: ../spack/lib/spack/docs/packaging_guide.rst:2576
msgid "Specialized class for packages built invoking hand-written Makefiles"
msgstr ""

# 558670a5b78e44658790544b94556252
#: ../spack/lib/spack/docs/packaging_guide.rst:2580
msgid ":py:class:`.AutotoolsPackage`"
msgstr ""

# 25220cda237a4580ae1599e4761d5b78
#: ../spack/lib/spack/docs/packaging_guide.rst:2580
msgid "Specialized class for packages built using GNU Autotools"
msgstr ""

# 498d0f21ff914109807650c7e04804cf
#: ../spack/lib/spack/docs/packaging_guide.rst:2583
msgid ":py:class:`.CMakePackage`"
msgstr ""

# 5669acacc33f4afc89fc86e2610c7dd6
#: ../spack/lib/spack/docs/packaging_guide.rst:2583
msgid "Specialized class for packages built using CMake"
msgstr ""

# c3622196828647b3ba0d08837d47338a
#: ../spack/lib/spack/docs/packaging_guide.rst:2586
msgid ":py:class:`.CudaPackage`"
msgstr ""

# fe508f391ece4079b2b1fa2a0012beaa
#: ../spack/lib/spack/docs/packaging_guide.rst:2586
msgid ""
"A helper class for packages that use CUDA. It is intended to be used in "
"combination with others"
msgstr ""

# c0011492721848a28e41434ef84cb40c
#: ../spack/lib/spack/docs/packaging_guide.rst:2590
msgid ":py:class:`.QMakePackage`"
msgstr ""

# 24bebc024bca49efbeaa642a779dba1c
#: ../spack/lib/spack/docs/packaging_guide.rst:2590
msgid "Specialized class for packages build using QMake"
msgstr ""

# 8b76ee01808a4e73902ed9fac36b692e
#: ../spack/lib/spack/docs/packaging_guide.rst:2593
msgid ":py:class:`.SConsPackage`"
msgstr ""

# 182448f222644c58a92672c922f5cc57
#: ../spack/lib/spack/docs/packaging_guide.rst:2593
msgid "Specialized class for packages built using SCons"
msgstr ""

# dcfd08ffd1404f3abfb5c7348a564b0f
#: ../spack/lib/spack/docs/packaging_guide.rst:2596
msgid ":py:class:`.WafPackage`"
msgstr ""

# 1ab1121b06d04a518bf8497b9ba56e7f
#: ../spack/lib/spack/docs/packaging_guide.rst:2596
msgid "Specialized class for packages built using Waf"
msgstr ""

# 0787078b3b1c4a3b8ad53b926505f6b7
#: ../spack/lib/spack/docs/packaging_guide.rst:2599
msgid ":py:class:`.RPackage`"
msgstr ""

# 7a845c908c9c4d61bbf3cae50ca999f5
#: ../spack/lib/spack/docs/packaging_guide.rst:2599
msgid "Specialized class for :py:class:`.R` extensions"
msgstr ""

# 5e64cf1cf10849fe99825ac56dc487df
#: ../spack/lib/spack/docs/packaging_guide.rst:2602
msgid ":py:class:`.OctavePackage`"
msgstr ""

# fddc3ecd05b1405f9e290244746fe5c9
#: ../spack/lib/spack/docs/packaging_guide.rst:2602
msgid "Specialized class for :py:class:`.Octave` packages"
msgstr ""

# dbe4a1bc56184808b291701c658e1c3a
#: ../spack/lib/spack/docs/packaging_guide.rst:2605
msgid ":py:class:`.PythonPackage`"
msgstr ""

# 6f3259ac3b1b4847a0bea2450c5b2eca
#: ../spack/lib/spack/docs/packaging_guide.rst:2605
msgid "Specialized class for :py:class:`.Python` extensions"
msgstr ""

# 2c9a7d939d2841598492a6799475e666
#: ../spack/lib/spack/docs/packaging_guide.rst:2608
msgid ":py:class:`.PerlPackage`"
msgstr ""

# 3f4e641435aa4dc594826952cdab383b
#: ../spack/lib/spack/docs/packaging_guide.rst:2608
msgid "Specialized class for :py:class:`.Perl` extensions"
msgstr ""

# 961559dd363b48889c1c722d1c44d59a
#: ../spack/lib/spack/docs/packaging_guide.rst:2611
msgid ":py:class:`.IntelPackage`"
msgstr ""

# 8fde1bb896ef418685bc515bd9d5d046
#: ../spack/lib/spack/docs/packaging_guide.rst:2611
msgid "Specialized class for licensed Intel software"
msgstr ""

# 46dfe631e106413fbedce7e370f73779
#: ../spack/lib/spack/docs/packaging_guide.rst:2622
msgid "Choice of the appropriate base class for a package"
msgstr ""

# 540242bc9e254313a92c97fb44a2e805
#: ../spack/lib/spack/docs/packaging_guide.rst:2618
msgid ""
"In most cases packagers don't have to worry about the selection of the right "
"base class for a package, as ``spack create`` will make the appropriate "
"choice on their behalf. In those rare cases where manual intervention is "
"needed we need to stress that a package base class depends on the *build "
"system* being used, not the language of the package. For example, a Python "
"extension installed with CMake would ``extends('python')`` and subclass "
"from :py:class:`.CMakePackage`."
msgstr ""

# 87ca9cd8e60146d0a093e76e8170c0a7
#: ../spack/lib/spack/docs/packaging_guide.rst:2627
msgid "Installation pipeline"
msgstr ""

# f894bbc59ed241d6a5d5ec4b128599d7
#: ../spack/lib/spack/docs/packaging_guide.rst:2629
msgid "When a user runs ``spack install``, Spack:"
msgstr ""

# b06ff86fd0a349509635578355a06535
#: ../spack/lib/spack/docs/packaging_guide.rst:2631
msgid "Fetches an archive for the correct version of the software."
msgstr ""

# c6e2efb5d2bf4d6389b533badcfd1b04
#: ../spack/lib/spack/docs/packaging_guide.rst:2632
msgid "Expands the archive."
msgstr ""

# 44d1ae281d5c48a1a3cb03ded420cb30
#: ../spack/lib/spack/docs/packaging_guide.rst:2633
msgid ""
"Sets the current working directory to the root directory of the expanded "
"archive."
msgstr ""

# 7a7b82c974b94b54b5a2455dab2efb42
#: ../spack/lib/spack/docs/packaging_guide.rst:2635
msgid ""
"Then, depending on the base class of the package under consideration, it "
"will execute a certain number of **phases** that reflect the way a package "
"of that type is usually built. The name and order in which the phases will "
"be executed can be obtained either reading the API docs at :py:mod:`~.spack."
"build_systems`, or using the ``spack info`` command:"
msgstr ""

# 22e2c17de3d644a59f9ec098031ccbe8
#: ../spack/lib/spack/docs/packaging_guide.rst:2664
msgid ""
"Typically, phases have default implementations that fit most of the common "
"cases:"
msgstr ""

# a19f3ffc9f4e48f9aac24ce884d47d90
#: ../spack/lib/spack/docs/packaging_guide.rst:2670
msgid ""
"It is thus just sufficient for a packager to override a few build system "
"specific helper methods or attributes to provide, for instance, configure "
"arguments:"
msgstr ""

# c3bc96e882104dfa97e59ea877280a99
#: ../spack/lib/spack/docs/packaging_guide.rst:2679
msgid ""
"Each specific build system has a list of attributes that can be overridden "
"to fine-tune the installation of a package without overriding an entire "
"phase. To have more information on them the place to go is the API docs of "
"the :py:mod:`~.spack.build_systems` module."
msgstr ""

# 7d919ce477374b809ba690e0fe74fe6d
#: ../spack/lib/spack/docs/packaging_guide.rst:2686
msgid "Overriding an entire phase"
msgstr ""

# c9d0d83678ee4c02a84202388a75618e
#: ../spack/lib/spack/docs/packaging_guide.rst:2688
msgid ""
"In extreme cases it may be necessary to override an entire phase. Regardless "
"of the build system, the signature is the same. For example, the signature "
"for the install phase is:"
msgstr ""

# 9e0149963bd0479f90a21f16929e7f83
#: ../spack/lib/spack/docs/packaging_guide.rst:2702
msgid "``self``"
msgstr ""

# 66669bfeffa34caba93a9eb7d0b78fbc
#: ../spack/lib/spack/docs/packaging_guide.rst:2699
msgid ""
"For those not used to Python instance methods, this is the package itself.  "
"In this case it's an instance of ``Foo``, which extends ``Package``.  For "
"API docs on Package objects, see :py:class:`Package <spack.package.Package>`."
msgstr ""

# badb573afdfd441292b9c9f6d7439c25
#: ../spack/lib/spack/docs/packaging_guide.rst:2707
msgid "``spec``"
msgstr ""

# 1c319fe3c01944f59e9c97e96b7a5145
#: ../spack/lib/spack/docs/packaging_guide.rst:2705
msgid ""
"This is the concrete spec object created by Spack from an abstract spec "
"supplied by the user.  It describes what should be installed.  It will be of "
"type :py:class:`Spec <spack.spec.Spec>`."
msgstr ""

# 63d807a03e3a4b3c97a034f2d45a364b
#: ../spack/lib/spack/docs/packaging_guide.rst:2712
msgid "``prefix``"
msgstr ""

# 715716c908334c95a102ab43a037bbc4
#: ../spack/lib/spack/docs/packaging_guide.rst:2710
msgid ""
"This is the path that your install method should copy build targets into.  "
"It acts like a string, but it's actually its own special type, :py:class:"
"`Prefix <spack.util.prefix.Prefix>`."
msgstr ""

# b234731d01844b9f941394f767484561
#: ../spack/lib/spack/docs/packaging_guide.rst:2714
msgid ""
"The arguments ``spec`` and ``prefix`` are passed only for convenience, as "
"they always correspond to ``self.spec`` and ``self.spec.prefix`` "
"respectively."
msgstr ""

# eaeaf4fc2d634a19a565e1d9fc23d147
#: ../spack/lib/spack/docs/packaging_guide.rst:2717
msgid ""
"As mentioned in :ref:`install-environment`, you will usually not need to "
"refer to dependencies explicitly in your package file, as the compiler "
"wrappers take care of most of the heavy lifting here.  There will be times, "
"though, when you need to refer to the install locations of dependencies, or "
"when you need to do something different depending on the version, compiler, "
"dependencies, etc. that your package is built with.  These parameters give "
"you access to this type of information."
msgstr ""

# 611bda16f1a34260983214fe69c7aa89
#: ../spack/lib/spack/docs/packaging_guide.rst:2728
msgid "The build environment"
msgstr ""

# 6bf5909298ef488397c767da532d27fe
#: ../spack/lib/spack/docs/packaging_guide.rst:2730
msgid ""
"In general, you should not have to do much differently in your install "
"method than you would when installing a package on the command line. In "
"fact, you may need to do *less* than you would on the command line."
msgstr ""

# 5bc902cfcaeb463b8db15f38f1d47eaa
#: ../spack/lib/spack/docs/packaging_guide.rst:2734
msgid ""
"Spack tries to set environment variables and modify compiler calls so that "
"it *appears* to the build system that you're building with a standard system "
"install of everything.  Obviously that's not going to cover *all* build "
"systems, but it should make it easy to port packages to Spack if they use a "
"standard build system.  Usually with autotools or cmake, building and "
"installing is easy.  With builds that use custom Makefiles, you may need to "
"add logic to modify the makefiles."
msgstr ""

# df7cc7cfa15e4f49acdaa7f643fd382c
#: ../spack/lib/spack/docs/packaging_guide.rst:2742
msgid ""
"The remainder of the section covers the way Spack's build environment works."
msgstr ""

# b6932f2c2dde4dbfa5c03ea60d0b4eff
#: ../spack/lib/spack/docs/packaging_guide.rst:2747
msgid "Forking ``install()``"
msgstr ""

# 1b918479d21b4db9b042e5b6a760862a
#: ../spack/lib/spack/docs/packaging_guide.rst:2749
msgid ""
"To give packagers free reign over their install environment, Spack forks a "
"new process each time it invokes a package's ``install()`` method. This "
"allows packages to have a sandboxed build environment, without impacting the "
"environments ofother jobs that the main Spack process runs. Packages are "
"free to change the environment or to modify Spack internals, because each "
"``install()`` call has its own dedicated process."
msgstr ""

# 5c0d63439a8948f8aa04449ba67fede9
#: ../spack/lib/spack/docs/packaging_guide.rst:2760
msgid ""
"Spack sets a number of standard environment variables that serve two "
"purposes:"
msgstr ""

# aedc0302adcc454facb7200351968f49
#: ../spack/lib/spack/docs/packaging_guide.rst:2763
msgid "Make build systems use Spack's compiler wrappers for their builds."
msgstr ""

# e50129da33f04b7fb7a172facfc2f254
#: ../spack/lib/spack/docs/packaging_guide.rst:2764
msgid "Allow build systems to find dependencies more easily"
msgstr ""

# 9274f1fcf6b745c689f7a19b726608f8
#: ../spack/lib/spack/docs/packaging_guide.rst:2766
msgid "The Compiler environment variables that Spack sets are:"
msgstr ""

# 32db95ca754a44fcbd9e2f554e165b67
#: ../spack/lib/spack/docs/packaging_guide.rst:2769
msgid "Variable"
msgstr ""

# dc6c8c5c4c084452afc096ca5ba0711d
#: ../spack/lib/spack/docs/packaging_guide.rst:2769
msgid "Purpose"
msgstr ""

# 0fc78f1c38e34c0fa639d32ce905f319
#: ../spack/lib/spack/docs/packaging_guide.rst:2771
msgid "``CC``"
msgstr ""

# 9adcba2953224921a73339d2ef3b4b90
#: ../spack/lib/spack/docs/packaging_guide.rst:2771
msgid "C compiler"
msgstr ""

# e9eac238bd1a43ef971923472c01a277
#: ../spack/lib/spack/docs/packaging_guide.rst:2772
msgid "``CXX``"
msgstr ""

# 130b35dd39884fa9a2a1ff14269f200c
#: ../spack/lib/spack/docs/packaging_guide.rst:2772
msgid "C++ compiler"
msgstr ""

# 2e1ac3a9de154b079a1e13324ff8da8f
#: ../spack/lib/spack/docs/packaging_guide.rst:2773
msgid "``F77``"
msgstr ""

# ebee70fee43945d18ce6a6a1eac7c734
#: ../spack/lib/spack/docs/packaging_guide.rst:2773
msgid "Fortran 77 compiler"
msgstr ""

# 7e2cac8064e04695a0b45b4bee89f1e8
#: ../spack/lib/spack/docs/packaging_guide.rst:2774
msgid "``FC``"
msgstr ""

# 643348091396427f8f2242701204e9ce
#: ../spack/lib/spack/docs/packaging_guide.rst:2774
msgid "Fortran 90 and above compiler"
msgstr ""

# e69f01ca910f4d7998a4f5f9bbce86f6
#: ../spack/lib/spack/docs/packaging_guide.rst:2777
msgid ""
"Spack sets these variables so that they point to *compiler wrappers*. These "
"are covered in :ref:`their own section <compiler-wrappers>` below."
msgstr ""

# e6aedeacb53a4ad1b3ca59034a46ab67
#: ../spack/lib/spack/docs/packaging_guide.rst:2781
msgid ""
"All of these are standard variables respected by most build systems. If your "
"project uses ``Autotools`` or ``CMake``, then it should pick them up "
"automatically when you run ``configure`` or ``cmake`` in the ``install()`` "
"function.  Many traditional builds using GNU Make and BSD make also respect "
"these variables, so they may work with these systems."
msgstr ""

# 870bf258778a4a1f9b0be9f46fd6517e
#: ../spack/lib/spack/docs/packaging_guide.rst:2788
msgid ""
"If your build system does *not* automatically pick these variables up from "
"the environment, then you can simply pass them on the command line or use a "
"patch as part of your build process to get the correct compilers into the "
"project's build system.  There are also some file editing commands you can "
"use -- these are described later in the `section on file manipulation <file-"
"manipulation_>`_."
msgstr ""

# a342d6f9084a4ec7b099860398988daa
#: ../spack/lib/spack/docs/packaging_guide.rst:2795
msgid ""
"In addition to the compiler variables, these variables are set before "
"entering ``install()`` so that packages can locate dependencies easily:"
msgstr ""

# 8026129f65d445089b80c05f680110fa
#: ../spack/lib/spack/docs/packaging_guide.rst:2800
msgid "``PATH``"
msgstr ""

# e213e85ce7bc4844bb8fece6becea003
#: ../spack/lib/spack/docs/packaging_guide.rst:2800
msgid "Set to point to ``/bin`` directories of dependencies"
msgstr ""

# 3850350d4c8646f898bb0a1cd5147c71
#: ../spack/lib/spack/docs/packaging_guide.rst:2801
msgid "``CMAKE_PREFIX_PATH``"
msgstr ""

# 7cb074188cc34da99a671e033fe8441e
#: ../spack/lib/spack/docs/packaging_guide.rst:2801
msgid "Path to dependency prefixes for CMake"
msgstr ""

# 5c8e978fd229423db1a96d2050fc3618
#: ../spack/lib/spack/docs/packaging_guide.rst:2802
msgid "``PKG_CONFIG_PATH``"
msgstr ""

# 3a0bc35059a64560b6bd67f3690d4c99
#: ../spack/lib/spack/docs/packaging_guide.rst:2802
msgid "Path to any pkgconfig directories for dependencies"
msgstr ""

# a12e58b192a04886b8ed9b1802f72d9a
#: ../spack/lib/spack/docs/packaging_guide.rst:2803
msgid "``PYTHONPATH``"
msgstr ""

# 1a55486becf646bf98f7bf7194d574d7
#: ../spack/lib/spack/docs/packaging_guide.rst:2803
msgid "Path to site-packages dir of any python dependencies"
msgstr ""

# b846b0e78cec42ee9c140bde15fd999f
#: ../spack/lib/spack/docs/packaging_guide.rst:2806
msgid ""
"``PATH`` is set up to point to dependencies ``/bin`` directories so that you "
"can use tools installed by dependency packages at build time. For example, ``"
"$MPICH_ROOT/bin/mpicc`` is frequently used by dependencies of ``mpich``."
msgstr ""

# 29a8f761360f418a83285b2166206f0e
#: ../spack/lib/spack/docs/packaging_guide.rst:2811
msgid ""
"``CMAKE_PREFIX_PATH`` contains a colon-separated list of prefixes where "
"``cmake`` will search for dependency libraries and headers. This causes all "
"standard CMake find commands to look in the paths of your dependencies, so "
"you *do not* have to manually specify arguments like ``-DDEPENDENCY_DIR=/"
"path/to/dependency`` to ``cmake``.  More on this is `in the CMake "
"documentation <http://www.cmake.org/cmake/help/v3.0/variable/"
"CMAKE_PREFIX_PATH.html>`_."
msgstr ""

# bda1401991df4aa68bbf772720d219a2
#: ../spack/lib/spack/docs/packaging_guide.rst:2818
msgid ""
"``PKG_CONFIG_PATH`` is for packages that attempt to discover dependencies "
"using the GNU ``pkg-config`` tool.  It is similar to ``CMAKE_PREFIX_PATH`` "
"in that it allows a build to automatically discover its dependencies."
msgstr ""

# c0147f656de64d69b432b7b688771226
#: ../spack/lib/spack/docs/packaging_guide.rst:2823
msgid ""
"If you want to see the environment that a package will build with, or if you "
"want to run commands in that environment to test them out, you can use the :"
"ref:`cmd-spack-env` command, documented below."
msgstr ""

# 6b625e6467e94197aa6717fdee46e39d
#: ../spack/lib/spack/docs/packaging_guide.rst:2830
msgid "Failing the build"
msgstr ""

# 26cfb5f06abd414fa60a31c408326f9e
#: ../spack/lib/spack/docs/packaging_guide.rst:2832
msgid ""
"Sometimes you don't want a package to successfully install unless some "
"condition is true.  You can explicitly cause the build to fail from "
"``install()`` by raising an ``InstallError``, for example:"
msgstr ""

# bb14fce659ee4d4eb71b65b5deff0514
#: ../spack/lib/spack/docs/packaging_guide.rst:2845
msgid "Shell command functions"
msgstr ""

# 343d2d8b89a74487aff1f4daef6299a4
#: ../spack/lib/spack/docs/packaging_guide.rst:2847
msgid "Recall the install method from ``libelf``:"
msgstr ""

# de5d4aaafc7545a9ba0d7aa05a9ef882
#: ../spack/lib/spack/docs/packaging_guide.rst:2853
msgid ""
"Normally in Python, you'd have to write something like this in order to "
"execute shell commands:"
msgstr ""

# a471ade23cb548a5aba31a8a929f382e
#: ../spack/lib/spack/docs/packaging_guide.rst:2861
msgid ""
"We've tried to make this a bit easier by providing callable wrapper objects "
"for some shell commands.  By default, ``configure``, ``cmake``, and ``make`` "
"wrappers are are provided, so you can call them more naturally in your "
"package files."
msgstr ""

# 7b747bcf498a45e885e59da8cbde5912
#: ../spack/lib/spack/docs/packaging_guide.rst:2866
msgid "If you need other commands, you can use ``which`` to get them:"
msgstr ""

# afcf0b112e6c4aa2a0db6c8bdb6a2fb9
#: ../spack/lib/spack/docs/packaging_guide.rst:2873
msgid "The ``which`` function will search the ``PATH`` for the application."
msgstr ""

# cdfeb592ec734814a59c989cb351ad8e
#: ../spack/lib/spack/docs/packaging_guide.rst:2875
msgid ""
"Callable wrappers also allow spack to provide some special features. For "
"example, in Spack, ``make`` is parallel by default, and Spack figures out "
"the number of cores on your machine and passes an appropriate value for ``-"
"j<numjobs>`` when it calls ``make`` (see the ``parallel`` `package attribute "
"<attribute_parallel>`).  In a package file, you can supply a keyword "
"argument, ``parallel=False``, to the ``make`` wrapper to disable parallel "
"make.  In the ``libelf`` package, this allows us to avoid race conditions in "
"the library's build system."
msgstr ""

# 9a75a4a0db914abf95ee1e56a04dd3d4
#: ../spack/lib/spack/docs/packaging_guide.rst:2887
msgid "Compiler flags"
msgstr ""

# 0086eec940ae482ba1fc4c2d9ef490f8
#: ../spack/lib/spack/docs/packaging_guide.rst:2889
msgid ""
"Compiler flags set by the user through the Spec object can be passed to the "
"build in one of three ways. By default, the build environment injects these "
"flags directly into the compiler commands using Spack's compiler wrappers. "
"In cases where the build system requires knowledge of the compiler flags, "
"they can be registered with the build system by alternatively passing them "
"through environment variables or as build system arguments. The flag_handler "
"method can be used to change this behavior."
msgstr ""

# 8e89c800a4a746288f53a63808b04726
#: ../spack/lib/spack/docs/packaging_guide.rst:2898
msgid ""
"Packages can override the flag_handler method with one of three built-in "
"flag_handlers. The built-in flag_handlers are named ``inject_flags``, "
"``env_flags``, and ``build_system_flags``. The ``inject_flags`` method is "
"the default. The ``env_flags`` method puts all of the flags into the "
"environment variables that ``make`` uses as implicit variables ('CFLAGS', "
"'CXXFLAGS', etc.). The ``build_system_flags`` method adds the flags as "
"arguments to the invocation of ``configure`` or ``cmake``, respectively."
msgstr ""

# 328ee6690ac94774ab820fda90dc844e
#: ../spack/lib/spack/docs/packaging_guide.rst:2910
msgid ""
"Passing compiler flags using build system arguments is only supported for "
"CMake and Autotools packages. Individual packages may also differ in whether "
"they properly respect these arguments."
msgstr ""

# c30a36c7252344a89228213d1062b982
#: ../spack/lib/spack/docs/packaging_guide.rst:2914
msgid ""
"Individual packages may also define their own ``flag_handler`` methods. The "
"``flag_handler`` method takes the package instance (``self``), the name of "
"the flag, and a list of the values of the flag. It will be called on each of "
"the six compiler flags supported in Spack. It should return a triple of "
"``(injf, envf, bsf)`` where ``injf`` is a list of flags to inject via the "
"Spack compiler wrappers, ``envf`` is a list of flags to set in the "
"appropriate environment variables, and ``bsf`` is a list of flags to pass to "
"the build system as arguments."
msgstr ""

# f78f7ddb8b534a5b97f6b97d91c7f4b4
#: ../spack/lib/spack/docs/packaging_guide.rst:2926
msgid ""
"Passing a non-empty list of flags to ``bsf`` for a build system that does "
"not support build system arguments will result in an error."
msgstr ""

# b31e93d00239442c93472aa64012818b
#: ../spack/lib/spack/docs/packaging_guide.rst:2930
msgid "Here are the definitions of the three built-in flag handlers:"
msgstr ""

# edee93af8c70429fbd036561357c0b8f
#: ../spack/lib/spack/docs/packaging_guide.rst:2945
msgid ""
"Returning ``[]`` and ``None`` are equivalent in a ``flag_handler`` method."
msgstr ""

# 3ad34695f6a9444aa5fad94dde0bbd52
#: ../spack/lib/spack/docs/packaging_guide.rst:2948
msgid ""
"Packages can override the default behavior either by specifying one of the "
"built-in flag handlers,"
msgstr ""

# 409a96ebaa5841c3b814c11d026239a8
#: ../spack/lib/spack/docs/packaging_guide.rst:2955
msgid ""
"or by implementing the flag_handler method. Suppose for a package ``Foo`` we "
"need to pass ``cflags``, ``cxxflags``, and ``cppflags`` through the "
"environment, the rest of the flags through compiler wrapper injection, and "
"we need to add ``-lbar`` to ``ldlibs``. The following flag handler method "
"accomplishes that."
msgstr ""

# 2e67c31822364638b24d042efcccad4c
#: ../spack/lib/spack/docs/packaging_guide.rst:2970
msgid ""
"Because these methods can pass values through environment variables, it is "
"important not to override these variables unnecessarily (E.g. setting "
"``env['CFLAGS']``) in other package methods when using non-default flag "
"handlers. In the ``setup_environment`` and ``setup_dependent_environment`` "
"methods, use the ``append_flags`` method of the ``EnvironmentModifications`` "
"class to append values to a list of flags whenever the flag handler is "
"``env_flags``. If the package passes flags through the environment or the "
"build system manually (in the install method, for example), we recommend "
"using the default flag handler, or removing manual references and "
"implementing a custom flag handler method that adds the desired flags to "
"export as environment variables or pass to the build system. Manual flag "
"passing is likely to interfere with the ``env_flags`` and "
"``build_system_flags`` methods."
msgstr ""

# 86fd6ca06b774e4e8fde25848cd8dc7a
#: ../spack/lib/spack/docs/packaging_guide.rst:2985
msgid ""
"In rare circumstances such as compiling and running small unit tests, a "
"package developer may need to know what are the appropriate compiler flags "
"to enable features like ``OpenMP``, ``c++11``, ``c++14`` and alike. To that "
"end the compiler classes in ``spack`` implement the following "
"**properties**: ``openmp_flag``, ``cxx98_flag``, ``cxx11_flag``, "
"``cxx14_flag``, and ``cxx17_flag``, which can be accessed in a package by "
"``self.compiler.cxx11_flag`` and alike. Note that the implementation is such "
"that if a given compiler version does not support this feature, an error "
"will be produced. Therefore package developers can also use these properties "
"to assert that a compiler supports the requested feature. This is handy when "
"a package supports additional variants like"
msgstr ""

# ba1d175f2a1d447388778919f9293c9e
#: ../spack/lib/spack/docs/packaging_guide.rst:3005
msgid "Blas, Lapack and ScaLapack libraries"
msgstr ""

# 83b385ab4ce94279bd5a4a0efbba42e1
#: ../spack/lib/spack/docs/packaging_guide.rst:3007
msgid ""
"Multiple packages provide implementations of ``Blas``, ``Lapack`` and "
"``ScaLapack`` routines.  The names of the resulting static and/or shared "
"libraries differ from package to package. In order to make the ``install()`` "
"method independent of the choice of ``Blas`` implementation, each package "
"which provides it implements ``@property def blas_libs(self):`` to return an "
"object of `LibraryList <http://spack.readthedocs.io/en/latest/llnl.util."
"html#llnl.util.filesystem.LibraryList>`_ type which simplifies usage of a "
"set of libraries. The same applies to packages which provide ``Lapack`` and "
"``ScaLapack``. Package developers are requested to use this interface. "
"Common usage cases are:"
msgstr ""

# 14c01e68d0184c37a9d43276907308b9
#: ../spack/lib/spack/docs/packaging_guide.rst:3018
msgid "Space separated list of full paths"
msgstr ""

# 645f901eb0a24da5ad421b91eeba7c32
#: ../spack/lib/spack/docs/packaging_guide.rst:3027
msgid "Names of libraries and directories which contain them"
msgstr ""

# 9595c87cf05a4cefa53ce1836aec5ea0
#: ../spack/lib/spack/docs/packaging_guide.rst:3037
msgid "Search and link flags"
msgstr ""

# 11138dd643124bfc95088ff0421d74a4
#: ../spack/lib/spack/docs/packaging_guide.rst:3047
msgid ""
"For more information, see documentation of `LibraryList <http://spack."
"readthedocs.io/en/latest/llnl.util.html#llnl.util.filesystem.LibraryList>`_ "
"class."
msgstr ""

# ac20a3900b884f4188c3fa177e46e2a3
#: ../spack/lib/spack/docs/packaging_guide.rst:3056
msgid "Prefix objects"
msgstr ""

# 00c41e71b33344d2965bd9ae03ba7efd
#: ../spack/lib/spack/docs/packaging_guide.rst:3058
msgid ""
"Spack passes the ``prefix`` parameter to the install method so that you can "
"pass it to ``configure``, ``cmake``, or some other installer, e.g.:"
msgstr ""

# 8a0f7b83e57f4be5a5878a4d3b680ac7
#: ../spack/lib/spack/docs/packaging_guide.rst:3066
msgid ""
"For the most part, prefix objects behave exactly like strings.  For packages "
"that do not have their own install target, or for those that implement it "
"poorly (like ``libdwarf``), you may need to manually copy things into "
"particular directories under the prefix.  For this, you can refer to "
"standard subdirectories without having to construct paths yourself, e.g.:"
msgstr ""

# 9b03477f72a64d90a5c6e8b1b53aae8a
#: ../spack/lib/spack/docs/packaging_guide.rst:3086
msgid ""
"Attributes of this object are created on the fly when you request them, so "
"any of the following will work:"
msgstr ""

# 1f410d6e32a840df8a0a79030caeb350
#: ../spack/lib/spack/docs/packaging_guide.rst:3090
msgid "Prefix Attribute"
msgstr ""

# 716f0863d66347e38a5a4377406d78aa
#: ../spack/lib/spack/docs/packaging_guide.rst:3090
msgid "Location"
msgstr ""

# c8efead1ef72494b8c302d8a5571f1ea
#: ../spack/lib/spack/docs/packaging_guide.rst:3092
msgid "``prefix.bin``"
msgstr ""

# 031a2cff3ede4d8499eccba3d779738b
#: ../spack/lib/spack/docs/packaging_guide.rst:3092
msgid "``$prefix/bin``"
msgstr ""

# 5a669769150147a4b8afc21048771bf0
#: ../spack/lib/spack/docs/packaging_guide.rst:3093
msgid "``prefix.lib64``"
msgstr ""

# ea813551fca346c7870026c58014fc87
#: ../spack/lib/spack/docs/packaging_guide.rst:3093
msgid "``$prefix/lib64``"
msgstr ""

# e52f888bdb8f4677920a98423169878a
#: ../spack/lib/spack/docs/packaging_guide.rst:3094
msgid "``prefix.share.man``"
msgstr ""

# 7e9e9144e67c4dc08b1ff1e41f5342ae
#: ../spack/lib/spack/docs/packaging_guide.rst:3094
msgid "``$prefix/share/man``"
msgstr ""

# db1f8ca2c6694322a7380cd4ed568eba
#: ../spack/lib/spack/docs/packaging_guide.rst:3095
msgid "``prefix.foo.bar.baz``"
msgstr ""

# 9007dd0c308b4628a72a578a5332bfc9
#: ../spack/lib/spack/docs/packaging_guide.rst:3095
msgid "``$prefix/foo/bar/baz``"
msgstr ""

# 016dc9dfd7814ba7a7edbcd9357d74ec
#: ../spack/lib/spack/docs/packaging_guide.rst:3098
msgid ""
"Of course, this only works if your file or directory is a valid Python "
"variable name. If your file or directory contains dashes or dots, use "
"``join`` instead:"
msgstr ""

# 010bf6bc611e4fe8b82462708147e097
#: ../spack/lib/spack/docs/packaging_guide.rst:3113
msgid ""
"When ``install`` is called, most parts of the build process are set up for "
"you.  The correct version's tarball has been downloaded and expanded.  "
"Environment variables like ``CC`` and ``CXX`` are set to point to the "
"correct compiler and version.  An install prefix has already been selected "
"and passed in as ``prefix``.  In most cases this is all you need to get "
"``configure``, ``cmake``, or another install working correctly."
msgstr ""

# bdc455eac12d46efaf0ad04b2a4d15db
#: ../spack/lib/spack/docs/packaging_guide.rst:3121
msgid ""
"There will be times when you need to know more about the build "
"configuration.  For example, some software requires that you pass special "
"parameters to ``configure``, like ``--with-libelf=/path/to/libelf`` or ``--"
"with-mpich``.  You might also need to supply special compiler flags "
"depending on the compiler.  All of this information is available in the spec."
msgstr ""

# c620b77c015c4c6e96c42bdeaac01ba8
#: ../spack/lib/spack/docs/packaging_guide.rst:3130
msgid "Testing spec constraints"
msgstr ""

# 26c320f5be944357ba279acf240bde75
#: ../spack/lib/spack/docs/packaging_guide.rst:3132
msgid ""
"You can test whether your spec is configured a certain way by using the "
"``satisfies`` method.  For example, if you want to check whether the "
"package's version is in a particular range, you can use specs to do that, e."
"g.:"
msgstr ""

# b4280210f05d4a4b8685caec342a7f35
#: ../spack/lib/spack/docs/packaging_guide.rst:3148
msgid "This works for compilers, too:"
msgstr ""

# 46f4d39b4c85467f849df31d5283bf28
#: ../spack/lib/spack/docs/packaging_guide.rst:3157
msgid "Or for combinations of spec constraints:"
msgstr ""

# 59c75d0107b342c59375fc380088e4f5
#: ../spack/lib/spack/docs/packaging_guide.rst:3164
msgid "You can also do similar satisfaction tests for dependencies:"
msgstr ""

# 09353596bf7245b3b052f38bbc5c7507
#: ../spack/lib/spack/docs/packaging_guide.rst:3171
msgid ""
"This could allow you to easily work around a bug in a particular dependency "
"version."
msgstr ""

# f085231a0e4245bf9b57e7b494d447c0
#: ../spack/lib/spack/docs/packaging_guide.rst:3174
msgid ""
"You can use ``satisfies()`` to test for particular dependencies, e.g. ``foo."
"satisfies('^openmpi@1.2')`` or ``foo.satisfies('^mpich')``, or you can use "
"Python's built-in ``in`` operator:"
msgstr ""

# 30a405c505c64b15a9ef32b8cfa84a66
#: ../spack/lib/spack/docs/packaging_guide.rst:3183
msgid ""
"This is useful for virtual dependencies, as you can easily see what "
"implementation was selected for this build:"
msgstr ""

# 1cff02763c92444fb99e71d3dbb58fef
#: ../spack/lib/spack/docs/packaging_guide.rst:3195
msgid ""
"It's also a bit more concise than satisfies.  The difference between the two "
"functions is that ``satisfies()`` tests whether spec constraints overlap at "
"all, while ``in`` tests whether a spec or any of its dependencies satisfy "
"the provided spec."
msgstr ""

# 86de153584c44051bc9b654b609344cd
#: ../spack/lib/spack/docs/packaging_guide.rst:3202
msgid "Accessing Dependencies"
msgstr ""

# 7087eed9dbf34435a8edbb23be3be311
#: ../spack/lib/spack/docs/packaging_guide.rst:3204
msgid ""
"You may need to get at some file or binary that's in the installation prefix "
"of one of your dependencies. You can do that by sub-scripting the spec:"
msgstr ""

# 459b2e26f2424ea2aebdfdaccb98c3f6
#: ../spack/lib/spack/docs/packaging_guide.rst:3212
msgid ""
"The value in the brackets needs to be some package name, and spec needs to "
"depend on that package, or the operation will fail.  For example, the above "
"code will fail if the ``spec`` doesn't depend on ``mpi``.  The value "
"returned is itself just another ``Spec`` object, so you can do all the same "
"things you would do with the package's own spec:"
msgstr ""

# 8aa2bb1f17404fceac0a074599660199
#: ../spack/lib/spack/docs/packaging_guide.rst:3228
msgid "Multimethods and ``@when``"
msgstr ""

# 2b4a497966ef463bb80a276e666e2582
#: ../spack/lib/spack/docs/packaging_guide.rst:3230
msgid ""
"Spack allows you to make multiple versions of instance functions in "
"packages, based on whether the package's spec satisfies particular criteria."
msgstr ""

# 9bb3c3524e7849c89d34cf6277117561
#: ../spack/lib/spack/docs/packaging_guide.rst:3234
msgid ""
"The ``@when`` annotation lets packages declare multiple versions of methods "
"like ``install()`` that depend on the package's spec.  For example:"
msgstr ""

# 097daca7c4174e269f2e447f7251c6f2
#: ../spack/lib/spack/docs/packaging_guide.rst:3256
msgid ""
"In the above code there are three versions of ``install()``, two of which "
"are specialized for particular platforms.  The version that is called "
"depends on the architecture of the package spec."
msgstr ""

# d869833183e54602b5a712562fca70ff
#: ../spack/lib/spack/docs/packaging_guide.rst:3260
msgid ""
"Note that this works for methods other than install, as well.  So, if you "
"only have part of the install that is platform specific, you could do "
"something more like this:"
msgstr ""

# 06d7eda0f8be49d58f215dd745633f7e
#: ../spack/lib/spack/docs/packaging_guide.rst:3286
msgid ""
"You can write multiple ``@when`` specs that satisfy the package's spec, for "
"example:"
msgstr ""

# adf2e6cc28b3495abef3b558e5e281f6
#: ../spack/lib/spack/docs/packaging_guide.rst:3314
msgid ""
"In situations like this, the first matching spec, in declaration order will "
"be called.  As before, if no ``@when`` spec matches, the default method (the "
"one without the ``@when`` decorator) will be called."
msgstr ""

# f964ad6fcf8c4ae7b8934288a74a0e9e
#: ../spack/lib/spack/docs/packaging_guide.rst:3320
msgid ""
"The default version of decorated methods must **always** come first.  "
"Otherwise it will override all of the platform-specific versions.  There's "
"not much we can do to get around this because of the way decorators work."
msgstr ""

# c4dd8a932d2243d7b20c97ed538f2cfb
#: ../spack/lib/spack/docs/packaging_guide.rst:3331
msgid ""
"As mentioned, ``CC``, ``CXX``, ``F77``, and ``FC`` are set to point to "
"Spack's compiler wrappers.  These are simply called ``cc``, ``c++``, "
"``f77``, and ``f90``, and they live in ``$SPACK_ROOT/lib/spack/env``."
msgstr ""

# d01bc08ea59446d3b39efa51bc30fa4b
#: ../spack/lib/spack/docs/packaging_guide.rst:3335
msgid ""
"``$SPACK_ROOT/lib/spack/env`` is added first in the ``PATH`` environment "
"variable when ``install()`` runs so that system compilers are not picked up "
"instead."
msgstr ""

# f8c4fa55996944beac3571edf7412565
#: ../spack/lib/spack/docs/packaging_guide.rst:3339
msgid ""
"All of these compiler wrappers point to a single compiler wrapper script "
"that figures out which *real* compiler it should be building with.  This "
"comes either from spec `concretization <abstract-and-concrete>`_ or from a "
"user explicitly asking for a particular compiler using, e.g., ``%intel`` on "
"the command line."
msgstr ""

# 802e220ea34447a89b99be9755b57147
#: ../spack/lib/spack/docs/packaging_guide.rst:3345
msgid ""
"In addition to invoking the right compiler, the compiler wrappers add flags "
"to the compile line so that dependencies can be easily found. These flags "
"are added for each dependency, if they exist:"
msgstr ""

# b3dd01f12d494141b8957841f90b7ff4
#: ../spack/lib/spack/docs/packaging_guide.rst:3349
msgid ""
"Compile-time library search paths * ``-L$dep_prefix/lib`` * ``-L$dep_prefix/"
"lib64``"
msgstr ""

# d4fb0c79cfd14eb6a4dd02b036e257c7
#: ../spack/lib/spack/docs/packaging_guide.rst:3353
msgid ""
"Runtime library search paths (RPATHs) * ``$rpath_flag$dep_prefix/lib`` * ``"
"$rpath_flag$dep_prefix/lib64``"
msgstr ""

# ccbd1841923c41eb86e760a5acd20311
#: ../spack/lib/spack/docs/packaging_guide.rst:3357
msgid "Include search paths * ``-I$dep_prefix/include``"
msgstr ""

# 10b44064b7a84737b338fae46e4f1b83
#: ../spack/lib/spack/docs/packaging_guide.rst:3360
msgid ""
"An example of this would be the ``libdwarf`` build, which has one "
"dependency: ``libelf``.  Every call to ``cc`` in the ``libdwarf`` build will "
"have ``-I$LIBELF_PREFIX/include``, ``-L$LIBELF_PREFIX/lib``, and ``"
"$rpath_flag$LIBELF_PREFIX/lib`` inserted on the command line.  This is done "
"transparently to the project's build system, which will just think it's "
"using a system where ``libelf`` is readily available.  Because of this, you "
"**do not** have to insert extra ``-I``, ``-L``, etc. on the command line."
msgstr ""

# 5c46d114cf6149dab06bbca5a22ff685
#: ../spack/lib/spack/docs/packaging_guide.rst:3369
msgid ""
"Another useful consequence of this is that you often do *not* have to add "
"extra parameters on the ``configure`` line to get autotools to find "
"dependencies.  The ``libdwarf`` install method just calls configure like "
"this:"
msgstr ""

# 517e2765e480496aa79fa64e370965ba
#: ../spack/lib/spack/docs/packaging_guide.rst:3378
msgid ""
"Because of the ``-L`` and ``-I`` arguments, configure will successfully find "
"``libdwarf.h`` and ``libdwarf.so``, without the packager having to provide "
"``--with-libdwarf=/path/to/libdwarf`` on the command line."
msgstr ""

# 82b73c0666eb4b9db6a4da10d46ceaae
#: ../spack/lib/spack/docs/packaging_guide.rst:3385
msgid ""
"For most compilers, ``$rpath_flag`` is ``-Wl,-rpath,``. However, NAG passes "
"its flags to GCC instead of passing them directly to the linker. Therefore, "
"its ``$rpath_flag`` is doubly wrapped: ``-Wl,-Wl,,-rpath,``. ``$rpath_flag`` "
"can be overriden on a compiler specific basis in ``lib/spack/spack/compilers/"
"$compiler.py``."
msgstr ""

# 83bf56af2a3349848eeff85ef2cdde38
#: ../spack/lib/spack/docs/packaging_guide.rst:3391
msgid ""
"The compiler wrappers also pass the compiler flags specified by the user "
"from the command line (``cflags``, ``cxxflags``, ``fflags``, ``cppflags``, "
"``ldflags``, and/or ``ldlibs``). They do not override the canonical "
"autotools flags with the same names (but in ALL-CAPS) that may be passed "
"into the build by particularly challenging package scripts."
msgstr ""

# fb2d802b7e8a4e4cbec41b4f4ad2f93e
#: ../spack/lib/spack/docs/packaging_guide.rst:3399
msgid "MPI support in Spack"
msgstr ""

# c33bdb1eac054cd38270aefaca89f03c
#: ../spack/lib/spack/docs/packaging_guide.rst:3401
msgid ""
"It is common for high performance computing software/packages to use the "
"Message Passing Interface ( ``MPI``).  As a result of conretization, a given "
"package can be built using different implementations of MPI such as "
"``Openmpi``, ``MPICH`` or ``IntelMPI``.  That is, when your package declares "
"that it ``depends_on('mpi')``, it can be built with any of these ``mpi`` "
"implementations. In some scenarios, to configure a package, one has to "
"provide it with appropriate MPI compiler wrappers such as ``mpicc``, ``mpic+"
"+``.  However different implementations of ``MPI`` may have different names "
"for those wrappers."
msgstr ""

# 508e4f6829264497b018fdff938000c4
#: ../spack/lib/spack/docs/packaging_guide.rst:3411
msgid ""
"Spack provides an idiomatic way to use MPI compilers in your package.  To "
"use MPI wrappers to compile your whole build, do this in your ``install()`` "
"method:"
msgstr ""

# b15c93b6f9354cabbb369988eb70eb1e
#: ../spack/lib/spack/docs/packaging_guide.rst:3422
msgid "That's all.  A longer explanation of why this works is below."
msgstr ""

# c3bc4aab1fb84e08b0f13f44c98cd3a2
#: ../spack/lib/spack/docs/packaging_guide.rst:3424
msgid ""
"We don't try to force any particular build method on packagers.  The "
"decision to use MPI wrappers depends on the way the package is written, on "
"common practice, and on \"what works\".  Loosely, There are three types of "
"MPI builds:"
msgstr ""

# c255dea345214936ba1282571e6f39f7
#: ../spack/lib/spack/docs/packaging_guide.rst:3429
msgid ""
"Some build systems work well without the wrappers and can treat MPI as an "
"external library, where the person doing the build has to supply includes/"
"libs/etc.  This is fairly uncommon."
msgstr ""

# ceaadf6cda5c41f089b1c6ae9dcdd28a
#: ../spack/lib/spack/docs/packaging_guide.rst:3433
msgid ""
"Others really want the wrappers and assume you're using an MPI \"compiler\" "
"– i.e., they have no mechanism to add MPI includes/libraries/etc."
msgstr ""

# ecdb2eb2fb1c45d0810cf11b1f52b11c
#: ../spack/lib/spack/docs/packaging_guide.rst:3437
msgid ""
"CMake's ``FindMPI`` needs the compiler wrappers, but it uses them to extract "
"``–I`` / ``-L`` / ``-D`` arguments, then treats MPI like a regular library."
msgstr ""

# ca98fa854325441283a54d86ad613f13
#: ../spack/lib/spack/docs/packaging_guide.rst:3441
msgid ""
"Note that some CMake builds fall into case 2 because they either don't know "
"about or don't like CMake's ``FindMPI`` support – they just assume an MPI "
"compiler. Also, some autotools builds fall into case 3 (e.g. `here is an "
"autotools version of CMake's FindMPI <https://github.com/tgamblin/libra/blob/"
"master/m4/lx_find_mpi.m4>`_)."
msgstr ""

# 6a25bf260ed0497d8b42bf809b1346db
#: ../spack/lib/spack/docs/packaging_guide.rst:3447
msgid ""
"Given all of this, we leave the use of the wrappers up to the packager. "
"Spack will support all three ways of building MPI packages."
msgstr ""

# 71951ab7d8234b4a9eb41d5110ccf952
#: ../spack/lib/spack/docs/packaging_guide.rst:3452
msgid "Packaging Conventions"
msgstr ""

# d856b9004cdd4ba8a78b847091fe84fb
#: ../spack/lib/spack/docs/packaging_guide.rst:3454
msgid ""
"As mentioned above, in the ``install()`` method, ``CC``, ``CXX``, ``F77``, "
"and ``FC`` point to Spack's wrappers around the chosen compiler. Spack's "
"wrappers are not the MPI compiler wrappers, though they do automatically add "
"``–I``, ``–L``, and ``–Wl,-rpath`` args for dependencies in a similar way.  "
"The MPI wrappers are a bit different in that they also add ``-l`` arguments "
"for the MPI libraries, and some add special ``-D`` arguments to trigger "
"build options in MPI programs."
msgstr ""

# c544cf2c127c4919bfc97724d86513c4
#: ../spack/lib/spack/docs/packaging_guide.rst:3462
msgid ""
"For case 1 above, you generally don't need to do more than patch your "
"Makefile or add configure args as you normally would."
msgstr ""

# a734d26641624db8baabccd1e014217e
#: ../spack/lib/spack/docs/packaging_guide.rst:3465
msgid ""
"For case 3, you don't need to do much of anything, as Spack puts the MPI "
"compiler wrappers in the PATH, and the build will find them and interrogate "
"them."
msgstr ""

# d70e28bfe994482da1b3913ada5d71fa
#: ../spack/lib/spack/docs/packaging_guide.rst:3469
msgid ""
"For case 2, things are a bit more complicated, as you'll need to tell the "
"build to use the MPI compiler wrappers instead of Spack's compiler "
"wrappers.  All it takes some lines like this:"
msgstr ""

# dd2cf6b92dd0432e989a87bdce515315
#: ../spack/lib/spack/docs/packaging_guide.rst:3480
msgid ""
"Or, if you pass CC, CXX, etc. directly to your build with, e.g., `--with-"
"cc=<path>`, you'll want to substitute `spec['mpi'].mpicc` in there instead, "
"e.g.:"
msgstr ""

# 637fd7ba25454e67a6132ad15d8e9deb
#: ../spack/lib/spack/docs/packaging_guide.rst:3489
msgid ""
"Now, you may think that doing this will lose the includes, library paths, "
"and RPATHs that Spack's compiler wrapper get you, but we've actually set "
"things up so that the MPI compiler wrappers use Spack's compiler wrappers "
"when run from within Spack. So using the MPI wrappers should really be as "
"simple as the code above."
msgstr ""

# 6c59404e68d348c4b1234b132311179d
#: ../spack/lib/spack/docs/packaging_guide.rst:3497
msgid "``spec['mpi']``"
msgstr ""

# f6676c9f024343feb7f3615f2ad3fcd7
#: ../spack/lib/spack/docs/packaging_guide.rst:3499
msgid "Ok, so how does all this work?"
msgstr ""

# be5ec8957b9c485097207b61c4f23983
#: ../spack/lib/spack/docs/packaging_guide.rst:3501
msgid ""
"If your package has a virtual dependency like ``mpi``, then referring to "
"``spec['mpi']`` within ``install()`` will get you the concrete ``mpi`` "
"implementation in your dependency DAG.  That is a spec object just like the "
"one passed to install, only the MPI implementations all set some additional "
"properties on it to help you out.  E.g., in mvapich2, you'll find this:"
msgstr ""

# 200a725a8e434678a73e6a620e7ed9e1
#: ../spack/lib/spack/docs/packaging_guide.rst:3511
msgid ""
"That code allows the mvapich2 package to associate an ``mpicc`` property "
"with the ``mvapich2`` node in the DAG, so that dependents can access it. "
"``openmpi`` and ``mpich`` do similar things.  So, no matter what MPI you're "
"using, spec['mpi'].mpicc gets you the location of the MPI compilers. This "
"allows us to have a fairly simple polymorphic interface for information "
"about virtual dependencies like MPI."
msgstr ""

# db34fe6da785498b91eea340ed78cc19
#: ../spack/lib/spack/docs/packaging_guide.rst:3520
msgid "Wrapping wrappers"
msgstr ""

# cc24d1c69f044d708049014522836655
#: ../spack/lib/spack/docs/packaging_guide.rst:3522
msgid ""
"Spack likes to use its own compiler wrappers to make it easy to add "
"``RPATHs`` to builds, and to try hard to ensure that your builds use the "
"right dependencies.  This doesn't play nicely by default with MPI, so we "
"have to do a couple tricks."
msgstr ""

# 460c571fd72a4d87a781fe364031e083
#: ../spack/lib/spack/docs/packaging_guide.rst:3527
msgid ""
"If we build MPI with Spack's wrappers, mpicc and friends will be installed "
"with hard-coded paths to Spack's wrappers, and using them from outside of "
"Spack will fail because they only work within Spack. To fix this, we patch "
"mpicc and friends to use the regular compilers.  Look at the "
"filter_compilers method in mpich, openmpi, or mvapich2 for details."
msgstr ""

# cc9562ce6c0d48978a2265cb4c612e80
#: ../spack/lib/spack/docs/packaging_guide.rst:3534
msgid ""
"We still want to use the Spack compiler wrappers when Spack is calling "
"mpicc. Luckily, wrappers in all mainstream MPI implementations provide "
"environment variables that allow us to dynamically set the compiler to be "
"used by mpicc, mpicxx, etc. Denis pasted some code from this below – Spack's "
"build environment sets ``MPICC``, ``MPICXX``, etc. for mpich derivatives and "
"``OMPI_CC``, ``OMPI_CXX``, etc. for OpenMPI. This makes the MPI compiler "
"wrappers use the Spack compiler wrappers so that your dependencies still get "
"proper RPATHs even if you use the MPI wrappers."
msgstr ""

# 2f888c613aad43228e0034afa00df57e
#: ../spack/lib/spack/docs/packaging_guide.rst:3547
msgid "MPI on Cray machines"
msgstr ""

# 95d8cf00abc84b5a972d274fb24be028
#: ../spack/lib/spack/docs/packaging_guide.rst:3549
msgid ""
"The Cray programming environment notably uses ITS OWN compiler wrappers, "
"which function like MPI wrappers.  On Cray systems, the ``CC``, ``cc``, and "
"``ftn`` wrappers ARE the MPI compiler wrappers, and it's assumed that you'll "
"use them for all of your builds.  So on Cray we don't bother with ``mpicc``, "
"``mpicxx``, etc, Spack MPI implementations set ``spec['mpi'].mpicc`` to "
"point to Spack's wrappers, which wrap the Cray wrappers, which wrap the "
"regular compilers and include MPI flags.  That may seem complicated, but for "
"packagers, that means the same code for using MPI wrappers will work, even "
"on even on a Cray:"
msgstr ""

# ab41cd379f83421ca3d68f1a6b2c1ca7
#: ../spack/lib/spack/docs/packaging_guide.rst:3563
msgid "This is because on Cray, ``spec['mpi'].mpicc`` is just ``spack_cc``."
msgstr ""

# f9b40ac98c804247bca4baee09807c25
#: ../spack/lib/spack/docs/packaging_guide.rst:3569
msgid "Checking an installation"
msgstr ""

# b15c5d45616b4156a193ea225d274ee7
#: ../spack/lib/spack/docs/packaging_guide.rst:3571
msgid ""
"By default, Spack assumes that a build has failed if nothing is written to "
"the install prefix, and that it has succeeded if anything (a file, a "
"directory, etc.)  is written to the install prefix after ``install()`` "
"completes."
msgstr ""

# 959318a884764e68a2d8583ea18acf35
#: ../spack/lib/spack/docs/packaging_guide.rst:3576
msgid "Consider a simple autotools build like this:"
msgstr ""

# a3ae9807a8714a7b93f3225c8d7154f8
#: ../spack/lib/spack/docs/packaging_guide.rst:3585
msgid ""
"If you are using using standard autotools or CMake, ``configure`` and "
"``make`` will not write anything to the install prefix.  Only ``make "
"install`` writes the files, and only once the build is already complete."
msgstr ""

# 7c8c1189d6f64c2d9bbd0b517ac2ab91
#: ../spack/lib/spack/docs/packaging_guide.rst:3592
msgid "``sanity_check_is_file`` and ``sanity_check_is_dir``"
msgstr ""

# c25afbffa7df41a5820ed7c96ae08483
#: ../spack/lib/spack/docs/packaging_guide.rst:3594
msgid ""
"Unfortunately, many builds of scientific software modify the install prefix "
"*before* ``make install``. Builds like this can falsely report that they "
"were successfully installed if an error occurs before the install is "
"complete but after files have been written to the ``prefix``."
msgstr ""

# f4a9b44435f14b1ba6643038e71ee1ed
#: ../spack/lib/spack/docs/packaging_guide.rst:3600
msgid ""
"You can optionally specify *sanity checks* to deal with this problem. Add "
"properties like this to your package:"
msgstr ""

# 31f362e0f6c3450da396185e0571fb56
#: ../spack/lib/spack/docs/packaging_guide.rst:3616
msgid ""
"Now, after ``install()`` runs, Spack will check whether ``$prefix/include/"
"libelf.h`` exists and is a file, and whether ``$prefix/lib`` exists and is a "
"directory.  If the checks fail, then the build will fail and the install "
"prefix will be removed.  If they succeed, Spack considers the build "
"successful and keeps the prefix in place."
msgstr ""

# a342ff3e4ad9449fb183baa8ed7e254c
#: ../spack/lib/spack/docs/packaging_guide.rst:3625
msgid "Build-time tests"
msgstr ""

# 4cdc39a02ac649d2b7e09a56d63f68d9
#: ../spack/lib/spack/docs/packaging_guide.rst:3627
msgid ""
"Sometimes packages finish to build \"correctly\" and issues with their run-"
"time behavior are discovered only at a later stage, maybe after a full "
"software stack relying on them has already been built. To avoid situations "
"of that kind it's possible to write build-time tests that will be executed "
"only if the option ``--run-tests`` of ``spack install`` has been activated."
msgstr ""

# d1472396f121462289867a3131d90b08
#: ../spack/lib/spack/docs/packaging_guide.rst:3633
msgid ""
"The proper way to write these tests is relying on two decorators that come "
"with any base class listed in :ref:`installation_procedure`."
msgstr ""

# 09dbe098c078458ebc695df4bf2e5237
#: ../spack/lib/spack/docs/packaging_guide.rst:3644
msgid ""
"The first decorator ``run_after('build')`` schedules this function to be "
"invoked after the ``build`` phase has been executed, while the second one "
"makes the invocation  conditional on the fact that ``self.run_tests == "
"True``. It is also possible to schedule a function to be invoked *before* a "
"given phase using the ``run_before`` decorator."
msgstr ""

# 362c0df2d2464a4cb6b44a9c13f0347a
#: ../spack/lib/spack/docs/packaging_guide.rst:3652
msgid "Default implementations for build-time tests"
msgstr ""

# ab9d4acbb9624e68adba291b9a9b3cab
#: ../spack/lib/spack/docs/packaging_guide.rst:3654
msgid ""
"Packages that are built using specific build systems may already have a "
"default implementation for build-time tests. For instance :py:class:`~."
"AutotoolsPackage` based packages will try to invoke ``make test`` and ``make "
"check`` if Spack is asked to run tests. More information on each class is "
"available in the the :py:mod:`~.spack.build_systems` documentation."
msgstr ""

# 296c3fcdf8c94c29ad2827a64508dc1b
#: ../spack/lib/spack/docs/packaging_guide.rst:3663
msgid ""
"The API for adding tests is not yet considered stable and may change "
"drastically in future releases."
msgstr ""

# fe885d9793e94a5a99455ba02bab229d
#: ../spack/lib/spack/docs/packaging_guide.rst:3669
msgid "File manipulation functions"
msgstr ""

# d3ce8b9f395c4ae2a8905106cb71b2cd
#: ../spack/lib/spack/docs/packaging_guide.rst:3671
msgid ""
"Many builds are not perfect. If a build lacks an install target, or if it "
"does not use systems like CMake or autotools, which have standard ways of "
"setting compilers and options, you may need to edit files or install some "
"files yourself to get them working with Spack."
msgstr ""

# 94a9d28ca27347178098213c306435fd
#: ../spack/lib/spack/docs/packaging_guide.rst:3676
msgid ""
"You can do this with standard Python code, and Python has rich libraries "
"with functions for file manipulation and filtering.  Spack also provides a "
"number of convenience functions of its own to make your life even easier.  "
"These functions are described in this section."
msgstr ""

# cc97d61a5fb24d67b49490304cbc2c96
#: ../spack/lib/spack/docs/packaging_guide.rst:3681
msgid "All of the functions in this section can be included by simply running:"
msgstr ""

# 7ee2ad1138594dceb23d3336af128ce4
#: ../spack/lib/spack/docs/packaging_guide.rst:3688
msgid ""
"This is already part of the boilerplate for packages created with ``spack "
"create``."
msgstr ""

# c693601cdded4e9da8fbd41ad2b4c607
#: ../spack/lib/spack/docs/packaging_guide.rst:3693
msgid "Filtering functions"
msgstr ""

# 896e46ec4f5e47ef969778e347875864
#: ../spack/lib/spack/docs/packaging_guide.rst:3731
msgid ""
":py:func:`filter_file(regex, repl, *filenames, **kwargs) <spack.filter_file>`"
msgstr ""

# 4e511456f87d4d079639728dd3eb790a
#: ../spack/lib/spack/docs/packaging_guide.rst:3696
msgid ""
"Works like ``sed`` but with Python regular expression syntax.  Takes a "
"regular expression, a replacement, and a set of files.  ``repl`` can be a "
"raw string or a callable function.  If it is a raw string, it can contain ``"
"\\1``, ``\\2``, etc. to refer to capture groups in the regular expression.  "
"If it is a callable, it is passed the Python ``MatchObject`` and should "
"return a suitable replacement string for the particular match."
msgstr ""

# f0065f5aa3fa4ace91f2f5e7ae311c94
#: ../spack/lib/spack/docs/packaging_guide.rst:3704
msgid "Examples:"
msgstr ""

# 19f82219aa0843c7ac1e0711c3764c05
#: ../spack/lib/spack/docs/packaging_guide.rst:3706
msgid "Filtering a Makefile to force it to use Spack's compiler wrappers:"
msgstr ""

# c15737efb5e446a7ac4c9dae2aacd3e6
#: ../spack/lib/spack/docs/packaging_guide.rst:3715
msgid ""
"Replacing ``#!/usr/bin/perl`` with ``#!/usr/bin/env perl`` in ``bib2xhtml``:"
msgstr ""

# 0e3e2dcce66d4116a10c3de4af13f256
#: ../spack/lib/spack/docs/packaging_guide.rst:3722
msgid ""
"Switching the compilers used by ``mpich``'s MPI wrapper scripts from ``cc``, "
"etc. to the compilers used by the Spack build:"
msgstr ""

# 131a885775b14463b0570384216d06d9
#: ../spack/lib/spack/docs/packaging_guide.rst:3749
msgid ""
":py:func:`change_sed_delimiter(old_delim, new_delim, *filenames) <spack."
"change_sed_delim>`"
msgstr ""

# 48afcf93b9e44514955f3eea3c38cc2c
#: ../spack/lib/spack/docs/packaging_guide.rst:3734
msgid ""
"Some packages, like TAU, have a build system that can't install into "
"directories with, e.g. '@' in the name, because they use hard-coded ``sed`` "
"commands in their build."
msgstr ""

# 6537386b9a154d08a89ca859612d6ded
#: ../spack/lib/spack/docs/packaging_guide.rst:3738
msgid ""
"``change_sed_delimiter`` finds all ``sed`` search/replace commands and "
"change the delimiter.  e.g., if the file contains commands that look like "
"``s///``, you can use this to change them to ``s@@@``."
msgstr ""

# 705a1b45c8814429a742453004e3a0f6
#: ../spack/lib/spack/docs/packaging_guide.rst:3743
msgid "Example of changing ``s///`` to ``s@@@`` in TAU:"
msgstr ""

# 94757aefa8dc4c96afeb1452872f8bbe
#: ../spack/lib/spack/docs/packaging_guide.rst:3753
msgid "File functions"
msgstr ""

# 34f6eb6914d1463ba7d27550f0b09af1
#: ../spack/lib/spack/docs/packaging_guide.rst:3756
msgid ":py:func:`ancestor(dir, n=1) <spack.ancestor>`"
msgstr ""

# 5abad477ab294f91a3f0bc087920b480
#: ../spack/lib/spack/docs/packaging_guide.rst:3756
msgid "Get the n\\ :sup:`th` ancestor of the directory ``dir``."
msgstr ""

# 957455fb62b64bd9864f16d92cb0150e
#: ../spack/lib/spack/docs/packaging_guide.rst:3760
msgid ":py:func:`can_access(path) <spack.can_access>`"
msgstr ""

# b6163eaac1764dd18d401791a9f345c5
#: ../spack/lib/spack/docs/packaging_guide.rst:3759
msgid ""
"True if we can read and write to the file at ``path``.  Same as native "
"python ``os.access(file_name, os.R_OK|os.W_OK)``."
msgstr ""

# 4d6d77167e66492eac5606763615c18d
#: ../spack/lib/spack/docs/packaging_guide.rst:3768
msgid ":py:func:`install(src, dest) <spack.install>`"
msgstr ""

# eed1f42808bf452cbc93a4a0bb349d1f
#: ../spack/lib/spack/docs/packaging_guide.rst:3763
msgid ""
"Install a file to a particular location.  For example, install a header into "
"the ``include`` directory under the install ``prefix``:"
msgstr ""

# 28e3a2d9507a4ab0a8d03114439c89c6
#: ../spack/lib/spack/docs/packaging_guide.rst:3771
msgid ":py:func:`join_path(*paths) <spack.join_path>`"
msgstr ""

# d6daa06c88ca4e60ad82a01bdfc0948e
#: ../spack/lib/spack/docs/packaging_guide.rst:3771
msgid ""
"An alias for ``os.path.join``. This joins paths using the OS path separator."
msgstr ""

# 0512aa3e9ebf4ce69bb0520d8f91bfcb
#: ../spack/lib/spack/docs/packaging_guide.rst:3775
msgid ":py:func:`mkdirp(*paths) <spack.mkdirp>`"
msgstr ""

# d5993cb22cef4dfc93821c5dd8f3e5a5
#: ../spack/lib/spack/docs/packaging_guide.rst:3774
msgid ""
"Create each of the directories in ``paths``, creating any parent directories "
"if they do not exist."
msgstr ""

# 698a6d48df36462da700232f5048c645
#: ../spack/lib/spack/docs/packaging_guide.rst:3817
msgid ":py:func:`working_dir(dirname, kwargs) <spack.working_dir>`"
msgstr ""

# 5dc7ee00664c41129c3da3a3f3f549bc
#: ../spack/lib/spack/docs/packaging_guide.rst:3778
msgid ""
"This is a Python `Context Manager <https://docs.python.org/2/library/"
"contextlib.html>`_ that makes it easier to work with subdirectories in "
"builds.  You use this with the Python ``with`` statement to change into a "
"working directory, and when the with block is done, you change back to the "
"original directory.  Think of it as a safe ``pushd`` / ``popd`` combination, "
"where ``popd`` is guaranteed to be called at the end, even if exceptions are "
"thrown."
msgstr ""

# a41a675a5a6748aa89fc65e038fb6b4e
#: ../spack/lib/spack/docs/packaging_guide.rst:3787
msgid "Example usage:"
msgstr ""

# 29558c250d0d4ebfa24ec1982e1ae777
#: ../spack/lib/spack/docs/packaging_guide.rst:3789
msgid ""
"The ``libdwarf`` build first runs ``configure`` and ``make`` in a "
"subdirectory called ``libdwarf``.  It then implements the installation code "
"itself.  This is natural with ``working_dir``:"
msgstr ""

# 336036c3723442c3b3d67d4143623d48
#: ../spack/lib/spack/docs/packaging_guide.rst:3800
msgid ""
"Many CMake builds require that you build \"out of source\", that is, in a "
"subdirectory.  You can handle creating and ``cd``'ing to the subdirectory "
"like the LLVM package does:"
msgstr ""

# 8269dd36cd2a444cba12bfcb4d1e3492
#: ../spack/lib/spack/docs/packaging_guide.rst:3816
msgid ""
"The ``create=True`` keyword argument causes the command to create the "
"directory if it does not exist."
msgstr ""

# 2b750c68c6444a96a91a6db0e23d2e05
#: ../spack/lib/spack/docs/packaging_guide.rst:3820
msgid ":py:func:`touch(path) <spack.touch>`"
msgstr ""

# 6ee21428179949f58278d2c7f159e423
#: ../spack/lib/spack/docs/packaging_guide.rst:3820
msgid "Create an empty file at ``path``."
msgstr ""

# 006b415ef2c94d1bad3a89d2ff7d317e
#: ../spack/lib/spack/docs/packaging_guide.rst:3826
msgid "Style guidelines for packages"
msgstr ""

# 59069509f7cc457b9ed17ddbab845b8f
#: ../spack/lib/spack/docs/packaging_guide.rst:3828
msgid ""
"The following guidelines are provided, in the interests of making Spack "
"packages work in a consistent manner:"
msgstr ""

# a248fa1fd05a413daaf43c0e6de3faed
#: ../spack/lib/spack/docs/packaging_guide.rst:3833
msgid "Variant Names"
msgstr ""

# adf08fd5398d444f95e9e2807e0599dc
#: ../spack/lib/spack/docs/packaging_guide.rst:3835
msgid ""
"Spack packages with variants similar to already-existing Spack packages "
"should use the same name for their variants.  Standard variant names are:"
msgstr ""

# f172743ccc6a40ea92abb415b469288d
#: ../spack/lib/spack/docs/packaging_guide.rst:3840
msgid "Name"
msgstr ""

# f806e1dd8ad54ecbbefabf82a8fe9397
#: ../spack/lib/spack/docs/packaging_guide.rst:3840
msgid "Default"
msgstr ""

# f1656904f60540eb91d136d0fdba6eb5
#: ../spack/lib/spack/docs/packaging_guide.rst:3842
msgid "shared"
msgstr ""

# 001b6a50a4ac46a990d86f7f4f2b31e1
# 97d1e32d97444aacbaebc9eecd77d1d3
# e113990c87884f15a20e423cc986632a
#: ../spack/lib/spack/docs/packaging_guide.rst:3842
#: ../spack/lib/spack/docs/packaging_guide.rst:3843
#: ../spack/lib/spack/docs/packaging_guide.rst:3844
msgid "True"
msgstr ""

# 876a9277979c422bbe4ac20f4846bc2d
#: ../spack/lib/spack/docs/packaging_guide.rst:3842
msgid "Build shared libraries"
msgstr ""

# c29d41d5a4f34d82a4ae7c897b7f9b0e
#: ../spack/lib/spack/docs/packaging_guide.rst:3843
msgid "static"
msgstr ""

# ec43a98a0aff46a98329026ddf574b39
#: ../spack/lib/spack/docs/packaging_guide.rst:3843
msgid "Build static libraries"
msgstr ""

# 6e28833fd9c7462daa6d118adbb4a9e2
#: ../spack/lib/spack/docs/packaging_guide.rst:3844
msgid "mpi"
msgstr ""

# 5ec6b2be993f493788fe5a2d3d28bf05
#: ../spack/lib/spack/docs/packaging_guide.rst:3844
msgid "Use MPI"
msgstr ""

# de07916b29564d2f9a89431304fb01c4
#: ../spack/lib/spack/docs/packaging_guide.rst:3845
msgid "python"
msgstr ""

# 73fff7f430184c639a07e3d306f85bfc
#: ../spack/lib/spack/docs/packaging_guide.rst:3845
msgid "False"
msgstr ""

# f69e0d4f8e8245d395954ae5463369f0
#: ../spack/lib/spack/docs/packaging_guide.rst:3845
msgid "Build Python extension"
msgstr ""

# ed302788d9c44745aef8bae611c45018
#: ../spack/lib/spack/docs/packaging_guide.rst:3848
msgid ""
"If specified in this table, the corresponding default should be used when "
"declaring a variant."
msgstr ""

# e8fc344020994bb9adb8369e18f0a5a0
#: ../spack/lib/spack/docs/packaging_guide.rst:3853
msgid "Version Lists"
msgstr ""

# 1347fdc6856f4fc591789ccf6578aade
#: ../spack/lib/spack/docs/packaging_guide.rst:3855
msgid "Spack packages should list supported versions with the newest first."
msgstr ""

# 039e559fc187463b9ad183e52914da5a
#: ../spack/lib/spack/docs/packaging_guide.rst:3859
msgid "Packaging workflow commands"
msgstr ""

# 514d6c3680034c4385e9c53d618038c2
#: ../spack/lib/spack/docs/packaging_guide.rst:3861
msgid ""
"When you are building packages, you will likely not get things completely "
"right the first time."
msgstr ""

# 6293baee7fba412ba24529121e2e428d
#: ../spack/lib/spack/docs/packaging_guide.rst:3864
msgid ""
"The ``spack install`` command performs a number of tasks before it finally "
"installs each package.  It downloads an archive, expands it in a temporary "
"directory, and only then gives control to the package's ``install()`` "
"method.  If the build doesn't go as planned, you may want to clean up the "
"temporary directory, or if the package isn't downloading properly, you might "
"want to run *only* the ``fetch`` stage of the build."
msgstr ""

# ce4a21a529094d43a0ef4194fa5933b7
#: ../spack/lib/spack/docs/packaging_guide.rst:3872
msgid "A typical package workflow might look like this:"
msgstr ""

# 35f2fcab9c5047bb88ffce9223b018f4
#: ../spack/lib/spack/docs/packaging_guide.rst:3884
msgid ""
"Below are some commands that will allow you some finer-grained control over "
"the install process."
msgstr ""

# 9146af62eeb54ffea06a7ec8a4059ff9
#: ../spack/lib/spack/docs/packaging_guide.rst:3891
msgid "``spack fetch``"
msgstr ""

# 07fce1ece31240c59250435314c2f930
#: ../spack/lib/spack/docs/packaging_guide.rst:3893
msgid ""
"The first step of ``spack install``.  Takes a spec and determines the "
"correct download URL to use for the requested package version, then "
"downloads the archive, checks it against an MD5 checksum, and stores it in a "
"staging directory if the check was successful.  The staging directory will "
"be located under ``$SPACK_HOME/var/spack``."
msgstr ""

# 762a323536434027990cf97d7b60d300
#: ../spack/lib/spack/docs/packaging_guide.rst:3899
msgid ""
"When run after the archive has already been downloaded, ``spack fetch`` is "
"idempotent and will not download the archive again."
msgstr ""

# 90dc4b14c49b456687581d93ef567286
#: ../spack/lib/spack/docs/packaging_guide.rst:3906
msgid "``spack stage``"
msgstr ""

# 03bcf7676c784660b93b72b3a010439f
#: ../spack/lib/spack/docs/packaging_guide.rst:3908
msgid ""
"The second step in ``spack install`` after ``spack fetch``.  Expands the "
"downloaded archive in its temporary directory, where it will be built by "
"``spack install``.  Similar to ``fetch``, if the archive has already been "
"expanded,  ``stage`` is idempotent."
msgstr ""

# 8ea82b4af722419db6dec9af6438f890
#: ../spack/lib/spack/docs/packaging_guide.rst:3917
msgid "``spack patch``"
msgstr ""

# 2b26cae1aa47473e862472653b535f17
#: ../spack/lib/spack/docs/packaging_guide.rst:3919
msgid ""
"After staging, Spack applies patches to downloaded packages, if any have "
"been specified in the package file.  This command will run the install "
"process through the fetch, stage, and patch phases.  Spack keeps track of "
"whether patches have already been applied and skips this step if they have "
"been.  If Spack discovers that patches didn't apply cleanly on some previous "
"run, then it will restage the entire package before patching."
msgstr ""

# 1656667aad43436f86b5a7cd709c3a35
#: ../spack/lib/spack/docs/packaging_guide.rst:3931
msgid "``spack restage``"
msgstr ""

# 413eeac22f1a45e598badab84541b43e
#: ../spack/lib/spack/docs/packaging_guide.rst:3933
msgid "Restores the source code to pristine state, as it was before building."
msgstr ""

# 0099afee8dd842248bb126875cdbc225
#: ../spack/lib/spack/docs/packaging_guide.rst:3935
msgid "Does this in one of two ways:"
msgstr ""

# 014b586d058f4777a426992edc9808dd
#: ../spack/lib/spack/docs/packaging_guide.rst:3937
msgid ""
"If the source was fetched as a tarball, deletes the entire build directory "
"and re-expands the tarball."
msgstr ""

# 9e796599aab64ae4bd58ac35e986d3ff
#: ../spack/lib/spack/docs/packaging_guide.rst:3940
msgid ""
"If the source was checked out from a repository, this deletes the build "
"directory and checks it out again."
msgstr ""

# c691fe1e8fd34cf99478df4715e4a055
#: ../spack/lib/spack/docs/packaging_guide.rst:3947
msgid "``spack clean``"
msgstr ""

# fae6146770454f528ce47f965d24a6b8
#: ../spack/lib/spack/docs/packaging_guide.rst:3949
msgid ""
"Cleans up all of Spack's temporary and cached files.  This can be used to "
"recover disk space if temporary files from interrupted or failed installs "
"accumulate in the staging area."
msgstr ""

# 8cdca5a625e542c586196545058e2a1e
#: ../spack/lib/spack/docs/packaging_guide.rst:3953
msgid ""
"When called with ``--stage`` or without arguments this removes all staged "
"files."
msgstr ""

# ae64c73e8c974c4694060eaf6c33394c
#: ../spack/lib/spack/docs/packaging_guide.rst:3956
msgid ""
"When called with ``--downloads`` this will clear all resources :ref:`cached "
"<caching>` during installs."
msgstr ""

# aad7a915ea3b4ab68a9c0ab3af0704a4
#: ../spack/lib/spack/docs/packaging_guide.rst:3959
msgid ""
"When called with ``--user-cache`` this will remove caches in the user home "
"directory, including cached virtual indices."
msgstr ""

# 434209fcaa6c4aa990ea41c973e3b15c
#: ../spack/lib/spack/docs/packaging_guide.rst:3962
msgid "To remove all of the above, the command can be called with ``--all``."
msgstr ""

# 61c739c3a6b741acbbddd132f15297e1
#: ../spack/lib/spack/docs/packaging_guide.rst:3964
msgid ""
"When called with positional arguments, cleans up temporary files only for a "
"particular package. If ``fetch``, ``stage``, or ``install`` are run again "
"after this, Spack's build process will start from scratch."
msgstr ""

# 6a41f6c4cd2243409e27fd3cb5d279ec
#: ../spack/lib/spack/docs/packaging_guide.rst:3971
msgid "Keeping the stage directory on success"
msgstr ""

# b1a40cdffdf54cd08dc9923ddcc15ac1
#: ../spack/lib/spack/docs/packaging_guide.rst:3973
msgid ""
"By default, ``spack install`` will delete the staging area once a package "
"has been successfully built and installed.  Use ``--keep-stage`` to leave "
"the build directory intact:"
msgstr ""

# 6ebbddd81fc54ce3bf3f9dc6e0a6d12d
#: ../spack/lib/spack/docs/packaging_guide.rst:3981
msgid ""
"This allows you to inspect the build directory and potentially debug the "
"build.  You can use ``clean`` later to get rid of the unwanted temporary "
"files."
msgstr ""

# 71244c04787c44e98b3ab13cddd105e1
#: ../spack/lib/spack/docs/packaging_guide.rst:3987
msgid "Keeping the install prefix on failure"
msgstr ""

# 420929608e8f4858b114a92b98c5ff76
#: ../spack/lib/spack/docs/packaging_guide.rst:3989
msgid ""
"By default, ``spack install`` will delete any partially constructed install "
"prefix if anything fails during ``install()``.  If you want to keep the "
"prefix anyway (e.g. to diagnose a bug), you can use ``--keep-prefix``:"
msgstr ""

# 793ef776c88d4ba98fbbd9788b18cedd
#: ../spack/lib/spack/docs/packaging_guide.rst:3998
msgid ""
"Note that this may confuse Spack into thinking that the package has been "
"installed properly, so you may need to use ``spack uninstall --force`` to "
"get rid of the install prefix before you build again:"
msgstr ""

# f37d5d76b1a9406a9df342296fff984c
#: ../spack/lib/spack/docs/packaging_guide.rst:4008
msgid "Graphing dependencies"
msgstr ""

# f7dd9353324149949208b881ed3e4332
#: ../spack/lib/spack/docs/packaging_guide.rst:4014
msgid "``spack graph``"
msgstr ""

# 35a9c70438774f019fdb283114ee8790
#: ../spack/lib/spack/docs/packaging_guide.rst:4016
msgid ""
"Spack provides the ``spack graph`` command for graphing dependencies. The "
"command by default generates an ASCII rendering of a spec's dependency "
"graph.  For example:"
msgstr ""

# 2d5cdd672f0c4be6a808d8343959e7bf
#: ../spack/lib/spack/docs/packaging_guide.rst:4022
msgid ""
"At the top is the root package in the DAG, with dependency edges emerging "
"from it.  On a color terminal, the edges are colored by which dependency "
"they lead to."
msgstr ""

# 24d53a8cbddb43bebada6beb8e6fa977
#: ../spack/lib/spack/docs/packaging_guide.rst:4028
msgid ""
"The ``deptype`` argument tells Spack what types of dependencies to graph. By "
"default it includes link and run dependencies but not build dependencies.  "
"Supplying ``--deptype=link`` will show only link dependencies.  The default "
"is ``--deptype=all``, which is equivalent to ``--deptype=build,link,run,"
"test``.  Options for ``deptype`` include:"
msgstr ""

# 111dd4b893294ab8b7b6e42398809067
#: ../spack/lib/spack/docs/packaging_guide.rst:4034
msgid ""
"Any combination of ``build``, ``link``, ``run``, and ``test`` separated by "
"commas."
msgstr ""

# 68b7fb54f9d243ea808587be0653ee87
#: ../spack/lib/spack/docs/packaging_guide.rst:4036
msgid "``all`` for all types of dependencies."
msgstr ""

# dae74f364ff14f9ea94727258a18fa1e
#: ../spack/lib/spack/docs/packaging_guide.rst:4038
msgid ""
"You can also use ``spack graph`` to generate graphs in the widely used `Dot "
"<http://www.graphviz.org/doc/info/lang.html>`_ format.  For example:"
msgstr ""

# db1a4c8ab4d440f5b43143680cb4c711
#: ../spack/lib/spack/docs/packaging_guide.rst:4043
msgid ""
"This graph can be provided as input to other graphing tools, such as those "
"in `Graphviz <http://www.graphviz.org>`_.  If you have graphviz installed, "
"you can write straight to PDF like this:"
msgstr ""

# be448b7c73524d1da8e06d6af9f6d7e8
#: ../spack/lib/spack/docs/packaging_guide.rst:4055
msgid "Interactive shell support"
msgstr ""

# 99c218dd98a941fc808f44c35c0a5998
#: ../spack/lib/spack/docs/packaging_guide.rst:4057
msgid ""
"Spack provides some limited shell support to make life easier for "
"packagers.  You can enable these commands by sourcing a setup file in the "
"``share/spack`` directory.  For ``bash`` or ``ksh``, run:"
msgstr ""

# 4e5031d7ba994b47a1ca6279ebf1b2ee
#: ../spack/lib/spack/docs/packaging_guide.rst:4066
msgid "For ``csh`` and ``tcsh`` run:"
msgstr ""

# 724f46e3a0264b578b3e42e0364f4b6b
#: ../spack/lib/spack/docs/packaging_guide.rst:4073
msgid "``spack cd`` will then be available."
msgstr ""

# e51004b118b04466951657245b4c5b65
#: ../spack/lib/spack/docs/packaging_guide.rst:4079
msgid "``spack cd``"
msgstr ""

# d5e5cce859a54cd8b8cb2e76f11415fe
#: ../spack/lib/spack/docs/packaging_guide.rst:4081
msgid ""
"``spack cd`` allows you to quickly cd to pertinent directories in Spack. "
"Suppose you've staged a package but you want to modify it before you build "
"it:"
msgstr ""

# ef52eaa6fc614983bdcba4a3522db831
#: ../spack/lib/spack/docs/packaging_guide.rst:4096
msgid ""
"``spack cd`` here changed the current working directory to the directory "
"containing the expanded ``libelf`` source code.  There are a number of other "
"places you can cd to in the spack directory hierarchy:"
msgstr ""

# 71a694a73abe48bda7b49fa14064183d
#: ../spack/lib/spack/docs/packaging_guide.rst:4102
msgid ""
"Some of these change directory into package-specific locations (stage "
"directory, install directory, package directory) and others change to core "
"spack locations.  For example, ``spack cd --module-dir`` will take you to "
"the main python source directory of your spack install."
msgstr ""

# 2b7b1d8c46d047ca821f9614b5c01f99
#: ../spack/lib/spack/docs/packaging_guide.rst:4111
msgid "``spack env``"
msgstr ""

# a0704c7503264dde9b9ecfe77c7f2d15
#: ../spack/lib/spack/docs/packaging_guide.rst:4113
msgid ""
"``spack env`` functions much like the standard unix ``env`` command, but it "
"takes a spec as an argument.  You can use it to see the environment "
"variables that will be set when a particular build runs, for example:"
msgstr ""

# 560756cb40c1446b88779c6598b56566
#: ../spack/lib/spack/docs/packaging_guide.rst:4122
msgid ""
"This will display the entire environment that will be set when the "
"``mpileaks@1.1%intel`` build runs."
msgstr ""

# 31faad6119d7432face5abe1e36c3c18
#: ../spack/lib/spack/docs/packaging_guide.rst:4125
msgid ""
"To run commands in a package's build environment, you can simply provide "
"them after the spec argument to ``spack env``:"
msgstr ""

# 5d1a3ff7cf7d4c0eb2d0223a1b584156
#: ../spack/lib/spack/docs/packaging_guide.rst:4133
msgid ""
"This will cd to the build directory and then run ``configure`` in the "
"package's build environment."
msgstr ""

# 578c96a3bf7740b5b8a3c56cab77a347
#: ../spack/lib/spack/docs/packaging_guide.rst:4140
msgid "``spack location``"
msgstr ""

# 93823fc7e5a9478d80308a36199328e2
#: ../spack/lib/spack/docs/packaging_guide.rst:4142
msgid ""
"``spack location`` is the same as ``spack cd`` but it does not require shell "
"support.  It simply prints out the path you ask for, rather than cd'ing to "
"it.  In bash, this:"
msgstr ""

# f042c0e437d0483aa2cae76d66ea3fff
#: ../spack/lib/spack/docs/packaging_guide.rst:4150
msgid "is the same as:"
msgstr ""

# 05aae74aaace4498a1d22d3b7121035d
#: ../spack/lib/spack/docs/packaging_guide.rst:4156
msgid ""
"``spack location`` is intended for use in scripts or makefiles that need to "
"know where packages are installed.  e.g., in a makefile you might write:"
msgstr ""

# d459d687848a4ba1a35b082995289b06
#: ../spack/lib/spack/docs/packaging_guide.rst:4168
msgid "Build System Configuration Support"
msgstr ""

# 447f83ea0e1f432b963894b6186297b3
#: ../spack/lib/spack/docs/packaging_guide.rst:4170
msgid ""
"Imagine a developer creating a CMake or Autotools-based project in a local "
"directory, which depends on libraries A-Z.  Once Spack has installed those "
"dependencies, one would like to run ``cmake`` with appropriate command line "
"and environment so CMake can find them.  The ``spack setup`` command does "
"this conveniently, producing a CMake configuration that is essentially the "
"same as how Spack *would have* configured the project.  This can be "
"demonstrated with a usage example:"
msgstr ""

# d40de155f9204dd1acd9bf15a332b1b4
#: ../spack/lib/spack/docs/packaging_guide.rst:4188
msgid "Notes:"
msgstr ""

# 5f781252364c48d58891c8afb8028b5f
#: ../spack/lib/spack/docs/packaging_guide.rst:4190
msgid ""
"Spack must have ``myproject/package.py`` in its repository for this to work."
msgstr ""

# de5939f0662b4d3ab8b7957dbd815b94
#: ../spack/lib/spack/docs/packaging_guide.rst:4192
msgid ""
"``spack setup`` produces the executable script ``spconfig.py`` in the local "
"directory, and also creates the module file for the package.  ``spconfig."
"py`` is normally run from the user's out-of-source build directory."
msgstr ""

# ac67afa678764b80b51fe001dd5d21a4
#: ../spack/lib/spack/docs/packaging_guide.rst:4196
msgid ""
"The version number given to ``spack setup`` is arbitrary, just like ``spack "
"diy``.  ``myproject/package.py`` does not need to have any valid "
"downloadable versions listed (typical when a project is new)."
msgstr ""

# 1fa4ba011ae74165a5b01be0bf12a36a
#: ../spack/lib/spack/docs/packaging_guide.rst:4200
msgid ""
"spconfig.py produces a CMake configuration that *does not* use the Spack "
"wrappers.  Any resulting binaries *will not* use RPATH, unless the user has "
"enabled it.  This is recommended for development purposes, not production."
msgstr ""

# b39d7fc23d5c45939df1e7faffd0936c
#: ../spack/lib/spack/docs/packaging_guide.rst:4204
msgid ""
"``spconfig.py`` is human readable, and can serve as a developer reference of "
"what dependencies are being used."
msgstr ""

# 21dbe755f794464b81efe0415234d625
#: ../spack/lib/spack/docs/packaging_guide.rst:4206
msgid ""
"``make install`` installs the package into the Spack repository, where it "
"may be used by other Spack packages."
msgstr ""

# 650c4ef15fc043ab9f75c39c92be5ff0
#: ../spack/lib/spack/docs/packaging_guide.rst:4208
msgid ""
"CMake-generated makefiles re-run CMake in some circumstances.  Use of "
"``spconfig.py`` breaks this behavior, requiring the developer to manually re-"
"run ``spconfig.py`` when a ``CMakeLists.txt`` file has changed."
msgstr ""

# 822ce5cb416a4586a42a4b38bbd7f784
#: ../spack/lib/spack/docs/packaging_guide.rst:4217
msgid ""
"In order to enable ``spack setup`` functionality, the author of ``myproject/"
"package.py`` must subclass from ``CMakePackage`` instead of the standard "
"``Package`` superclass.  Because CMake is standardized, the packager does "
"not need to tell Spack how to run ``cmake; make; make install``.  Instead "
"the packager only needs to create (optional) methods ``configure_args()`` "
"and ``configure_env()``, which provide the arguments (as a list) and extra "
"environment variables (as a dict) to provide to the ``cmake`` command.  "
"Usually, these will translate variant flags into CMake definitions.  For "
"example:"
msgstr ""

# 4858845cf78a4c28a7d3c9a45824bbee
#: ../spack/lib/spack/docs/packaging_guide.rst:4239
msgid ""
"If needed, a packager may also override methods defined in ``StagedPackage`` "
"(see below)."
msgstr ""

# 9abad433767d45e69e2f66ec7feb5ee9
#: ../spack/lib/spack/docs/packaging_guide.rst:4244
msgid "StagedPackage"
msgstr ""

# 4c4cd71e106c42719ff48047b0cb824a
#: ../spack/lib/spack/docs/packaging_guide.rst:4246
msgid ""
"``CMakePackage`` is implemented by subclassing the ``StagedPackage`` "
"superclass, which breaks down the standard ``Package.install()`` method into "
"several sub-stages: ``setup``, ``configure``, ``build`` and ``install``.  "
"Details:"
msgstr ""

# 6435f5fd578b44c88b9e7b1ca3cd1882
#: ../spack/lib/spack/docs/packaging_guide.rst:4251
msgid ""
"Instead of implementing the standard ``install()`` method, package authors "
"implement the methods for the sub-stages ``install_setup()``, "
"``install_configure()``, ``install_build()``, and ``install_install()``."
msgstr ""

# f42064b2dc8c4042bb885d0b91ecd136
#: ../spack/lib/spack/docs/packaging_guide.rst:4256
msgid ""
"The ``spack install`` command runs the sub-stages ``configure``, ``build`` "
"and ``install`` in order.  (The ``setup`` stage is not run by default; see "
"below)."
msgstr ""

# 05324a46350947a080b46f7a050a0547
#: ../spack/lib/spack/docs/packaging_guide.rst:4259
msgid ""
"The ``spack setup`` command runs the sub-stages ``setup`` and a dummy "
"install (to create the module file)."
msgstr ""

# a5b3af0be8254b1384b9ebd6c9eafec9
#: ../spack/lib/spack/docs/packaging_guide.rst:4261
msgid ""
"The sub-stage install methods take no arguments (other than ``self``).  The "
"arguments ``spec`` and ``prefix`` to the standard ``install()`` method may "
"be accessed via ``self.spec`` and ``self.prefix``."
msgstr ""

# af741296191f4c2587ca1aa4ee5ae665
#: ../spack/lib/spack/docs/packaging_guide.rst:4268
msgid "GNU Autotools"
msgstr ""

# 9fdaa06010984a7a8a21f15c1d97ac75
#: ../spack/lib/spack/docs/packaging_guide.rst:4270
msgid ""
"The ``setup`` functionality is currently only available for CMake-based "
"packages.  Extending this functionality to GNU Autotools-based packages "
"would be easy (and should be done by a developer who actively uses "
"Autotools).  Packages that use non-standard build systems can gain ``setup`` "
"functionality by subclassing ``StagedPackage`` directly."
msgstr ""

# c468232c675e453b8b91dc94107c5175
#: ../spack/lib/spack/docs/repositories.rst:10
msgid "Package Repositories"
msgstr ""

# 123dc23d4eee4e9d8206aab8df1ab69f
#: ../spack/lib/spack/docs/repositories.rst:12
msgid ""
"Spack comes with over 1,000 built-in package recipes in ``var/spack/repos/"
"builtin/``.  This is a **package repository** -- a directory that Spack "
"searches when it needs to find a package by name. You may need to maintain "
"packages for restricted, proprietary or experimental software separately "
"from the built-in repository. Spack allows you to configure local "
"repositories using either the ``repos.yaml`` or the ``spack repo`` command."
msgstr ""

# f7a5740c730943119444073b375b49dc
#: ../spack/lib/spack/docs/repositories.rst:20
msgid "A package repository a directory structured like this::"
msgstr ""

# d61e378f7f1542469f1db8906414ec9b
#: ../spack/lib/spack/docs/repositories.rst:34
msgid ""
"The top-level ``repo.yaml`` file contains configuration metadata for the "
"repository, and the ``packages`` directory contains subdirectories for each "
"package in the repository.  Each package directory contains a ``package.py`` "
"file and any patches or other files needed to build the package."
msgstr ""

# 4e1b1e8a06d242d4816e12591bc24dd1
#: ../spack/lib/spack/docs/repositories.rst:40
msgid "Package repositories allow you to:"
msgstr ""

# cf45467be5794164993ba477c52c7023
#: ../spack/lib/spack/docs/repositories.rst:42
msgid "Maintain your own packages separately from Spack;"
msgstr ""

# 41b5f1dbf76242de85f5df301bd013c9
#: ../spack/lib/spack/docs/repositories.rst:44
msgid ""
"Share your packages (e.g., by hosting them in a shared file system), without "
"committing them to the built-in Spack package repository; and"
msgstr ""

# 3a5a25961e354b9a83093502ba10fe70
#: ../spack/lib/spack/docs/repositories.rst:47
msgid "Override built-in Spack packages with your own implementation."
msgstr ""

# f6e4fc977345403da76a1f18d4bb1003
#: ../spack/lib/spack/docs/repositories.rst:49
msgid ""
"Packages in a separate repository can also *depend on* built-in Spack "
"packages.  So, you can leverage existing recipes without re-implementing "
"them in your own repository."
msgstr ""

# 3808a15b24794844ac9b218af98c7ca6
#: ../spack/lib/spack/docs/repositories.rst:55
msgid "``repos.yaml``"
msgstr ""

# 5c202f2a4ad24791aedbd95b989db367
#: ../spack/lib/spack/docs/repositories.rst:57
msgid ""
"Spack uses the ``repos.yaml`` file in ``~/.spack`` (and :ref:`elsewhere "
"<configuration>`) to find repositories. Note that the ``repos.yaml`` "
"configuration file is distinct from the ``repo.yaml`` file in each "
"repository.  For more on the YAML format, and on how configuration file "
"precedence works in Spack, see :ref:`configuration <configuration>`."
msgstr ""

# 9d5529865d4f441b9cf4fcfbaa2e1908
#: ../spack/lib/spack/docs/repositories.rst:63
msgid "The default ``etc/spack/defaults/repos.yaml`` file looks like this:"
msgstr ""

# 05ec80b9aeb7400aaf901954d846e90a
#: ../spack/lib/spack/docs/repositories.rst:70
msgid ""
"The file starts with ``repos:`` and contains a single ordered list of paths "
"to repositories. Each path is on a separate line starting with ``-``.  You "
"can add a repository by inserting another path into the list:"
msgstr ""

# ef4a7df973bc4eaf890a2b224e22c295
#: ../spack/lib/spack/docs/repositories.rst:80
msgid ""
"When Spack interprets a spec, e.g., ``mpich`` in ``spack install mpich``, it "
"searches these repositories in order (first to last) to resolve each package "
"name.  In this example, Spack will look for the following packages and use "
"the first valid file:"
msgstr ""

# 36f8398ebe0d43c8b459ea4b67be5a1d
#: ../spack/lib/spack/docs/repositories.rst:85
msgid "``/opt/local-repo/packages/mpich/package.py``"
msgstr ""

# 31e2f809b1d24a169401209238e647b5
#: ../spack/lib/spack/docs/repositories.rst:86
msgid "``$spack/var/spack/repos/builtin/packages/mpich/package.py``"
msgstr ""

# 1a06f35d7539467da81afb9f2655dd83
#: ../spack/lib/spack/docs/repositories.rst:90
msgid ""
"Currently, Spack can only use repositories in the file system. We plan to "
"eventually support URLs in ``repos.yaml``, so that you can easily point to "
"remote package repositories, but that is not yet implemented."
msgstr ""

# 4e5390d840474fc6b68ebf0a4377c357
#: ../spack/lib/spack/docs/repositories.rst:96
msgid "Namespaces"
msgstr ""

# 08acf1dd9c374cdb83a4ad7ca1201fa5
#: ../spack/lib/spack/docs/repositories.rst:98
msgid ""
"Every repository in Spack has an associated **namespace** defined in its top-"
"level ``repo.yaml`` file.  If you look at ``var/spack/repos/builtin/repo."
"yaml`` in the built-in repository, you'll see that its namespace is "
"``builtin``:"
msgstr ""

# 33ea9770e6d941a29c68a6a67eaad1c0
#: ../spack/lib/spack/docs/repositories.rst:109
msgid ""
"Spack records the repository namespace of each installed package.  For "
"example, if you install the ``mpich`` package from the ``builtin`` repo, "
"Spack records its fully qualified name as ``builtin.mpich``.  This "
"accomplishes two things:"
msgstr ""

# d88ef307876f4d5db02155d68d7a3f56
#: ../spack/lib/spack/docs/repositories.rst:114
msgid ""
"You can have packages with the same name from different namespaces installed "
"at once."
msgstr ""

# 101bbb2c01894442800d59d605c70f0f
#: ../spack/lib/spack/docs/repositories.rst:117
msgid ""
"You can easily determine which repository a package came from after it is "
"installed (more :ref:`below <namespace-example>`)."
msgstr ""

# 61b9697f569f4a1baa9dd975e2bba729
#: ../spack/lib/spack/docs/repositories.rst:122
msgid ""
"It may seem redundant for a repository to have both a namespace and a path, "
"but repository *paths* may change over time, or, as mentioned above, a "
"locally hosted repository path may eventually be hosted at some remote URL."
msgstr ""

# 036ab960971e457cb1a6b9bc9d9c23dd
#: ../spack/lib/spack/docs/repositories.rst:127
msgid ""
"Namespaces are designed to allow *package authors* to associate a unique "
"identifier with their packages, so that the package can be identified even "
"if the repository moves. This is why the namespace is determined by the "
"``repo.yaml`` file in the repository rather than the local ``repos.yaml`` "
"configuration: the *repository maintainer* sets the name."
msgstr ""

# 45a5a1f8ea094fd89c2c0eb592a78085
#: ../spack/lib/spack/docs/repositories.rst:136
msgid "Uniqueness"
msgstr ""

# 2541655d224c47649ef81304ffb81d66
#: ../spack/lib/spack/docs/repositories.rst:138
msgid ""
"You should choose a namespace that uniquely identifies your package "
"repository.  For example, if you make a repository for packages written by "
"your organization, you could use your organization's name.  You can also "
"nest namespaces using periods, so you could identify a repository by a sub-"
"organization.  For example, LLNL might use a namespace for its internal "
"repositories like ``llnl``. Packages from the Physical & Life Sciences "
"directorate (PLS) might use the ``llnl.pls`` namespace, and packages created "
"by the Computation directorate might use ``llnl.comp``."
msgstr ""

# 17eb027aaa9f4a2a8d6787ca3c8edd2d
#: ../spack/lib/spack/docs/repositories.rst:147
msgid ""
"Spack cannot ensure that every repository is named uniquely, but it will "
"prevent you from registering two repositories with the same namespace at the "
"same time.  If you try to add a repository that has the same name as an "
"existing one, e.g., ``builtin``, Spack will print a warning message."
msgstr ""

# bdeb06eb7ad54ef89ec9eb1768ceffd3
#: ../spack/lib/spack/docs/repositories.rst:156
msgid "Namespace example"
msgstr ""

# 7cd2bbc6ad9f46448967baf7d2d68b3d
#: ../spack/lib/spack/docs/repositories.rst:158
msgid ""
"Suppose that LLNL maintains its own version of ``mpich``, separate from "
"Spack's built-in ``mpich`` package, and suppose you've installed both LLNL's "
"and Spack's ``mpich`` packages.  If you just use ``spack find``, you won't "
"see a difference between these two packages:"
msgstr ""

# b103d6b05fe141ba97d041b8aa360a3e
#: ../spack/lib/spack/docs/repositories.rst:170
msgid ""
"However, if you use ``spack find -N``, Spack will display the packages with "
"their namespaces:"
msgstr ""

# c6058e6fef5a4de489ed1a8cd7675df1
#: ../spack/lib/spack/docs/repositories.rst:180
msgid ""
"Now you know which one is LLNL's special version, and which one is the built-"
"in Spack package.  As you might guess, packages that are identical except "
"for their namespace will still have different hashes:"
msgstr ""

# 9ba7f152aa2848b6b8988edd4ddd6749
#: ../spack/lib/spack/docs/repositories.rst:191
msgid ""
"All Spack commands that take a package :ref:`spec <sec-specs>` can also "
"accept a fully qualified spec with a namespace.  This means you can use the "
"namespace to be more specific when designating, e.g., which package you want "
"to uninstall:"
msgstr ""

# 0d40b1c64c284b7da2f6d33d63875816
#: ../spack/lib/spack/docs/repositories.rst:202
msgid "Overriding built-in packages"
msgstr ""

# 0e117d9d40d94808b6b64a13f4f37c82
#: ../spack/lib/spack/docs/repositories.rst:204
msgid ""
"Spack's search semantics mean that you can make your own implementation of a "
"built-in Spack package (like ``mpich``), put it in a repository, and use it "
"to override the built-in package.  As long as the repository containing your "
"``mpich`` is earlier any other in ``repos.yaml``, any built-in package that "
"depends on ``mpich`` will be use the one in your repository."
msgstr ""

# 141878a9f5564c08880295e6d6fd813a
#: ../spack/lib/spack/docs/repositories.rst:211
msgid ""
"Suppose you have three repositories: the builtin Spack repo (``builtin``), a "
"shared repo for your institution (e.g., ``llnl``), and a repo containing "
"your own prototype packages (``proto``).  Suppose they contain packages as "
"follows:"
msgstr ""

# 2518b2c6643f4768a531bc822968736f
#: ../spack/lib/spack/docs/repositories.rst:217
msgid "Namespace"
msgstr ""

# b4ce974aab08489e9ecb7eec46834634
#: ../spack/lib/spack/docs/repositories.rst:217
msgid "Path to repo"
msgstr ""

# 8fd44590c2fa47a7bdfa78253b050b39
#: ../spack/lib/spack/docs/repositories.rst:217
msgid "Packages"
msgstr ""

# 0960b7a4ecab4b1ab40553d250989852
#: ../spack/lib/spack/docs/repositories.rst:219
msgid "``proto``"
msgstr ""

# e5cc1e7f70cd4418ab58a994bbf2ccdf
#: ../spack/lib/spack/docs/repositories.rst:219
msgid "``~/proto``"
msgstr ""

# 2dc5f0f274804a5cb47b2a6832d15193
#: ../spack/lib/spack/docs/repositories.rst:219
msgid "``mpich``"
msgstr ""

# 3736049ee5194116977b555b795b0644
#: ../spack/lib/spack/docs/repositories.rst:221
msgid "``llnl``"
msgstr ""

# e9f2ba8bac484edfa1cdd82bb736e487
#: ../spack/lib/spack/docs/repositories.rst:221
msgid "``/usr/local/llnl``"
msgstr ""

# 7e6cc047d4dd446dbe79966fc5e24dd3
#: ../spack/lib/spack/docs/repositories.rst:221
msgid "``hdf5``"
msgstr ""

# 1fa6a97587c9400bba1b4a5e1c2c53a3
#: ../spack/lib/spack/docs/repositories.rst:223
msgid "``builtin``"
msgstr ""

# 784458bb80d24d7caf39e22739a52c98
#: ../spack/lib/spack/docs/repositories.rst:223
msgid "``$spack/var/spack/repos/builtin``"
msgstr ""

# b65de3c088fa46fbaf4fcdf58e2d5d66
#: ../spack/lib/spack/docs/repositories.rst:223
msgid "``mpich``, ``hdf5``, others"
msgstr ""

# c341e57d001a4e5387f0db05c601854c
#: ../spack/lib/spack/docs/repositories.rst:226
msgid ""
"Suppose that ``hdf5`` depends on ``mpich``.  You can override the built-in "
"``hdf5`` by adding the ``llnl`` repo to ``repos.yaml``:"
msgstr ""

# 365fb8175e5e4709be13ee3632f20320
#: ../spack/lib/spack/docs/repositories.rst:235
msgid "``spack install hdf5`` will install ``llnl.hdf5 ^builtin.mpich``."
msgstr ""

# 995ab264d8be46e3873cd3f953f43d53
#: ../spack/lib/spack/docs/repositories.rst:237
msgid "If, instead, ``repos.yaml`` looks like this:"
msgstr ""

# a440981dc04d48bb8e9874415ba5d48f
#: ../spack/lib/spack/docs/repositories.rst:246
msgid "``spack install hdf5`` will install ``llnl.hdf5 ^proto.mpich``."
msgstr ""

# 20af8f7f6cdf40b3994fec55a1959ccc
#: ../spack/lib/spack/docs/repositories.rst:248
msgid ""
"Any unqualified package name will be resolved by searching ``repos.yaml`` "
"from the first entry to the last.  You can force a particular repository's "
"package by using a fully qualified name.  For example, if your ``repos."
"yaml`` is as above, and you want ``builtin.mpich`` instead of ``proto."
"mpich``, you can write::"
msgstr ""

# 9f206407cac24876ae11be61dda15215
#: ../spack/lib/spack/docs/repositories.rst:256
msgid "which will install ``llnl.hdf5 ^builtin.mpich``."
msgstr ""

# 68f79cf887e945338fa3a072d20ef920
#: ../spack/lib/spack/docs/repositories.rst:258
msgid "Similarly, you can force the ``builtin.hdf5`` like this::"
msgstr ""

# 8d9662142a8a489292cbf17f960c5e35
#: ../spack/lib/spack/docs/repositories.rst:262
msgid ""
"This will not search ``repos.yaml`` at all, as the ``builtin`` repo is "
"specified in both cases.  It will install ``builtin.hdf5 ^builtin.mpich``."
msgstr ""

# 158fa440eaf1453cb0437ab3097d0a26
#: ../spack/lib/spack/docs/repositories.rst:266
msgid ""
"If you want to see which repositories will be used in a build *before* you "
"install it, you can use ``spack spec -N``:"
msgstr ""

# 87f7a2f62b2346f7b9ba22525aa8c1ef
#: ../spack/lib/spack/docs/repositories.rst:296
msgid ""
"You *can* use a fully qualified package name in a ``depends_on`` directive "
"in a ``package.py`` file, like so::"
msgstr ""

# 3423dd86a1f946f191b764674168f0ef
#: ../spack/lib/spack/docs/repositories.rst:301
msgid ""
"This is *not* recommended, as it makes it very difficult for multiple repos "
"to be composed and shared.  A ``package.py`` like this will fail if the "
"``proto`` repository is not registered in ``repos.yaml``."
msgstr ""

# 442294a2e30d4d6c8f43325dbbe5e86f
#: ../spack/lib/spack/docs/repositories.rst:310
msgid "``spack repo``"
msgstr ""

# eebf823aa2b04d2dbfeb1300d6be9a8d
#: ../spack/lib/spack/docs/repositories.rst:312
msgid ""
"Spack's :ref:`configuration system <configuration>` allows repository "
"settings to come from ``repos.yaml`` files in many locations.  If you want "
"to see the repositories registered as a result of all configuration files, "
"use ``spack repo list``."
msgstr ""

# 779e42610d2d4832b11337556ba41bf0
#: ../spack/lib/spack/docs/repositories.rst:319
msgid "``spack repo list``"
msgstr ""

# c8232efa3ded49889cebbeb2a2817610
#: ../spack/lib/spack/docs/repositories.rst:328
msgid ""
"Each repository is listed with its associated namespace.  To get the raw, "
"merged YAML from all configuration files, use ``spack config get repos``:"
msgstr ""

# e7cec4bcce69404ea3338557f78efa45
#: ../spack/lib/spack/docs/repositories.rst:338
msgid ""
"mNote that, unlike ``spack repo list``, this does not include the namespace, "
"which is read from each repo's ``repo.yaml``."
msgstr ""

# 25063c0a1694433798b74154f4ea29e6
#: ../spack/lib/spack/docs/repositories.rst:343
msgid "``spack repo create``"
msgstr ""

# 6070d4f64d3a433d9900be68f2c33edc
#: ../spack/lib/spack/docs/repositories.rst:345
msgid ""
"To make your own repository, you don't need to construct a directory "
"yourself; you can use the ``spack repo create`` command."
msgstr ""

# 9a2d0f89d3094ddf8d95df4111265c07
#: ../spack/lib/spack/docs/repositories.rst:362
msgid ""
"By default, the namespace of a new repo matches its directory's name. You "
"can supply a custom namespace with a second argument, e.g.:"
msgstr ""

# 1bb8cfa55aac41ab8c5949aa7d2de2ca
#: ../spack/lib/spack/docs/repositories.rst:378
msgid "``spack repo add``"
msgstr ""

# 2691391d75674229a2b834ee20591944
#: ../spack/lib/spack/docs/repositories.rst:380
msgid ""
"Once your repository is created, you can register it with Spack with ``spack "
"repo add``:"
msgstr ""

# 31a168e7352845b4beb28a44a3bbc405
#: ../spack/lib/spack/docs/repositories.rst:393
msgid "This simply adds the repo to your ``repos.yaml`` file."
msgstr ""

# ff757e203b5b40d2964f7e11a4e3cc05
#: ../spack/lib/spack/docs/repositories.rst:395
msgid ""
"Once a repository is registered like this, you should be able to see its "
"packages' names in the output of ``spack list``, and you should be able to "
"build them using ``spack install <name>`` as you would with any built-in "
"package."
msgstr ""

# 62565772504945c68ca80c5515012e68
#: ../spack/lib/spack/docs/repositories.rst:402
msgid "``spack repo remove``"
msgstr ""

# f6e465029b4549b4a0a0fc68cfb9ab87
#: ../spack/lib/spack/docs/repositories.rst:404
msgid ""
"You can remove an already-registered repository with ``spack repo rm``. This "
"will work whether you pass the repository's namespace *or* its path."
msgstr ""

# 59cfc8688ffd4392961575add926df9c
#: ../spack/lib/spack/docs/repositories.rst:408
msgid "By namespace:"
msgstr ""

# d0c08f957b9b467081923e124cf55748
#: ../spack/lib/spack/docs/repositories.rst:419
msgid "By path:"
msgstr ""

# 6499a78712bd47c89135ee30fbf7b070
#: ../spack/lib/spack/docs/repositories.rst:432
msgid "Repo namespaces and Python"
msgstr ""

# f5c01372254d49bdba6852dece218572
#: ../spack/lib/spack/docs/repositories.rst:434
msgid ""
"You may have noticed that namespace notation for repositories is similar to "
"the notation for namespaces in Python.  As it turns out, you *can* treat "
"Spack repositories like Python packages; this is how they are implemented."
msgstr ""

# 0270e074142a4d9fba5ce1d1609f9d58
#: ../spack/lib/spack/docs/repositories.rst:439
msgid ""
"You could, for example, extend a ``builtin`` package in your own repository:"
msgstr ""

# 108daee991104f6eae45f68d842f67b7
#: ../spack/lib/spack/docs/repositories.rst:449
msgid ""
"Spack repo namespaces are actually Python namespaces tacked on under ``spack."
"pkg``.  The search semantics of ``repos.yaml`` are actually implemented "
"using Python's built-in `sys.path <https://docs.python.org/2/library/sys."
"html#sys.path>`_ search.  The :py:mod:`spack.repo` module implements a "
"custom `Python importer <https://docs.python.org/2/library/imp.html>`_."
msgstr ""

# e2caba0c223a47f4a76c82fc4448ac37
#: ../spack/lib/spack/docs/repositories.rst:458
msgid ""
"The mechanism for extending packages is not yet extensively tested, and "
"extending packages across repositories imposes inter-repo dependencies, "
"which may be hard to manage.  Use this feature at your own risk, but let us "
"know if you have a use case for it."
msgstr ""

# ba927d07e01e4815aeaa25b4ee800c82
#: ../spack/lib/spack/docs/tutorial.rst:10
msgid "Tutorial: Spack 101"
msgstr ""

# f1a5dce96945436281a9f30ecc1d2d2f
#: ../spack/lib/spack/docs/tutorial.rst:12
msgid ""
"This is a full-day introduction to Spack with lectures and live demos. It "
"was presented as a tutorial for staff at the `RIKEN Center for Computational "
"Science (R-CCS) <http://www.riken.jp/en/research/labs/r-ccs/>`_.  You can "
"use these materials to teach a course on Spack at your own site, or you can "
"just skip ahead and read the live demo scripts to see how Spack is used in "
"practice."
msgstr ""

# 919bc8fd10534806af65e3c78e7789ad
#: ../spack/lib/spack/docs/tutorial.rst:23
msgid "Slides"
msgstr ""

# 47fe82820ebc42e997b6c03ac4badf87
#: ../spack/lib/spack/docs/tutorial.rst:30
msgid ""
"`Download Slides <https://spack.io/slides/Spack-RIKEN19-Tutorial.pdf>`_."
msgstr ""

# e06331dcebf0414cb75439dd8eaa86ff
#: ../spack/lib/spack/docs/tutorial.rst:32
msgid ""
"**Full citation:** Todd Gamblin, Gregory Becker, and Peter Scheibel. "
"Managing HPC Software Complexity with Spack.  Tutorial presented at RIKEN "
"Center for Computational Science. April 23, 2019.  Kobe, Japan."
msgstr ""

# 0351aa5c1d364e0fb03edacd0db5e07b
#: ../spack/lib/spack/docs/tutorial.rst:39
msgid "Live Demos"
msgstr ""

# b8e4d0bc734e49d481ab80c60a7be3c4
#: ../spack/lib/spack/docs/tutorial.rst:40
msgid ""
"We provide scripts that take you step-by-step through basic Spack tasks. "
"They correspond to sections in the slides above. You can use one of the "
"following methods to run through the scripts:"
msgstr ""

# e4c727c95029477090523be8120da476
#: ../spack/lib/spack/docs/tutorial.rst:44
msgid ""
"We provide the `spack/tutorial <https://hub.docker.com/r/spack/tutorial>`_ "
"container image on Docker Hub that you can use to do the tutorial on your "
"local machine.  You can invoke ``docker run -it spack/tutorial`` to start "
"using the container."
msgstr ""

# eaf1d541bc0d42c5b48833a4357d6764
#: ../spack/lib/spack/docs/tutorial.rst:50
msgid ""
"When we host the tutorial, we also provision VM instances in `AWS <https://"
"aws.amazon.com/>`_, so that users who are unfamiliar with Docker can simply "
"log into a VPM to do the demo exercises."
msgstr ""

# 8cdcb25d1f7f4144898cbb89078d0f34
#: ../spack/lib/spack/docs/tutorial.rst:54
msgid "You should now be ready to run through our demo scripts:"
msgstr ""

# 5a799f906ce6469582037e6509b3c54d
#: ../spack/lib/spack/docs/tutorial.rst:56
msgid ":ref:`basics-tutorial`"
msgstr ""

# 4ce2a58554884b03aa0af1ca608b85f6
#: ../spack/lib/spack/docs/tutorial.rst:57
msgid ":ref:`configs-tutorial`"
msgstr ""

# 34bb9dd8f62e4ec5a50ce76778cf2b38
#: ../spack/lib/spack/docs/tutorial.rst:58
msgid ":ref:`packaging-tutorial`"
msgstr ""

# cdd3352270794f53842da4107ede541a
#: ../spack/lib/spack/docs/tutorial.rst:59
msgid ":ref:`environments-tutorial`"
msgstr ""

# c5bfa5f5204b4b3d8c3d83de7ff5d290
#: ../spack/lib/spack/docs/tutorial.rst:60
msgid ":ref:`modules-tutorial`"
msgstr ""

# 1b630f7b641b4a999f005f3f85838217
#: ../spack/lib/spack/docs/tutorial.rst:61
msgid ":ref:`build-systems-tutorial`"
msgstr ""

# bd35bb1170824b6f84e35fd2a3989cb9
#: ../spack/lib/spack/docs/tutorial.rst:62
msgid ":ref:`advanced-packaging-tutorial`"
msgstr ""

# cecf1601235a48e9bf6fdda537d4137e
#: ../spack/lib/spack/docs/tutorial.rst:64
msgid "Full contents:"
msgstr ""

# 30e075d9a84348e7bad5a77a24da2f61
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:10
msgid "Advanced Topics in Packaging"
msgstr ""

# 304f14866d8f48f9aa270617d3f31047
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:12
msgid ""
"Spack tries to automatically configure packages with information from "
"dependencies such that all you need to do is to list the dependencies (i.e., "
"with the ``depends_on`` directive) and the build system (for example by "
"deriving from :code:`CmakePackage`)."
msgstr ""

# 2850bcc90c354bc49f575ecec2669475
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:17
msgid ""
"However, there are many special cases. Often you need to retrieve details "
"about dependencies to set package-specific configuration options, or to "
"define package-specific environment variables used by the package's build "
"system. This tutorial covers how to retrieve build information from "
"dependencies, and how you can automatically provide important information to "
"dependents in your package."
msgstr ""

# #-#-#-#-#  tutorial_advanced_packaging.pot (Spack 0.12)  #-#-#-#-#
# dd6a4143c55740fc9b40c30e8ffb6bf8
# #-#-#-#-#  tutorial_modules.pot (Spack 0.12)  #-#-#-#-#
# f8b9219d28704235ab6a42096b856386
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:26
#: ../spack/lib/spack/docs/tutorial_modules.rst:140
msgid "Setup for the tutorial"
msgstr ""

# 692d0d490f1241f6865d78957bad0e31
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:30
msgid ""
"We do not recommend doing this section of the tutorial in a production Spack "
"instance."
msgstr ""

# 463bcba61f874427825fb9fc2a5eab02
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:33
msgid ""
"The tutorial uses custom package definitions with missing sections that will "
"be filled in during the tutorial. These package definitions are stored in a "
"separate package repository, which can be enabled with:"
msgstr ""

# c396cd05dde2477ca1dc0b89f3bc70e1
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:41
msgid ""
"This section of the tutorial may also require a newer version of gcc. If you "
"have not already installed gcc@7.2.0 and added it to your configuration, you "
"can do so with:"
msgstr ""

# f2ceec409b524473b15a7d4533112379
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:50
msgid ""
"If you are using the tutorial docker image, all dependency packages will "
"have been installed. Otherwise, to install these packages you can use the "
"following commands:"
msgstr ""

# 78f17657348f489086aaf93f4051f287
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:60
msgid ""
"Now, you are ready to set your preferred ``EDITOR`` and continue with the "
"rest of the tutorial."
msgstr ""

# 081ef7d47a7f49b595a341d880620bf6
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:65
msgid ""
"Several of these packages depend on an MPI implementation. You can use "
"OpenMPI if you install it from scratch, but this is slow (>10 min.). A "
"binary cache of MPICH may be provided, in which case you can force the "
"package to use it and install quickly. All tutorial examples with packages "
"that depend on MPICH include the spec syntax for building with it"
msgstr ""

# 94c4fbdf36634358b35eaa6c06f70ef4
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:75
msgid "Modifying a package's build environment"
msgstr ""

# f13b626798434673839f3f7199898020
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:77
msgid ""
"Spack sets up several environment variables like ``PATH`` by default to aid "
"in building a package, but many packages make use of environment variables "
"which convey specific information about their dependencies (e.g., "
"``MPICC``). This section covers how to update your Spack packages so that "
"package-specific environment variables are defined at build-time."
msgstr ""

# 266af31f64bf44c18d7c2231bc786143
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:85
msgid "Set environment variables in dependent packages at build-time"
msgstr ""

# a557684c9cdd41cfa070ccbdae897703
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:87
msgid ""
"Dependencies can set environment variables that are required when their "
"dependents build. For example, when a package depends on a python extension "
"like py-numpy, Spack's ``python`` package will add it to ``PYTHONPATH`` so "
"it is available at build time; this is required because the default setup "
"that spack does is not sufficient for python to import modules."
msgstr ""

# dbe48420565f459d9c971a343d71b44e
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:93
msgid ""
"To provide environment setup for a dependent, a package can implement the :"
"py:func:`setup_dependent_environment <spack.package.PackageBase."
"setup_dependent_environment>` function. This function takes as a parameter "
"a :py:class:`EnvironmentModifications <spack.util.environment."
"EnvironmentModifications>` object which includes convenience methods to "
"update the environment. For example, an MPI implementation can set ``MPICC`` "
"for packages that depend on it:"
msgstr ""

# 28d9a6dfae1048d8b5a1f36c90c90710
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:104
msgid ""
"In this case packages that depend on ``mpi`` will have ``MPICC`` defined in "
"their environment when they build. This section is focused on modifying the "
"build-time environment represented by ``spack_env``, but it's worth noting "
"that modifications to ``run_env`` are included in Spack's automatically-"
"generated module files."
msgstr ""

# 74fc105f7fdb4395a5aad83ac9973ed0
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:110
msgid ""
"We can practice by editing the ``mpich`` package to set the ``MPICC`` "
"environment variable in the build-time environment of dependent packages."
msgstr ""

# 850a48f147d24a23bd9b1310f022be18
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:117
msgid "Once you're finished, the method should look like this:"
msgstr ""

# 5ca2950011d04424ba348115b840b947
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:133
msgid ""
"At this point we can, for instance, install ``netlib-scalapack`` with "
"``mpich``:"
msgstr ""

# 19fe02ed12f64dd3b005e9d04806aed3
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:151
msgid ""
"and double check the environment logs to verify that every variable was set "
"to the correct value."
msgstr ""

# 03cd9f610c1a498795786785381ff926
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:156
msgid "Set environment variables in your own package"
msgstr ""

# 01457ab568c9430ebd29ba9ae55d8494
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:158
msgid ""
"Packages can modify their own build-time environment by implementing the :py:"
"func:`setup_environment <spack.package.PackageBase.setup_environment>` "
"function. For ``qt`` this looks like:"
msgstr ""

# 021f883e3259452196d080097d6e78a9
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:168
msgid "When ``qt`` builds, ``MAKEFLAGS`` will be defined in the environment."
msgstr ""

# de9aa37ae88b4151bdcf035b491e4b9f
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:170
msgid ""
"To contrast with ``qt``'s :py:func:`setup_dependent_environment <spack."
"package.PackageBase.setup_dependent_environment>` function:"
msgstr ""

# 60492b2ce9124c91bb791db53628d6e4
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:178
msgid "Let's see how it works by completing the ``elpa`` package:"
msgstr ""

# d3a5726517ad48fd8151231262c5752f
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:184
msgid "In the end your method should look like:"
msgstr ""

# 6723bba646c544638ad86da856a26c36
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:199
msgid ""
"At this point it's possible to proceed with the installation of ``elpa "
"^mpich``"
msgstr ""

# c791c58b4da648d6b90a5d77d278a4d9
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:203
msgid "Retrieving library information"
msgstr ""

# cff6bc8fcfcb45b49e5fe288f9dc628d
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:205
msgid ""
"Although Spack attempts to help packages locate their dependency libraries "
"automatically (e.g. by setting ``PKG_CONFIG_PATH`` and "
"``CMAKE_PREFIX_PATH``), a package may have unique configuration options that "
"are required to locate libraries. When a package needs information about "
"dependency libraries, the general approach in Spack is to query the "
"dependencies for the locations of their libraries and set configuration "
"options accordingly. By default most Spack packages know how to "
"automatically locate their libraries. This section covers how to retrieve "
"library information from dependencies and how to locate libraries when the "
"default logic doesn't work."
msgstr ""

# 5f897746e9064bfaab52ed4f3becfbc4
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:217
msgid "Accessing dependency libraries"
msgstr ""

# 6a8667bfbaed4c33b7c8a68f262a2874
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:219
msgid ""
"If you need to access the libraries of a dependency, you can do so via the "
"``libs`` property of the spec, for example in the ``arpack-ng`` package:"
msgstr ""

# 56fdce4658c84bed8fd2fb75ab1e1010
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:234
msgid ""
"Note that ``arpack-ng`` is querying virtual dependencies, which Spack "
"automatically resolves to the installed implementation (e.g. ``openblas`` "
"for ``blas``)."
msgstr ""

# 4f51bca04bbe42eda81c74bbd02ad842
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:238
msgid ""
"We've started work on a package for ``armadillo``. You should open it, read "
"through the comment that starts with ``# TUTORIAL:`` and complete the "
"``cmake_args`` section:"
msgstr ""

# 82249384da08496cac420bee07dd7718
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:246
msgid ""
"If you followed the instructions in the package, when you are finished your "
"``cmake_args`` method should look like:"
msgstr ""

# 97f7ede32ecf412bbf10957a9ef85922
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:268
msgid ""
"As you can see, getting the list of libraries that your dependencies provide "
"is as easy as accessing the their ``libs`` attribute. Furthermore, the "
"interface remains the same whether you are querying regular or virtual "
"dependencies."
msgstr ""

# bfd5cfe2478a4270840b8e47bd524004
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:272
msgid ""
"At this point you can complete the installation of ``armadillo`` using "
"``openblas`` as a LAPACK provider (``armadillo ^openblas ^mpich``):"
msgstr ""

# 0f72618168ca4c55915460092e2dcc9a
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:294
msgid ""
"Hopefully the installation went fine and the code we added expanded to the "
"right list of semicolon separated libraries (you are encouraged to open "
"``armadillo``'s build logs to double check)."
msgstr ""

# 67859a716261438e9279f9b0619b3c93
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:300
msgid "Providing libraries to dependents"
msgstr ""

# 27ca97d250ba4d5197a8845be01b6545
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:302
msgid ""
"Spack provides a default implementation for ``libs`` which often works out "
"of the box. A user can write a package definition without having to "
"implement a ``libs`` property and dependents can retrieve its libraries as "
"shown in the above section. However, the default implementation assumes that "
"libraries follow the naming scheme ``lib<package name>.so`` (or e.g. "
"``lib<package name>.a`` for static libraries). Packages which don't follow "
"this naming scheme must implement this function themselves, e.g. ``opencv``:"
msgstr ""

# c115c2374567409da937eaf42026631b
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:320
msgid ""
"This issue is common for packages which implement an interface (i.e. virtual "
"package providers in Spack). If we try to build another version of "
"``armadillo`` tied to ``netlib-lapack`` (``armadillo ^netlib-lapack "
"^mpich``) we'll notice that this time the installation won't complete:"
msgstr ""

# af6bc152ffee4277be16d6a01dc03d6c
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:352
msgid ""
"Unlike ``openblas`` which provides a library named ``libopenblas.so``, "
"``netlib-lapack`` provides ``liblapack.so``, so it needs to implement "
"customized library search logic. Let's edit it:"
msgstr ""

# 68d5d9244b594e3da2475418011590ce
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:360
msgid ""
"and follow the instructions in the ``# TUTORIAL:`` comment as before. What "
"we need to implement is:"
msgstr ""

# 2eec7b6901d64c9aa70e02bdccba59a7
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:372
msgid ""
"i.e., a property that returns the correct list of libraries for the LAPACK "
"interface."
msgstr ""

# b9fa2d762fa9494ca4050486eecc74c2
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:374
msgid ""
"We use the name ``lapack_libs`` rather than ``libs`` because ``netlib-"
"lapack`` can also provide ``blas``, and when it does it is provided as a "
"separate library file. Using this name ensures that when dependents ask for "
"``lapack`` libraries, ``netlib-lapack`` will retrieve only the libraries "
"associated with the ``lapack`` interface. Now we can finally install "
"``armadillo ^netlib-lapack ^mpich``:"
msgstr ""

# 06c1afcd537f45ceb00effdc0bb64d71
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:394
msgid ""
"Since each implementation of a virtual package is responsible for locating "
"the libraries associated with the interfaces it provides, dependents do not "
"need to include special-case logic for different implementations and for "
"example need only ask for :code:`spec['blas'].libs`."
msgstr ""

# dd6da295215f4a048fa4656a9dc5eed9
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:401
msgid "Other Packaging Topics"
msgstr ""

# 675fab6e73464bf89172015f8ae372cd
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:405
msgid "Attach attributes to other packages"
msgstr ""

# e8fdccfafd144b249fce4b815cc758f6
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:407
msgid ""
"Build tools usually also provide a set of executables that can be used when "
"another package is being installed. Spack gives you the opportunity to "
"monkey-patch dependent modules and attach attributes to them. This helps "
"make the packager experience as similar as possible to what would have been "
"the manual installation of the same package."
msgstr ""

# 5df370cdbe7a4c11b9e02fbf5b9963e0
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:413
msgid ""
"An example here is the ``automake`` package, which overrides :py:func:"
"`setup_dependent_package <spack.package.PackageBase."
"setup_dependent_package>`:"
msgstr ""

# b3626404bc184fb096a086867bbdb69c
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:425
msgid ""
"so that every other package that depends on it can use directly ``aclocal`` "
"and ``automake`` with the usual function call syntax of :py:class:"
"`Executable <spack.util.executable.Executable>`:"
msgstr ""

# ac2b766b44d0433abffc17a80c968405
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:434
msgid "Extra query parameters"
msgstr ""

# 3cc452550b2a4a77bcaf738ff6a20bf0
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:436
msgid ""
"An advanced feature of the Spec's build-interface protocol is the support "
"for extra parameters after the subscript key. In fact, any of the keys used "
"in the query can be followed by a comma-separated list of extra parameters "
"which can be inspected by the package receiving the request to fine-tune a "
"response."
msgstr ""

# 63f578cf0726432487169feb6147948f
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:441
msgid "Let's look at an example and try to install ``netcdf ^mpich``:"
msgstr ""

# 090ce40f01b64b3b83176224f51ed629
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:464
msgid ""
"We can see from the error that ``netcdf`` needs to know how to link the "
"*high-level interface* of ``hdf5``, and thus passes the extra parameter "
"``hl`` after the request to retrieve it. Clearly the implementation in the "
"``hdf5`` package is not complete, and we need to fix it:"
msgstr ""

# f86e469633474aa8a36865de2263a753
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:472
msgid ""
"If you followed the instructions correctly, the code added to the ``lib`` "
"property should be similar to:"
msgstr ""

# b0fdd0aa0255480f9e84ada395a12eff
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:486
msgid ""
"where we highlighted the line retrieving the extra parameters. Now we can "
"successfully complete the installation of ``netcdf ^mpich``:"
msgstr ""

# 942f9107c4df47e395578c57b32e9cc3
#: ../spack/lib/spack/docs/tutorial_basics.rst:10
msgid "Basic Installation Tutorial"
msgstr ""

# 7b59f0af47444447998c7b501ea0dae5
#: ../spack/lib/spack/docs/tutorial_basics.rst:12
msgid ""
"This tutorial will guide you through the process of installing software "
"using Spack. We will first cover the `spack install` command, focusing on "
"the power of the spec syntax and the flexibility it gives to users. We will "
"also cover the `spack find` command for viewing installed packages and the "
"`spack uninstall` command. Finally, we will touch on how Spack manages "
"compilers, especially as it relates to using Spack-built compilers within "
"Spack. We will include full output from all of the commands demonstrated, "
"although we will frequently call attention to only small portions of that "
"output (or merely to the fact that it succeeded). The provided output is all "
"from an AWS instance running Ubuntu 16.04"
msgstr ""

# ee894ee02b484d1b95beacb2de135cec
#: ../spack/lib/spack/docs/tutorial_basics.rst:28
msgid "Installing Spack"
msgstr ""

# 027ee065a8774421a2678a21ba289f1b
#: ../spack/lib/spack/docs/tutorial_basics.rst:30
msgid ""
"Spack works out of the box. Simply clone spack and get going. We will clone "
"Spack and immediately checkout the most recent release, v0.12."
msgstr ""

# 0b88eb5b10344f038d47fdc85bd2ad74
#: ../spack/lib/spack/docs/tutorial_basics.rst:50
msgid ""
"Next add Spack to your path. Spack has some nice command line integration "
"tools, so instead of simply appending to your ``PATH`` variable, source the "
"spack setup script.  Then add Spack to your path."
msgstr ""

# 9b5d9529f1404b839f06be8cbf88f877
#: ../spack/lib/spack/docs/tutorial_basics.rst:58
msgid "You're good to go!"
msgstr ""

# a38352ce044c44048e46230218855aa4
#: ../spack/lib/spack/docs/tutorial_basics.rst:62
msgid "What is in Spack?"
msgstr ""

# 0c2b5af3863c40cb9e3f8ee73d54056a
#: ../spack/lib/spack/docs/tutorial_basics.rst:64
msgid "The ``spack list`` command shows available packages."
msgstr ""

# 530204253c0e4a8f9122d233c48eee50
#: ../spack/lib/spack/docs/tutorial_basics.rst:75
msgid ""
"The ``spack list`` command can also take a query string. Spack automatically "
"adds wildcards to both ends of the string. For example, we can view all "
"available python packages."
msgstr ""

# 96a25178c44c41a683e2830591eab07a
#: ../spack/lib/spack/docs/tutorial_basics.rst:90
msgid "Installing Packages"
msgstr ""

# da3fd58fe1fc4c9a8a1b748b15b67781
#: ../spack/lib/spack/docs/tutorial_basics.rst:92
msgid ""
"Installing a package with Spack is very simple. To install a piece of "
"software, simply type ``spack install <package_name>``."
msgstr ""

# 8f306ae98d3340c693ae22c5200d041d
#: ../spack/lib/spack/docs/tutorial_basics.rst:113
msgid ""
"Spack can install software either from source or from a binary cache. "
"Packages in the binary cache are signed with GPG for security. For the "
"tutorial we have prepared a binary cache so you don't have to wait on slow "
"compilation from source. To be able to install from the binary cache, we "
"will need to configure Spack with the location of the binary cache and trust "
"the GPG key that the binary cache was signed with."
msgstr ""

# 80eef53310a0494bac8778e2229c52e6
#: ../spack/lib/spack/docs/tutorial_basics.rst:131
msgid ""
"You'll learn more about configuring Spack later in the tutorial, but for now "
"you will be able to install the rest of the packages in the tutorial from a "
"binary cache using the same ``spack install`` command. By default this will "
"install the binary cached version if it exists and fall back on installing "
"from source."
msgstr ""

# c53556004fcb4631b6df3588fed3d8fa
#: ../spack/lib/spack/docs/tutorial_basics.rst:137
msgid ""
"Spack's spec syntax is the interface by which we can request specific "
"configurations of the package. The ``%`` sigil is used to specify compilers."
msgstr ""

# 1a8156b9e9ee4d0b8d4c4a7b1b774b04
#: ../spack/lib/spack/docs/tutorial_basics.rst:166
msgid ""
"Note that this installation is located separately from the previous one. We "
"will discuss this in more detail later, but this is part of what allows "
"Spack to support arbitrarily versioned software."
msgstr ""

# 8b786f6ea985470885a7c4a098348beb
#: ../spack/lib/spack/docs/tutorial_basics.rst:170
msgid ""
"You can check for particular versions before requesting them. We will use "
"the ``spack versions`` command to see the available versions, and then "
"install a different version of ``zlib``."
msgstr ""

# 5cf722510b8049fd8b37a660454af640
#: ../spack/lib/spack/docs/tutorial_basics.rst:183
msgid ""
"The ``@`` sigil is used to specify versions, both of packages and of "
"compilers."
msgstr ""

# 41e8052326a34a4997cf108e43b7d215
#: ../spack/lib/spack/docs/tutorial_basics.rst:218
msgid ""
"The spec syntax also includes compiler flags. Spack accepts ``cppflags``, "
"``cflags``, ``cxxflags``, ``fflags``, ``ldflags``, and ``ldlibs`` "
"parameters.  The values of these fields must be quoted on the command line "
"if they include spaces. These values are injected into the compile line "
"automatically by the Spack compiler wrappers."
msgstr ""

# 852e853ee1774662b676ce15e0136681
#: ../spack/lib/spack/docs/tutorial_basics.rst:241
msgid ""
"The ``spack find`` command is used to query installed packages. Note that "
"some packages appear identical with the default output. The ``-l`` flag "
"shows the hash of each package, and the ``-f`` flag shows any non-empty "
"compiler flags of those packages."
msgstr ""

# 3b3c8af5cc974a96bbfcea83c3a0b7d5
#: ../spack/lib/spack/docs/tutorial_basics.rst:277
msgid ""
"Spack generates a hash for each spec. This hash is a function of the full "
"provenance of the package, so any change to the spec affects the hash. Spack "
"uses this value to compare specs and to generate unique installation "
"directories for every combinatorial version. As we move into more "
"complicated packages with software dependencies, we can see that Spack "
"reuses existing packages to satisfy a dependency only when the existing "
"package's hash matches the desired spec."
msgstr ""

# 6fd27b3ebf334204990172f0ebe1ac70
#: ../spack/lib/spack/docs/tutorial_basics.rst:303
msgid ""
"Dependencies can be explicitly requested using the ``^`` sigil. Note that "
"the spec syntax is recursive. Anything we could specify about the top-level "
"package, we can also specify about a dependency using ``^``."
msgstr ""

# caf79efe908f488dabfeed512e1e444f
#: ../spack/lib/spack/docs/tutorial_basics.rst:336
msgid ""
"Packages can also be referred to from the command line by their package "
"hash. Using the ``spack find -lf`` command earlier we saw that the hash of "
"our optimized installation of zlib (``cppflags=\"-O3\"``) began with "
"``64mns5m``. We can now explicitly build with that package without typing "
"the entire spec, by using the ``/`` sigil to refer to it by hash. As with "
"other tools like git, you do not need to specify an *entire* hash on the "
"command line.  You can specify just enough digits to identify a hash "
"uniquely.  If a hash prefix is ambiguous (i.e., two or more installed "
"packages share the prefix) then spack will report an error."
msgstr ""

# 889c455bd9ad4e0fbfc07cb5f1843a2d
#: ../spack/lib/spack/docs/tutorial_basics.rst:364
msgid ""
"The ``spack find`` command can also take a ``-d`` flag, which can show "
"dependency information. Note that each package has a top-level entry, even "
"if it also appears as a dependency."
msgstr ""

# c5d12506162b4e64bcbae051e7a18437
#: ../spack/lib/spack/docs/tutorial_basics.rst:399
msgid ""
"Let's move on to slightly more complicated packages. ``HDF5`` is a good "
"example of a more complicated package, with an MPI dependency. If we install "
"it \"out of the box,\" it will build with ``openmpi``."
msgstr ""

# 5378e53179a344ed9e68cbbfc5243080
#: ../spack/lib/spack/docs/tutorial_basics.rst:625
msgid ""
"Spack packages can also have build options, called variants. Boolean "
"variants can be specified using the ``+`` and ``~`` or ``-`` sigils. There "
"are two sigils for ``False`` to avoid conflicts with shell parsing in "
"different situations. Variants (boolean or otherwise) can also be specified "
"using the same syntax as compiler flags.  Here we can install HDF5 without "
"MPI support."
msgstr ""

# e36d59677f0a4c029b162bc673596723
#: ../spack/lib/spack/docs/tutorial_basics.rst:650
msgid ""
"We might also want to install HDF5 with a different MPI implementation. "
"While MPI is not a package itself, packages can depend on abstract "
"interfaces like MPI. Spack handles these through \"virtual dependencies.\" A "
"package, such as HDF5, can depend on the MPI interface. Other packages "
"(``openmpi``, ``mpich``, ``mvapich``, etc.) provide the MPI interface.  Any "
"of these providers can be requested for an MPI dependency. For example, we "
"can build HDF5 with MPI support provided by mpich by specifying a dependency "
"on ``mpich``. Spack also supports versioning of virtual dependencies. A "
"package can depend on the MPI interface at version 3, and provider packages "
"specify what version of the interface *they* provide. The partial spec "
"``^mpi@3`` can be safisfied by any of several providers."
msgstr ""

# d61a93c94354465a8e2312ccd8209189
#: ../spack/lib/spack/docs/tutorial_basics.rst:727
msgid "We'll do a quick check in on what we have installed so far."
msgstr ""

# 29c0d9510d084ef79b5cb8ff6473c745
#: ../spack/lib/spack/docs/tutorial_basics.rst:850
msgid ""
"Spack models the dependencies of packages as a directed acyclic graph (DAG). "
"The ``spack find -d`` command shows the tree representation of that graph.  "
"We can also use the ``spack graph`` command to view the entire DAG as a "
"graph."
msgstr ""

# ff888267f6b24df898c4378a56d7e9a4
#: ../spack/lib/spack/docs/tutorial_basics.rst:888
msgid ""
"You may also have noticed that there are some packages shown in the ``spack "
"find -d`` output that we didn't install explicitly. These are dependencies "
"that were installed implicitly. A few packages installed implicitly are not "
"shown as dependencies in the ``spack find -d`` output. These are build "
"dependencies. For example, ``libpciaccess`` is a dependency of openmpi and "
"requires ``m4`` to build. Spack will build ``m4`` as part of the "
"installation of ``openmpi``, but it does not become a part of the DAG "
"because it is not linked in at run time. Spack handles build dependencies "
"differently because of their different (less strict) consistency "
"requirements. It is entirely possible to have two packages using different "
"versions of a dependency to build, which obviously cannot be done with "
"linked dependencies."
msgstr ""

# 59d2db16eebd4639803c0c88f00bbb25
#: ../spack/lib/spack/docs/tutorial_basics.rst:901
msgid ""
"``HDF5`` is more complicated than our basic example of zlib and openssl, but "
"it's still within the realm of software that an experienced HPC user could "
"reasonably expect to install given a bit of time. Now let's look at an even "
"more complicated package."
msgstr ""

# b5475fd495774b0880ddfc3a282eabd8
#: ../spack/lib/spack/docs/tutorial_basics.rst:1132
msgid ""
"Now we're starting to see the power of Spack. Trilinos in its default "
"configuration has 23 top level dependecies, many of which have dependencies "
"of their own. Installing more complex packages can take days or weeks even "
"for an experienced user. Although we've done a binary installation for the "
"tutorial, a source installation of trilinos using Spack takes about 3 hours "
"(depending on the system), but only 20 seconds of programmer time."
msgstr ""

# a8fd62638e494a858fff480b449b2188
#: ../spack/lib/spack/docs/tutorial_basics.rst:1140
msgid ""
"Spack manages constistency of the entire DAG. Every MPI dependency will be "
"satisfied by the same configuration of MPI, etc. If we install ``trilinos`` "
"again specifying a dependency on our previous HDF5 built with ``mpich``:"
msgstr ""

# e77e93725ce14ac381b565e99643b0ab
#: ../spack/lib/spack/docs/tutorial_basics.rst:1259
msgid ""
"We see that every package in the trilinos DAG that depends on MPI now uses "
"``mpich``."
msgstr ""

# f56839b43e29404bb2d26a7d92d1c541
#: ../spack/lib/spack/docs/tutorial_basics.rst:1307
msgid ""
"As we discussed before, the ``spack find -d`` command shows the dependency "
"information as a tree. While that is often sufficient, many complicated "
"packages, including trilinos, have dependencies that cannot be fully "
"represented as a tree. Again, the ``spack graph`` command shows the full DAG "
"of the dependency information."
msgstr ""

# 976fb42a3b604d64a31c8054b8389aac
#: ../spack/lib/spack/docs/tutorial_basics.rst:1436
msgid "You can control how the output is displayed with a number of options."
msgstr ""

# ac7696f5b36e464399f7442d1e88ff1c
#: ../spack/lib/spack/docs/tutorial_basics.rst:1438
msgid ""
"The ASCII output from ``spack graph`` can be difficult to parse for "
"complicated packages. The output can be changed to the ``graphviz`` ``.dot`` "
"format using the ``--dot`` flag."
msgstr ""

# 6d5904b904d64709b52994224201227f
#: ../spack/lib/spack/docs/tutorial_basics.rst:1450
msgid "Uninstalling Packages"
msgstr ""

# 94710337f846420f9d2409a7acd9c606
#: ../spack/lib/spack/docs/tutorial_basics.rst:1452
msgid ""
"Earlier we installed many configurations each of zlib and tcl. Now we will "
"go through and uninstall some of those packages that we didn't really need."
msgstr ""

# aaa05b8e0a474c5a903c684c82c334a8
#: ../spack/lib/spack/docs/tutorial_basics.rst:1484
msgid "We can uninstall packages by spec using the same syntax as install."
msgstr ""

# 4ebe6a6452724c259f3b577579920585
#: ../spack/lib/spack/docs/tutorial_basics.rst:1509
msgid "We can also uninstall packages by referring only to their hash."
msgstr ""

# 0224e34ba9484fa599690334e3e91586
#: ../spack/lib/spack/docs/tutorial_basics.rst:1511
msgid ""
"We can use either ``-f`` (force) or ``-R`` (remove dependents as well) to "
"remove packages that are required by another installed package."
msgstr ""

# 4694cd0bcec9448fb6862d4de79237a5
#: ../spack/lib/spack/docs/tutorial_basics.rst:1535
msgid ""
"Spack will not uninstall packages that are not sufficiently specified. The "
"``-a`` (all) flag can be used to uninstall multiple packages at once."
msgstr ""

# 38fd5d496d204976b026013bd137664a
#: ../spack/lib/spack/docs/tutorial_basics.rst:1563
msgid "Advanced ``spack find`` Usage"
msgstr ""

# ec73ae173eac4fdda20c616677c29dd0
#: ../spack/lib/spack/docs/tutorial_basics.rst:1565
msgid ""
"We will go over some additional uses for the ``spack find`` command not "
"already covered in the :ref:`basics-tutorial-install` and :ref:`basics-"
"tutorial-uninstall` sections."
msgstr ""

# abbeb1aa5bf14a44b08191a504b05a72
#: ../spack/lib/spack/docs/tutorial_basics.rst:1569
msgid ""
"The ``spack find`` command can accept what we call \"anonymous specs.\" "
"These are expressions in spec syntax that do not contain a package name. For "
"example, ``spack find ^mpich`` will return every installed package that "
"depends on mpich, and ``spack find cppflags=\"-O3\"`` will return every "
"package which was built with ``cppflags=\"-O3\"``."
msgstr ""

# ed0c11d266f44922aaedff17950f5832
#: ../spack/lib/spack/docs/tutorial_basics.rst:1588
msgid ""
"The ``find`` command can also show which packages were installed explicitly "
"(rather than pulled in as a dependency) using the ``-x`` flag. The ``-X`` "
"flag shows implicit installs only. The ``find`` command can also show the "
"path to which a spack package was installed using the ``-p`` command."
msgstr ""

# 1e8e260137c04a62a802651602c4dfba
#: ../spack/lib/spack/docs/tutorial_basics.rst:1614
msgid "Customizing Compilers"
msgstr ""

# 28c9046d01334403bc940a5e73396056
#: ../spack/lib/spack/docs/tutorial_basics.rst:1617
msgid ""
"Spack manages a list of available compilers on the system, detected "
"automatically from from the user's ``PATH`` variable. The ``spack "
"compilers`` command is an alias for the command ``spack compiler list``."
msgstr ""

# f28f7268e6ca41b7977331f4631a91c3
#: ../spack/lib/spack/docs/tutorial_basics.rst:1631
msgid ""
"The compilers are maintained in a YAML file. Later in the tutorial you will "
"learn how to configure compilers by hand for special cases. Spack also has "
"tools to add compilers, and compilers built with Spack can be added to the "
"configuration."
msgstr ""

# 80ffdf256f874ddaa1390504f36fe447
#: ../spack/lib/spack/docs/tutorial_basics.rst:1719
msgid ""
"We can add gcc to Spack as an available compiler using the ``spack compiler "
"add`` command. This will allow future packages to build with gcc@7.2.0."
msgstr ""

# 1ec42a3898714c4983fe40e0b2cdbec2
#: ../spack/lib/spack/docs/tutorial_basics.rst:1731
msgid ""
"We can also remove compilers from our configuration using ``spack compiler "
"remove <compiler_spec>``"
msgstr ""

# 2493c739b3764194b96f30060c743f8f
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:10
msgid "Spack Package Build Systems"
msgstr ""

# df6a8503b02a4fbfa9f63c46b463713b
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:12
msgid ""
"You may begin to notice after writing a couple of package template files a "
"pattern emerge for some packages. For example, you may find yourself writing "
"an :code:`install()` method that invokes: :code:`configure`, :code:`cmake`, :"
"code:`make`, :code:`make install`. You may also find yourself writing :code:`"
"\"prefix=\" + prefix` as an argument to :code:`configure` or :code:`cmake`. "
"Rather than having you repeat these lines for all packages, Spack has "
"classes that can take care of these patterns. In addition, these package "
"files allow for finer grained control of these build systems. In this "
"section, we will describe each build system and give examples on how these "
"can be manipulated to install a package."
msgstr ""

# 4996f08e01024286b4a1a2f497b7981b
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:25
msgid "Package Class Hierarchy"
msgstr ""

# 4f29e1bdd1d6448aa898e33217c93dfd
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:45
msgid ""
"The above diagram gives a high level view of the class hierarchy and how "
"each package relates. Each subclass inherits from the :code:"
"`PackageBaseClass` super class. The bulk of the work is done in this super "
"class which includes fetching, extracting to a staging directory and "
"installing. Each subclass then adds additional build-system-specific "
"functionality. In the following sections, we will go over examples of how to "
"utilize each subclass and to see how powerful these abstractions are when "
"packaging."
msgstr ""

# 241ae17a935848b2b95222edcc635925
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:55
msgid "Package"
msgstr ""

# b64fb194b2624dcabd9a5fd59097ebce
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:57
msgid ""
"We've already seen examples of a :code:`Package` class in our walkthrough "
"for writing package files, so we won't be spending much time with them here. "
"Briefly, the Package class allows for abitrary control over the build "
"process, whereas subclasses rely on certain patterns (e.g. :code:"
"`configure` :code:`make` :code:`make install`) to be useful. :code:`Package` "
"classes are particularly useful for packages that have a non-conventional "
"way of being built since the packager can utilize some of Spack's helper "
"functions to customize the building and installing of a package."
msgstr ""

# e35e4fe5b66343229695313bee3af44b
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:68
msgid "Autotools"
msgstr ""

# 8a4afa6f8677443fbe8f00ba14be3815
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:70
msgid ""
"As we have seen earlier, packages using :code:`Autotools` use :code:"
"`configure`, :code:`make` and :code:`make install` commands to execute the "
"build and install process. In our :code:`Package` class, your typical build "
"incantation will consist of the following:"
msgstr ""

# 6d629e7a2b5940b48c138e5654607843
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:82
msgid ""
"You'll see that this looks similar to what we wrote in our packaging "
"tutorial."
msgstr ""

# c9f3715a36b94930a5dd3afaf4be37a2
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:84
msgid ""
"The :code:`Autotools` subclass aims to simplify writing package files and "
"provides convenience methods to manipulate each of the different phases for "
"a :code:`Autotools` build system."
msgstr ""

# 1a790db576cb4abfb6204b13acb4afa4
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:88
msgid ":code:`Autotools` packages consist of four phases:"
msgstr ""

# 12b5d25e2c324dbc849760cb15bd7db2
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:90
msgid ":code:`autoreconf()`"
msgstr ""

# 809a0ffa823c4df3b79bcc481ff83d15
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:91
msgid ":code:`configure()`"
msgstr ""

# 50f59b90fff14258919c00cfd88a7fc5
# a6b3dc8307c143399f540af62523dc0b
# 6c049195a3c947dfb0a13378b6c6d709
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:92
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:195
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:485
msgid ":code:`build()`"
msgstr ""

# 6fca004fd1724b99a7318bf24d7133c3
# 7fdf3a22b826408b8600d1df63da90f2
# 92d124653a5140d796817e1c37290fb3
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:93
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:196
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:486
msgid ":code:`install()`"
msgstr ""

# 8e54b18a45844f95adbd5e56c6b6aaa8
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:96
msgid ""
"Each of these phases have sensible defaults. Let's take a quick look at some "
"the internals of the :code:`Autotools` class:"
msgstr ""

# 8c3e5c9901504515a3b7c8a334b988f3
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:104
msgid "This will open the :code:`AutotoolsPackage` file in your text editor."
msgstr ""

# 136c83056dd448a6be7f4f50d8ec2da1
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:107
msgid ""
"The examples showing code for these classes is abridged to avoid having long "
"examples. We only show what is relevant to the packager."
msgstr ""

# eee48fcfadf04ea2b80cb75bd374d7a2
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:118
msgid ""
"Important to note are the highlighted lines. These properties allow the "
"packager to set what build targets and install targets they want for their "
"package. If, for example, we wanted to add as our build target :code:`foo` "
"then we can append to our :code:`build_targets` property:"
msgstr ""

# d6495d4ca35c45789e7a4f13249bb777
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:127
msgid "Which is similiar to invoking make in our Package"
msgstr ""

# 8dc8d91e056b474c9025c8009847c813
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:133
msgid ""
"This is useful if we have packages that ignore environment variables and "
"need a command-line argument."
msgstr ""

# 66e790735f1f4d47b40376dbe395fdc2
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:136
msgid ""
"Another thing to take note of is in the :code:`configure()` method. Here we "
"see that the :code:`prefix` argument is already included since it is a "
"common pattern amongst packages using :code:`Autotools`. We then only have "
"to override :code:`configure_args()`, which will then return it's output to "
"to :code:`configure()`. Then, :code:`configure()` will append the common "
"arguments"
msgstr ""

# 9f9540d6b3ab4445a59fda9dee818dc5
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:143
msgid ""
"Packagers also have the option to run :code:`autoreconf` in case a package "
"needs to update the build system and generate a new :code:`configure`. "
"Though, for the most part this will be unnecessary."
msgstr ""

# 3ea8ca559e7c413cb5981fee8c90868d
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:147
msgid ""
"Let's look at the :code:`mpileaks` package.py file that we worked on earlier:"
msgstr ""

# 16a85390111b4b40ad2378754f79fc61
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:153
msgid ""
"Notice that mpileaks is a :code:`Package` class but uses the :code:"
"`Autotools` build system. Although this package is acceptable let's make "
"this into an :code:`AutotoolsPackage` class and simplify it further."
msgstr ""

# c794e70234c24fceb8f7c2c177494872
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:162
msgid "We first inherit from the :code:`AutotoolsPackage` class."
msgstr ""

# b2a1b443878b415392f602731e16cc94
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:165
msgid ""
"Although we could keep the :code:`install()` method, most of it can be "
"handled by the :code:`AutotoolsPackage` base class. In fact, the only thing "
"that needs to be overridden is :code:`configure_args()`."
msgstr ""

# 22d86553038a48e9a811c4d4bb757b72
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:174
msgid ""
"Since Spack takes care of setting the prefix for us we can exclude that as "
"an argument to :code:`configure`. Our packages look simpler, and the "
"packager does not need to worry about whether they have properly included :"
"code:`configure` and :code:`make`."
msgstr ""

# 4a2a3c6054f547e49b3573bd9a847008
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:179
msgid ""
"This version of the :code:`mpileaks` package installs the same as the "
"previous, but the :code:`AutotoolsPackage` class lets us do it with a "
"cleaner looking package file."
msgstr ""

# 669d90e63b674dccbbe6268fd03ea90e
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:185
msgid "Makefile"
msgstr ""

# a00be8ca58b94bee87253746daadf79a
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:187
msgid ""
"Packages that utilize :code:`Make` or a :code:`Makefile` usually require you "
"to edit a :code:`Makefile` to set up platform and compiler specific "
"variables. These packages are handled by the :code:`Makefile` subclass which "
"provides convenience methods to help write these types of packages."
msgstr ""

# 215e581e54bf447f981cd0ce22d7ee44
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:192
msgid ""
"A :code:`MakefilePackage` class has three phases that can be overridden. "
"These include:"
msgstr ""

# 7b726a17ae294f7090d07ddf2a16e46a
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:194
msgid ":code:`edit()`"
msgstr ""

# 2c7433d9999147d39f8c53a5f9ce22d5
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:198
msgid ""
"Packagers then have the ability to control how a :code:`Makefile` is edited, "
"and what targets to include for the build phase or install phase."
msgstr ""

# 3ddc77e503e940acadb965cb6c19bf34
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:201
msgid "Let's also take a look inside the :code:`MakefilePackage` class:"
msgstr ""

# 20f63944f4b2446db16d2f056efff42b
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:207
msgid "Take note of the following:"
msgstr ""

# 43eb47771dca4bfda734d34e332aa5c5
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:216
msgid ""
"Similar to :code:`Autotools`, :code:`MakefilePackage` class has properties "
"that can be set by the packager. We can also override the different methods "
"highlighted."
msgstr ""

# 17c185f9a7774744bc36906936491a68
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:221
msgid "Let's try to recreate the Bowtie_ package:"
msgstr ""

# ad425e73883a49908304b5a7af7d9f3a
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:243
msgid ""
"Once the fetching is completed, Spack will open up your text editor in the "
"usual fashion and create a template of a :code:`MakefilePackage` package.py."
msgstr ""

# 45bb9b1eb4c14216a48640dd588d79d2
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:250
msgid ""
"Spack was successfully able to detect that :code:`Bowtie` uses :code:`Make`. "
"Let's add in the rest of our details for our package:"
msgstr ""

# c948d8b0eded44cdbd05d5f44c269781
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:258
msgid ""
"As we mentioned earlier, most packages using a :code:`Makefile` have hard-"
"coded variables that must be edited. These variables are fine if you happen "
"to not care about setup or types of compilers used but Spack is designed to "
"work with any compiler. The :code:`MakefilePackage` subclass makes it easy "
"to edit these :code:`Makefiles` by having an :code:`edit()` method that can "
"be overridden."
msgstr ""

# 774b4bbf68aa4c79a46e2ae34248d0e7
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:265
msgid ""
"Let's take a look at the default :code:`Makefile` that :code:`Bowtie` "
"provides. If we look inside, we see that :code:`CC` and :code:`CXX` point to "
"our GNU compiler:"
msgstr ""

# 54da2962377a4a82b04a0eeb0791f0df
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:274
msgid "As usual make sure you have shell support activated with spack:"
msgstr ""

# b213e136387948f59e472e410ed54ff4
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:275
msgid ":code:`source /path/to/spack_root/spack/share/spack/setup-env.sh`"
msgstr ""

# ef167c5d9ce84e998b4c275630c60e82
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:292
msgid ""
"To fix this, we need to use the :code:`edit()` method to write our custom :"
"code:`Makefile`."
msgstr ""

# 2a4156699c6b455db89ba8a561c85eb8
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:300
msgid ""
"Here we use a :code:`FileFilter` object to edit our :code:`Makefile`. It "
"takes in a regular expression and then replaces :code:`CC` and :code:`CXX` "
"to whatever Spack sets :code:`CC` and :code:`CXX` environment variables to. "
"This allows us to build :code:`Bowtie` with whatever compiler we specify "
"through Spack's :code:`spec` syntax."
msgstr ""

# 231a91e4f0a340a090761eb6045388ab
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:306
msgid "Let's change the build and install phases of our package:"
msgstr ""

# def37f17fa034767a8cfd0bebbac5507
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:313
msgid ""
"Here demonstrate another strategy that we can use to manipulate our package "
"We can provide command-line arguments to :code:`make()`. Since :code:"
"`Bowtie` can use :code:`tbb` we can either add :code:`NO_TBB=1` as a "
"argument to prevent :code:`tbb` support or we can just invoke :code:`make` "
"with no arguments."
msgstr ""

# 2002f6c1cb19439fa4e02750d88c626f
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:318
msgid ""
":code:`Bowtie` requires our :code:`install_target` to provide a path to the "
"install directory. We can do this by providing :code:`prefix=` as a command "
"line argument to :code:`make()`."
msgstr ""

# 9ef8cebce83a42c199fbbb0457222cc4
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:322
msgid "Let's look at a couple of other examples and go through them:"
msgstr ""

# 14bba1c293c2416188f6f2dba5978b96
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:328
msgid ""
"Some packages allow environment variables to be set and will honor them. "
"Packages that use :code:`?=` for assignment in their :code:`Makefile` can be "
"set using environment variables. In our :code:`esmf` example we set two "
"environment variables in our :code:`edit()` method:"
msgstr ""

# 383027937dfd403cb9b0b3909536714f
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:357
msgid ""
"As you may have noticed, we didn't really write anything to the :code:"
"`Makefile` but rather we set environment variables that will override "
"variables set in the :code:`Makefile`."
msgstr ""

# dceca79291b34b2ba971d4bc77657158
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:361
msgid ""
"Some packages include a configuration file that sets certain compiler "
"variables, platform specific variables, and the location of dependencies or "
"libraries. If the file is simple and only requires a couple of changes, we "
"can overwrite those entries with our :code:`FileFilter` object. If the "
"configuration involves complex changes, we can write a new configuration "
"file from scratch."
msgstr ""

# ee0d4b61e2b34247829f851dd269b583
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:367
msgid "Let's look at an example of this in the :code:`elk` package:"
msgstr ""

# e1131fa9e239404ea92ee7e7ca7bfba2
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:455
msgid ""
":code:`config` is just a dictionary that we can add key-value pairs to. By "
"the end of the :code:`edit()` method we write the contents of our dictionary "
"to :code:`make.inc`."
msgstr ""

# f04c79c42ac24df787ed6f8933cee57d
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:461
msgid "CMake"
msgstr ""

# 51b41e53bf244d0f8ba7c523f763f267
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:463
msgid ""
"CMake_ is another common build system that has been gaining popularity. It "
"works in a similar manner to :code:`Autotools` but with differences in "
"variable names, the number of configuration options available, and the "
"handling of shared libraries. Typical build incantations look like this:"
msgstr ""

# 84c956b2bf7247c3b8e4645ea252e76e
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:477
msgid ""
"As you can see from the example above, it's very similar to invoking :code:"
"`configure` and :code:`make` in an :code:`Autotools` build system. However, "
"the variable names and options differ. Most options in CMake are prefixed "
"with a :code:`'-D'` flag to indicate a configuration setting."
msgstr ""

# 97b258f0b08441a98f91606ea2f356ba
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:482
msgid "In the :code:`CMakePackage` class we can override the following phases:"
msgstr ""

# 8e5d22b70a7841abb1d313b2315c50c7
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:484
msgid ":code:`cmake()`"
msgstr ""

# ef826535efc1454186b7bb975afe9283
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:488
msgid ""
"The :code:`CMakePackage` class also provides sensible defaults so we only "
"need to override :code:`cmake_args()`."
msgstr ""

# 3946b3817ec348b1b02c445d93459ba6
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:491
msgid ""
"Let's look at these defaults in the :code:`CMakePackage` class in the :code:"
"`_std_args()` method:"
msgstr ""

# 3883a70d0e0e42df8c293ea8af2ceae8
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:503
msgid ""
"Some :code:`CMake` packages use different generators. Spack is able to "
"support Unix-Makefile_ generators as well as Ninja_ generators."
msgstr ""

# 96b293ebc9694a66a4dd7fb492582bf0
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:509
msgid ""
"If no generator is specified Spack will default to :code:`Unix Makefiles`."
msgstr ""

# b372559e434b4e6c94e31329caa1c35a
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:511
msgid ""
"Next we setup the build type. In :code:`CMake` you can specify the build "
"type that you want. Options include:"
msgstr ""

# 7394492bb8b04b71b5e0fcb76ccd7a5f
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:514
msgid ":code:`empty`"
msgstr ""

# 8098d6393fae4ff7be23a32c85044653
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:515
msgid ":code:`Debug`"
msgstr ""

# 6ae87266455847e98599abf2caf375bd
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:516
msgid ":code:`Release`"
msgstr ""

# dd12541fb5474454ad1d6241c38b60e2
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:517
msgid ":code:`RelWithDebInfo`"
msgstr ""

# 1548d5bae8324597a801199337d11100
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:518
msgid ":code:`MinSizeRel`"
msgstr ""

# 61481132abe14755b3e03ce9013378f4
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:520
msgid ""
"With these options you can specify whether you want your executable to have "
"the debug version only, release version or the release with debug "
"information. Release executables tend to be more optimized than Debug. In "
"Spack, we set the default as RelWithDebInfo unless otherwise specified "
"through a variant."
msgstr ""

# b7d22649855e44a492453c6e6c82873e
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:525
msgid ""
"Spack then automatically sets up the :code:`-DCMAKE_INSTALL_PREFIX` path, "
"appends the build type (:code:`RelWithDebInfo` default), and then specifies "
"a verbose :code:`Makefile`."
msgstr ""

# 83ab67b47b37409e9e520cbfcef9caec
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:529
msgid "Next we add the :code:`rpaths` to :code:`-DCMAKE_INSTALL_RPATH:STRING`."
msgstr ""

# 25486d64776c4cdf8b41205bd2546f36
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:532
msgid ""
"Finally we add to :code:`-DCMAKE_PREFIX_PATH:STRING` the locations of all "
"our dependencies so that :code:`CMake` can find them."
msgstr ""

# 1c7bef10c4b846e19075e456c025620a
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:535
msgid ""
"In the end our :code:`cmake` line will look like this (example is :code:"
"`xrootd`):"
msgstr ""

# 41cadd5f22ff4c4b888345a7f578fcb6
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:541
msgid ""
"We can see now how :code:`CMake` takes care of a lot of the boilerplate code "
"that would have to be otherwise typed in."
msgstr ""

# ee0c271a8de549feb9067e59ba0daf05
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:544
msgid "Let's try to recreate callpath_:"
msgstr ""

# 0ecfd88909404c04a9689a6f71be4c65
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:569
msgid "which then produces the following template:"
msgstr ""

# ae0a1b9ce53f43c8944aa39168e11666
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:575
msgid "Again we fill in the details:"
msgstr ""

# e5f66a0292f14edeb00c19b3a54385f5
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:582
msgid ""
"As mentioned earlier, Spack will use sensible defaults to prevent repeated "
"code and to make writing :code:`CMake` package files simpler."
msgstr ""

# 0392b8a98c9c4b5a881c964580d4e741
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:585
msgid ""
"In callpath, we want to add options to :code:`CALLPATH_WALKER` as well as "
"add compiler flags. We add the following options like so:"
msgstr ""

# d7448131e33144138dbf7ef28feb5f9e
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:593
msgid ""
"Now we can control our build options using :code:`cmake_args()`. If defaults "
"are sufficient enough for the package, we can leave this method out."
msgstr ""

# 623f5610b20646429b8ed1bffb3ad165
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:596
msgid ""
":code:`CMakePackage` classes allow for control of other features in the "
"build system. For example, you can specify the path to the \"out of source\" "
"build directory and also point to the root of the :code:`CMakeLists.txt` "
"file if it is placed in a non-standard location."
msgstr ""

# df264204b0e44d0b863a15513ade133b
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:601
msgid ""
"A good example of a package that has its :code:`CMakeLists.txt` file located "
"at a different location is found in :code:`spades`."
msgstr ""

# 861a194b15ad454b966a9b1f472c9d12
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:612
msgid ""
"Here :code:`root_cmakelists_dir` will tell Spack where to find the location "
"of :code:`CMakeLists.txt`. In this example, it is located a directory level "
"below in the :code:`src` directory."
msgstr ""

# e8a73341efed4eaaaf3b7d209c595c22
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:616
msgid ""
"Some :code:`CMake` packages also require the :code:`install` phase to be "
"overridden. For example, let's take a look at :code:`sniffles`."
msgstr ""

# cfc2de735d354567a4d2b63f542c3fbd
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:623
msgid ""
"In the :code:`install()` method, we have to manually install our targets so "
"we override the :code:`install()` method to do it for us:"
msgstr ""

# aa056fbdff8c45ccad7c1d542bd43e2d
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:641
msgid ""
"Python extensions and modules are built differently from source than most "
"applications. Python uses a :code:`setup.py` script to install Python "
"modules. The script consists of a call to :code:`setup()` which provides the "
"information required to build a module to Distutils. If you're familiar with "
"pip or easy_install, setup.py does the same thing."
msgstr ""

# 8ff660a66aaf442fa9c228080c1e57c9
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:647
msgid "These modules are usually installed using the following line:"
msgstr ""

# e2d6c25017d04ed4bc30609b1cee20bc
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:653
msgid ""
"There are also a list of commands and phases that you can call. To see the "
"full list you can run:"
msgstr ""

# 7bc44702c7cf4e31aa28764d8e9d382a
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:681
msgid ""
"We can write package files for Python packages using the :code:`Package` "
"class, but the class brings with it a lot of methods that are useless for "
"Python packages. Instead, Spack has a :code:`PythonPackage` subclass that "
"allows packagers of Python modules to be able to invoke :code:`setup.py` and "
"use :code:`Distutils`, which is much more familiar to a typical python user."
msgstr ""

# 7e74d8e09026410e995818912d6b4714
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:687
msgid ""
"To see the defaults that Spack has for each a methods, we will take a look "
"at the :code:`PythonPackage` class:"
msgstr ""

# 123e4e7fdc714776a230c6fe939a7199
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:694
msgid "We see the following:"
msgstr ""

# 6d2e0b2bffc14c0e9c67bff594280e67
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:702
msgid "Each of these methods have sensible defaults or they can be overridden."
msgstr ""

# 2c24a5efc2dd4009ae295e833c4a0982
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:704
msgid "We will write a package file for Pandas_:"
msgstr ""

# 0617de6314b64136946cbcdf1bb35f0a
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:727
msgid "And we are left with the following template:"
msgstr ""

# 262d8c09f4114c06b3392d46fdb358a4
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:733
msgid ""
"As you can see this is not any different than any package template that we "
"have written. We have the choice of providing build options or using the "
"sensible defaults"
msgstr ""

# e138c9cf54ef44de944b8b5eddb7796d
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:737
msgid "Luckily for us, there is no need to provide build args."
msgstr ""

# b11c74ca7b904d899047da47b3c5337a
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:739
msgid ""
"Next we need to find the dependencies of a package. Dependencies are usually "
"listed in :code:`setup.py`. You can find the dependencies by searching for :"
"code:`install_requires` keyword in that file. Here it is for :code:`Pandas`:"
msgstr ""

# 3b2001495ded4360a6a593bc9b3dbf25
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:761
msgid "You can find a more comprehensive list at the Pandas documentation_."
msgstr ""

# 2126a6fb2530496fb23c35094e89335e
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:766
msgid ""
"By reading the documentation and :code:`setup.py` we found that :code:"
"`Pandas` depends on :code:`python-dateutil`, :code:`pytz`, and :code:"
"`numpy`, :code:`numexpr`, and finally :code:`bottleneck`."
msgstr ""

# defca001bd9e4e95bb41c4de4df96323
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:770
msgid "Here is the completed :code:`Pandas` script:"
msgstr ""

# dfab919873e34f9990c0fd9714b7fbf0
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:776
msgid ""
"It is quite important to declare all the dependencies of a Python package. "
"Spack can \"activate\" Python packages to prevent the user from having to "
"load each dependency module explictly. If a dependency is missed, Spack will "
"be unable to properly activate the package and it will cause an issue. To "
"learn more about extensions go to :ref:`cmd-spack-extensions`."
msgstr ""

# 2a911b1a50b0414a8858a9f8f049f8f3
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:782
msgid ""
"From this example, you can see that building Python modules is made easy "
"through the :code:`PythonPackage` class."
msgstr ""

# #-#-#-#-#  tutorial_buildsystems.pot (Spack 0.12)  #-#-#-#-#
# 722f83bab8654ceebe820e5f4ec7f2ec
# #-#-#-#-#  workflows.pot (Spack 0.12)  #-#-#-#-#
# 12aa7d07cd934845af2fdca1d922f63c
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:787
#: ../spack/lib/spack/docs/workflows.rst:1058
msgid "Other Build Systems"
msgstr ""

# 1c6a21ffab304e3e9b469d4eb1c26a9d
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:789
msgid ""
"Although we won't get in depth with any of the other build systems that "
"Spack supports, it is worth mentioning that Spack does provide subclasses "
"for the following build systems:"
msgstr ""

# a7d2c90e8f7044069088150839986fa9
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:793
msgid ":code:`IntelPackage`"
msgstr ""

# c8aac19193c94240b4df0b281dab17c6
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:794
msgid ":code:`SconsPackage`"
msgstr ""

# d3c55fb510c144d886dbf97ef7a7a99d
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:795
msgid ":code:`WafPackage`"
msgstr ""

# ae386c51960b4cf7937aaeaa268cc0f8
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:796
msgid ":code:`RPackage`"
msgstr ""

# 8cd675db7b2b40c091a39f7bdb715d6a
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:797
msgid ":code:`PerlPackage`"
msgstr ""

# 74af075e4c3b438eb4c171c1ba919a3c
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:798
msgid ":code:`QMakePackage`"
msgstr ""

# d1abdf650a6a43aeb65caeb276552c1f
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:801
msgid ""
"Each of these classes have their own abstractions to help assist in writing "
"package files. For whatever doesn't fit nicely into the other build-systems, "
"you can use the :code:`Package` class."
msgstr ""

# 20222ace8944401783b55f6222c58bfd
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:805
msgid ""
"Hopefully by now you can see how we aim to make packaging simple and robust "
"through these classes. If you want to learn more about these build systems, "
"check out :ref:`installation_procedure` in the Packaging Guide."
msgstr ""

# ac8819b3b6f1445c93e2ac32e0dba20a
#: ../spack/lib/spack/docs/tutorial_configuration.rst:10
msgid "Configuration Tutorial"
msgstr ""

# c42fb2ddaff84afcb6c752736345be12
#: ../spack/lib/spack/docs/tutorial_configuration.rst:12
msgid ""
"This tutorial will guide you through various configuration options that "
"allow you to customize Spack's behavior with respect to software "
"installation. We will first cover the configuration file hierarchy. Then, we "
"will cover configuration options for compilers, focusing on how they can be "
"used to extend Spack's compiler auto-detection. Next, we will cover the "
"packages configuration file, focusing on how it can be used to override "
"default build options as well as specify external package installations to "
"use. Finally, we will briefly touch on the config configuration file, which "
"manages more high-level Spack configuration options."
msgstr ""

# 8be2259fec19483abc598219a05c78c6
#: ../spack/lib/spack/docs/tutorial_configuration.rst:23
msgid ""
"For all of these features we will demonstrate how we build up a full "
"configuration file. For some we will then demonstrate how the configuration "
"affects the install command, and for others we will use the ``spack spec`` "
"command to demonstrate how the configuration changes have affected Spack's "
"concretization algorithm. The provided output is all from a server running "
"Ubuntu version 16.04."
msgstr ""

# 349e5cf235214e7c87eec7694563d9bf
#: ../spack/lib/spack/docs/tutorial_configuration.rst:36
msgid ""
"Depending on your use case, you may want to provide configuration settings "
"common to everyone on your team, or you may want to set default behaviors "
"specific to a single user account. Spack provides six configuration *scopes* "
"to handle this customization. These scopes, in order of decreasing priority, "
"are:"
msgstr ""

# 11ce85558b5544dc86ec32090275e255
#: ../spack/lib/spack/docs/tutorial_configuration.rst:43
msgid "Scope"
msgstr ""

# 037f7831b09e4db49205e71a362843db
#: ../spack/lib/spack/docs/tutorial_configuration.rst:43
msgid "Directory"
msgstr ""

# e9eee5b5dae74090aeae4e7dbe46a2df
#: ../spack/lib/spack/docs/tutorial_configuration.rst:45
msgid "Command-line"
msgstr ""

# b3e764e70a1f43e6a96e31b4826dc5e5
#: ../spack/lib/spack/docs/tutorial_configuration.rst:45
msgid "N/A"
msgstr ""

# 6d8f77958894402d9e1e9fc6946066fd
#: ../spack/lib/spack/docs/tutorial_configuration.rst:46
msgid "Custom"
msgstr ""

# 5d17dfcaa49343b781c06516fd9a97ff
#: ../spack/lib/spack/docs/tutorial_configuration.rst:46
msgid "Custom directory, specified with ``--config-scope``"
msgstr ""

# 6f5c58a5f892414aa607f99204be9a6b
#: ../spack/lib/spack/docs/tutorial_configuration.rst:47
msgid "User"
msgstr ""

# 885cf8fc26d4472d972cbd80807b969c
#: ../spack/lib/spack/docs/tutorial_configuration.rst:47
msgid "``~/.spack/``"
msgstr ""

# 872daf1fccf44da5abef5920e0becdde
#: ../spack/lib/spack/docs/tutorial_configuration.rst:48
msgid "Site"
msgstr ""

# 16898f8319204e268dea141d2cf8fdc7
#: ../spack/lib/spack/docs/tutorial_configuration.rst:48
msgid "``$SPACK_ROOT/etc/spack/``"
msgstr ""

# 3f1af71204614ff98731cc545c543515
#: ../spack/lib/spack/docs/tutorial_configuration.rst:49
msgid "System"
msgstr ""

# 71b406fd02374d89a89c68eeb5c5513c
#: ../spack/lib/spack/docs/tutorial_configuration.rst:49
msgid "``/etc/spack/``"
msgstr ""

# effa4cc8090f4659a4d4627e157212b1
#: ../spack/lib/spack/docs/tutorial_configuration.rst:50
msgid "Defaults"
msgstr ""

# ca1b294e762c40a18424bfa2f0b6f48e
#: ../spack/lib/spack/docs/tutorial_configuration.rst:50
msgid "``$SPACK_ROOT/etc/spack/defaults/``"
msgstr ""

# ee6be4fedd1e4142ba9564ebbf645503
#: ../spack/lib/spack/docs/tutorial_configuration.rst:53
msgid ""
"Spack's default configuration settings reside in ``$SPACK_ROOT/etc/spack/"
"defaults``. These are useful for reference, but should never be directly "
"edited. To override these settings, create new configuration files in any of "
"the higher-priority configuration scopes."
msgstr ""

# c81b61d70820487ea9e0707284791c8b
#: ../spack/lib/spack/docs/tutorial_configuration.rst:59
msgid ""
"A particular cluster may have multiple Spack installations associated with "
"different projects. To provide settings common to all Spack installations, "
"put your configuration files in ``/etc/spack``. To provide settings specific "
"to a particular Spack installation, you can use the ``$SPACK_ROOT/etc/"
"spack`` directory."
msgstr ""

# b3ef849f6cd94175b31e9def9cf21ebd
#: ../spack/lib/spack/docs/tutorial_configuration.rst:65
msgid ""
"For settings specific to a particular user, you will want to add "
"configuration files to the ``~/.spack`` directory. When Spack first checked "
"for compilers on your system, you may have noticed that it placed your "
"compiler configuration in this directory."
msgstr ""

# 91da4f44c81a4ca99a0ea13f81ac8769
#: ../spack/lib/spack/docs/tutorial_configuration.rst:70
msgid ""
"Configuration settings can also be placed in a custom location, which is "
"then specified on the command line via ``--config-scope``. An example use "
"case is managing two sets of configurations, one for development and another "
"for production preferences."
msgstr ""

# 4998421b219b42679276e55429db19b8
#: ../spack/lib/spack/docs/tutorial_configuration.rst:75
msgid ""
"Settings specified on the command line have precedence over all other "
"configuration scopes."
msgstr ""

# 4f1c04f0ce994bb587c33689bda4958c
#: ../spack/lib/spack/docs/tutorial_configuration.rst:82
msgid ""
"Some facilities manage multiple platforms from a single shared file system. "
"In order to handle this, each of the configuration scopes listed above has "
"two *sub-scopes*: platform-specific and platform-independent. For example, "
"compiler settings can be stored in ``compilers.yaml`` configuration files in "
"the following locations:"
msgstr ""

# 4795509fdaf0430db4235f0c20aa5ecd
#: ../spack/lib/spack/docs/tutorial_configuration.rst:88
msgid "``~/.spack/<platform>/compilers.yaml``"
msgstr ""

# c7dcb30fb2b24d39bb3b444b0e827d8c
#: ../spack/lib/spack/docs/tutorial_configuration.rst:89
msgid "``~/.spack/compilers.yaml``"
msgstr ""

# 493c114f01164310a383c163bf3d1332
#: ../spack/lib/spack/docs/tutorial_configuration.rst:90
msgid "``$SPACK_ROOT/etc/spack/<platform>/compilers.yaml``"
msgstr ""

# 0d336457c54c474592fa559c9d62d1d2
#: ../spack/lib/spack/docs/tutorial_configuration.rst:91
msgid "``$SPACK_ROOT/etc/spack/compilers.yaml``"
msgstr ""

# 3bc92088c0da437faf53c17c48a143eb
#: ../spack/lib/spack/docs/tutorial_configuration.rst:92
msgid "``/etc/spack/<platform>/compilers.yaml``"
msgstr ""

# cf0b172e86f84662b3726f89647e4454
#: ../spack/lib/spack/docs/tutorial_configuration.rst:93
msgid "``/etc/spack/compilers.yaml``"
msgstr ""

# 437a7c5ce52a4f89a92d063c73452c85
#: ../spack/lib/spack/docs/tutorial_configuration.rst:94
msgid "``$SPACK_ROOT/etc/defaults/<platform>/compilers.yaml``"
msgstr ""

# 73b7b897368f4794be7cf63fcb927168
#: ../spack/lib/spack/docs/tutorial_configuration.rst:95
msgid "``$SPACK_ROOT/etc/defaults/compilers.yaml``"
msgstr ""

# 513d4346fb2e4580a4e965705018675f
#: ../spack/lib/spack/docs/tutorial_configuration.rst:97
msgid ""
"These files are listed in decreasing order of precedence, so files in ``~/."
"spack/<platform>`` will override settings in ``~/.spack``."
msgstr ""

# a6d784d399f148a9b96d341676d3ea7b
#: ../spack/lib/spack/docs/tutorial_configuration.rst:104
msgid ""
"Spack configurations are YAML dictionaries. Every configuration file begins "
"with a top-level dictionary that tells Spack which configuration set it "
"modifies. When Spack checks it's configuration, the configuration scopes are "
"updated as dictionaries in increasing order of precedence, allowing higher "
"precedence files to override lower. YAML dictionaries use a colon \":\" to "
"specify key-value pairs. Spack extends YAML syntax slightly to allow a "
"double-colon \"::\" to specify a key-value pair. When a double-colon is used "
"to specify a key-value pair, instead of adding that section Spack replaces "
"what was in that section with the new value. For example, a user compilers "
"configuration file as follows:"
msgstr ""

# 12b57aa7c1074812a8aa80a6a2966a7c
#: ../spack/lib/spack/docs/tutorial_configuration.rst:134
msgid ""
"ensures that no other compilers are used, as the user configuration scope is "
"the last scope searched and the ``compilers::`` line replaces all previous "
"configuration files information. If the same configuration file had a single "
"colon instead of the double colon, it would add the GCC version 5.4.0 "
"compiler to whatever other compilers were listed in other configuration "
"files."
msgstr ""

# ea0e99bf9f9e4c23aab05f7f2719b198
#: ../spack/lib/spack/docs/tutorial_configuration.rst:145
msgid "Compiler Configuration"
msgstr ""

# 448ded86afe84636a7e45e4dbb454762
#: ../spack/lib/spack/docs/tutorial_configuration.rst:147
msgid ""
"For most tasks, we can use Spack with the compilers auto-detected the first "
"time Spack runs on a system. As discussed in the basic installation "
"tutorial, we can also tell Spack where compilers are located using the "
"``spack compiler add`` command. However, in some circumstances we want even "
"more fine-grained control over the compilers available. This section will "
"teach you how to exercise that control using the compilers configuration "
"file."
msgstr ""

# cbbb159b23af48d2a3c9c81b1bcb2672
#: ../spack/lib/spack/docs/tutorial_configuration.rst:155
msgid "We will start by opening the compilers configuration file"
msgstr ""

# cf9351d4cf6841a18f2ca2ae5d7eaf8d
#: ../spack/lib/spack/docs/tutorial_configuration.rst:219
msgid ""
"This specifies two versions of the GCC compiler and two versions of the "
"Clang compiler with no Flang compiler. Now suppose we have a code that we "
"want to compile with the Clang compiler for C/C++ code, but with gfortran "
"for Fortran components. We can do this by adding another entry to the "
"``compilers.yaml`` file."
msgstr ""

# a5ae11c74b3049d2b46c50cb6ad0fc33
#: ../spack/lib/spack/docs/tutorial_configuration.rst:242
msgid ""
"Let's talk about the sections of this compiler entry that we've changed. The "
"biggest change we've made is to the ``paths`` section. This lists the paths "
"to the compilers to use for each language/specification. In this case, we "
"point to the clang compiler for C/C++ and the gfortran compiler for both "
"specifications of Fortran. We've also changed the ``spec`` entry for this "
"compiler. The ``spec`` entry is effectively the name of the compiler for "
"Spack. It consists of a name and a version number, separated by the ``@`` "
"sigil. The name must be one of the supported compiler names in Spack (gcc, "
"intel, pgi, xl, xl_r, clang, nag, cce, arm). The version number can be an "
"arbitrary string of alphanumeric characters, as well as ``-``, ``.``, and "
"``_``. The ``target`` and ``operating_system`` sections we leave unchanged. "
"These sections specify when Spack can use different compilers, and are "
"primarily useful for configuration files that will be used across multiple "
"systems."
msgstr ""

# 3cfa383c0e74472da4d50a3d74183e05
#: ../spack/lib/spack/docs/tutorial_configuration.rst:257
msgid "We can verify that our new compiler works by invoking it now:"
msgstr ""

# e0bd219fd6ab46ad9f5836f82e45bb6c
#: ../spack/lib/spack/docs/tutorial_configuration.rst:265
msgid "This new compiler also works on Fortran codes:"
msgstr ""

# 843ef565179041609611872ec73f6fcb
#: ../spack/lib/spack/docs/tutorial_configuration.rst:277
msgid ""
"Some compilers may require specific compiler flags to work properly in a "
"particular computing environment. Spack provides configuration options for "
"setting compiler flags every time a specific compiler is invoked. These "
"flags become part of the package spec and therefore of the build provenance. "
"As on the command line, the flags are set through the implicit build "
"variables ``cflags``, ``cxxflags``, ``cppflags``, ``fflags``, ``ldflags``, "
"and ``ldlibs``."
msgstr ""

# 9accda7bf91a4927862b13c39a328fbd
#: ../spack/lib/spack/docs/tutorial_configuration.rst:285
msgid ""
"Let's open our compilers configuration file again and add a compiler flag."
msgstr ""

# 79e77165d7e94515a4bd611e403294d5
#: ../spack/lib/spack/docs/tutorial_configuration.rst:305
msgid ""
"We can test this out using the ``spack spec`` command to show how the spec "
"is concretized."
msgstr ""

# 3b7c641fa77f41cfa0eb2af7b3219ad1
#: ../spack/lib/spack/docs/tutorial_configuration.rst:325
msgid ""
"We can see that ``cppflags=\"-g\"`` has been added to every node in the DAG."
msgstr ""

# 030e6ce17de241cf99c3b6e58b2a36a7
#: ../spack/lib/spack/docs/tutorial_configuration.rst:329
msgid "Advanced Compiler Configuration"
msgstr ""

# da4305f0f2c344b6834cccb234006f3e
#: ../spack/lib/spack/docs/tutorial_configuration.rst:331
msgid ""
"There are three fields of the compiler configuration entry that we have not "
"yet talked about."
msgstr ""

# c9936c5ad54545f0b7375223aad67f94
#: ../spack/lib/spack/docs/tutorial_configuration.rst:334
msgid ""
"The ``modules`` field of the compiler is used primarily on Cray systems, but "
"can be useful on any system that has compilers that are only useful when a "
"particular module is loaded. Any modules in the ``modules`` field of the "
"compiler configuration will be loaded as part of the build environment for "
"packages using that compiler."
msgstr ""

# e7357faac7b94e23ac99f777ca72436d
#: ../spack/lib/spack/docs/tutorial_configuration.rst:340
msgid ""
"The ``extra_rpaths`` field of the compiler configuration is used for "
"compilers that do not rpath all of their dependencies by default. Since "
"compilers are often installed externally to Spack, Spack is unable to manage "
"compiler dependencies and enforce rpath usage. This can lead to packages not "
"finding link dependencies imposed by the compiler properly. For compilers "
"that impose link dependencies on the resulting executables that are not "
"rpath'ed into the executable automatically, the ``extra_rpaths`` field of "
"the compiler configuration tells Spack which dependencies to rpath into "
"every executable created by that compiler. The executables will then be able "
"to find the link dependencies imposed by the compiler. As an example, this "
"field can be set by"
msgstr ""

# 5e2a71be84da4ebaaff6dcca6c6008c2
#: ../spack/lib/spack/docs/tutorial_configuration.rst:362
msgid ""
"The ``environment`` field of the compiler configuration is used for "
"compilers that require environment variables to be set during build time. "
"For example, if your Intel compiler suite requires the "
"``INTEL_LICENSE_FILE`` environment variable to point to the proper license "
"server, you can set this in ``compilers.yaml`` as follows:"
msgstr ""

# ec328a4369e94834aa2e0af8da0d1a5c
#: ../spack/lib/spack/docs/tutorial_configuration.rst:377
msgid ""
"In addition to ``set``, ``environment`` also supports ``unset``, ``prepend-"
"path``, and ``append-path``."
msgstr ""

# b1558765441a4c988826cbceb939b412
#: ../spack/lib/spack/docs/tutorial_configuration.rst:384
msgid "Configuring Package Preferences"
msgstr ""

# bba96bbafe2c426489e311768b1a5311
#: ../spack/lib/spack/docs/tutorial_configuration.rst:386
msgid ""
"Package preferences in Spack are managed through the ``packages.yaml`` "
"configuration file. First, we will look at the default ``packages.yaml`` "
"file."
msgstr ""

# c5530bafddbc4683956d66042301cad5
#: ../spack/lib/spack/docs/tutorial_configuration.rst:399
msgid ""
"This sets the default preferences for compilers and for providers of virtual "
"packages. To illustrate how this works, suppose we want to change the "
"preferences to prefer the Clang compiler and to prefer MPICH over OpenMPI. "
"Currently, we prefer GCC and OpenMPI."
msgstr ""

# ff8a5c4b0e4d46ae825f6fc81ffad39c
#: ../spack/lib/spack/docs/tutorial_configuration.rst:434
msgid ""
"Now we will open the packages configuration file and update our preferences."
msgstr ""

# 182f402088324dccb2935406ac8d5195
#: ../spack/lib/spack/docs/tutorial_configuration.rst:451
msgid ""
"Because of the configuration scoping we discussed earlier, this overrides "
"the default settings just for these two items."
msgstr ""

# 43f076c7e13d4f91a80a44f8fc69647f
#: ../spack/lib/spack/docs/tutorial_configuration.rst:482
msgid "Variant Preferences"
msgstr ""

# c517c4703a394dd9a8757a7db4c945b5
#: ../spack/lib/spack/docs/tutorial_configuration.rst:484
msgid ""
"The packages configuration file can also set variant preferences for package "
"variants. For example, let's change our preferences to build all packages "
"without shared libraries. We will accomplish this by turning off the "
"``shared`` variant on all packages that have one."
msgstr ""

# 2521dabeb92045678ad12f75221af888
#: ../spack/lib/spack/docs/tutorial_configuration.rst:499
msgid "We can check the effect of this command with ``spack spec hdf5`` again."
msgstr ""

# 1b29a01bc3914d639ba8ac422fa66bf9
#: ../spack/lib/spack/docs/tutorial_configuration.rst:527
msgid ""
"So far we have only made global changes to the package preferences. As we've "
"seen throughout this tutorial, hdf5 builds with MPI enabled by default in "
"Spack. If we were working on a project that would routinely need serial "
"hdf5, that might get annoying quickly, having to type ``hdf5~mpi`` all the "
"time. Instead, we'll update our preferences for hdf5."
msgstr ""

# 5e1feeec846641ae968433ff943ab256
#: ../spack/lib/spack/docs/tutorial_configuration.rst:546
msgid "Now hdf5 will concretize without an MPI dependency by default."
msgstr ""

# 0431fd1241a64df6b97e02f07039b204
#: ../spack/lib/spack/docs/tutorial_configuration.rst:561
msgid ""
"In general, every attribute that we can set for all packages we can set "
"separately for an individual package."
msgstr ""

# 228d877d03884e0e8ade9ef829b5bacd
#: ../spack/lib/spack/docs/tutorial_configuration.rst:568
msgid ""
"The packages configuration file also controls when Spack will build against "
"an externally installed package. On these systems we have a pre-installed "
"zlib."
msgstr ""

# 1780eb3b7f6b4e8d9cc8b0f909304b9b
#: ../spack/lib/spack/docs/tutorial_configuration.rst:587
msgid ""
"Here, we've told Spack that zlib 1.2.8 is installed on our system. We've "
"also told it the installation prefix where zlib can be found. We don't know "
"exactly which variants it was built with, but that's okay."
msgstr ""

# a5ba73b8992f4f51a14d6c7365533840
#: ../spack/lib/spack/docs/tutorial_configuration.rst:605
msgid ""
"You'll notice that Spack is now using the external zlib installation, but "
"the compiler used to build zlib is now overriding our compiler preference of "
"clang. If we explicitly specify clang:"
msgstr ""

# a158c662495e4fa482d56e3ef8eb1b2b
#: ../spack/lib/spack/docs/tutorial_configuration.rst:622
msgid ""
"Spack concretizes to both hdf5 and zlib being built with clang. This has a "
"side-effect of rebuilding zlib. If we want to force Spack to use the system "
"zlib, we have two choices. We can either specify it on the command line, or "
"we can tell Spack that it's not allowed to build its own zlib. We'll go with "
"the latter."
msgstr ""

# 82d1a9ef94cd4012b765b998d0d70f9b
#: ../spack/lib/spack/docs/tutorial_configuration.rst:644
msgid "Now Spack will be forced to choose the external zlib."
msgstr ""

# bca63fd2399e4c96965d8398a871cdb8
#: ../spack/lib/spack/docs/tutorial_configuration.rst:659
msgid ""
"This gets slightly more complicated with virtual dependencies. Suppose we "
"don't want to build our own MPI, but we now want a parallel version of hdf5? "
"Well, fortunately we have mpich installed on these systems."
msgstr ""

# 3027803da5f44a8581fce8fb0bc2feff
#: ../spack/lib/spack/docs/tutorial_configuration.rst:683
msgid ""
"If we concretize ``hdf5+mpi`` with this configuration file, we will just "
"build with an alternate MPI implementation."
msgstr ""

# 9d9a7da5c29d42d5bc912ea4e8217c58
#: ../spack/lib/spack/docs/tutorial_configuration.rst:716
msgid ""
"We have only expressed a preference for mpich over other MPI "
"implementations, and Spack will happily build with one we haven't forbid it "
"from building. We could resolve this by requesting ``hdf5%clang+mpi^mpich`` "
"explicitly, or we can configure Spack not to use any other MPI "
"implementation. Since we're focused on configurations here and the former "
"can get tedious, we'll need to modify our ``packages.yaml`` file again."
msgstr ""

# 9a78327d3c4343bfa7fdfab52ff9fc72
#: ../spack/lib/spack/docs/tutorial_configuration.rst:724
msgid ""
"While we're at it, we can configure hdf5 to build with MPI by default again."
msgstr ""

# 62c5ad5180814e64a6ca3d3be5193652
#: ../spack/lib/spack/docs/tutorial_configuration.rst:761
msgid ""
"Now that we have configured Spack not to build any of the possible providers "
"for MPI we can try again."
msgstr ""

# 06aa99ab4723407cb9bc8767528ea248
#: ../spack/lib/spack/docs/tutorial_configuration.rst:778
msgid ""
"By configuring most of our package preferences in ``packages.yaml``, we can "
"cut down on the amount of work we need to do when specifying a spec on the "
"command line. In addition to compiler and variant preferences, we can "
"specify version preferences as well. Anything that you can specify on the "
"command line can be specified in ``packages.yaml`` with the exact same spec "
"syntax."
msgstr ""

# 2f0651ab791c4980ba07cdb97c695fdb
#: ../spack/lib/spack/docs/tutorial_configuration.rst:787
msgid "Installation Permissions"
msgstr ""

# 3bb85ab8f5574d3fb24e0b6a7ca9a045
#: ../spack/lib/spack/docs/tutorial_configuration.rst:789
msgid ""
"The ``packages.yaml`` file also controls the default permissions to use when "
"installing a package. You'll notice that by default, the installation prefix "
"will be world readable but only user writable."
msgstr ""

# 93d80cc9ccc147df9e7295736f1e1596
#: ../spack/lib/spack/docs/tutorial_configuration.rst:793
msgid ""
"Let's say we need to install ``converge``, a licensed software package. "
"Since a specific research group, ``fluid_dynamics``, pays for this license, "
"we want to ensure that only members of this group can access the software. "
"We can do this like so:"
msgstr ""

# f9c06440c93542c9be8a581ec3a455e7
#: ../spack/lib/spack/docs/tutorial_configuration.rst:807
msgid ""
"Now, only members of the ``fluid_dynamics`` group can use any ``converge`` "
"installations."
msgstr ""

# dd59089399704d0993d37badf0cdcf2e
#: ../spack/lib/spack/docs/tutorial_configuration.rst:812
msgid ""
"Make sure to delete or move the ``packages.yaml`` you have been editing up "
"to this point. Otherwise, it will change the hashes of your packages, "
"leading to differences in the output of later tutorial sections."
msgstr ""

# d734501eae4b4a04be3deb56213e473d
#: ../spack/lib/spack/docs/tutorial_configuration.rst:820
msgid "High-level Config"
msgstr ""

# 78ae69a4b9564e63a30b9b6cff17783f
#: ../spack/lib/spack/docs/tutorial_configuration.rst:822
msgid ""
"In addition to compiler and package settings, Spack allows customization of "
"several high-level settings. These settings are stored in the generic "
"``config.yaml`` configuration file. You can see the default settings by "
"running:"
msgstr ""

# 7dce236a6dea4eaea91e6061ce17852b
#: ../spack/lib/spack/docs/tutorial_configuration.rst:836
msgid ""
"As you can see, many of the directories Spack uses can be customized. For "
"example, you can tell Spack to install packages to a prefix outside of the ``"
"$SPACK_ROOT`` hierarchy. Module files can be written to a central location "
"if you are using multiple Spack instances. If you have a fast scratch file "
"system, you can run builds from this file system with the following ``config."
"yaml``:"
msgstr ""

# 729d41d391f240778e9e721c89c686ce
#: ../spack/lib/spack/docs/tutorial_configuration.rst:850
msgid ""
"On systems with compilers that absolutely *require* environment variables "
"like ``LD_LIBRARY_PATH``, it is possible to prevent Spack from cleaning the "
"build environment with the ``dirty`` setting:"
msgstr ""

# aabc98f9421e4786ae52770aacf69ed5
#: ../spack/lib/spack/docs/tutorial_configuration.rst:860
msgid ""
"However, this is strongly discouraged, as it can pull unwanted libraries "
"into the build."
msgstr ""

# 36153067663c4fbaafa48631e4d727ac
#: ../spack/lib/spack/docs/tutorial_configuration.rst:863
msgid ""
"One last setting that may be of interest to many users is the ability to "
"customize the parallelism of Spack builds. By default, Spack installs all "
"packages in parallel with the number of jobs equal to the number of cores on "
"the node. For example, on a node with 16 cores, this will look like:"
msgstr ""

# 6fa64dbf17e84a35a729672cabb2dae8
#: ../spack/lib/spack/docs/tutorial_configuration.rst:890
msgid ""
"As you can see, we are building with all 16 cores on the node. If you are on "
"a shared login node, this can slow down the system for other users. If you "
"have a strict ulimit or restriction on the number of available licenses, you "
"may not be able to build at all with this many cores. On nodes with 64+ "
"cores, you may not see a significant speedup of the build anyway. To limit "
"the number of cores our build uses, set ``build_jobs`` like so:"
msgstr ""

# 138b2e4dd7014a0ea8ac9dd337216ba7
#: ../spack/lib/spack/docs/tutorial_configuration.rst:903
msgid ""
"If we uninstall and reinstall zlib, we see that it now uses only 4 cores:"
msgstr ""

# 9c45fda7e1de4a448c005dcb306c4300
#: ../spack/lib/spack/docs/tutorial_configuration.rst:926
msgid ""
"Obviously, if you want to build everything in serial for whatever reason, "
"you would set ``build_jobs`` to 1."
msgstr ""

# 1861b4667a07464bb6a9f01291c94a4b
#: ../spack/lib/spack/docs/tutorial_configuration.rst:931
msgid "Examples"
msgstr ""

# 34a7ef9b63d84550bbc7142439ba3f80
#: ../spack/lib/spack/docs/tutorial_configuration.rst:933
msgid ""
"For examples of how other sites configure Spack, see https://github.com/"
"spack/spack-configs. If you use Spack at your site and want to share your "
"config files, feel free to submit a pull request!"
msgstr ""

# 962818ea68654c049eaf2d6bfbc42c89
#: ../spack/lib/spack/docs/tutorial_environments.rst:10
msgid "Environments, ``spack.yaml``, and ``spack.lock``"
msgstr ""

# 7d6996bb283843e0905cdda676ca7f1f
#: ../spack/lib/spack/docs/tutorial_environments.rst:12
msgid ""
"We've shown you how to install and remove packages with Spack.  You can use :"
"ref:`cmd-spack-install` to install packages, :ref:`cmd-spack-uninstall` to "
"remove them, and :ref:`cmd-spack-find` to look at and query what is "
"installed.  We've also shown you how to customize Spack's installation with "
"configuration files like :ref:`packages.yaml <build-settings>`."
msgstr ""

# eb73675b9ab040cb8709f4d7024c8093
#: ../spack/lib/spack/docs/tutorial_environments.rst:19
msgid ""
"If you build a lot of software, or if you work on multiple projects, "
"managing everything in one place can be overwhelming. The default ``spack "
"find`` output may contain many packages, but you may want to *just* focus on "
"packages a particular project.  Moreover, you may want to include special "
"configuration with your package groups, e.g., to build all the packages in "
"the same group the same way."
msgstr ""

# c6cc981ae75e4a54b3906015c0dbd15c
#: ../spack/lib/spack/docs/tutorial_environments.rst:26
msgid "Spack **environments** provide a way to handle these problems."
msgstr ""

# b488659aaa0a49b9a62163e57f30d0d9
#: ../spack/lib/spack/docs/tutorial_environments.rst:30
msgid "Environment basics"
msgstr ""

# 15f06c9f4a0d49d994985bd1cad36377
#: ../spack/lib/spack/docs/tutorial_environments.rst:32
msgid ""
"Let's look at the output of ``spack find`` at this point in the tutorial."
msgstr ""

# 10d2fe50ab8f41e3bda660bbf129dbbf
#: ../spack/lib/spack/docs/tutorial_environments.rst:64
msgid ""
"This is a complete, but cluttered view.  There are packages built with both "
"``openmpi`` and ``mpich``, as well as multiple variants of other packages, "
"like ``zlib``.  The query mechanism we learned about in ``spack find`` can "
"help, but it would be nice if we could start from a clean slate without "
"losing what we've already done."
msgstr ""

# 3ded6a30be5b41009d406c9f4d578381
#: ../spack/lib/spack/docs/tutorial_environments.rst:73
msgid "Creating and activating environments"
msgstr ""

# ab4651c92d2b46af8b890a82b82b0eb3
#: ../spack/lib/spack/docs/tutorial_environments.rst:75
msgid "The ``spack env`` command can help.  Let's create a new environment:"
msgstr ""

# f0eaa7512e5f49ea9dff277b96f50067
#: ../spack/lib/spack/docs/tutorial_environments.rst:82
msgid ""
"An environment is a virtualized ``spack`` instance that you can use for a "
"specific purpose.  You can see the environments we've created so far like "
"this:"
msgstr ""

# ae68e4fcb6d54deaa8af73ac59df365d
#: ../spack/lib/spack/docs/tutorial_environments.rst:91
msgid "And you can **activate** an environment with ``spack env activate``:"
msgstr ""

# ea81800bdb8a496384007fe3a10a3f20
#: ../spack/lib/spack/docs/tutorial_environments.rst:97
msgid ""
"Once you enter an environment, ``spack find`` shows only what is in the "
"current environment.  That's nothing, so far:"
msgstr ""

# e2bcb774dfe24208923dc85842947505
#: ../spack/lib/spack/docs/tutorial_environments.rst:108
msgid ""
"The ``spack find`` output is still *slightly* different.  It tells you that "
"you're in the ``myproject`` environment, so that you don't panic when you "
"see that there is nothing installed.  It also says that there are *no root "
"specs*.  We'll get back to what that means later."
msgstr ""

# a3ab0592dd23462f84fe8259e77e4ffb
#: ../spack/lib/spack/docs/tutorial_environments.rst:113
msgid ""
"If you *only* want to check what environment you are in, you can use ``spack "
"env status``:"
msgstr ""

# 18a624d36fee46f5ba07d31944e8025e
#: ../spack/lib/spack/docs/tutorial_environments.rst:121
msgid ""
"And, if you want to leave this environment and go back to normal Spack, you "
"can use ``spack env deactivate``.  We like to use the ``despacktivate`` "
"alias (which Spack sets up automatically) for short:"
msgstr ""

# 9f7a8c00f984463da2463f0be11e1570
#: ../spack/lib/spack/docs/tutorial_environments.rst:141
msgid "Installing packages"
msgstr ""

# f66f36cfaf2b45af9efd95544909b54d
#: ../spack/lib/spack/docs/tutorial_environments.rst:143
msgid ""
"Ok, now that we understand how creation and activation work, let's go back "
"to ``myproject`` and *install* a few packages:"
msgstr ""

# 4d064b9216bb42479abf383dd7c493ac
#: ../spack/lib/spack/docs/tutorial_environments.rst:165
msgid ""
"We've installed ``tcl`` and ``trilinos`` in our environment, along with all "
"of their dependencies.  We call ``tcl`` and ``trilinos`` the **roots** "
"because we asked for them explicitly.  The other 20 packages listed under "
"\"installed packages\" are present because they were needed as "
"dependencies.  So, these are the roots of the packages' dependency graph."
msgstr ""

# c5b6399102f640c499019f7d9ceae28f
#: ../spack/lib/spack/docs/tutorial_environments.rst:171
msgid ""
"The \"<package> is already installed\" messages above are generated because "
"we already installed these packages in previous steps of the tutorial, and "
"we don't have to rebuild them to put them in an environment."
msgstr ""

# a7fb0160e04b449ba6c1ca5ba214d5f2
#: ../spack/lib/spack/docs/tutorial_environments.rst:175
msgid ""
"Now let's create *another* project.  We'll call this one ``myproject2``:"
msgstr ""

# 2ddd713a3c5844ca9929c0e7245f1d02
#: ../spack/lib/spack/docs/tutorial_environments.rst:198
msgid ""
"Now we have two environments: one with ``tcl`` and ``trilinos``, and another "
"with ``hdf5`` and ``trilinos``."
msgstr ""

# 05f21380cf724ccb85ba97096ccb1d4c
#: ../spack/lib/spack/docs/tutorial_environments.rst:201
msgid "We can uninstall trilinos from ``myproject2`` as you would expect:"
msgstr ""

# 1389899f48154c6f91159562740dcacf
#: ../spack/lib/spack/docs/tutorial_environments.rst:221
msgid ""
"Now there is only one root spec, ``hdf5``, which requires fewer additional "
"dependencies."
msgstr ""

# 305d6ae6f4dc4aec91124435886087bc
#: ../spack/lib/spack/docs/tutorial_environments.rst:224
msgid ""
"However, we still needed ``trilinos`` for the ``myproject`` environment! "
"What happened to it?  Let's switch back and see."
msgstr ""

# 6a0b3ab17b1c409b9b0beeb550a0a4a1
#: ../spack/lib/spack/docs/tutorial_environments.rst:244
msgid ""
"Spack is smart enough to realize that ``trilinos`` is still present in the "
"other environment.  Trilinos won't *actually* be uninstalled unless it is no "
"longer needed by any environments or packages.  If it is still needed, it is "
"only removed from the environment."
msgstr ""

# 26b5a11403fd47c19e73e88ecacad9fa
#: ../spack/lib/spack/docs/tutorial_environments.rst:251
msgid "Dealing with many specs at once"
msgstr ""

# 380bb79e4ba044b982925e7dc619067c
#: ../spack/lib/spack/docs/tutorial_environments.rst:253
msgid ""
"In the above examples, we just used ``install`` and ``uninstall``.  There "
"are other ways to deal with groups of packages, as well."
msgstr ""

# 9ce9868e85bd4be9a0b96086dbdd0a34
#: ../spack/lib/spack/docs/tutorial_environments.rst:258
msgid "Adding specs"
msgstr ""

# 43cce3d74dd5449085cd68eacebc4374
#: ../spack/lib/spack/docs/tutorial_environments.rst:260
msgid ""
"Let's go back to our first ``myproject`` environment and *add* a few specs "
"instead of installing them:"
msgstr ""

# 0c375bc5fc37471db21b26e6e62200f7
#: ../spack/lib/spack/docs/tutorial_environments.rst:280
msgid ""
"Let's take a close look at what happened.  The two packages we added, "
"``hdf5`` and ``gmp``, are present, but they're not installed in the "
"environment yet.  ``spack add`` just adds *roots* to the environment, but it "
"does not automatically install them."
msgstr ""

# af8623e44abc4ab0baf623ce0d705912
#: ../spack/lib/spack/docs/tutorial_environments.rst:285
msgid ""
"We can install *all* the as-yet uninstalled packages in an environment by "
"simply running ``spack install`` with no arguments:"
msgstr ""

# 4f7aff0e06c745259d7e44d6b41e0b18
#: ../spack/lib/spack/docs/tutorial_environments.rst:329
msgid ""
"Spack will concretize the new roots, and install everything you added to the "
"environment.  Now we can see the installed roots in the output of ``spack "
"find``:"
msgstr ""

# dc5429f31cb74cb19ae877a8bbd7edce
#: ../spack/lib/spack/docs/tutorial_environments.rst:347
msgid ""
"We can build whole environments this way, by adding specs and installing all "
"at once, or we can install them with the usual ``install`` and ``uninstall`` "
"portions.  The advantage to doing them all at once is that we don't have to "
"write a script outside of Spack to automate this, and we can kick off a "
"large build of many packages easily."
msgstr ""

# 489edb4313a54004a49472342f075589
#: ../spack/lib/spack/docs/tutorial_environments.rst:357
msgid ""
"So far, ``myproject`` does not have any special configuration associated "
"with it.  The specs concretize using Spack's defaults:"
msgstr ""

# ac2e4781c8124ff19a523be7e24416fc
#: ../spack/lib/spack/docs/tutorial_environments.rst:390
msgid ""
"You may want to add extra configuration to your environment.  You can see "
"how your environment is configured using ``spack config get``:"
msgstr ""

# c21d74d58dd84f8798fa003b9a8b3041
#: ../spack/lib/spack/docs/tutorial_environments.rst:404
msgid ""
"It turns out that this is a special configuration format where Spack stores "
"the state for the environment. Currently, the file is just a ``spack:`` "
"header and a list of ``specs``.  These are the roots."
msgstr ""

# 697b640e7059476793d20d18ff2315d4
#: ../spack/lib/spack/docs/tutorial_environments.rst:408
msgid ""
"You can edit this file to add your own custom configuration.  Spack provides "
"a shortcut to do that:"
msgstr ""

# 633249714e4549d6ab2bbef7359ff48c
#: ../spack/lib/spack/docs/tutorial_environments.rst:415
msgid "You should now see the same file, and edit it to look like this:"
msgstr ""

# 9ad02b8b3ba94b9ea9fa4457cc24a5c7
#: ../spack/lib/spack/docs/tutorial_environments.rst:432
msgid ""
"Now if we run ``spack spec`` again in the environment, specs will concretize "
"with ``mpich`` as the MPI implementation:"
msgstr ""

# 577d8e69c6cf4450bd4c14b35483efe2
#: ../spack/lib/spack/docs/tutorial_environments.rst:459
msgid ""
"In addition to the ``specs`` section, an environment's configuration can "
"contain any of the configuration options from Spack's various config "
"sections. You can add custom repositories, a custom install location, custom "
"compilers, or custom external packages, in addition to the ``package`` "
"preferences we show here."
msgstr ""

# b4379605521448208c03619e5c2548b1
#: ../spack/lib/spack/docs/tutorial_environments.rst:465
msgid ""
"But now we have a problem.  We already installed part of this environment "
"with openmpi, but now we want to install it with ``mpich``."
msgstr ""

# 0b4e4f3f06594aa0bd7efd9e32b068ec
#: ../spack/lib/spack/docs/tutorial_environments.rst:468
msgid ""
"You can run ``spack concretize`` inside of an environment to concretize all "
"of its specs.  We can run it here:"
msgstr ""

# dd458421ee3b430f8b2733c74b2307cf
#: ../spack/lib/spack/docs/tutorial_environments.rst:538
msgid ""
"Now, all the specs in the environment are concrete and ready to be installed "
"with ``mpich`` as the MPI implementation."
msgstr ""

# 1963f7504ba14839889b639a0f19ae73
#: ../spack/lib/spack/docs/tutorial_environments.rst:541
msgid ""
"Normally, we could just run ``spack config edit``, edit the environment "
"configuration, ``spack add`` some specs, and ``spack install``."
msgstr ""

# 73ad8b5796f545b0ad75efa7694fe35c
#: ../spack/lib/spack/docs/tutorial_environments.rst:544
msgid ""
"But, when we already have installed packages in the environment, we have to "
"force everything in the environment to be re-concretized using ``spack "
"concretize -f``.  *Then* we can re-run ``spack install``."
msgstr ""

# 1a1a36b6cda74f48b9e36908477aba43
#: ../spack/lib/spack/docs/tutorial_environments.rst:551
msgid "``spack.yaml`` and ``spack.lock``"
msgstr ""

# 852655b5c0b14edf99ec1a2af69e24b0
#: ../spack/lib/spack/docs/tutorial_environments.rst:553
msgid ""
"So far we've shown you how to interact with environments from the command "
"line, but they also have a file-based interface that can be used by "
"developers and admins to manage workflows for projects."
msgstr ""

# 31fb658b66594d049a62afadb141c632
#: ../spack/lib/spack/docs/tutorial_environments.rst:557
msgid ""
"In this section we'll dive a little deeper to see how environments are "
"implemented, and how you could use this in your day-to-day development."
msgstr ""

# b1cf31c8db0b4ce38e805e2ebc9a7100
#: ../spack/lib/spack/docs/tutorial_environments.rst:562
msgid "``spack.yaml``"
msgstr ""

# d2c6c36741a74d67a72e5c0a3a0f3afb
#: ../spack/lib/spack/docs/tutorial_environments.rst:564
msgid ""
"Earlier, we changed an environment's configuration using ``spack config "
"edit``.  We were actually editing a special file called ``spack.yaml``. "
"Let's take a look."
msgstr ""

# daa7b4ce13724eb4bb04c495a98d2ef8
#: ../spack/lib/spack/docs/tutorial_environments.rst:568
msgid ""
"We can get directly to the current environment's location using ``spack cd``:"
msgstr ""

# e493a5c4e7d64bbf9117fd80a734b6b6
#: ../spack/lib/spack/docs/tutorial_environments.rst:578
msgid ""
"We notice two things here.  First, the environment is just a directory "
"inside of ``var/spack/environments`` within the Spack installation. Second, "
"it contains two important files: ``spack.yaml`` and ``spack.lock``."
msgstr ""

# 947e26a9dc254fa1aa2858713d080a4a
#: ../spack/lib/spack/docs/tutorial_environments.rst:583
msgid ""
"``spack.yaml`` is the configuration file for environments that we've already "
"seen, but it does not *have* to live inside Spack.  If you create an "
"environment using ``spack env create``, it is *managed* by Spack in the "
"``var/spack/environments`` directory, and you can refer to it by name."
msgstr ""

# e73843e9077c4344af47e73fb7cd2925
#: ../spack/lib/spack/docs/tutorial_environments.rst:589
msgid ""
"You can actually put a ``spack.yaml`` file *anywhere*, and you can use it to "
"bundle an environment, or a list of dependencies to install, with your "
"project.  Let's make a simple project:"
msgstr ""

# 59b9636c3cbd496e92faf754ff21c9d9
#: ../spack/lib/spack/docs/tutorial_environments.rst:601
msgid ""
"Here, we made a new directory called *code*, and we used the ``-d`` option "
"to create an environment in it."
msgstr ""

# 64b4f4e24369400c99b4a76d957c8149
#: ../spack/lib/spack/docs/tutorial_environments.rst:604
msgid "What really happened?"
msgstr ""

# 106645e0ed66451bb15471b43962e8c1
#: ../spack/lib/spack/docs/tutorial_environments.rst:619
msgid ""
"Spack just created a ``spack.yaml`` file in the code directory, with an "
"empty list of root specs.  Now we have a Spack environment, *in a "
"directory*, that we can use to manage dependencies.  Suppose your project "
"depends on ``boost``, ``trilinos``, and ``openmpi``.  You can add these to "
"your spec list:"
msgstr ""

# 769b6f7da5144026a13f10f74446248a
#: ../spack/lib/spack/docs/tutorial_environments.rst:638
msgid ""
"And now *anyone* who uses the *code* repository can use this format to "
"install the project's dependencies.  They need only clone the repository, "
"``cd`` into it, and type ``spack install``:"
msgstr ""

# d69df704bcf64abd8a141c5c5d125173
#: ../spack/lib/spack/docs/tutorial_environments.rst:711
msgid ""
"Spack concretizes the specs in the ``spack.yaml`` file and installs them."
msgstr ""

# 29554324110742c280e2fc6120fc5a7b
#: ../spack/lib/spack/docs/tutorial_environments.rst:713
msgid ""
"What happened here?  If you ``cd`` into a directory tha has a ``spack.yaml`` "
"file in it, Spack considers this directory's environment to be activated.  "
"The directory does not have to live within Spack; it can be anywhere."
msgstr ""

# 3d3dbb4934204c95aa0556ce7a476897
#: ../spack/lib/spack/docs/tutorial_environments.rst:718
msgid ""
"So, from ``~/code``, we can actually manipulate ``spack.yaml`` using ``spack "
"add`` and ``spack remove`` (just like managed environments):"
msgstr ""

# 39d88e5ff63d4f00871277615233f227
#: ../spack/lib/spack/docs/tutorial_environments.rst:755
msgid "``spack.lock``"
msgstr ""

# 3734a5644b764d5f8fc29f9c0e19d5e9
#: ../spack/lib/spack/docs/tutorial_environments.rst:757
msgid ""
"Ok, we've covered managed environments, environments in directories, and the "
"last thing we'll cover is ``spack.lock``. You may remember that when we ran "
"``spack install``, Spack concretized all the specs in the ``spack.yaml`` "
"file and installed them."
msgstr ""

# c00592d0924f465bb55b2011619d6a8f
#: ../spack/lib/spack/docs/tutorial_environments.rst:762
msgid ""
"Whenever we concretize Specs in an environment, all concrete specs in the "
"environment are written out to a ``spack.lock`` file *alongside* ``spack."
"yaml``.  The ``spack.lock`` file is not really human-readable like the "
"``spack.yaml`` file.  It is a ``json`` format that contains all the "
"information that we need to ``reproduce`` the build of an environment:"
msgstr ""

# aa52306ac09c4c769b9c3a53387aa3af
#: ../spack/lib/spack/docs/tutorial_environments.rst:784
msgid ""
"``spack.yaml`` and ``spack.lock`` correspond to two fundamental concepts in "
"Spack, but for environments:"
msgstr ""

# 58908e92ee264cb08d804bd45c67db56
#: ../spack/lib/spack/docs/tutorial_environments.rst:787
msgid ""
"``spack.yaml`` is the set of *abstract* specs and configuration that you "
"want to install."
msgstr ""

# f5cc11bd28324cc4b380c9e2ef345657
#: ../spack/lib/spack/docs/tutorial_environments.rst:789
msgid ""
"``spack.lock`` is the set of all fully *concretized* specs generated from "
"concretizing ``spack.yaml``"
msgstr ""

# e3916ad591724b9399dfcb6ac5333548
#: ../spack/lib/spack/docs/tutorial_environments.rst:792
msgid ""
"Using either of these, you can recreate an environment that someone else "
"built.  ``spack env create`` takes an extra optional argument, which can be "
"either a ``spack.yaml`` or a ``spack.lock`` file:"
msgstr ""

# 5b747866175f4bbc90e79aba895f5358
#: ../spack/lib/spack/docs/tutorial_environments.rst:802
msgid ""
"Both of these create a new environment called ``my-project``, but which one "
"you choose to use depends on your needs:"
msgstr ""

# 6b6aa4d0a8ed4c798b5f56ae6ac01005
#: ../spack/lib/spack/docs/tutorial_environments.rst:805
msgid ""
"copying the yaml file allows someone else to build your *requirements*, "
"potentially a different way."
msgstr ""

# 92204050321c4a7983d0d39638fea9a6
#: ../spack/lib/spack/docs/tutorial_environments.rst:808
msgid ""
"copying the lock file allows someone else to rebuild your *installation* "
"exactly as you built it."
msgstr ""

# b2688d138b25420a891994f5f97830c2
#: ../spack/lib/spack/docs/tutorial_environments.rst:811
msgid ""
"The first use case can *re-concretize* the same specs on new platforms in "
"order to build, but it will preserve the abstract requirements.  The second "
"use case (currently) requires you to be on the same machine, but it retains "
"all decisions made during concretization and is faithful to a prior install."
msgstr ""

# d083e7ff5d9c4f73895b9a4686258ce1
#: ../spack/lib/spack/docs/tutorial_modules.rst:10
msgid "Module Files"
msgstr ""

# 575494ba2ed94d43ae83f20536758d5f
#: ../spack/lib/spack/docs/tutorial_modules.rst:12
msgid ""
"In this tutorial, we'll introduce a few concepts that are fundamental to the "
"generation of module files with Spack, and we'll guide you through the "
"customization of both module files content and their layout on disk. In the "
"end you should have a clear understanding of:"
msgstr ""

# 423e9885bc56479cb6f4c619449bb840
#: ../spack/lib/spack/docs/tutorial_modules.rst:17
msgid "What are module files and how they work"
msgstr ""

# a531085fd4c448cd875e8204a5d86dcf
#: ../spack/lib/spack/docs/tutorial_modules.rst:18
msgid "How Spack generates them"
msgstr ""

# 70a4341e1c5a4fe8a3dc572182e42405
#: ../spack/lib/spack/docs/tutorial_modules.rst:19
msgid "Which commands are available to ease their maintenance"
msgstr ""

# 9933dcaba986408b8477c5cbb3281768
#: ../spack/lib/spack/docs/tutorial_modules.rst:20
msgid "How it is possible to customize them in all aspects"
msgstr ""

# e945f6a6a2a34296b201eb7a5e00e639
#: ../spack/lib/spack/docs/tutorial_modules.rst:26
msgid "Modules at a glance"
msgstr ""

# ba847a5e705f48d9b6ee3678b885ab2b
#: ../spack/lib/spack/docs/tutorial_modules.rst:28
msgid ""
"Let's start by summarizing what module files are and how you can use them to "
"modify your environment. The idea is to give enough information so that "
"people without any previous exposure to them will be able to follow the "
"tutorial later on. We'll also give a high-level view of how module files are "
"generated in Spack. If you are already familiar with these topics you can "
"quickly skim through this section or move directly to :ref:"
"`module_file_tutorial_prerequisites`."
msgstr ""

# a435ba610f2a42898a81319793a726a8
#: ../spack/lib/spack/docs/tutorial_modules.rst:39
msgid "What are module files?"
msgstr ""

# 3bf50413aae241388e2dac4375a6eb68
#: ../spack/lib/spack/docs/tutorial_modules.rst:41
msgid ""
"Module files are an easy way to modify your environment in a controlled "
"manner during a shell session. In general, they contain the information "
"needed to run an application or use a library, and they work in conjunction "
"with a tool that interprets them. Typical module files instruct this tool to "
"modify the environment variables when a module file is loaded:"
msgstr ""

# f97f4021486d4935a882a4780bd75516
#: ../spack/lib/spack/docs/tutorial_modules.rst:69
msgid "and to undo the modifications when the same module file is unloaded:"
msgstr ""

# 4323656efe974365b253c5fa0297bef7
#: ../spack/lib/spack/docs/tutorial_modules.rst:78
msgid ""
"Different formats exist for module files, and different tools provide "
"various levels of support for them. Spack can natively generate:"
msgstr ""

# a166063f151c4f88819c8fe31716f09b
#: ../spack/lib/spack/docs/tutorial_modules.rst:81
msgid "Non-hierarchical module files written in TCL"
msgstr ""

# a41d2fe4e49b48598cb14b4a7af66d56
#: ../spack/lib/spack/docs/tutorial_modules.rst:82
msgid "Hierarchical module files written in Lua"
msgstr ""

# 7d89d07af0ad4df0921bb5459a8921a6
#: ../spack/lib/spack/docs/tutorial_modules.rst:84
msgid ""
"and can build `environment-modules <http://modules.sourceforge.net/>`_ and "
"`lmod <http://lmod.readthedocs.io/en/latest>`_ as support tools. Which of "
"the formats or tools best suits one's needs depends on each particular use-"
"case. For the sake of illustration, we'll be working on both formats using "
"``lmod``."
msgstr ""

# 6e760a4113574aaba5393237a60c648b
#: ../spack/lib/spack/docs/tutorial_modules.rst:97
msgid "Environment modules"
msgstr ""

# e22dd678ff5f45718f771f93903529a1
#: ../spack/lib/spack/docs/tutorial_modules.rst:92
msgid ""
"This is the original tool that provided modules support. Its first version "
"was coded in C in the early '90s and was later substituted by a version "
"completely coded in TCL - the one Spack is distributing. More details on its "
"features are given in the `homepage of the project <http://modules."
"sourceforge.net/>`_ or in its `github page <https://github.com/cea-hpc/"
"modules>`_. The tool is able to interpret the non-hierarchical TCL "
"modulefiles written by Spack."
msgstr ""

# 81281472e0b742d893283139f2caefbc
#: ../spack/lib/spack/docs/tutorial_modules.rst:106
msgid "Lmod"
msgstr ""

# e3bfb537d8f84979b1b7573b9efd5dfc
#: ../spack/lib/spack/docs/tutorial_modules.rst:100
msgid ""
"Lmod is a module system written in Lua, designed to easily handle "
"hierarchies of module files. It's a drop-in replacement of Environment "
"Modules and works with both of the module file formats generated by Spack. "
"Despite being fully compatible with Environment Modules there are many "
"features that are unique to Lmod. These features are either `targeted "
"towards safety <http://lmod.readthedocs.io/en/latest/010_user.html#safety-"
"features>`_ or meant to `extend the module system functionality <http://lmod."
"readthedocs.io/en/latest/010_user.html#module-hierarchy>`_."
msgstr ""

# c21a5c331dd74babad5f23f559c552d0
#: ../spack/lib/spack/docs/tutorial_modules.rst:112
msgid "How do we generate module files?"
msgstr ""

# e9a7a253d39641ca91170a7de9bd5013
#: ../spack/lib/spack/docs/tutorial_modules.rst:114
msgid ""
"Before  we dive into the hands-on sections it's worth spending a couple of "
"words to explain how module files are generated by Spack. The following "
"diagram provides a high-level view of the process:"
msgstr ""

# 0438a7fc468c4187b0798e65da29f752
#: ../spack/lib/spack/docs/tutorial_modules.rst:121
msgid ""
"The red dashed line above represents Spack's boundaries, the blue one "
"Spack's dependencies [#f1]_. Module files are generated by combining:"
msgstr ""

# 7765da36da264313a656376523ff66a5
#: ../spack/lib/spack/docs/tutorial_modules.rst:124
msgid "the configuration details in ``config.yaml`` and ``modules.yaml``"
msgstr ""

# 8c79bc8abbab4e7cabd2b7d26b11fffa
#: ../spack/lib/spack/docs/tutorial_modules.rst:125
msgid ""
"the information contained in Spack packages (and processed by the module "
"subpackage)"
msgstr ""

# c8ba9b481bea4cee98718b11d25bac07
#: ../spack/lib/spack/docs/tutorial_modules.rst:126
msgid "a set of template files"
msgstr ""

# 6ee45350aba54ec292b68e20cda802bc
#: ../spack/lib/spack/docs/tutorial_modules.rst:128
msgid ""
"with `Jinja2 <http://jinja.pocoo.org/docs/2.9/>`_, an external template "
"engine that stamps out each particular module file. As Spack serves very "
"diverse needs this process has many points of customization, and we'll "
"explore most of them in the next sections."
msgstr ""

# 5b643a7bdba04d89b1d7a88a4e927f07
#: ../spack/lib/spack/docs/tutorial_modules.rst:133
msgid ""
"Spack vendors its dependencies! This means that Spack comes with a copy of "
"each one of its dependencies, including ``Jinja2``, and is already "
"configured to use them."
msgstr ""

# 52a50077b8024707a0afa759dc411864
#: ../spack/lib/spack/docs/tutorial_modules.rst:142
msgid ""
"In order to showcase the capabilities of Spack's module file generation, we "
"need a representative set of software to work with. This set must include "
"different flavors of the same packages installed alongside each other and "
"some :ref:`external packages <sec-external-packages>`."
msgstr ""

# 5be4901ba26b406ebbb9deba100a08fe
#: ../spack/lib/spack/docs/tutorial_modules.rst:147
msgid ""
"The purpose of this setup is not to make our life harder but to demonstrate "
"how Spack can help with similar situations, as they will happen on real HPC "
"clusters. For instance, it's often preferable for Spack to use vendor-"
"provided MPI implementations than to build one itself."
msgstr ""

# a9096df9a55046a5aaae2b25fefeebc2
#: ../spack/lib/spack/docs/tutorial_modules.rst:152
msgid ""
"To keep the set of software we're dealing with manageable, we're going to "
"uninstall everything from earlier in the tutorial."
msgstr ""

# a4e306fd58ef4047bf71a58894527030
#: ../spack/lib/spack/docs/tutorial_modules.rst:161
msgid "Build a module tool"
msgstr ""

# 66f427fa5ba24a0daa72cae4d1bde8e5
#: ../spack/lib/spack/docs/tutorial_modules.rst:163
msgid ""
"The first thing that we need is the module tool. In this case we choose "
"``lmod`` as it can work with both hierarchical and non-hierarchical module "
"file layouts."
msgstr ""

# f5525c9a991f464f8dfea1fe59336ebd
#: ../spack/lib/spack/docs/tutorial_modules.rst:171
msgid ""
"Once the module tool is installed we need to have it available in the "
"current shell. As the installation directories are definitely not easy to "
"remember, we'll employ the command ``spack location`` to retrieve the "
"``lmod`` prefix directly from Spack:"
msgstr ""

# b567633496d94e57973492a79bb56252
#: ../spack/lib/spack/docs/tutorial_modules.rst:180
msgid ""
"Now we can re-source the setup file and Spack modules will be put in our "
"module path."
msgstr ""

# ac6e5b73218348cc8cfd873efce4d635
#: ../spack/lib/spack/docs/tutorial_modules.rst:196
msgid "Add a new compiler"
msgstr ""

# 3d930477bca94cd29148894fe2d2ff10
#: ../spack/lib/spack/docs/tutorial_modules.rst:198
msgid ""
"The second step is to build a recent compiler. On first use, Spack scans the "
"environment and automatically locates the compiler(s) already available on "
"the system. For this tutorial, however, we want to use ``gcc@7.2.0``."
msgstr ""

# 6e50197b687941349a3dfe74d17881d5
#: ../spack/lib/spack/docs/tutorial_modules.rst:211
msgid ""
"Once ``gcc`` is installed we can use shell support to load it and make it "
"readily available:"
msgstr ""

# e230ed6aeecb4daf9ad119cfa0858a89
#: ../spack/lib/spack/docs/tutorial_modules.rst:218
msgid ""
"It may not be apparent, but the last command employed the module files "
"generated automatically by Spack. What happens under the hood when you use "
"the ``spack load`` command is:"
msgstr ""

# ed4da0d4ccf4481bb9941e015538671e
#: ../spack/lib/spack/docs/tutorial_modules.rst:222
msgid "the spec passed as argument is translated into a module file name"
msgstr ""

# a922365bccac4f79b8a35c86c06a1486
#: ../spack/lib/spack/docs/tutorial_modules.rst:223
msgid "the current module tool is used to load that module file"
msgstr ""

# 20f316abab5d40a58ae6729c5d639b3d
#: ../spack/lib/spack/docs/tutorial_modules.rst:225
msgid "You can use this command to double check:"
msgstr ""

# bceb3113dac749f389100267bb102be3
#: ../spack/lib/spack/docs/tutorial_modules.rst:233
msgid ""
"Note that the 7-digit hash at the end of the generated module may vary "
"depending on architecture or package version. Now that we have ``gcc@7.2.0`` "
"in ``PATH`` we can finally add it to the list of compilers known to Spack:"
msgstr ""

# 4651a25098334876a9be1cca518f7f3c
#: ../spack/lib/spack/docs/tutorial_modules.rst:256
msgid "Build the software that will be used in the tutorial"
msgstr ""

# 23b101ce3a8d4b50bd07d230bdd1ab9d
#: ../spack/lib/spack/docs/tutorial_modules.rst:258
msgid ""
"Finally, we should use Spack to install the packages used in the examples:"
msgstr ""

# 39f34765a50847b590c113d4f1bb6c3f
#: ../spack/lib/spack/docs/tutorial_modules.rst:273
msgid "Non-hierarchical module files"
msgstr ""

# de73b0295b1244ceb31407c3b2656c1d
#: ../spack/lib/spack/docs/tutorial_modules.rst:275
msgid ""
"If you arrived to this point you should have an environment that looks "
"similar to:"
msgstr ""

# 761d6799dc8144b1a3678afbad4798c6
#: ../spack/lib/spack/docs/tutorial_modules.rst:313
msgid ""
"The non-hierarchical module files that have been generated so far follow :"
"ref:`the default rules for module generation <modules-yaml>`. Taking a look "
"at the ``gcc`` module you'll see, for example:"
msgstr ""

# e8fa423ef5dc498ca578db15053d7632
#: ../spack/lib/spack/docs/tutorial_modules.rst:341
msgid ""
"As expected, a few environment variables representing paths will be modified "
"by the module file according to the default prefix inspection rules."
msgstr ""

# 1b84d0d0fbb2467abb1ddf69d67e370a
#: ../spack/lib/spack/docs/tutorial_modules.rst:347
msgid "Filter unwanted modifications to the environment"
msgstr ""

# 5be608a9b30749d49573f10981438abe
#: ../spack/lib/spack/docs/tutorial_modules.rst:349
msgid ""
"Now consider the case that your site has decided that ``CPATH`` and "
"``LIBRARY_PATH`` modifications should not be present in module files. What "
"you can do to abide by the rules is to create a configuration file ``~/."
"spack/modules.yaml`` with the following content:"
msgstr ""

# f5243e6ad8f940ddbeb5059cfa12bec3
#: ../spack/lib/spack/docs/tutorial_modules.rst:362
msgid "Next you should regenerate all the module files:"
msgstr ""

# 7895f550fd334e78848cac94ad2d9bc8
#: ../spack/lib/spack/docs/tutorial_modules.rst:390
msgid ""
"If you take a look now at the module for ``gcc`` you'll see that the "
"unwanted paths have disappeared:"
msgstr ""

# 67dbc1397c4b4de5922e83dd05024994
#: ../spack/lib/spack/docs/tutorial_modules.rst:416
msgid "Prevent some module files from being generated"
msgstr ""

# db890717a48846eab4632af54731ea39
#: ../spack/lib/spack/docs/tutorial_modules.rst:418
msgid ""
"Another common request at many sites is to avoid exposing software that is "
"only needed as an intermediate step when building a newer stack. Let's try "
"to prevent the generation of module files for anything that is compiled with "
"``gcc@5.4.0`` (the OS provided compiler)."
msgstr ""

# c254dd8c968e48d587d734568c74e509
#: ../spack/lib/spack/docs/tutorial_modules.rst:423
msgid ""
"To do this you should add a ``blacklist`` keyword to ``~/.spack/modules."
"yaml``:"
msgstr ""

# d58263e128634c688a5a48a6d64a990a
#: ../spack/lib/spack/docs/tutorial_modules.rst:436
msgid "and regenerate the module files:"
msgstr ""

# c5e7809ea44b45d2a6cca05e1cb98f47
#: ../spack/lib/spack/docs/tutorial_modules.rst:438
msgid ""
"This time it is convenient to pass the option ``--delete-tree`` to the "
"command that regenerates the module files to instruct it to delete the "
"existing tree and regenerate a new one instead of overwriting the files in "
"the existing directory."
msgstr ""

# 6db6fc0afd5b49e79b52c6cac01de2a8
#: ../spack/lib/spack/docs/tutorial_modules.rst:487
msgid ""
"If you look closely you'll see though that we went too far in blacklisting "
"modules: the module for ``gcc@7.2.0`` disappeared as it was bootstrapped "
"with ``gcc@5.4.0``. To specify exceptions to the blacklist rules you can use "
"``whitelist``:"
msgstr ""

# a44dc328eb924c6792faaa1d94c58be1
#: ../spack/lib/spack/docs/tutorial_modules.rst:504
msgid ""
"``whitelist`` rules always have precedence over ``blacklist`` rules. If you "
"regenerate the modules again:"
msgstr ""

# af7b1d8546ac4f46b39d9a662dc99ce7
#: ../spack/lib/spack/docs/tutorial_modules.rst:512
msgid "you'll see that now the module for ``gcc@7.2.0`` has reappeared:"
msgstr ""

# 54c2c6e690df4475b2c1727d6ca1bc67
#: ../spack/lib/spack/docs/tutorial_modules.rst:524
msgid ""
"An additional possibility that you can leverage to unclutter the environment "
"is that of preventing the generation of module files for implicitly "
"installed packages. In this case all one needs to do is to add the following "
"line:"
msgstr ""

# 3b5727764097497da67f1ae8a0a3ea6d
#: ../spack/lib/spack/docs/tutorial_modules.rst:542
msgid "to ``modules.yaml`` and regenerate the module file tree as above."
msgstr ""

# aa58de4b81f346e5a7b985ec47553527
#: ../spack/lib/spack/docs/tutorial_modules.rst:546
msgid "Change module file naming"
msgstr ""

# b258c50371934e3182d365b3d7973ed2
#: ../spack/lib/spack/docs/tutorial_modules.rst:548
msgid ""
"The next step in making  module files more user-friendly is to improve their "
"naming scheme. To reduce the length of the hash or remove it altogether you "
"can use the ``hash_length`` keyword in the configuration file:"
msgstr ""

# e53a5f21f70f42af93af61ec806886eb
#: ../spack/lib/spack/docs/tutorial_modules.rst:567
msgid "If you try to regenerate the module files now you will get an error:"
msgstr ""

# 3a41ae6fc357495fa8d36590b20029a9
#: ../spack/lib/spack/docs/tutorial_modules.rst:584
msgid "We try to check for errors upfront!"
msgstr ""

# ec6206b393424ba986e4d3b5518bc252
#: ../spack/lib/spack/docs/tutorial_modules.rst:584
msgid ""
"In Spack we check for errors upfront whenever possible, so don't worry about "
"your module files: as a name clash was detected nothing has been changed on "
"disk."
msgstr ""

# 88b1b6bb53294e74a1e1066f3f791e8e
#: ../spack/lib/spack/docs/tutorial_modules.rst:587
msgid ""
"The problem here is that without the hashes the four different flavors of "
"``netlib-scalapack`` map to the same module file name. We can add suffixes "
"to differentiate them:"
msgstr ""

# 52f093f8cf7c4c8a82df211b5e2a9598
#: ../spack/lib/spack/docs/tutorial_modules.rst:612
msgid ""
"As you can see it is possible to specify rules that apply only to a "
"restricted set of packages using :ref:`anonymous specs <anonymous_specs>`. "
"Regenerating module files now we obtain:"
msgstr ""

# 62cf4663e1c2435bb9b719009694c2b0
#: ../spack/lib/spack/docs/tutorial_modules.rst:640
msgid ""
"Finally we can set a ``naming_scheme`` to prevent users from loading modules "
"that refer to different flavors of the same library/application:"
msgstr ""

# 9feff517c08c430793dca4265e7a8378
#: ../spack/lib/spack/docs/tutorial_modules.rst:667
msgid "The final result should look like:"
msgstr ""

# e0a16f206abb45b6a9eba95d279b41ae
#: ../spack/lib/spack/docs/tutorial_modules.rst:698
msgid "TCL specific directive"
msgstr ""

# 369aa1adb40349f7b552d345c3cebf8a
#: ../spack/lib/spack/docs/tutorial_modules.rst:698
msgid ""
"The directives ``naming_scheme`` and ``conflict`` are TCL specific and can't "
"be used in the ``lmod`` section of the configuration file."
msgstr ""

# dab436469f8341808ea1f2a6f5d9b305
#: ../spack/lib/spack/docs/tutorial_modules.rst:703
msgid "Add custom environment modifications"
msgstr ""

# 37f26e0db437441a8f099e10e67232fd
#: ../spack/lib/spack/docs/tutorial_modules.rst:705
msgid ""
"At many sites it is customary to set an environment variable in a package's "
"module file that points to the folder in which the package is installed. You "
"can achieve this with Spack by adding an ``environment`` directive to the "
"configuration file:"
msgstr ""

# dab2a85cfe1b4a35a6d8497f8ee6c0f0
#: ../spack/lib/spack/docs/tutorial_modules.rst:737
msgid ""
"Under the hood Spack uses the :meth:`~spack.spec.Spec.format` API to "
"substitute tokens in either environment variable names or values. There are "
"two caveats though:"
msgstr ""

# 6257ad404edf480591b6efb06bf6a4d9
#: ../spack/lib/spack/docs/tutorial_modules.rst:740
msgid ""
"The set of allowed tokens in variable names is restricted to ``name``, "
"``version``, ``compiler``, ``compiler.name``, ``compiler.version``, "
"``architecture``"
msgstr ""

# 63baf2f40cca43e397ce87fc13b12551
#: ../spack/lib/spack/docs/tutorial_modules.rst:743
msgid ""
"Any token expanded in a variable name is made uppercase, but other than that "
"case sensitivity is preserved"
msgstr ""

# 2f6e664b1e474fea8b87b6d1c1051004
#: ../spack/lib/spack/docs/tutorial_modules.rst:746
msgid "Regenerating the module files results in something like:"
msgstr ""

# aafb3e077b2d4ae2a6f31b959649329a
#: ../spack/lib/spack/docs/tutorial_modules.rst:775
msgid ""
"As you can see, the ``gcc`` module has the environment variable ``GCC_ROOT`` "
"set."
msgstr ""

# ee754c68b44f4612841fad5547c15833
#: ../spack/lib/spack/docs/tutorial_modules.rst:777
msgid ""
"Sometimes it's also useful to apply environment modifications selectively "
"and target only certain packages. You can, for instance set the common "
"variables ``CC``, ``CXX``, etc. in the ``gcc`` module file and apply other "
"custom modifications to the ``openmpi`` modules as follows:"
msgstr ""

# 1acd992fb859457aa63c4909e084b2ee
#: ../spack/lib/spack/docs/tutorial_modules.rst:822
msgid ""
"This time we will be more selective and regenerate only the ``gcc`` and "
"``openmpi`` module files:"
msgstr ""

# fb86754f5af14adca90a21b84387069e
#: ../spack/lib/spack/docs/tutorial_modules.rst:888
msgid ""
"Spack can also generate module files that contain code to load the "
"dependencies automatically. You can, for instance generate python modules "
"that load their dependencies by adding the ``autoload`` directive and "
"assigning it the value ``direct``:"
msgstr ""

# c63d216425684ab7a066ebfd2bda37d4
#: ../spack/lib/spack/docs/tutorial_modules.rst:936
msgid ""
"and regenerating the module files for every package that depends on "
"``python``:"
msgstr ""

# 0192e991b40e4b178852706054230742
#: ../spack/lib/spack/docs/tutorial_modules.rst:943
msgid "Now the ``py-scipy`` module will be:"
msgstr ""

# 06b32ee5e79d4090b823b14fb0230d2d
#: ../spack/lib/spack/docs/tutorial_modules.rst:981
msgid "and will contain code to autoload all the dependencies:"
msgstr ""

# c7e4795d9ff249bf88dfa75944a09f1b
#: ../spack/lib/spack/docs/tutorial_modules.rst:990
msgid ""
"In case messages are unwanted during the autoload procedure, it will be "
"sufficient to omit the line setting ``verbose: True`` in the configuration "
"file above."
msgstr ""

# 05f870d7bf0940449d8f7124ddb35ccc
#: ../spack/lib/spack/docs/tutorial_modules.rst:995
msgid "Hierarchical module files"
msgstr ""

# c5d3da790bf8438bbba22871995c1ae5
#: ../spack/lib/spack/docs/tutorial_modules.rst:997
msgid ""
"So far we worked with non-hierarchical module files, i.e. with module files "
"that are all generated in the same root directory and don't attempt to "
"dynamically modify the ``MODULEPATH``. This results in a flat module "
"structure where all the software is visible at the same time:"
msgstr ""

# 38d954344d7444d4ad14367637129760
#: ../spack/lib/spack/docs/tutorial_modules.rst:1028
msgid ""
"This layout is quite simple to deploy, but you can see from the above "
"snippet that nothing prevents users from loading incompatible sets of "
"modules:"
msgstr ""

# ac2f9df14e914010b89240aff8668e13
#: ../spack/lib/spack/docs/tutorial_modules.rst:1040
msgid ""
"Even if ``conflicts`` directives are carefully placed in module files, they:"
msgstr ""

# a88abfcc3da6436b92e83c76722504be
#: ../spack/lib/spack/docs/tutorial_modules.rst:1042
msgid "won't enforce a consistent environment, but will just report an error"
msgstr ""

# e4570d9e27fb4977b1cb77e9849136fd
#: ../spack/lib/spack/docs/tutorial_modules.rst:1043
msgid ""
"need constant updates, for instance as soon as a new compiler or MPI library "
"is installed"
msgstr ""

# 8f9ac87650ea464aa4c6a8cc9f55d39e
#: ../spack/lib/spack/docs/tutorial_modules.rst:1045
msgid ""
"`Hierarchical module files <http://lmod.readthedocs.io/en/"
"latest/080_hierarchy.html>`_ try to overcome these shortcomings by showing "
"at start-up only a restricted view of what is available on the system: more "
"specifically only the software that has been installed with OS provided "
"compilers. Among this software there will be other - usually more recent - "
"compilers that, once loaded, will prepend new directories to ``MODULEPATH`` "
"unlocking all the software that was compiled with them. This \"unlocking\" "
"idea can then be extended arbitrarily to virtual dependencies, as we'll see "
"in the following section."
msgstr ""

# b8eacf27213e4b7686f2513b3f72d68a
#: ../spack/lib/spack/docs/tutorial_modules.rst:1055
msgid "Core/Compiler/MPI"
msgstr ""

# c07b9a1a481442ef88fc50a4e5b57181
#: ../spack/lib/spack/docs/tutorial_modules.rst:1057
msgid ""
"The most widely used hierarchy is the so called ``Core/Compiler/MPI`` where, "
"on top of the compilers, different MPI libraries also unlock software linked "
"to them. There are just a few steps needed to adapt the ``modules.yaml`` "
"file we used previously:"
msgstr ""

# 393fef581b814b1b8840ec34f7f0945c
#: ../spack/lib/spack/docs/tutorial_modules.rst:1061
msgid "enable the ``lmod`` file generator"
msgstr ""

# 123f3f58fe914f4285132d7fc2dae8b9
#: ../spack/lib/spack/docs/tutorial_modules.rst:1062
msgid "change the ``tcl`` tag to ``lmod``"
msgstr ""

# 467ca03c29534abfa2dd8046704145d1
#: ../spack/lib/spack/docs/tutorial_modules.rst:1063
msgid "remove ``tcl`` specific directives (``naming_scheme`` and ``conflict``)"
msgstr ""

# 070ed5aa3d574d0c9b0bd581e3f87cce
#: ../spack/lib/spack/docs/tutorial_modules.rst:1064
msgid "declare which compilers are considered ``core_compilers``"
msgstr ""

# 82738148b89947e7aee7019fdbe189f3
#: ../spack/lib/spack/docs/tutorial_modules.rst:1065
msgid ""
"remove the ``mpi`` related suffixes (as they will be substituted by "
"hierarchies)"
msgstr ""

# 03da7f273cf84d06acf27960a2d8a02e
#: ../spack/lib/spack/docs/tutorial_modules.rst:1067
msgid "After these modifications your configuration file should look like:"
msgstr ""

# 93dea211ceff4d2e8efe3f7cad4c6c5d
#: ../spack/lib/spack/docs/tutorial_modules.rst:1113
msgid "Double colon in configuration files"
msgstr ""

# a1a286afcb184b81b6684925a38e0a56
#: ../spack/lib/spack/docs/tutorial_modules.rst:1111
msgid ""
"The double colon after ``enable`` is intentional and it serves the purpose "
"of overriding the default list of enabled generators so that only ``lmod`` "
"will be active (see :ref:`config-overrides` for more details)."
msgstr ""

# f4223736e880457c90954f77c3ab43c3
#: ../spack/lib/spack/docs/tutorial_modules.rst:1116
msgid ""
"The directive ``core_compilers`` accepts a list of compilers. Everything "
"built using these compilers will create a module in the ``Core`` part of the "
"hierarchy, which is the entry point for hierarchical module files. It is "
"common practice to put the OS provided compilers in the list and only build "
"common utilities and other compilers with them."
msgstr ""

# 466dc5b09f4d4adcb77ff300e89d162a
#: ../spack/lib/spack/docs/tutorial_modules.rst:1122
msgid "If we now regenerate the module files:"
msgstr ""

# de19db32354749c1a0745d1a002dedae
#: ../spack/lib/spack/docs/tutorial_modules.rst:1129
msgid "and update ``MODULEPATH`` to point to the ``Core``:"
msgstr ""

# 9b90014210f2422e9197f8661dc0188f
#: ../spack/lib/spack/docs/tutorial_modules.rst:1137
msgid "asking for the available modules will return:"
msgstr ""

# 28f18880924a4d008a5a7a58a1b20acb
#: ../spack/lib/spack/docs/tutorial_modules.rst:1149
msgid ""
"Unsurprisingly, the only visible module is ``gcc``. Loading that we'll "
"unlock the ``Compiler`` part of the hierarchy:"
msgstr ""

# 61354dc4947f490f8851ce8dcd5a242f
#: ../spack/lib/spack/docs/tutorial_modules.rst:1173
msgid ""
"The same holds true also for the ``MPI`` part, that you can enable by "
"loading either ``mpich`` or ``openmpi``. Let's start by loading ``mpich``:"
msgstr ""

# ac9e8ce9eba84e5ea4fe45b092321762
#: ../spack/lib/spack/docs/tutorial_modules.rst:1208
msgid ""
"At this point we can showcase the improved consistency that a hierarchical "
"layout provides over a non-hierarchical one:"
msgstr ""

# be079fd3cd7c416191a127eb9893e16a
#: ../spack/lib/spack/docs/tutorial_modules.rst:1221
msgid ""
"``Lmod`` took care of swapping the MPI provider for us, and it also "
"substituted the ``netlib-scalapack`` module to conform to the change in the "
"MPI. In this way we can't accidentally pull-in two different MPI providers "
"at the same time or load a module file for a package linked to ``openmpi`` "
"when ``mpich`` is also loaded. Consistency for compilers and MPI is ensured "
"by the tool."
msgstr ""

# 34744a1f69f14a4ba6c61651f5c005a1
#: ../spack/lib/spack/docs/tutorial_modules.rst:1230
msgid "Add LAPACK to the hierarchy"
msgstr ""

# f8809cfe2b9b4dbf950fd8b507b23a33
#: ../spack/lib/spack/docs/tutorial_modules.rst:1232
msgid ""
"The hierarchy just shown is already a great improvement over non-"
"hierarchical layouts, but it still has an asymmetry: ``LAPACK`` providers "
"cover the same semantic role as ``MPI`` providers, but yet they are not part "
"of the hierarchy."
msgstr ""

# 2c6650e0af7840039918fb00fc7af036
#: ../spack/lib/spack/docs/tutorial_modules.rst:1236
msgid ""
"To be more practical, this means that although we have gained an improved "
"consistency in our environment when it comes to ``MPI``, we still have the "
"same problems as we had before for ``LAPACK`` implementations:"
msgstr ""

# 3a95b7e8870b47b090d4863688fda181
#: ../spack/lib/spack/docs/tutorial_modules.rst:1257
msgid ""
"Hierarchies that are deeper than ``Core``/``Compiler``/``MPI`` are probably "
"still considered \"unusual\" or \"impractical\" at many sites, mainly "
"because module files are written manually and keeping track of the "
"combinations among multiple providers quickly becomes quite involved."
msgstr ""

# bc93b7f15dbf4d759b86557af2bbceac
#: ../spack/lib/spack/docs/tutorial_modules.rst:1262
msgid ""
"For instance, having both ``MPI`` and ``LAPACK`` in the hierarchy means we "
"must classify software into one of four categories:"
msgstr ""

# aea616c79be14bcdadbd17ec87d08db8
#: ../spack/lib/spack/docs/tutorial_modules.rst:1265
msgid "Software that doesn't depend on ``MPI`` or ``LAPACK``"
msgstr ""

# 9b7a604013dd4baaa59173a4c111e252
#: ../spack/lib/spack/docs/tutorial_modules.rst:1266
msgid "Software that depends only on ``MPI``"
msgstr ""

# 673ec53d19a545429c783492070661e9
#: ../spack/lib/spack/docs/tutorial_modules.rst:1267
msgid "Software that depends only on ``LAPACK``"
msgstr ""

# 0e57720edbd840c987ef0c73c4fec3d9
#: ../spack/lib/spack/docs/tutorial_modules.rst:1268
msgid "Software that depends on both"
msgstr ""

# 744ca552828b42a3833f9a370c5f8f86
#: ../spack/lib/spack/docs/tutorial_modules.rst:1270
msgid ""
"to decide when to show it to the user. The situation becomes more involved "
"as the number of virtual dependencies in the hierarchy increases."
msgstr ""

# bf3b5a24965049baaadd3185b1732f68
#: ../spack/lib/spack/docs/tutorial_modules.rst:1273
msgid ""
"We can take advantage of the DAG that Spack maintains for the installed "
"software and solve this combinatorial problem in a clean and automated way. "
"In some sense Spack's ability to manage this combinatorial complexity makes "
"deeper hierarchies feasible."
msgstr ""

# 7f2d169fe41e4e08ae46dc07e9420606
#: ../spack/lib/spack/docs/tutorial_modules.rst:1278
msgid ""
"Coming back to our example, let's add ``lapack`` to the hierarchy and remove "
"any remaining suffix:"
msgstr ""

# d7f7f2925d544fdfbd785e1b31747c97
#: ../spack/lib/spack/docs/tutorial_modules.rst:1317
msgid "After module files have been regenerated as usual:"
msgstr ""

# 5b4ca72540c0486e8f2730d9f0277f46
#: ../spack/lib/spack/docs/tutorial_modules.rst:1326
msgid "we can see that now we have additional components in the hierarchy:"
msgstr ""

# f501a28a195440a589f479e7ee088f90
#: ../spack/lib/spack/docs/tutorial_modules.rst:1379
msgid ""
"Both ``MPI`` and ``LAPACK`` providers will now benefit from the same safety "
"features:"
msgstr ""

# 6888c494199b42bd9d7e31d6b04b2131
#: ../spack/lib/spack/docs/tutorial_modules.rst:1403
msgid ""
"Because we only compiled ``py-numpy`` with ``openblas`` the module is made "
"inactive when we switch the ``LAPACK`` provider. The user environment is now "
"consistent by design!"
msgstr ""

# 5fda1cdb47e94b3d8a883dca7ef99283
#: ../spack/lib/spack/docs/tutorial_modules.rst:1409
msgid "Working with templates"
msgstr ""

# 48c9b8d03d954b8e8ee8bee61e3a2d16
#: ../spack/lib/spack/docs/tutorial_modules.rst:1411
msgid ""
"As briefly mentioned in the introduction, Spack uses `Jinja2 <http://jinja."
"pocoo.org/docs/2.9/>`_ to generate each individual module file. This means "
"that you have all of its flexibility and power when it comes to customizing "
"what gets generated!"
msgstr ""

# 693bff0a3fe0486dbaf8532e2c4e405d
#: ../spack/lib/spack/docs/tutorial_modules.rst:1418
msgid "Module file templates"
msgstr ""

# 2d4edeb3fb5b4fcf87092ff87ede0a3f
#: ../spack/lib/spack/docs/tutorial_modules.rst:1420
msgid ""
"The templates that Spack uses to generate module files are stored in the "
"``share/spack/templates/module`` directory within the Spack prefix, and they "
"all share the same common structure.  Usually, they start with a header that "
"identifies the type of module being generated. In the case of hierarchical "
"module files it's:"
msgstr ""

# 7a068c5631e1463fbc092d8406b04182
#: ../spack/lib/spack/docs/tutorial_modules.rst:1430
msgid ""
"The statements within double curly brackets ``{{ ... }}`` denote "
"`expressions <http://jinja.pocoo.org/docs/2.9/templates/#expressions>`_ that "
"will be evaluated and substituted at module generation time. The rest of the "
"file is then divided into `blocks <http://jinja.pocoo.org/docs/2.9/templates/"
"#template-inheritance>`_ that can be overridden or extended by users, if "
"need be. `Control structures <http://jinja.pocoo.org/docs/2.9/templates/"
"#list-of-control-structures>`_ , delimited by ``{% ... %}``, are also "
"permitted in the template language:"
msgstr ""

# 4908c1b1a0ae4f8788d0b9a3507e866b
#: ../spack/lib/spack/docs/tutorial_modules.rst:1444
msgid ""
"The locations where Spack looks for templates are specified in ``config."
"yaml``:"
msgstr ""

# bc3d417f3a7c40e7bf169426472bc844
#: ../spack/lib/spack/docs/tutorial_modules.rst:1451
msgid ""
"and can be extended by users to employ custom templates, as we'll see next."
msgstr ""

# 80db00d1cdbf4d3e91b315a7dd4f71a8
#: ../spack/lib/spack/docs/tutorial_modules.rst:1455
msgid "Extend the default templates"
msgstr ""

# ee95e80893a94588a57b0d689b598665
#: ../spack/lib/spack/docs/tutorial_modules.rst:1457
msgid ""
"Let's assume one of our software is protected by group membership: allowed "
"users belong to the same linux group, and access is granted at group level. "
"Wouldn't it be nice if people that are not yet entitled to use it could "
"receive a helpful message at module load time that tells them who to contact "
"in your organization to be inserted in the group?"
msgstr ""

# 3a7f24a9e42148f2a7cd695303c0e2cf
#: ../spack/lib/spack/docs/tutorial_modules.rst:1463
msgid ""
"To automate the generation of module files with such site-specific behavior "
"we'll start by extending the list of locations where Spack looks for module "
"files. Let's create the file ``~/.spack/config.yaml`` with the content:"
msgstr ""

# eadcfc8a7f1243e4bf32772e2472aff2
#: ../spack/lib/spack/docs/tutorial_modules.rst:1473
msgid ""
"This tells Spack to also search another location when looking for template "
"files. Next, we need to create our custom template extension in the folder "
"listed above:"
msgstr ""

# 64779cb16c6e45a0a133657bc28122e8
#: ../spack/lib/spack/docs/tutorial_modules.rst:1489
msgid "Let's name this file ``group-restricted.lua``. The line:"
msgstr ""

# ae12426ee2a7468398255ee4cb68b613
#: ../spack/lib/spack/docs/tutorial_modules.rst:1495
msgid ""
"tells Jinja2 that we are reusing the standard template for hierarchical "
"module files. The section:"
msgstr ""

# c846ebb0f79e4e1595350de9a64c378e
#: ../spack/lib/spack/docs/tutorial_modules.rst:1510
msgid ""
"overrides the ``footer`` block. Finally, we need to add a couple of lines in "
"``modules.yaml`` to tell Spack which specs need to use the new custom "
"template. For the sake of illustration let's assume it's ``netlib-"
"scalapack``:"
msgstr ""

# 5f34c561f3b04db0b97fdee76628af65
#: ../spack/lib/spack/docs/tutorial_modules.rst:1555
msgid "If we regenerate the module files one last time:"
msgstr ""

# 0ba9d7b933d24e158ddbbd3f73a408e9
#: ../spack/lib/spack/docs/tutorial_modules.rst:1562
msgid ""
"we'll find the following at the end of each ``netlib-scalapack`` module file:"
msgstr ""

# af06a8aa634f4b9493bcd9d54a5d8853
#: ../spack/lib/spack/docs/tutorial_modules.rst:1574
msgid ""
"and every user that doesn't have access to the software will now be "
"redirected to the right e-mail address where to ask for it!"
msgstr ""

# 494d25efaf0e4ebabaee1927bd7df754
#: ../spack/lib/spack/docs/tutorial_packaging.rst:10
msgid "Package Creation Tutorial"
msgstr ""

# 6f98e0afe237469fb339c915eca8b21f
#: ../spack/lib/spack/docs/tutorial_packaging.rst:12
msgid ""
"This tutorial will walk you through the steps behind building a simple "
"package installation script.  We'll focus building an mpileaks package, "
"which is a MPI debugging tool.  By creating a package file we're essentially "
"giving Spack a recipe for how to build a particular piece of software.  "
"We're describing some of the software's dependencies, where to find the "
"package, what commands and options are used to build the package from "
"source, and more.  Once we've specified a package's recipe, we can ask Spack "
"to build that package in many different ways."
msgstr ""

# 5fc50416571a439fbaaacff883c61378
#: ../spack/lib/spack/docs/tutorial_packaging.rst:21
msgid ""
"This tutorial assumes you have a basic familiarity with some of the Spack "
"commands, and that you have a working version of Spack installed.  If not, "
"we suggest looking at Spack's *Getting Started* guide.  This tutorial also "
"assumes you have at least a beginner's-level familiarity with Python."
msgstr ""

# 17fb040c30ca441694a15cd38e3b3a15
#: ../spack/lib/spack/docs/tutorial_packaging.rst:27
msgid ""
"Also note that this document is a tutorial.  It can help you get started "
"with packaging, but is not intended to be complete.  See Spack's :ref:"
"`packaging-guide` for more complete documentation on this topic."
msgstr ""

# e4fe24902b5347ddaf43193a9cb5b7d9
#: ../spack/lib/spack/docs/tutorial_packaging.rst:35
msgid "A few things before we get started:"
msgstr ""

# 8690017f5a594809922a3817f45273bb
#: ../spack/lib/spack/docs/tutorial_packaging.rst:37
msgid ""
"We'll refer to the Spack installation location via the environment variable "
"``SPACK_ROOT``.  You should point ``SPACK_ROOT`` at wherever you have Spack "
"installed."
msgstr ""

# 212d34c135d74715bc2ac29be5243057
#: ../spack/lib/spack/docs/tutorial_packaging.rst:40
msgid "Add ``$SPACK_ROOT/bin`` to your ``PATH`` before you start."
msgstr ""

# d45967da513c44a8a8c79f65f60744ea
#: ../spack/lib/spack/docs/tutorial_packaging.rst:41
msgid ""
"Make sure your ``EDITOR`` environment variable is set to some text editor "
"you like."
msgstr ""

# c4f41d972691404ea83ddc1ccbf24ac0
#: ../spack/lib/spack/docs/tutorial_packaging.rst:43
msgid ""
"We'll be writing Python code as part of this tutorial.  You can find "
"successive versions of the Python code in ``$SPACK_ROOT/lib/spack/docs/"
"tutorial/examples``."
msgstr ""

# 48b170d73c9943488c74924311ae6c8a
#: ../spack/lib/spack/docs/tutorial_packaging.rst:49
msgid "Creating the Package File"
msgstr ""

# c1e56fd6206d42fa95af8a3f6017fb52
#: ../spack/lib/spack/docs/tutorial_packaging.rst:51
msgid ""
"We will use a separate package repository for the tutorial. Package "
"repositories allow you to separate sets of packages that take precedence "
"over one another. We will use the tutorial repo that ships with Spack to "
"avoid breaking the builtin Spack packages."
msgstr ""

# d20a3f6368514ce48bb41a52de5aca33
#: ../spack/lib/spack/docs/tutorial_packaging.rst:61
msgid ""
"Spack comes with a handy command to create a new package: ``spack create``."
msgstr ""

# 0ecfa54025124e4b87bf6fe0a241b8a4
#: ../spack/lib/spack/docs/tutorial_packaging.rst:63
msgid ""
"This command is given the location of a package's source code, downloads the "
"code, and sets up some basic packaging infrastructure for you.  The mpileaks "
"source code can be found on GitHub, and here's what happens when we run "
"``spack create`` on it:"
msgstr ""

# 2c595d9f00f84f6aa9abd0df5048ac5a
#: ../spack/lib/spack/docs/tutorial_packaging.rst:85
msgid "And Spack should spawn a text editor with this file:"
msgstr ""

# 60a2277497774ab781d10a32ec6aa514
#: ../spack/lib/spack/docs/tutorial_packaging.rst:90
msgid ""
"Spack has created this file in ``/home/spack1/spack/var/spack/repos/builtin/"
"packages/mpileaks/package.py``.  Take a moment to look over the file.  "
"There's a few placeholders that Spack has created, which we'll fill in as "
"part of this tutorial:"
msgstr ""

# 809169a5662c4149981d74ff99834c45
#: ../spack/lib/spack/docs/tutorial_packaging.rst:95
msgid "We'll document some information about this package in the comments."
msgstr ""

# dad9b23ba593459daff3baecdf4bcfff
#: ../spack/lib/spack/docs/tutorial_packaging.rst:96
msgid "We'll fill in the dependency list for this package."
msgstr ""

# b41914e91a4749cb8ed77085948558cf
#: ../spack/lib/spack/docs/tutorial_packaging.rst:97
msgid ""
"We'll fill in some of the configuration arguments needed to build this "
"package."
msgstr ""

# 3450a9cd7dc84c1e8e328d742bbe84a9
#: ../spack/lib/spack/docs/tutorial_packaging.rst:100
msgid ""
"For the moment, exit your editor and let's see what happens when we try to "
"build this package:"
msgstr ""

# 97010e7596044a2195249bc963bae1f3
#: ../spack/lib/spack/docs/tutorial_packaging.rst:128
msgid ""
"This obviously didn't work; we need to fill in the package-specific "
"information.  Specifically, Spack didn't try to build any of mpileaks' "
"dependencies, nor did it use the proper configure arguments.  Let's start "
"fixing things"
msgstr ""

# c5f13c702e584ae79e52b83a54bd7e77
#: ../spack/lib/spack/docs/tutorial_packaging.rst:135
msgid "Package Documentation"
msgstr ""

# 7ad8c33b7b834b3e93b2d3e4c1495324
#: ../spack/lib/spack/docs/tutorial_packaging.rst:137
msgid ""
"We can bring the ``package.py`` file back into our ``EDITOR`` with the "
"``spack edit`` command:"
msgstr ""

# c7294eb7c4f941979c0e01c728e5fc2a
#: ../spack/lib/spack/docs/tutorial_packaging.rst:144
msgid ""
"Let's remove some of the ``FIXME`` comments, and add links to the mpileaks "
"homepage and document what mpileaks does.  I'm also going to cut out the "
"Copyright clause at this point to keep this tutorial document shorter, but "
"you shouldn't do that normally.  The results of these changes can be found "
"in ``$SPACK_ROOT/lib/spack/docs/tutorial/examples/1.package.py`` and are "
"below.  Make these changes to your ``package.py``:"
msgstr ""

# 81435511243a49e0951e2662186ddd83
#: ../spack/lib/spack/docs/tutorial_packaging.rst:155
msgid ""
"We've filled in the comment that describes what this package does and added "
"a link to the web site.  That won't help us build yet, but it will allow "
"Spack to provide some documentation on this package to other users:"
msgstr ""

# 1e942d83a4dd49e79ff4710de25c1118
#: ../spack/lib/spack/docs/tutorial_packaging.rst:197
msgid ""
"As we fill in more information about this package the ``spack info`` command "
"will become more informative.  Now let's start making this package build."
msgstr ""

# 1dba67f11d8447768e8fc1c1d01444b2
#: ../spack/lib/spack/docs/tutorial_packaging.rst:204
msgid ""
"The mpileaks packages depends on three other package: ``MPI``, ``adept-"
"utils``, and ``callpath``.  Let's add those via the ``depends_on`` command "
"in our ``package.py`` (this version is in ``$SPACK_ROOT/lib/spack/docs/"
"tutorial/examples/2.package.py``):"
msgstr ""

# e36bd1f8e9bc4294a75ae038c69d255a
#: ../spack/lib/spack/docs/tutorial_packaging.rst:213
msgid ""
"Now when we go to build mpileaks, Spack will fetch and build these "
"dependencies before building mpileaks.  Note that the mpi dependency is a "
"different kind of beast than the adept-utils and callpath dependencies; "
"there is no mpi package available in Spack.  Instead mpi is a virtual "
"dependency.  Spack may satisfy that dependency by installing packages such "
"as ``openmpi`` or ``mvapich``.  See the :ref:`packaging-guide` for more "
"information on virtual dependencies."
msgstr ""

# ec9e0742d8324a10897540388795aeb3
#: ../spack/lib/spack/docs/tutorial_packaging.rst:221
msgid "Now when we try to install this package a lot more happens:"
msgstr ""

# 00a5d88df5de4a02a6b0a9e85af9be9f
#: ../spack/lib/spack/docs/tutorial_packaging.rst:261
msgid ""
"Note that this command may take a while to run and produce more output if "
"you don't have an MPI already installed or configured in Spack."
msgstr ""

# c72a45f333b8437885b3f804ba1a3c06
#: ../spack/lib/spack/docs/tutorial_packaging.rst:264
msgid ""
"Now Spack has identified and made sure all of our dependencies have been "
"built.  It found the ``openmpi`` package that will satisfy our ``mpi`` "
"dependency, and the ``callpath`` and ``adept-utils`` package to satisfy our "
"concrete dependencies."
msgstr ""

# cfc8839bca5248a4ae5ee3f979fb57fe
#: ../spack/lib/spack/docs/tutorial_packaging.rst:271
msgid "Debugging Package Builds"
msgstr ""

# 085df9f712194fc1abdc5ced44abadaa
#: ../spack/lib/spack/docs/tutorial_packaging.rst:273
msgid ""
"Our ``mpileaks`` package is still not building.  It may be obvious to many "
"of you that we never ran the configure script.  Let's add a call to "
"``configure()`` to the top of the install routine. The resulting package.py "
"is in ``$SPACK_ROOT/lib/spack/docs/tutorial/examples/3.package.py``:"
msgstr ""

# 35961d1758d34704b647aa0dc209ce7a
#: ../spack/lib/spack/docs/tutorial_packaging.rst:282
msgid "If we re-run we still get errors:"
msgstr ""

# 1c31a6375cc94939a4205889701a82f0
#: ../spack/lib/spack/docs/tutorial_packaging.rst:324
msgid ""
"Again, the problem may be obvious.  But let's pretend we're not all "
"intelligent developers and use this opportunity spend some time debugging.  "
"We have a few options that can tell us about what's going wrong:"
msgstr ""

# 1baa59e779bf4d9587f06d45c01b44fe
#: ../spack/lib/spack/docs/tutorial_packaging.rst:329
msgid ""
"As per the error message, Spack has given us a ``spack-build.out`` debug log:"
msgstr ""

# 0d2f29701f0844de9da4fd6e024f2c71
#: ../spack/lib/spack/docs/tutorial_packaging.rst:361
msgid ""
"This gives us the output from the build, and mpileaks isn't finding its "
"``adept-utils`` package.  Spack has automatically added the include and "
"library directories of ``adept-utils`` to the compiler's search path, but "
"some packages like mpileaks can sometimes be picky and still want things "
"spelled out on their command line.  But let's continue to pretend we're not "
"brilliant developers, and explore some other debugging paths:"
msgstr ""

# 1d2072df6da147589866ad7b55b0da00
#: ../spack/lib/spack/docs/tutorial_packaging.rst:369
msgid "We can also enter the build area and try to manually run the build:"
msgstr ""

# 70fde79811314e44991f1ff727f97a2a
#: ../spack/lib/spack/docs/tutorial_packaging.rst:376
msgid ""
"The ``spack env`` command spawned a new shell that contains the same "
"environment that Spack used to build the mpileaks package (you can "
"substitute bash for your favorite shell).  The ``spack cd`` command changed "
"our working dirctory to the last attempted build for mpileaks. From here we "
"can manually re-run the build:"
msgstr ""

# c5522646822540c3b6526dde253e40c9
#: ../spack/lib/spack/docs/tutorial_packaging.rst:411
msgid ""
"We're seeing the same error, but now we're in a shell where we can run the "
"command ourselves and debug as needed.  We could, for example, run ``./"
"configure --help`` to see what options we can use to specify dependencies."
msgstr ""

# d59b1f20ed7e4af89e067919b2f2dc58
#: ../spack/lib/spack/docs/tutorial_packaging.rst:416
msgid ""
"We can use the ``exit`` command to leave the shell spawned by ``spack env``."
msgstr ""

# b0391fa95880435f988b4109ae2c70ee
#: ../spack/lib/spack/docs/tutorial_packaging.rst:421
msgid "Specifying Configure Arguments"
msgstr ""

# e86da1e3b2604a7ab8511d4c2b1b186f
#: ../spack/lib/spack/docs/tutorial_packaging.rst:423
msgid ""
"Let's add the configure arguments to the mpileaks' ``package.py``.  This "
"version can be found in ``$SPACK_ROOT/lib/spack/docs/tutorial/examples/4."
"package.py``:"
msgstr ""

# 459c0ffc41a24f18807c037b96e2177d
#: ../spack/lib/spack/docs/tutorial_packaging.rst:431
msgid "This is all we need for working mpileaks!  If we install now we'll see:"
msgstr ""

# 2ede855162da4f52b30b2c7c212f23db
#: ../spack/lib/spack/docs/tutorial_packaging.rst:451
msgid ""
"There are some special circumstances in package that are worth highlighting. "
"Normally spack would have automatically detected that mpileaks was an "
"Autotools-based package when we ran ``spack create`` and made it an "
"``AutoToolsPackage`` class (except we added the ``-t generic`` option to "
"skip this).  Instead of a full install routine we would have just written:"
msgstr ""

# 50c5d811556d49c48597009844f0a458
#: ../spack/lib/spack/docs/tutorial_packaging.rst:463
msgid ""
"Similarly, if this had been a CMake-based package we would have been filling "
"in a ``cmake_args`` function instead of ``configure_args``.  There are "
"similar default package types for many build environments that will be "
"discussed later in the tutorial."
msgstr ""

# 6513c6d4765449eeae38db7ebfb1ffa6
#: ../spack/lib/spack/docs/tutorial_packaging.rst:472
msgid ""
"We have a successful mpileaks build, but let's take some time to improve "
"it.  ``mpileaks`` has a build-time option to truncate parts of the stack "
"that it walks.  Let's add a variant to allow users to set this when they "
"build in Spack."
msgstr ""

# 7f1f3dcd8d6f41e2b33cd3a426deb10b
#: ../spack/lib/spack/docs/tutorial_packaging.rst:477
msgid ""
"To do this, we'll add a variant to our package, as per the following (see ``"
"$SPACK_ROOT/lib/spack/docs/tutorial/examples/5.package.py``):"
msgstr ""

# 207f52cb18434c70b3ed695f072fc68d
#: ../spack/lib/spack/docs/tutorial_packaging.rst:484
msgid ""
"We've added the variant ``stackstart``, and given it a default value of "
"``0``.  If we install now we can see the stackstart variant added to the "
"configure line (output truncated for length):"
msgstr ""

# db2aeded4c944b33b928f037cd89938a
#: ../spack/lib/spack/docs/tutorial_packaging.rst:506
msgid "The Spec Object"
msgstr ""

# 9b29607531b540f6982edb2453eda5cc
#: ../spack/lib/spack/docs/tutorial_packaging.rst:508
msgid ""
"This tutorial has glossed over a few important features, which weren't too "
"relevant for mpileaks but may be useful for other packages.  There were "
"several places we references the ``self.spec`` object.  This is a powerful "
"class for querying information about what we're building.  For example, you "
"could use the spec to query information about how a package's dependencies "
"were built, or what compiler was being used, or what version of a package is "
"being installed.  Full documentation can be found in the :ref:`packaging-"
"guide`, but here's some quick snippets with common queries:"
msgstr ""

# 430039db583f479eb977aca7dd3f1517
#: ../spack/lib/spack/docs/tutorial_packaging.rst:518
msgid "Am I building ``mpileaks`` version ``1.1`` or greater?"
msgstr ""

# c9d3729321564097b4c4b3c95e81dea4
#: ../spack/lib/spack/docs/tutorial_packaging.rst:525
msgid "Is ``openmpi`` the MPI I'm building with?"
msgstr ""

# bc07ed43d98b4e11915b2fe5f9da375d
#: ../spack/lib/spack/docs/tutorial_packaging.rst:532
msgid "Am I building with ``gcc`` version less than ``5.0.0``:"
msgstr ""

# 824ff231293f4961b87792d53e9ea517
#: ../spack/lib/spack/docs/tutorial_packaging.rst:539
msgid "Am I built with the ``debug`` variant:"
msgstr ""

# fef7bd2e8aef4372aa211bf33d7eaaaf
#: ../spack/lib/spack/docs/tutorial_packaging.rst:546
msgid "Is my ``dyninst`` dependency greater than version ``8.0``?"
msgstr ""

# 51bd7f2dc2df434b9079f4743e0542e3
#: ../spack/lib/spack/docs/tutorial_packaging.rst:553
msgid ""
"More examples can be found in the thousands of packages already added to "
"Spack in ``$SPACK_ROOT/var/spack/repos/builtin/packages``."
msgstr ""

# 6d3113a4d9ca44618cd7f5d7d9673e5a
#: ../spack/lib/spack/docs/tutorial_packaging.rst:556
msgid "Good Luck!"
msgstr ""

# 5618037029164103aa8d76cfd44bd194
#: ../spack/lib/spack/docs/tutorial_packaging.rst:558
msgid ""
"To ensure that future sections of the tutorial run properly, please "
"uninstall mpileaks and remove the tutorial repo from your configuration."
msgstr ""

# 6c5552581c1647aba9cf2d3c8309f743
#: ../spack/lib/spack/docs/workflows.rst:8
msgid "Workflows"
msgstr ""

# 0385adceee494b8892c06e909ac8f13d
#: ../spack/lib/spack/docs/workflows.rst:10
msgid ""
"The process of using Spack involves building packages, running binaries from "
"those packages, and developing software that depends on those packages.  For "
"example, one might use Spack to build the ``netcdf`` package, use ``spack "
"load`` to run the ``ncdump`` binary, and finally, write a small C program to "
"read/write a particular NetCDF file."
msgstr ""

# 36dd390924154111aa4a216b6ae4be0a
#: ../spack/lib/spack/docs/workflows.rst:16
msgid ""
"Spack supports a variety of workflows to suit a variety of situations and "
"user preferences, there is no single way to do all these things. This "
"chapter demonstrates different workflows that have been developed, pointing "
"out the pros and cons of them."
msgstr ""

# d466fa68ff3a48c7a2a30fba0f61e1ee
#: ../spack/lib/spack/docs/workflows.rst:23
msgid "Definitions"
msgstr ""

# beb79b9429d140d6a4f5a4deca9879fd
#: ../spack/lib/spack/docs/workflows.rst:25
msgid "First some basic definitions."
msgstr ""

# cab3fbec5d3348ecadcd5cbf6146c995
#: ../spack/lib/spack/docs/workflows.rst:29
msgid "Package, Concrete Spec, Installed Package"
msgstr ""

# 9c809203505b426ea5698b5f9bc09228
#: ../spack/lib/spack/docs/workflows.rst:31
msgid ""
"In Spack, a package is an abstract recipe to build one piece of software. "
"Spack packages may be used to build, in principle, any version of that "
"software with any set of variants.  Examples of packages include ``curl`` "
"and ``zlib``."
msgstr ""

# 1c0befb6b2524ea1907c1a8ff6c2c8ac
#: ../spack/lib/spack/docs/workflows.rst:36
msgid ""
"A package may be *instantiated* to produce a concrete spec; one possible "
"realization of a particular package, out of combinatorially many other "
"realizations.  For example, here is a concrete spec instantiated from "
"``curl``:"
msgstr ""

# 70d9faac12094d68a56e3ab0c03056cd
#: ../spack/lib/spack/docs/workflows.rst:43
msgid ""
"Spack's core concretization algorithm generates concrete specs by "
"instantiating packages from its repo, based on a set of \"hints\", including "
"user input and the ``packages.yaml`` file.  This algorithm may be accessed "
"at any time with the ``spack spec`` command."
msgstr ""

# f5b89e4a005140c59853ad4eb4410071
#: ../spack/lib/spack/docs/workflows.rst:48
msgid ""
"Every time Spack installs a package, that installation corresponds to a "
"concrete spec.  Only a vanishingly small fraction of possible concrete specs "
"will be installed at any one Spack site."
msgstr ""

# bd1985f67f644ad5b93891764e158af0
#: ../spack/lib/spack/docs/workflows.rst:54
msgid "Consistent Sets"
msgstr ""

# 4fecaa482eac4e2aaefe9021a1b5bef3
#: ../spack/lib/spack/docs/workflows.rst:56
msgid ""
"A set of Spack specs is said to be *consistent* if each package is only "
"instantiated one way within it --- that is, if two specs in the set have the "
"same package, then they must also have the same version, variant, compiler, "
"etc.  For example, the following set is consistent:"
msgstr ""

# 62b053ee7be447269b84c982fb3ab6f9
#: ../spack/lib/spack/docs/workflows.rst:68
msgid "The following set is not consistent:"
msgstr ""

# 973283a7e0b840dcbfd7ec6e9c4008be
#: ../spack/lib/spack/docs/workflows.rst:77
msgid ""
"The compatibility of a set of installed packages determines what may be done "
"with it.  It is always possible to ``spack load`` any set of installed "
"packages, whether or not they are consistent, and run their binaries from "
"the command line.  However, a set of installed packages can only be linked "
"together in one binary if it is consistent."
msgstr ""

# a8074a527ab446adb37f4ed150411c2f
#: ../spack/lib/spack/docs/workflows.rst:83
msgid ""
"If the user produces a series of ``spack spec`` or ``spack load`` commands, "
"in general there is no guarantee of consistency between them.  Spack's "
"concretization procedure guarantees that the results of any *single* ``spack "
"spec`` call will be consistent.  Therefore, the best way to ensure a "
"consistent set of specs is to create a Spack package with dependencies, and "
"then instantiate that package.  We will use this technique below."
msgstr ""

# 68fb15a6901a4d258f4425c3bff7ac0e
#: ../spack/lib/spack/docs/workflows.rst:93
msgid "Building Packages"
msgstr ""

# 83779ad3767d4f1ea1be57f9f7bcda4f
#: ../spack/lib/spack/docs/workflows.rst:95
msgid ""
"Suppose you are tasked with installing a set of software packages on a "
"system in order to support one application -- both a core application "
"program, plus software to prepare input and analyze output.  The required "
"software might be summed up as a series of ``spack install`` commands placed "
"in a script.  If needed, this script can always be run again in the future.  "
"For example:"
msgstr ""

# 01fca3b4f2244c5e82ce3d5d077d001c
#: ../spack/lib/spack/docs/workflows.rst:112
msgid ""
"In most cases, this script will not correctly install software according to "
"your specific needs: choices need to be made for variants, versions and "
"virtual dependency choices may be needed.  It *is* possible to specify these "
"choices by extending specs on the command line; however, the same choices "
"must be specified repeatedly. For example, if you wish to use ``openmpi`` to "
"satisfy the ``mpi`` dependency, then ``^openmpi`` will have to appear on "
"*every* ``spack install`` line that uses MPI.  It can get repetitive fast."
msgstr ""

# 7fd9e93554094e06a78d52bb63f9e1da
#: ../spack/lib/spack/docs/workflows.rst:121
msgid ""
"Customizing Spack installation options is easier to do in the ``~/.spack/"
"packages.yaml`` file.  In this file, you can specify preferred versions and "
"variants to use for packages.  For example:"
msgstr ""

# a758fb1de5d94b73ba59ad3a635d860b
#: ../spack/lib/spack/docs/workflows.rst:148
msgid ""
"This approach will work as long as you are building packages for just one "
"application."
msgstr ""

# 62cc6bb9cd6a48f2b3f08f0a2c47525c
#: ../spack/lib/spack/docs/workflows.rst:153
msgid "Multiple Applications"
msgstr ""

# 3cea01b04a1a498ca7f2d3662d8c2b42
#: ../spack/lib/spack/docs/workflows.rst:155
msgid ""
"Suppose instead you're building multiple inconsistent applications. For "
"example, users want package A to be built with ``openmpi`` and package B "
"with ``mpich`` --- but still share many other lower-level dependencies.  In "
"this case, a single ``packages.yaml`` file will not work.  Plans are to "
"implement *per-project* ``packages.yaml`` files. In the meantime, one could "
"write shell scripts to switch ``packages.yaml`` between multiple versions as "
"needed, using symlinks."
msgstr ""

# e19ea0914dd34e3badd2e6d7b07e83d1
#: ../spack/lib/spack/docs/workflows.rst:165
msgid "Combinatorial Sets of Installs"
msgstr ""

# 85b54ac24b9b4daa86f96f360042db3f
#: ../spack/lib/spack/docs/workflows.rst:167
msgid ""
"Suppose that you are now tasked with systematically building many "
"incompatible versions of packages.  For example, you need to build ``petsc`` "
"9 times for 3 different MPI implementations on 3 different compilers, in "
"order to support user needs.  In this case, you will need to either create 9 "
"different ``packages.yaml`` files; or more likely, create 9 different "
"``spack install`` command lines with the correct options in the spec.  Here "
"is a real-life example of this kind of usage:"
msgstr ""

# 7a0cb7f048914165b4b72ccbb9ca77d2
#: ../spack/lib/spack/docs/workflows.rst:215
msgid "Running Binaries from Packages"
msgstr ""

# 559cf6fc56c54ef08b75ff7d3c5c336c
#: ../spack/lib/spack/docs/workflows.rst:217
msgid ""
"Once Spack packages have been built, the next step is to use them.  As with "
"building packages, there are many ways to use them, depending on the use "
"case."
msgstr ""

# 9d56964c91634f7fae629e2a2e03142d
#: ../spack/lib/spack/docs/workflows.rst:223
msgid "Find and Run"
msgstr ""

# 1227f3a976e2409d95d9ce4fd1ed790a
#: ../spack/lib/spack/docs/workflows.rst:225
msgid ""
"The simplest way to run a Spack binary is to find it and run it! In many "
"cases, nothing more is needed because Spack builds binaries with RPATHs.  "
"Spack installation directories may be found with ``spack location --install-"
"dir`` commands.  For example:"
msgstr ""

# e71880db7d8a4c45a81156324844ac25
#: ../spack/lib/spack/docs/workflows.rst:235
msgid ""
"This gives the root of the Spack package; relevant binaries may be found "
"within it.  For example:"
msgstr ""

# f39bc598f7ba46f0a853d4b2815f2724
#: ../spack/lib/spack/docs/workflows.rst:243
msgid "Standard UNIX tools can find binaries as well.  For example:"
msgstr ""

# b5ced3a38f944c1386b7c1da257e8fdc
#: ../spack/lib/spack/docs/workflows.rst:250
msgid ""
"These methods are suitable, for example, for setting up build processes or "
"GUIs that need to know the location of particular tools. However, other more "
"powerful methods are generally preferred for user environments."
msgstr ""

# c8154b163f644a29b0a1aa0ff4dfb075
#: ../spack/lib/spack/docs/workflows.rst:258
msgid "Spack-Generated Modules"
msgstr ""

# 74c3b4d832634ffba68dc25de43900d3
#: ../spack/lib/spack/docs/workflows.rst:260
msgid ""
"Suppose that Spack has been used to install a set of command-line programs, "
"which users now wish to use.  One can in principle put a number of ``spack "
"load`` commands into ``.bashrc``, for example, to load a set of Spack-"
"generated modules:"
msgstr ""

# c8d601d5b05e487fbed14b3303296f0d
#: ../spack/lib/spack/docs/workflows.rst:273
msgid ""
"Although simple load scripts like this are useful in many cases, they have "
"some drawbacks:"
msgstr ""

# ad9479ce1a0740b88d823df3c1818629
#: ../spack/lib/spack/docs/workflows.rst:276
msgid ""
"The set of modules loaded by them will in general not be consistent.  They "
"are a decent way to load commands to be called from command shells.  See "
"below for better ways to assemble a consistent set of packages for building "
"application programs."
msgstr ""

# ca37782b59374b97a2c46d9bf207e24d
#: ../spack/lib/spack/docs/workflows.rst:281
msgid ""
"The ``spack spec`` and ``spack install`` commands use a sophisticated "
"concretization algorithm that chooses the \"best\" among several options, "
"taking into account ``packages.yaml`` file. The ``spack load`` and ``spack "
"module tcl loads`` commands, on the other hand, are not very smart: if the "
"user-supplied spec matches more than one installed package, then ``spack "
"module tcl loads`` will fail. This may change in the future.  For now, the "
"workaround is to be more specific on any ``spack module tcl loads`` lines "
"that fail."
msgstr ""

# fd498a5ef4b74e28a1cdad1cad4fd55b
#: ../spack/lib/spack/docs/workflows.rst:293
msgid "Generated Load Scripts"
msgstr ""

# 498593de0d354733ac40ca62750c2c02
#: ../spack/lib/spack/docs/workflows.rst:295
msgid ""
"Another problem with using `spack load` is, it is slow; a typical user "
"environment could take several seconds to load, and would not be appropriate "
"to put into ``.bashrc`` directly.  It is preferable to use a series of "
"``spack module tcl loads`` commands to pre-compute which modules to load.  "
"These can be put in a script that is run whenever installed Spack packages "
"change.  For example:"
msgstr ""

# 643e4347dd2545eaa35a71e51f221ce9
#: ../spack/lib/spack/docs/workflows.rst:318
msgid "The output of this file is written in ``~/env/spackenv``:"
msgstr ""

# 15b6d84fa4bc4a9e850822fc4089792e
#: ../spack/lib/spack/docs/workflows.rst:347
msgid "Users may now put ``source ~/env/spackenv`` into ``.bashrc``."
msgstr ""

# 8d3afc7fa33e48e7ab69d8cfc2f0aedc
#: ../spack/lib/spack/docs/workflows.rst:351
msgid ""
"Some module systems put a prefix on the names of modules created by Spack.  "
"For example, that prefix is ``linux-SuSE11-x86_64/`` in the above case.  If "
"a prefix is not needed, you may omit the ``--prefix`` flag from ``spack "
"module tcl loads``."
msgstr ""

# 8e10c9242a1a4840bde3b8c414a0c09e
#: ../spack/lib/spack/docs/workflows.rst:359
msgid "Transitive Dependencies"
msgstr ""

# d2df44dc9da54cbf897326b17395d5c5
#: ../spack/lib/spack/docs/workflows.rst:361
msgid ""
"In the script above, each ``spack module tcl loads`` command generates a "
"*single* ``module load`` line.  Transitive dependencies do not usually need "
"to be loaded, only modules the user needs in ``$PATH``.  This is because "
"Spack builds binaries with RPATH.  Spack's RPATH policy has some nice "
"features:"
msgstr ""

# 72accf04de45459f9e1b2e192ec20d76
#: ../spack/lib/spack/docs/workflows.rst:367
msgid ""
"Modules for multiple inconsistent applications may be loaded "
"simultaneously.  In the above example (Multiple Applications), package A and "
"package B can coexist together in the user's $PATH, even though they use "
"different MPIs."
msgstr ""

# 61ade3db128d40a38540a3933cb45483
#: ../spack/lib/spack/docs/workflows.rst:372
msgid ""
"RPATH eliminates a whole class of strange errors that can happen in non-"
"RPATH binaries when the wrong ``LD_LIBRARY_PATH`` is loaded."
msgstr ""

# c75cfa14eeef486cb193a677e50b4454
#: ../spack/lib/spack/docs/workflows.rst:376
msgid "Recursive module systems such as LMod are not necessary."
msgstr ""

# 65afa11a7cbc47408089e3ad475a7576
#: ../spack/lib/spack/docs/workflows.rst:378
msgid ""
"Modules are not needed at all to execute binaries.  If a path to a binary is "
"known, it may be executed.  For example, the path for a Spack-built compiler "
"can be given to an IDE without requiring the IDE to load that compiler's "
"module."
msgstr ""

# 63f38541854840358f16681c6cece2b0
#: ../spack/lib/spack/docs/workflows.rst:383
msgid ""
"Unfortunately, Spack's RPATH support does not work in all case.  For example:"
msgstr ""

# c581f26502b64a7db5f6ab08529f27b7
#: ../spack/lib/spack/docs/workflows.rst:385
msgid ""
"Software comes in many forms --- not just compiled ELF binaries, but also as "
"interpreted code in Python, R, JVM bytecode, etc. Those systems almost "
"universally use an environment variable analogous to ``LD_LIBRARY_PATH`` to "
"dynamically load libraries."
msgstr ""

# fd5035dca42a46b3b93825b1320989b9
#: ../spack/lib/spack/docs/workflows.rst:390
msgid ""
"Although Spack generally builds binaries with RPATH, it does not currently "
"do so for compiled Python extensions (for example, ``py-numpy``).  Any "
"libraries that these extensions depend on (``blas`` in this case, for "
"example) must be specified in the ``LD_LIBRARY_PATH``.`"
msgstr ""

# 4bde5b2ddbdd4427a95a89de5173966e
#: ../spack/lib/spack/docs/workflows.rst:396
msgid ""
"In some cases, Spack-generated binaries end up without a functional RPATH "
"for no discernible reason."
msgstr ""

# 11e3bad7bd534bcc9a6159c52d170721
#: ../spack/lib/spack/docs/workflows.rst:399
msgid ""
"In cases where RPATH support doesn't make things \"just work,\" it can be "
"necessary to load a module's dependencies as well as the module itself.  "
"This is done by adding the ``--dependencies`` flag to the ``spack module tcl "
"loads`` command.  For example, the following line, added to the script "
"above, would be used to load SciPy, along with Numpy, core Python, BLAS/"
"LAPACK and anything else needed:"
msgstr ""

# dd114b4046a340a084381933c848ac0a
#: ../spack/lib/spack/docs/workflows.rst:412
msgid "Dummy Packages"
msgstr ""

# 2b0dac78cf7f497594f1527ff2d8ac91
#: ../spack/lib/spack/docs/workflows.rst:414
msgid ""
"As an alternative to a series of ``module load`` commands, one might "
"consider dummy packages as a way to create a *consistent* set of packages "
"that may be loaded as one unit.  The idea here is pretty simple:"
msgstr ""

# 2b6833d3ab794a7b88afbd2c8c5a0819
#: ../spack/lib/spack/docs/workflows.rst:419
msgid ""
"Create a package (say, ``mydummy``) with no URL and no ``install()`` method, "
"just dependencies."
msgstr ""

# d8adb9f6019245e9891e84cd7e7756cc
#: ../spack/lib/spack/docs/workflows.rst:422
msgid "Run ``spack install mydummy`` to install."
msgstr ""

# e1c7bf93d31f46efb5344b8e2c1344d1
#: ../spack/lib/spack/docs/workflows.rst:424
msgid ""
"An advantage of this method is the set of packages produced will be "
"consistent.  This means that you can reliably build software against it.  A "
"disadvantage is the set of packages will be consistent; this means you "
"cannot load up two applications this way if they are not consistent with "
"each other."
msgstr ""

# b5a55b35185c499cb771e790ede080bc
#: ../spack/lib/spack/docs/workflows.rst:434
msgid "Filesystem Views"
msgstr ""

# 7c691299e268403cb0a8fc47d65d5fdf
#: ../spack/lib/spack/docs/workflows.rst:436
msgid ""
"Filesystem views offer an alternative to environment modules, another way to "
"assemble packages in a useful way and load them into a user's environment."
msgstr ""

# 50aa76b375d747c09ef346e1cb3417c1
#: ../spack/lib/spack/docs/workflows.rst:440
msgid ""
"A single-prefix filesystem view is a single directory tree that is the union "
"of the directory hierarchies of a number of installed packages; it is "
"similar to the directory hiearchy that might exist under ``/usr/local``.  "
"The files of the view's installed packages are brought into the view by "
"symbolic or hard links, referencing the original Spack installation."
msgstr ""

# 57ba6a0f4407498d9fbd563450ca6ec9
#: ../spack/lib/spack/docs/workflows.rst:447
msgid ""
"A combinatorial filesystem view can contain more software than a single-"
"prefix view. Combinatorial filesystem views are created by defining a "
"projection for each spec or set of specs. The syntax for this will be "
"discussed in the section for the ``spack view`` command under "
"`adding_projections_to_views`_."
msgstr ""

# e71bc4430d884439af3407902801c311
#: ../spack/lib/spack/docs/workflows.rst:453
msgid ""
"The projection for a spec or set of specs specifies the naming scheme for "
"the directory structure under the root of the view into which the package "
"will be linked. For example, the spec ``zlib@1.2.8%gcc@4.4.7`` could be "
"projected to ``MYVIEW/zlib-1.2.8-gcc``."
msgstr ""

# aa136d7871a941db8f697a1ad3bcb3cb
#: ../spack/lib/spack/docs/workflows.rst:458
msgid ""
"When software is built and installed, absolute paths are frequently \"baked "
"into\" the software, making it non-relocatable.  This happens not just in "
"RPATHs, but also in shebangs, configuration files, and assorted other "
"locations."
msgstr ""

# 7181097ec97f4a6686ce35154a92a39d
#: ../spack/lib/spack/docs/workflows.rst:463
msgid ""
"Therefore, programs run out of a Spack view will typically still look in the "
"original Spack-installed location for shared libraries and other resources.  "
"This behavior is not easily changed; in general, there is no way to know "
"where absolute paths might be written into an installed package, and how to "
"relocate it.  Therefore, the original Spack tree must be kept in place for a "
"filesystem view to work, even if the view is built with hardlinks."
msgstr ""

# e6715256cba0477d9db7646950ab0b6e
#: ../spack/lib/spack/docs/workflows.rst:477
msgid "``spack view``"
msgstr ""

# 53f71c64de2b4bada00ca984135ba0a9
#: ../spack/lib/spack/docs/workflows.rst:479
msgid ""
"A filesystem view is created, and packages are linked in, by the ``spack "
"view`` command's ``symlink`` and ``hardlink`` sub-commands.  The ``spack "
"view remove`` command can be used to unlink some or all of the filesystem "
"view."
msgstr ""

# 48f23bca79284ac19315053de2478a72
#: ../spack/lib/spack/docs/workflows.rst:484
msgid ""
"The following example creates a filesystem view based on an installed "
"``cmake`` package and then removes from the view the files in the ``cmake`` "
"package while retaining its dependencies."
msgstr ""

# 9c734d7ebaf84174b0cc8192ff688689
#: ../spack/lib/spack/docs/workflows.rst:512
msgid ""
"If the set of packages being included in a view is inconsistent, then it is "
"possible that two packages will provide the same file.  Any conflicts of "
"this type are handled on a first-come-first-served basis, and a warning is "
"printed."
msgstr ""

# 889442ff571b40eab98e6e725461af4d
#: ../spack/lib/spack/docs/workflows.rst:519
msgid "When packages are removed from a view, empty directories are purged."
msgstr ""

# b707088ac39a4df6b882a99c2c12383c
#: ../spack/lib/spack/docs/workflows.rst:526
msgid "Controlling View Projections"
msgstr ""

# 7476557cdd9d45778cdc68672b2180ba
#: ../spack/lib/spack/docs/workflows.rst:528
msgid ""
"The default projection into a view is to link every package into the root of "
"the view. This can be changed by adding a ``projections.yaml`` configuration "
"file to the view. The projection configuration file for a view located at ``/"
"my/view`` is stored in ``/my/view/.spack/projections.yaml``."
msgstr ""

# fb3f2e8a5052477f865279c318771aba
#: ../spack/lib/spack/docs/workflows.rst:534
msgid ""
"When creating a view, the projection configuration file can also be "
"specified from the command line using the ``--projection-file`` option to "
"the ``spack view`` command."
msgstr ""

# 63ed2c7f191d43cb9b6543263fb97660
#: ../spack/lib/spack/docs/workflows.rst:538
msgid ""
"The projections configuration file is a mapping of partial specs to spec "
"format strings, as shown in the example below."
msgstr ""

# 5cf1f967e10c46f088d5e763338bd023
#: ../spack/lib/spack/docs/workflows.rst:548
msgid ""
"The entries in the projections configuration file must all be either specs "
"or the keyword ``all``. For each spec, the projection used will be the first "
"non-``all`` entry that the spec satisfies, or ``all`` if there is an entry "
"for ``all`` and no other entry is satisfied by the spec. Where the keyword "
"``all`` appears in the file does not matter. Given the example above, any "
"spec satisfying ``zlib@1.2.8`` will be linked into ``/my/view/zlib-1.2.8/``, "
"any spec satisfying ``hdf5@1.8.10+mpi %gcc@4.9.3 ^mvapich2@2.2`` will be "
"linked into ``/my/view/hdf5-1.8.10/mvapich2-2.2-gcc-4.9.3``, and any spec "
"satisfying ``hdf5@1.8.10~mpi %gcc@4.9.3`` will be linked into ``/my/view/"
"hdf5-1.8.10/gcc-4.9.3``."
msgstr ""

# d13abdc1c840405bb47ebe66609aa8bc
#: ../spack/lib/spack/docs/workflows.rst:560
msgid ""
"If the keyword ``all`` does not appear in the projections configuration "
"file, any spec that does not satisfy any entry in the file will be linked "
"into the root of the view as in a single-prefix view. Any entries that "
"appear below the keyword ``all`` in the projections configuration file will "
"not be used, as all specs will use the projection under ``all`` before "
"reaching those entries."
msgstr ""

# bb63b7f2545b4dc3a88ed9d8d1d10a2f
#: ../spack/lib/spack/docs/workflows.rst:569
msgid "Fine-Grain Control"
msgstr ""

# c33085bdda55479f803619184b88b349
#: ../spack/lib/spack/docs/workflows.rst:571
msgid ""
"The ``--exclude`` and ``--dependencies`` option flags allow for fine-grained "
"control over which packages and dependencies do or not get included in a "
"view.  For example, suppose you are developing the ``appsy`` package.  You "
"wish to build against a view of all ``appsy`` dependencies, but not "
"``appsy`` itself:"
msgstr ""

# f8257a5afbdc4866aba095b5b5d2ce87
#: ../spack/lib/spack/docs/workflows.rst:581
msgid ""
"Alternately, you wish to create a view whose purpose is to provide binary "
"executables to end users.  You only need to include applications they might "
"want, and not those applications' dependencies.  In this case, you might use:"
msgstr ""

# d5dd7193cd3c40dfb45a3f7d6d7cffd3
#: ../spack/lib/spack/docs/workflows.rst:593
msgid "Hybrid Filesystem Views"
msgstr ""

# 717574f6e5074f598bed8c0d66b96d0f
#: ../spack/lib/spack/docs/workflows.rst:595
msgid ""
"Although filesystem views are usually created by Spack, users are free to "
"add to them by other means.  For example, imagine a filesystem view, created "
"by Spack, that looks something like:"
msgstr ""

# f0a063395c71467cb3bde8b257c282a4
#: ../spack/lib/spack/docs/workflows.rst:604
msgid ""
"Now, the user may add to this view by non-Spack means; for example, by "
"running a classic install script.  For example:"
msgstr ""

# 5ab976dbf7fe4fcca374b5e5dd0ac806
#: ../spack/lib/spack/docs/workflows.rst:615
msgid "The result is a hybrid view:"
msgstr ""

# 7e321eeaf1a94fa8b284e6ef7a625459
#: ../spack/lib/spack/docs/workflows.rst:624
msgid ""
"In this case, real files coexist, interleaved with the \"view\" symlinks.  "
"At any time one can delete ``/path/to/MYVIEW`` or use ``spack view`` to "
"manage it surgically.  None of this will affect the real Spack install area."
msgstr ""

# 227a43af64de423f931c9edf52911a6a
#: ../spack/lib/spack/docs/workflows.rst:631
msgid "Global Activations"
msgstr ""

# 041fa6f51c3345c08d91fa12c0903c21
#: ../spack/lib/spack/docs/workflows.rst:633
msgid ""
":ref:`cmd-spack-activate` may be used as an alternative to loading Python "
"(and similar systems) packages directly or creating a view. If extensions "
"are globally activated, then ``spack load python`` will also load all the "
"extensions activated for the given ``python``. This reduces the need for "
"users to load a large number of modules."
msgstr ""

# d96f17c08357450299f63f2f505031bf
#: ../spack/lib/spack/docs/workflows.rst:639
msgid "However, Spack global activations have two potential drawbacks:"
msgstr ""

# be6b2a61cc914b2fa5c84cc9846b6a9a
#: ../spack/lib/spack/docs/workflows.rst:641
msgid ""
"Activated packages that involve compiled C extensions may still need their "
"dependencies to be loaded manually.  For example, ``spack load openblas`` "
"might be required to make ``py-numpy`` work."
msgstr ""

# b2d66dc460f84973af180e1173aa7fba
#: ../spack/lib/spack/docs/workflows.rst:646
msgid ""
"Global activations \"break\" a core feature of Spack, which is that multiple "
"versions of a package can co-exist side-by-side.  For example, suppose you "
"wish to run a Python package in two different environments but the same "
"basic Python --- one with ``py-numpy@1.7`` and one with ``py-numpy@1.8``.  "
"Spack extensions will not support this potential debugging use case."
msgstr ""

# 314ae63d4c8c4f8aaa352cf385929fa1
#: ../spack/lib/spack/docs/workflows.rst:655
msgid "Discussion: Running Binaries"
msgstr ""

# 7273771ab0c3400a851efbbfa78c942c
#: ../spack/lib/spack/docs/workflows.rst:657
msgid ""
"Modules, extension packages and filesystem views are all ways to assemble "
"sets of Spack packages into a useful environment.  They are all semantically "
"similar, in that conflicting installed packages cannot simultaneously be "
"loaded, activated or included in a view."
msgstr ""

# 1f5c151b061e4dcb90fb5395ffd533e0
#: ../spack/lib/spack/docs/workflows.rst:662
msgid ""
"With all of these approaches, there is no guarantee that the environment "
"created will be consistent.  It is possible, for example, to simultaneously "
"load application A that uses OpenMPI and application B that uses MPICH.  "
"Both applications will run just fine in this inconsistent environment "
"because they rely on RPATHs, not the environment, to find their dependencies."
msgstr ""

# 7c1a44aa185d4bff83951a7ff3e828ad
#: ../spack/lib/spack/docs/workflows.rst:669
msgid ""
"In general, environments set up using modules vs. views will work "
"similarly.  Both can be used to set up ephemeral or long-lived testing/"
"development environments.  Operational differences between the two "
"approaches can make one or the other preferable in certain environments:"
msgstr ""

# ad5abf42b99c4e9cac29feb4449acff9
#: ../spack/lib/spack/docs/workflows.rst:675
msgid ""
"Filesystem views do not require environment module infrastructure. Although "
"Spack can install ``environment-modules``, users might be hostile to its "
"use.  Filesystem views offer a good solution for sysadmins serving users who "
"just \"want all the stuff I need in one place\" and don't want to hear about "
"Spack."
msgstr ""

# db323dc842624f98a6d3f45df4fe25f4
#: ../spack/lib/spack/docs/workflows.rst:681
msgid ""
"Although modern build systems will find dependencies wherever they might be, "
"some applications with hand-built make files expect their dependencies to be "
"in one place.  One common problem is makefiles that assume that ``netcdf`` "
"and ``netcdf-fortran`` are installed in the same tree.  Or, one might use an "
"IDE that requires tedious configuration of dependency paths; and it's easier "
"to automate that administration in a view-building script than in the IDE "
"itself. For all these cases, a view will be preferable to other ways to "
"assemble an environment."
msgstr ""

# 90c1cec8bf7f47e4a48301a53049c7df
#: ../spack/lib/spack/docs/workflows.rst:691
msgid ""
"On systems with I-node quotas, modules might be preferable to views and "
"extension packages."
msgstr ""

# 6fc069a6d383401a854fe81cf4784e87
#: ../spack/lib/spack/docs/workflows.rst:694
msgid ""
"Views and activated extensions maintain state that is semantically "
"equivalent to the information in a ``spack module tcl loads`` script. "
"Administrators might find things easier to maintain without the added "
"\"heavyweight\" state of a view."
msgstr ""

# 65b0b4d9edf74bd9b1b11814f407ffb4
#: ../spack/lib/spack/docs/workflows.rst:701
msgid "Developing Software with Spack"
msgstr ""

# 20fa289da31841cbac85666934855d59
#: ../spack/lib/spack/docs/workflows.rst:703
msgid ""
"For any project, one needs to assemble an environment of that application's "
"dependencies.  You might consider loading a series of modules or creating a "
"filesystem view.  This approach, while obvious, has some serious drawbacks:"
msgstr ""

# 68f53766665a4e46810ddc9a67cf5e81
#: ../spack/lib/spack/docs/workflows.rst:708
msgid ""
"There is no guarantee that an environment created this way will be "
"consistent.  Your application could end up with dependency A expecting one "
"version of MPI, and dependency B expecting another. The linker will not be "
"happy..."
msgstr ""

# cdea45d56cf74d669ea314644eb50889
#: ../spack/lib/spack/docs/workflows.rst:713
msgid ""
"Suppose you need to debug a package deep within your software DAG. If you "
"build that package with a manual environment, then it becomes difficult to "
"have Spack auto-build things that depend on it.  That could be a serious "
"problem, depending on how deep the package in question is in your dependency "
"DAG."
msgstr ""

# 799ef42b77ca4c498c0ee87b731b263e
#: ../spack/lib/spack/docs/workflows.rst:719
msgid ""
"At its core, Spack is a sophisticated concretization algorithm that matches "
"up packages with appropriate dependencies and creates a *consistent* "
"environment for the package it's building.  Writing a list of ``spack load`` "
"commands for your dependencies is at least as hard as writing the same list "
"of ``depends_on()`` declarations in a Spack package.  But it makes no use of "
"Spack concretization and is more error-prone."
msgstr ""

# c9ff8a9811ed4611838acd386bb6baed
#: ../spack/lib/spack/docs/workflows.rst:727
msgid ""
"Spack provides an automated, systematic way not just to find a packages's "
"dependencies --- but also to build other packages on top.  Any Spack package "
"can become a dependency for another Spack package, offering a powerful "
"vision of software re-use.  If you build your package A outside of Spack, "
"then your ability to use it as a building block for other packages in an "
"automated way is diminished: other packages depending on package A will not "
"be able to use Spack to fulfill that dependency."
msgstr ""

# 64b203aeebc74eb780787168cd746260
#: ../spack/lib/spack/docs/workflows.rst:736
msgid ""
"If you are reading this manual, you probably love Spack.  You're probably "
"going to write a Spack package for your software so prospective users can "
"install it with the least amount of pain. Why should you go to additional "
"work to find dependencies in your development environment?  Shouldn't Spack "
"be able to help you build your software based on the package you've already "
"written?"
msgstr ""

# fca1b3f1e45d4f829314c8a07074796a
#: ../spack/lib/spack/docs/workflows.rst:743
msgid ""
"In this section, we show how Spack can be used in the software development "
"process to greatest effect, and how development packages can be seamlessly "
"integrated into the Spack ecosystem.  We will show how this process works by "
"example, assuming the software you are creating is called ``mylib``."
msgstr ""

# 67b4aea41d8e4fcea4795bd5896b579c
#: ../spack/lib/spack/docs/workflows.rst:751
msgid "Write the CMake Build"
msgstr ""

# 5104b749b23a43b0b345072173672021
#: ../spack/lib/spack/docs/workflows.rst:753
msgid ""
"For now, the techniques in this section only work for CMake-based projects, "
"although they could be easily extended to other build systems in the "
"future.  We will therefore assume you are using CMake to build your project."
msgstr ""

# e6c975f6e0f245c1a53e6de3a7bfc32e
#: ../spack/lib/spack/docs/workflows.rst:758
msgid ""
"The ``CMakeLists.txt`` file should be written as normal.  A few caveats:"
msgstr ""

# 6143cc58b3504c7086e1d01861360ccc
#: ../spack/lib/spack/docs/workflows.rst:760
msgid ""
"Your project should produce binaries with RPATHs.  This will ensure that "
"they work the same whether built manually or automatically by Spack.  For "
"example:"
msgstr ""

# 5898d8e82ac24ae883a8ae19a53fcce9
#: ../spack/lib/spack/docs/workflows.rst:792
msgid ""
"Spack provides a CMake variable called ``SPACK_TRANSITIVE_INCLUDE_PATH``, "
"which contains the ``include/`` directory for all of your project's "
"transitive dependencies.  It can be useful if your project ``#include``s "
"files from package B, which ``#include`` files from package C, but your "
"project only lists project B as a dependency.  This works in traditional "
"single-tree build environments, in which B and C's include files live in the "
"same place.  In order to make it work with Spack as well, you must add the "
"following to ``CMakeLists.txt``.  It will have no effect when building "
"without Spack:"
msgstr ""

# a83f23b2ee34467dbc2f76fc1050bcf3
#: ../spack/lib/spack/docs/workflows.rst:811
msgid ""
"Note that this feature is controversial and could break with future versions "
"of GNU ld.  The best practice is to make sure anything you ``#include`` is "
"listed as a dependency in your CMakeLists.txt (and Spack package)."
msgstr ""

# 2cf75247aa234a1490eab19640d29df7
#: ../spack/lib/spack/docs/workflows.rst:820
msgid "Write the Spack Package"
msgstr ""

# 984e67b372ee4e62a725915b3326bd3e
#: ../spack/lib/spack/docs/workflows.rst:822
msgid ""
"The Spack package also needs to be written, in tandem with setting up the "
"build (for example, CMake).  The most important part of this task is "
"declaring dependencies.  Here is an example of the Spack package for the "
"``mylib`` package (ellipses for brevity):"
msgstr ""

# 3c1db14d93544d629e50633e8490b477
#: ../spack/lib/spack/docs/workflows.rst:861
msgid ""
"This is a standard Spack package that can be used to install ``mylib`` in a "
"production environment.  The list of dependencies in the Spack package will "
"generally be a repeat of the list of CMake dependencies.  This package also "
"has some features that allow it to be used for development:"
msgstr ""

# 95bc3860f6b6483eb3e2ecc553385190
#: ../spack/lib/spack/docs/workflows.rst:867
msgid ""
"It subclasses ``CMakePackage`` instead of ``Package``.  This eliminates the "
"need to write an ``install()`` method, which is defined in the superclass.  "
"Instead, one just needs to write the ``configure_args()`` method.  That "
"method should return the arguments needed for the ``cmake`` command (beyond "
"the standard CMake arguments, which Spack will include already).  These "
"arguments are typically used to turn features on/off in the build."
msgstr ""

# a079b08447d14df18425454ba1612c3a
#: ../spack/lib/spack/docs/workflows.rst:875
msgid ""
"It specifies a non-checksummed version ``develop``.  Running ``spack install "
"mylib@develop`` the ``@develop`` version will install the latest version off "
"the develop branch.  This method of download is useful for the developer of "
"a project while it is in active development; however, it should only be used "
"by developers who control and trust the repository in question!"
msgstr ""

# c353bb44ec6545cebc351a1b291b97a7
#: ../spack/lib/spack/docs/workflows.rst:882
msgid ""
"The ``url``, ``url_for_version()`` and ``homepage`` attributes are not used "
"in development.  Don't worry if you don't have any, or if they are behind a "
"firewall."
msgstr ""

# f5480dde31a445adaa7b5be015d38954
#: ../spack/lib/spack/docs/workflows.rst:888
msgid "Build with Spack"
msgstr ""

# f930d2d7229647fb9c78027fe0169e7b
#: ../spack/lib/spack/docs/workflows.rst:890
msgid ""
"Now that you have a Spack package, you can use Spack to find its "
"dependencies automatically.  For example:"
msgstr ""

# dd2bfc5edd7f45c2aa53cf1c96938661
#: ../spack/lib/spack/docs/workflows.rst:898
msgid ""
"The result will be a file ``spconfig.py`` in the top-level ``mylib/`` "
"directory.  It is a short script that calls CMake with the dependencies and "
"options determined by Spack --- similar to what happens in ``spack "
"install``, but now written out in script form. From a developer's point of "
"view, you can think of ``spconfig.py`` as a stand-in for the ``cmake`` "
"command."
msgstr ""

# 6429a2163c8446f4affeee9f4f147cbc
#: ../spack/lib/spack/docs/workflows.rst:907
msgid ""
"You can invent any \"version\" you like for the ``spack setup`` command."
msgstr ""

# 11a4530e39a842e28fc6fe27fd93f9d8
#: ../spack/lib/spack/docs/workflows.rst:912
msgid ""
"Although ``spack setup`` does not build your package, it does create and "
"install a module file, and mark in the database that your package has been "
"installed.  This can lead to errors, of course, if you don't subsequently "
"install your package. Also... you will need to ``spack uninstall`` before "
"you run ``spack setup`` again."
msgstr ""

# 97f3a802ea2e4e4e92809c2d1768066b
#: ../spack/lib/spack/docs/workflows.rst:920
msgid "You can now build your project as usual with CMake:"
msgstr ""

# 295b9f71e623491faae011ad48b1a2e5
#: ../spack/lib/spack/docs/workflows.rst:929
msgid ""
"Once your ``make install`` command is complete, your package will be "
"installed, just as if you'd run ``spack install``.  Except you can now edit, "
"re-build and re-install as often as needed, without checking into Git or "
"downloading tarballs."
msgstr ""

# a8ad4eed0a694a02957192a5a22e2f31
#: ../spack/lib/spack/docs/workflows.rst:936
msgid ""
"The build you get this way will be *almost* the same as the build from "
"``spack install``.  The only difference is, you will not be using Spack's "
"compiler wrappers.  This difference has not caused problems in our "
"experience, as long as your project sets RPATHs as shown above.  You DO use "
"RPATHs, right?"
msgstr ""

# c2969d7ac8ac43a7a117dad91c0af491
#: ../spack/lib/spack/docs/workflows.rst:944
msgid "Build Other Software"
msgstr ""

# 51be97e148f14dc5a5c9b90cfa1ba1e2
#: ../spack/lib/spack/docs/workflows.rst:946
msgid ""
"Now that you've built ``mylib`` with Spack, you might want to build another "
"package that depends on it --- for example, ``myapp``.  This is accomplished "
"easily enough:"
msgstr ""

# f95cb75221794af58f931f0e7b705650
#: ../spack/lib/spack/docs/workflows.rst:954
msgid ""
"Note that auto-built software has now been installed *on top of* manually-"
"built software, without breaking Spack's \"web.\"  This property is useful "
"if you need to debug a package deep in the dependency hierarchy of your "
"application.  It is a *big* advantage of using ``spack setup`` to build your "
"package's environment."
msgstr ""

# 725ea7f5c8da4aba8bad934833d05bef
#: ../spack/lib/spack/docs/workflows.rst:960
msgid ""
"If you feel your software is stable, you might wish to install it with "
"``spack install`` and skip the source directory.  You can just use, for "
"example:"
msgstr ""

# 2cd25867059940289b85d791d3656851
#: ../spack/lib/spack/docs/workflows.rst:972
msgid "Release Your Software"
msgstr ""

# 0863b28fc12e4e61b5d564d8e77de911
#: ../spack/lib/spack/docs/workflows.rst:974
msgid ""
"You are now ready to release your software as a tarball with a numbered "
"version, and a Spack package that can build it.  If you're hosted on GitHub, "
"this process will be a bit easier."
msgstr ""

# ecec038cb1dd4a6da5b3de1ba1b3ec4f
#: ../spack/lib/spack/docs/workflows.rst:978
msgid ""
"Put tag(s) on the version(s) in your GitHub repo you want to be release "
"versions.  For example, a tag ``v0.1.0`` for version 0.1.0."
msgstr ""

# eb9c426468d34a5c99bea755a935dc2d
#: ../spack/lib/spack/docs/workflows.rst:981
msgid ""
"Set the ``url`` in your ``package.py`` to download a tarball for the "
"appropriate version.  GitHub will give you a tarball for any commit in the "
"repo, if you tickle it the right way.  For example:"
msgstr ""

# 18f9695a82a24900b4d6817b1c770618
#: ../spack/lib/spack/docs/workflows.rst:989
msgid ""
"Use Spack to determine your version's hash, and cut'n'paste it into your "
"``package.py``:"
msgstr ""

# 542ac9c32301425182162e11d6e2e64f
#: ../spack/lib/spack/docs/workflows.rst:1005
msgid ""
"You should now be able to install released version 0.1.2 of your package "
"with:"
msgstr ""

# b4cdd4f764584bb697d0c5af187b9e71
#: ../spack/lib/spack/docs/workflows.rst:1011
msgid ""
"There is no need to remove the `develop` version from your package. Spack "
"concretization will always prefer numbered version to non-numeric versions.  "
"Users will only get it if they ask for it."
msgstr ""

# b9d45829d59d4231bbdb8ade1b9cc710
#: ../spack/lib/spack/docs/workflows.rst:1017
msgid "Distribute Your Software"
msgstr ""

# f8e1ab1633f94142a7fbe9555cecf7e0
#: ../spack/lib/spack/docs/workflows.rst:1019
msgid ""
"Once you've released your software, other people will want to build it; and "
"you will need to tell them how.  In the past, that has meant a few "
"paragraphs of prose explaining which dependencies to install.  But now you "
"use Spack, and those instructions are written in executable Python code.  "
"But your software has many dependencies, and you know Spack is the best way "
"to install it:"
msgstr ""

# 6a8dc1cd33d64c2f9f188a8abbc542fb
#: ../spack/lib/spack/docs/workflows.rst:1026
msgid ""
"First, you will want to fork Spack's ``develop`` branch.  Your aim is to "
"provide a stable version of Spack that you KNOW will install your software.  "
"If you make changes to Spack in the process, you will want to submit pull "
"requests to Spack core."
msgstr ""

# d89fa15bcb3a43f49337a192a45ea103
#: ../spack/lib/spack/docs/workflows.rst:1031
msgid ""
"Add your software's ``package.py`` to that fork.  You should submit a pull "
"request for this as well, unless you don't want the public to know about "
"your software."
msgstr ""

# 40bdf4496eb646a09acbdb14e64aae2c
#: ../spack/lib/spack/docs/workflows.rst:1035
msgid "Prepare instructions that read approximately as follows:"
msgstr ""

# 71d16501a74c4cbdb1b32d67edbfdf0d
#: ../spack/lib/spack/docs/workflows.rst:1037
msgid "Download Spack from your forked repo."
msgstr ""

# 7fef102d23e2495e83b32f6be6efb37a
#: ../spack/lib/spack/docs/workflows.rst:1039
msgid "Install Spack; see :ref:`getting_started`."
msgstr ""

# 782507320b9541978b08436e35eb4d1c
#: ../spack/lib/spack/docs/workflows.rst:1041
msgid ""
"Set up an appropriate ``packages.yaml`` file.  You should tell your users to "
"include in this file whatever versions/variants are needed to make your "
"software work correctly (assuming those are not already in your ``packages."
"yaml``)."
msgstr ""

# 722e18758b664d3fbdcf1049608487da
#: ../spack/lib/spack/docs/workflows.rst:1046
msgid "Run ``spack install mylib``."
msgstr ""

# 1209147affbf45f8893868d3494e66cc
#: ../spack/lib/spack/docs/workflows.rst:1048
msgid ""
"Run this script to generate the ``module load`` commands or filesystem view "
"needed to use this software."
msgstr ""

# 1bfabed38227482fb40b0b3959d24631
#: ../spack/lib/spack/docs/workflows.rst:1051
msgid ""
"Be aware that your users might encounter unexpected bootstrapping issues on "
"their machines, especially if they are running on older systems.  The :ref:"
"`getting_started` section should cover this, but there could always be "
"issues."
msgstr ""

# 3dea5efd3bed4e2b803558d8a1d131cc
#: ../spack/lib/spack/docs/workflows.rst:1060
msgid ""
"``spack setup`` currently only supports CMake-based builds, in packages that "
"subclass ``CMakePackage``.  The intent is that this mechanism should support "
"a wider range of build systems; for example, GNU Autotools.  Someone well-"
"versed in Autotools is needed to develop this patch and test it out."
msgstr ""

# 7ab2a4bcf50349299d1991a771e6b99d
#: ../spack/lib/spack/docs/workflows.rst:1066
msgid ""
"Python Distutils is another popular build system that should get ``spack "
"setup`` support.  For non-compiled languages like Python, ``spack diy`` may "
"be used.  Even better is to put the source directory directly in the user's "
"``PYTHONPATH``.  Then, edits in source files are immediately available to "
"run without any install process at all!"
msgstr ""

# 354b645b9e464f3493a2d635e32bf45e
#: ../spack/lib/spack/docs/workflows.rst:1074
msgid "Conclusion"
msgstr ""

# dd7ce6a7766e41cba6d12efe8fb30e3e
#: ../spack/lib/spack/docs/workflows.rst:1076
msgid ""
"The ``spack setup`` development workflow provides better automation, "
"flexibility and safety than workflows relying on environment modules or "
"filesystem views.  However, it has some drawbacks:"
msgstr ""

# a789df67018c4871848227f46e4dabd9
#: ../spack/lib/spack/docs/workflows.rst:1080
msgid ""
"It currently works only with projects that use the CMake build system.  "
"Support for other build systems is not hard to build, but will require a "
"small amount of effort for each build system to be supported.  It might not "
"work well with some IDEs."
msgstr ""

# ab6640815f3b4aff9a2f8e4df4d7c235
#: ../spack/lib/spack/docs/workflows.rst:1085
msgid ""
"It only works with packages that sub-class ``StagedPackage``. Currently, "
"most Spack packages do not.  Converting them is not hard; but must be done "
"on a package-by-package basis."
msgstr ""

# ae812dfc504141eaa7183314d354eb4c
#: ../spack/lib/spack/docs/workflows.rst:1089
msgid ""
"It requires that users are comfortable with Spack, as they integrate Spack "
"explicitly in their workflow.  Not all users are willing to do this."
msgstr ""

# 171dd52146614916b31e920c8c825db1
#: ../spack/lib/spack/docs/workflows.rst:1095
msgid "Using Spack on Travis-CI"
msgstr ""

# 9d4e106c12134a28ad2442702601f8d0
#: ../spack/lib/spack/docs/workflows.rst:1097
msgid ""
"Spack can be deployed as a provider for userland software in `Travis-CI "
"<https://http://travis-ci.org>`_."
msgstr ""

# 4a8916f2ce674af78ad38b6919661691
#: ../spack/lib/spack/docs/workflows.rst:1100
msgid ""
"A starting-point for a ``.travis.yml`` file can look as follows. It uses "
"`caching <https://docs.travis-ci.com/user/caching/>`_ for already built "
"environments, so make sure to clean the Travis cache if you run into "
"problems."
msgstr ""

# 701c4276c78a4399b205e8c5cb245b0e
#: ../spack/lib/spack/docs/workflows.rst:1105
msgid "The main points that are implemented below:"
msgstr ""

# d9997b35994f4eec9a6be311367bf19f
#: ../spack/lib/spack/docs/workflows.rst:1107
msgid ""
"Travis is detected as having up to 34 cores available, but only 2 are "
"actually allocated for the user. We limit the parallelism of the spack "
"builds in the config. (The Travis yaml parser is a bit buggy on the echo "
"command.)"
msgstr ""

# ace286bca60e47be963c384e2058e49f
#: ../spack/lib/spack/docs/workflows.rst:1112
msgid ""
"Builds over 10 minutes need to be prefixed with ``travis_wait``. "
"Alternatively, generate output once with ``spack install -v``."
msgstr ""

# f962dfbeb7b74961949952aa56754ce4
#: ../spack/lib/spack/docs/workflows.rst:1115
msgid ""
"Travis builds are non-interactive. This prevents using bash aliases and "
"functions for modules. We fix that by sourcing ``/etc/profile`` first (or "
"running everything in a subshell with ``bash -l -c '...'``)."
msgstr ""

# 98b18ec146ad4ac0834f4f523eb9f11b
#: ../spack/lib/spack/docs/workflows.rst:1175
msgid "Using Spack to Create Docker Images"
msgstr ""

# 041a15c7213f49bd81f369edea84adef
#: ../spack/lib/spack/docs/workflows.rst:1177
msgid ""
"Spack can be the ideal tool to set up images for Docker (and Singularity)."
msgstr ""

# 01c48b24ff384b2d9dbab1bcac604cc7
#: ../spack/lib/spack/docs/workflows.rst:1179
msgid ""
"An example ``Dockerfile`` is given below, downloading the latest spack "
"version."
msgstr ""

# c1c72427288b4d15914f411c02200aae
#: ../spack/lib/spack/docs/workflows.rst:1182
msgid "The following functionality is prepared:"
msgstr ""

# 420687f4db834896aa0672d643429124
#: ../spack/lib/spack/docs/workflows.rst:1184
msgid "Base image: the example starts from a minimal ubuntu."
msgstr ""

# 9d381e4d9bce4e8d9337a825a6dc4483
#: ../spack/lib/spack/docs/workflows.rst:1186
msgid ""
"Installing as root: docker images are usually set up as root. Since some "
"autotools scripts might complain about this being unsafe, we set "
"``FORCE_UNSAFE_CONFIGURE=1`` to avoid configure errors."
msgstr ""

# d2f77aba25404f3293847e1883b7598b
#: ../spack/lib/spack/docs/workflows.rst:1190
msgid ""
"Pre-install the spack dependencies, including modules from the packages. "
"This avoids needing to build those from scratch via ``spack bootstrap``. "
"Package installs are followed by a clean-up of the system package index, to "
"avoid outdated information and it saves space."
msgstr ""

# 81f835fdb92446f4a713570ff285b00d
#: ../spack/lib/spack/docs/workflows.rst:1195
msgid ""
"Install spack in ``/usr/local``. Add ``setup-env.sh`` to profile scripts, so "
"commands in *login* shells can use the whole spack functionality, including "
"modules."
msgstr ""

# 962c1a6f7ae94e96a97ab4556703065d
#: ../spack/lib/spack/docs/workflows.rst:1199
msgid ""
"Install an example package (``tar``). As with system package managers above, "
"``spack install`` commands should be concatenated with a ``&& spack clean -"
"a`` in order to keep image sizes small."
msgstr ""

# 8dd75f54833948ddbe9d85a7e19c608b
#: ../spack/lib/spack/docs/workflows.rst:1203
msgid ""
"Add a startup hook to an *interactive login shell* so spack modules will be "
"usable."
msgstr ""

# ddfc53e57d184473a5e7f41a8c1ec83d
#: ../spack/lib/spack/docs/workflows.rst:1206
msgid "In order to build and run the image, execute:"
msgstr ""

# 42739bc18b2f4346bab3cea7237486c0
#: ../spack/lib/spack/docs/workflows.rst:1267
msgid "Best Practices"
msgstr ""

# e2a6bd1913b24690811cb42c7a6c5940
#: ../spack/lib/spack/docs/workflows.rst:1272
msgid ""
"Due to the dependency on Fortran for OpenMPI, which is the spack default "
"implementation, consider adding ``gfortran`` to the ``apt-get install`` list."
msgstr ""

# 966f630f188741c7bd2b6083f21069b1
#: ../spack/lib/spack/docs/workflows.rst:1275
msgid ""
"Recent versions of OpenMPI will require you to pass ``--allow-run-as-root`` "
"to your ``mpirun`` calls if started as root user inside Docker."
msgstr ""

# d5c6b4557ee14351abc9039f0dbcd5c8
#: ../spack/lib/spack/docs/workflows.rst:1278
msgid ""
"For execution on HPC clusters, it can be helpful to import the docker image "
"into Singularity in order to start a program with an *external* MPI. "
"Otherwise, also add ``openssh-server`` to the ``apt-get install`` list."
msgstr ""

# 22bd36e60bcf4f39b8a163f5d113fde1
#: ../spack/lib/spack/docs/workflows.rst:1284
msgid "CUDA"
msgstr ""

# dabeb8764fe04e87883fa1dd7712ee3f
#: ../spack/lib/spack/docs/workflows.rst:1285
msgid ""
"Starting from CUDA 9.0, Nvidia provides minimal CUDA images based on Ubuntu. "
"Please see `their instructions <https://hub.docker.com/r/nvidia/cuda/>`_. "
"Avoid double-installing CUDA by adding, e.g."
msgstr ""

# 6e5b4070d63542128ddb093f2e47a334
#: ../spack/lib/spack/docs/workflows.rst:1298
msgid ""
"to your ``packages.yaml``. Then ``COPY`` in that file into the image as in "
"the example above."
msgstr ""

# 387aeea87ae44b229385fa1787b7745c
#: ../spack/lib/spack/docs/workflows.rst:1301
msgid ""
"Users will either need ``nvidia-docker`` or e.g. Singularity to *execute* "
"device kernels."
msgstr ""

# d0fe37b0dba54b63b676edb39e02141e
#: ../spack/lib/spack/docs/workflows.rst:1306
msgid "Singularity"
msgstr ""

# 49af0fb510474047b337f8f359396a65
#: ../spack/lib/spack/docs/workflows.rst:1307
msgid ""
"Importing and running the image created above into `Singularity <http://"
"singularity.lbl.gov/>`_ works like a charm. Just use the `docker "
"bootstraping mechanism <http://singularity.lbl.gov/quickstart#bootstrap-"
"recipes>`_:"
msgstr ""

# c8380628ab8b4e638e2473a701a2f87b
#: ../spack/lib/spack/docs/workflows.rst:1321
msgid "Docker for Development"
msgstr ""

# 1e23cc0dc0ad4e6b964f9c6ed8827e2c
#: ../spack/lib/spack/docs/workflows.rst:1323
msgid ""
"For examples of how we use docker in development, see :ref:"
"`docker_for_developers`."
msgstr ""

# d5acfc9d637b4008973262169deff171
#: ../spack/lib/spack/docs/workflows.rst:1328
msgid "Docker on Windows and OSX"
msgstr ""

# a7d9a67387a94b6482a7bbeaa16700c5
#: ../spack/lib/spack/docs/workflows.rst:1330
msgid ""
"On Mac OS and Windows, docker runs on a hypervisor that is not allocated "
"much memory by default, and some spack packages may fail to build due to "
"lack of memory. To work around this issue, consider configuring your docker "
"installation to use more of your host memory. In some cases, you can also "
"ease the memory pressure on parallel builds by limiting the parallelism in "
"your config.yaml."
msgstr ""

# 3b4a350749574e85881229cc6533dacd
#: ../spack/lib/spack/docs/workflows.rst:1343
msgid "Upstream Bug Fixes"
msgstr ""

# 7961022cdd284a36afe633999c858411
#: ../spack/lib/spack/docs/workflows.rst:1345
msgid ""
"It is not uncommon to discover a bug in an upstream project while trying to "
"build with Spack.  Typically, the bug is in a package that serves a "
"dependency to something else.  This section describes procedure to work "
"around and ultimately resolve these bugs, while not delaying the Spack "
"user's main goal."
msgstr ""

# bb33632e2e6d4e3190cf39596972c4e3
#: ../spack/lib/spack/docs/workflows.rst:1353
msgid "Buggy New Version"
msgstr ""

# 28f8ecff92cf49a18a30f0b5031dcf7b
#: ../spack/lib/spack/docs/workflows.rst:1355
msgid ""
"Sometimes, the old version of a package works fine, but a new version is "
"buggy.  For example, it was once found that `Adios did not build with "
"hdf5@1.10 <https://github.com/spack/spack/issues/1683>`_.  If the old "
"version of ``hdf5`` will work with ``adios``, the suggested procedure is:"
msgstr ""

# 79b3401da3114b0dad7f50ffe455343a
#: ../spack/lib/spack/docs/workflows.rst:1361
msgid ""
"Revert ``adios`` to the old version of ``hdf5``.  Put in its ``adios/package."
"py``:"
msgstr ""

# 41d5441710814b98b644b06ae83c6e66
#: ../spack/lib/spack/docs/workflows.rst:1370
msgid ""
"Determine whether the problem is with ``hdf5`` or ``adios``, and report the "
"problem to the appropriate upstream project.  In this case, the problem was "
"with ``adios``."
msgstr ""

# e4ce560f0ff54d29a88134377e88b908
#: ../spack/lib/spack/docs/workflows.rst:1374
msgid ""
"Once a new version of ``adios`` comes out with the bugfix, modify ``adios/"
"package.py`` to reflect it:"
msgstr ""

# a81a2ec3acd848f592e9d1b531afe52c
#: ../spack/lib/spack/docs/workflows.rst:1386
msgid "No Version Works"
msgstr ""

# 1a44fcb4cae742b39c6f765bcba76cb3
#: ../spack/lib/spack/docs/workflows.rst:1388
msgid ""
"Sometimes, *no* existing versions of a dependency work for a build. This "
"typically happens when developing a new project: only then does the "
"developer notice that existing versions of a dependency are all buggy, or "
"the non-buggy versions are all missing a critical feature."
msgstr ""

# d083a97c1fae4bb6839e76ddea2abe30
#: ../spack/lib/spack/docs/workflows.rst:1393
msgid ""
"In the long run, the upstream project will hopefully fix the bug and release "
"a new version.  But that could take a while, even if a bugfix has already "
"been pushed to the project's repository.  In the meantime, the Spack user "
"needs things to work."
msgstr ""

# 3f4cefd076c54261a799f6f9c428031c
#: ../spack/lib/spack/docs/workflows.rst:1398
msgid ""
"The solution is to create an unofficial Spack release of the project, as "
"soon as the bug is fixed in *some* repository.  A study of the `Git history "
"<https://github.com/citibeth/spack/commits/efischer/develop/var/spack/repos/"
"builtin/packages/py-proj/package.py>`_ of ``py-proj/package.py`` is "
"instructive here:"
msgstr ""

# fe870e1eb1a949d89608a97f71e49a39
#: ../spack/lib/spack/docs/workflows.rst:1403
msgid ""
"On `April 1 <https://github.com/citibeth/spack/"
"commit/44a1d6a96706affe6ef0a11c3a780b91d21d105a>`_, an initial bugfix was "
"identified for the PyProj project and a pull request submitted to PyProj.  "
"Because the upstream authors had not yet fixed the bug, the ``py-proj`` "
"Spack package downloads from a forked repository, set up by the package's "
"author. A non-numeric version number is used to make it easy to upgrade the "
"package without recomputing checksums; however, this is an untrusted "
"download method and should not be distributed.  The package author has now "
"become, temporarily, a maintainer of the upstream project:"
msgstr ""

# b46b1909389b4b96a54d77bd3f921455
#: ../spack/lib/spack/docs/workflows.rst:1422
msgid ""
"By May 14, the upstream project had accepted a pull request with the "
"required bugfix.  At this point, the forked repository was deleted.  "
"However, the upstream project still had not released a new version with a "
"bugfix.  Therefore, a Spack-only release was created by specifying the "
"desired hash in the main project repository.  The version number "
"``@1.9.5.1.1`` was chosen for this \"release\" because it's a descendent of "
"the officially released version ``@1.9.5.1``.  This is a trusted download "
"method, and can be released to the Spack community:"
msgstr ""

# f1902549cce746dca2a5e54b4d880d92
#: ../spack/lib/spack/docs/workflows.rst:1441
msgid ""
"It would have been simpler to use Spack's Git download method, which is also "
"a trusted download in this case:"
msgstr ""

# 86f0408819b84d27aea23be984cd2134
#: ../spack/lib/spack/docs/workflows.rst:1454
msgid ""
"In this case, the upstream project fixed the bug in its repository in a "
"relatively timely manner.  If that had not been the case, the numbered "
"version in this step could have been released from the forked repository."
msgstr ""

# 3d87f97e24c74fdb8b72cd69104a9bce
#: ../spack/lib/spack/docs/workflows.rst:1460
msgid ""
"The author of the Spack package has now become an unofficial release "
"engineer for the upstream project.  Depending on the situation, it may be "
"advisable to put ``preferred=True`` on the latest *officially released* "
"version."
msgstr ""

# 4febce0830db42b788a151978e6ac02f
#: ../spack/lib/spack/docs/workflows.rst:1465
msgid ""
"As of August 31, the upstream project still had not made a new release with "
"the bugfix.  In the meantime, Spack-built ``py-proj`` provides the bugfix "
"needed by packages depending on it.  As long as this works, there is no "
"particular need for the upstream project to make a new official release."
msgstr ""

# ad36df4518014f4aa21153b981adadae
#: ../spack/lib/spack/docs/workflows.rst:1471
msgid ""
"If the upstream project releases a new official version with the bugfix, "
"then the unofficial ``version()`` line should be removed from the Spack "
"package."
msgstr ""

# b0120bb10548420fb135208603a35e5b
#: ../spack/lib/spack/docs/workflows.rst:1479
msgid ""
"Spack's source patching mechanism provides another way to fix bugs in "
"upstream projects.  This has advantages and disadvantages compared to the "
"procedures above."
msgstr ""

# 8ebac954e9e14b62918fbb61f7ee0b34
#: ../spack/lib/spack/docs/workflows.rst:1482
msgid "Advantages:"
msgstr ""

# 20f9e9590cef489b953c7914bf946d37
#: ../spack/lib/spack/docs/workflows.rst:1484
msgid ""
"It can fix bugs in existing released versions, and (probably) future "
"releases as well."
msgstr ""

# 380ceba32c5c4bebbcadd2610bf00f3e
#: ../spack/lib/spack/docs/workflows.rst:1487
msgid "It is lightweight, does not require a new fork to be set up."
msgstr ""

# 12ba82312d044c6285e235be4dde5458
#: ../spack/lib/spack/docs/workflows.rst:1489
msgid "Disadvantages:"
msgstr ""

# 3a19c59316cb4b259768d5ec587c2b7c
#: ../spack/lib/spack/docs/workflows.rst:1491
msgid ""
"It is harder to develop and debug a patch, vs. a branch in a repository.  "
"The user loses the automation provided by version control systems."
msgstr ""

# 571eddae603e44dd9fe1758dd0fe7e5c
#: ../spack/lib/spack/docs/workflows.rst:1495
msgid ""
"Although patches of a few lines work OK, large patch files can be hard to "
"create and maintain."
msgstr ""
