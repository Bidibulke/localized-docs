# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2019, Lawrence Livermore National Laboratory.
# This file is distributed under the same license as the Spack package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Spack 0.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-27 13:31-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../spack/lib/spack/docs/packaging_guide.rst:10
msgid "Packaging Guide"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:12
msgid "This guide is intended for developers or administrators who want to package software so that Spack can install it.  It assumes that you have at least some familiarity with Python, and that you've read the :ref:`basic usage guide <basic-usage>`, especially the part about :ref:`specs <sec-specs>`."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:18
msgid "There are two key parts of Spack:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:20
msgid "**Specs**: expressions for describing builds of software, and"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:21
msgid "**Packages**: Python modules that describe how to build software according to a spec."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:24
msgid "Specs allow a user to describe a *particular* build in a way that a package author can understand.  Packages allow the packager to encapsulate the build logic for different versions, compilers, options, platforms, and dependency combinations in one place. Essentially, a package translates a spec into build logic."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:30
msgid "Packages in Spack are written in pure Python, so you can do anything in Spack that you can do in Python.  Python was chosen as the implementation language for two reasons.  First, Python is becoming ubiquitous in the scientific software community. Second, it's a modern language and has many powerful features to help make package writing easy."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:39
msgid "Creating & editing packages"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:45
msgid "``spack create``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:47
msgid "The ``spack create`` command creates a directory with the package name and generates a ``package.py`` file with a boilerplate package template. If given a URL pointing to a tarball or other software archive, ``spack create`` is smart enough to determine basic information about the package, including its name and build system. In most cases, ``spack create`` plus a few modifications is all you need to get a package working."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:54
msgid "Here's an example:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:60
msgid "Spack examines the tarball URL and tries to figure out the name of the package to be created. If the name contains uppercase letters, these are automatically converted to lowercase. If the name contains underscores or periods, these are automatically converted to dashes."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:65
msgid "Spack also searches for *additional* versions located in the same directory of the website. Spack prompts you to tell you how many versions it found and asks you how many you would like to download and checksum:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:83
msgid "Spack will automatically download the number of tarballs you specify (starting with the most recent) and checksum each of them."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:86
msgid "You do not *have* to download all of the versions up front. You can always choose to download just one tarball initially, and run :ref:`cmd-spack-checksum` later if you need more versions."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:90
msgid "Let's say you download 3 tarballs:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:107
msgid "Spack automatically creates a directory in the appropriate repository, generates a boilerplate template for your package, and opens up the new ``package.py`` in your favorite ``$EDITOR``:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:152
msgid "The tedious stuff (creating the class, checksumming archives) has been done for you. You'll notice that ``spack create`` correctly detected that ``gmp`` uses the Autotools build system. It created a new ``Gmp`` package that subclasses the ``AutotoolsPackage`` base class. This base class provides basic installation methods common to all Autotools packages:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:166
msgid "For most Autotools packages, this is sufficient. If you need to add additional arguments to the ``./configure`` call, add them via the ``configure_args`` function."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:170
msgid "In the generated package, the download ``url`` attribute is already set. All the things you still need to change are marked with ``FIXME`` labels. You can delete the commented instructions between the license and the first import statement after reading them. The rest of the tasks you need to do are as follows:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:176
msgid "Add a description."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:178
msgid "Immediately inside the package class is a *docstring* in triple-quotes (``\"\"\"``).  It is used to generate the description shown when users run ``spack info``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:182
msgid "Change the ``homepage`` to a useful URL."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:184
msgid "The ``homepage`` is displayed when users run ``spack info`` so that they can learn more about your package."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:187
msgid "Add ``depends_on()`` calls for the package's dependencies."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:189
msgid "``depends_on`` tells Spack that other packages need to be built and installed before this one. See :ref:`dependencies`."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:192
msgid "Get the installation working."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:194
msgid "Your new package may require specific flags during ``configure``. These can be added via ``configure_args``. Specifics will differ depending on the package and its build system. :ref:`Implementing the install method <install-method>` is covered in detail later."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:200
msgid "Passing a URL to ``spack create`` is a convenient and easy way to get a basic package template, but what if your software is licensed and cannot be downloaded from a URL? You can still create a boilerplate ``package.py`` by telling ``spack create`` what name you want to use:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:209
msgid "This will create a simple ``intel`` package with an ``install()`` method that you can craft to install your package."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:212
msgid "What if ``spack create <url>`` guessed the wrong name or build system? For example, if your package uses the Autotools build system but does not come with a ``configure`` script, Spack won't realize it uses Autotools. You can overwrite the old package with ``--force`` and specify a name with ``--name`` or a build system template to use with ``--template``:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:225
msgid "If you are creating a package that uses the Autotools build system but does not come with a ``configure`` script, you'll need to add an ``autoreconf`` method to your package that explains how to generate the ``configure`` script. You may also need the following dependencies:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:237
msgid "A complete list of available build system templates can be found by running ``spack create --help``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:244
msgid "``spack edit``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:246
msgid "One of the easiest ways to learn how to write packages is to look at existing ones.  You can edit a package file by name with the ``spack edit`` command:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:254
msgid "So, if you used ``spack create`` to create a package, then saved and closed the resulting file, you can get back to it with ``spack edit``. The ``gmp`` package actually lives in ``$SPACK_ROOT/var/spack/repos/builtin/packages/gmp/package.py``, but ``spack edit`` provides a much simpler shortcut and saves you the trouble of typing the full path."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:263
msgid "Naming & directory structure"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:265
msgid "This section describes how packages need to be named, and where they live in Spack's directory structure.  In general, :ref:`cmd-spack-create` handles creating package files for you, so you can skip most of the details here."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:272
msgid "``var/spack/repos/builtin/packages``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:274
msgid "A Spack installation directory is structured like a standard UNIX install prefix (``bin``, ``lib``, ``include``, ``var``, ``opt``, etc.).  Most of the code for Spack lives in ``$SPACK_ROOT/lib/spack``. Packages themselves live in ``$SPACK_ROOT/var/spack/repos/builtin/packages``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:279
msgid "If you ``cd`` to that directory, you will see directories for each package:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:286
msgid "Each directory contains a file called ``package.py``, which is where all the python code for the package goes.  For example, the ``libelf`` package lives in:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:294
msgid "Alongside the ``package.py`` file, a package may contain extra directories or files (like patches) that it needs to build."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:299
msgid "Package Names"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:301
msgid "Packages are named after the directory containing ``package.py``. So, ``libelf``'s ``package.py`` lives in a directory called ``libelf``. The ``package.py`` file defines a class called ``Libelf``, which extends Spack's ``Package`` class.  For example, here is ``$SPACK_ROOT/var/spack/repos/builtin/packages/libelf/package.py``:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:322
msgid "The **directory name** (``libelf``) determines the package name that users should provide on the command line. e.g., if you type any of these:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:332
msgid "Spack sees the package name in the spec and looks for ``libelf/package.py`` in ``var/spack/repos/builtin/packages``. Likewise, if you run ``spack install py-numpy``, Spack looks for ``py-numpy/package.py``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:337
msgid "Spack uses the directory name as the package name in order to give packagers more freedom in naming their packages. Package names can contain letters, numbers, and dashes. Using a Python identifier (e.g., a class name or a module name) would make it difficult to support these options.  So, you can name a package ``3proxy`` or ``foo-bar`` and Spack won't care. It just needs to see that name in the packages directory."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:347
msgid "Package class names"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:349
msgid "Spack loads ``package.py`` files dynamically, and it needs to find a special class name in the file for the load to succeed.  The **class name** (``Libelf`` in our example) is formed by converting words separated by ``-`` in the file name to CamelCase. If the name starts with a number, we prefix the class name with ``_``. Here are some examples:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:357
msgid "Module Name"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:357
msgid "Class Name"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:359
msgid "``foo-bar``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:359
msgid "``FooBar``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:360
msgid "``3proxy``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:360
msgid "``_3proxy``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:363
msgid "In general, you won't have to remember this naming convention because :ref:`cmd-spack-create` and :ref:`cmd-spack-edit` handle the details for you."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:368
msgid "Trusted Downloads"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:370
msgid "Spack verifies that the source code it downloads is not corrupted or compromised; or at least, that it is the same version the author of the Spack package saw when the package was created.  If Spack uses a download method it can verify, we say the download method is *trusted*.  Trust is important for *all downloads*: Spack has no control over the security of the various sites from which it downloads source code, and can never assume that any particular site hasn't been compromised."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:379
msgid "Trust is established in different ways for different download methods. For the most common download method --- a single-file tarball --- the tarball is checksummed.  Git downloads using ``commit=`` are trusted implicitly, as long as a hash is specified."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:384
msgid "Spack also provides untrusted download methods: tarball URLs may be supplied without a checksum, or Git downloads may specify a branch or tag instead of a hash.  If the user does not control or trust the source of an untrusted download, it is a security risk.  Unless otherwise specified by the user for special cases, Spack should by default use *only* trusted download methods."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:391
msgid "Unfortunately, Spack does not currently provide that guarantee.  It does provide the following mechanisms for safety:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:394
msgid "By default, Spack will only install a tarball package if it has a checksum and that checksum matches.  You can override this with ``spack install --no-checksum``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:398
msgid "Numeric versions are almost always tarball downloads, whereas non-numeric versions not named ``develop`` frequently download untrusted branches or tags from a version control system.  As long as a package has at least one numeric version, and no non-numeric version named ``develop``, Spack will prefer it over any non-numeric versions."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:407
msgid "Checksums"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:409
msgid "For tarball downloads, Spack can currently support checksums using the MD5, SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512 algorithms.  It determines the algorithm to use based on the hash length."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:415
msgid "Versions and fetching"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:417
msgid "The most straightforward way to add new versions to your package is to add a line like this in the package class:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:430
msgid "Versions should be listed in descending order, from newest to oldest."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:434
msgid "Date Versions"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:436
msgid "If you wish to use dates as versions, it is best to use the format ``@yyyy-mm-dd``.  This will ensure they sort in the correct order."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:439
msgid "Alternately, you might use a hybrid release-version / date scheme. For example, ``@1.3_2016-08-31`` would mean the version from the ``1.3`` branch, as of August 31, 2016."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:445
msgid "Version URLs"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:447
msgid "By default, each version's URL is extrapolated from the ``url`` field in the package.  For example, Spack is smart enough to download version ``8.2.1`` of the ``Foo`` package above from http://example.com/foo-8.2.1.tar.gz."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:452
msgid "If the URL is particularly complicated or changes based on the release, you can override the default URL generation algorithm by defining your own ``url_for_version()`` function. For example, the download URL for OpenMPI contains the major.minor version in one spot and the major.minor.patch version in another:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:458
msgid "https://www.open-mpi.org/software/ompi/v2.1/downloads/openmpi-2.1.1.tar.bz2"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:460
msgid "In order to handle this, you can define a ``url_for_version()`` function like so:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:466
msgid "With the use of this ``url_for_version()``, Spack knows to download OpenMPI ``2.1.1`` from http://www.open-mpi.org/software/ompi/v2.1/downloads/openmpi-2.1.1.tar.bz2 but download OpenMPI ``1.10.7`` from http://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.7.tar.bz2."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:470
msgid "You'll notice that OpenMPI's ``url_for_version()`` function makes use of a special ``Version`` function called ``up_to()``. When you call ``version.up_to(2)`` on a version like ``1.10.0``, it returns ``1.10``. ``version.up_to(1)`` would return ``1``. This can be very useful for packages that place all ``X.Y.*`` versions in a single directory and then places all ``X.Y.Z`` versions in a sub-directory."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:476
msgid "There are a few ``Version`` properties you should be aware of. We generally prefer numeric versions to be separated by dots for uniformity, but not all tarballs are named that way. For example, ``icu4c`` separates its major and minor versions with underscores, like ``icu4c-57_1-src.tgz``. The value ``57_1`` can be obtained with the use of the ``version.underscored`` property. Note that Python properties don't need parentheses. There are other separator properties as well:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:484
msgid "Property"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:484
msgid "Result"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:486
msgid "version.dotted"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:486
msgid "1.2.3"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:487
msgid "version.dashed"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:487
msgid "1-2-3"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:488
msgid "version.underscored"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:488
msgid "1_2_3"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:489
msgid "version.joined"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:489
msgid "123"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:494
msgid "Python properties don't need parentheses. ``version.dashed`` is correct. ``version.dashed()`` is incorrect."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:497
msgid "In addition, these version properties can be combined with ``up_to()``. For example:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:509
msgid "As you can see, order is not important. Just keep in mind that ``up_to()`` and the other version properties return ``Version`` objects, not strings."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:512
msgid "If a URL cannot be derived systematically, or there is a special URL for one of its versions, you can add an explicit URL for a particular version:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:521
msgid "When you supply a custom URL for a version, Spack uses that URL *verbatim* and does not perform extrapolation. The order of precedence of these methods is:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:525
msgid "package-level ``url``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:526
msgid "``url_for_version()``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:527
msgid "version-specific ``url``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:529
msgid "so if your package contains a ``url_for_version()``, it can be overridden by a version-specific ``url``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:532
msgid "If your package does not contain a package-level ``url`` or ``url_for_version()``, Spack can determine which URL to download from even if only some of the versions specify their own ``url``. Spack will use the nearest URL *before* the requested version. This is useful for packages that have an easy to extrapolate URL, but keep changing their URL format every few releases. With this method, you only need to specify the ``url`` when the URL changes."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:541
msgid "Skipping the expand step"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:543
msgid "Spack normally expands archives (e.g. ``*.tar.gz`` and ``*.zip``) automatically after downloading them. If you want to skip this step (e.g., for self-extracting executables and other custom archive types), you can add ``expand=False`` to a ``version`` directive."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:553
msgid "When ``expand`` is set to ``False``, Spack sets the current working directory to the directory containing the downloaded archive before it calls your ``install`` method.  Within ``install``, the path to the downloaded archive is available as ``self.stage.archive_file``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:558
msgid "Here is an example snippet for packages distributed as self-extracting archives.  The example sets permissions on the downloaded file to make it executable, then runs it with some arguments."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:571
msgid "Download caching"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:573
msgid "Spack maintains a cache (described :ref:`here <caching>`) which saves files retrieved during package installations to avoid re-downloading in the case that a package is installed with a different specification (but the same version) or reinstalled on account of a change in the hashing scheme."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:580
msgid "Version comparison"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:582
msgid "Most Spack versions are numeric, a tuple of integers; for example, ``apex@0.1``, ``ferret@6.96`` or ``py-netcdf@1.2.3.1``.  Spack knows how to compare and sort numeric versions."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:586
msgid "Some Spack versions involve slight extensions of numeric syntax; for example, ``py-sphinx-rtd-theme@0.1.10a0``.  In this case, numbers are always considered to be \"newer\" than letters.  This is for consistency with `RPM <https://bugzilla.redhat.com/show_bug.cgi?id=50977>`_."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:591
msgid "Spack versions may also be arbitrary non-numeric strings; any string here will suffice; for example, ``@develop``, ``@master``, ``@local``. Versions are compared as follows. First, a version string is split into multiple fields based on delimiters such as ``.``, ``-`` etc. Then matching fields are compared using the rules below:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:597
msgid "The following develop-like strings are greater (newer) than all numbers and are ordered as ``develop > master > head > trunk``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:600
msgid "Numbers are all less than the chosen develop-like strings above, and are sorted numerically."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:603
msgid "All other non-numeric versions are less than numeric versions, and are sorted alphabetically."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:606
msgid "The logic behind this sort order is two-fold:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:608
msgid "Non-numeric versions are usually used for special cases while developing or debugging a piece of software.  Keeping most of them less than numeric versions ensures that Spack chooses numeric versions by default whenever possible."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:613
msgid "The most-recent development version of a package will usually be newer than any released numeric versions.  This allows the ``@develop`` version to satisfy dependencies like ``depends_on(abc, when=\"@x.y.z:\")``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:620
msgid "Version selection"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:622
msgid "When concretizing, many versions might match a user-supplied spec. For example, the spec ``python`` matches all available versions of the package ``python``.  Similarly, ``python@3:`` matches all versions of Python3.  Given a set of versions that match a spec, Spack concretization uses the following priorities to decide which one to use:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:629
msgid "If the user provided a list of versions in ``packages.yaml``, the first matching version in that list will be used."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:632
msgid "If one or more versions is specified as ``preferred=True``, in either ``packages.yaml`` or ``package.py``, the largest matching version will be used.  (\"Latest\" is defined by the sort order above)."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:637
msgid "If no preferences in particular are specified in the package or in ``packages.yaml``, then the largest matching non-develop version will be used.  By avoiding ``@develop``, this prevents users from accidentally installing a ``@develop`` version."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:642
msgid "If all else fails and ``@develop`` is the only matching version, it will be used."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:650
msgid "``spack checksum``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:652
msgid "If you want to add new versions to a package you've already created, this is automated with the ``spack checksum`` command.  Here's an example for ``libelf``:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:674
msgid "This does the same thing that ``spack create`` does, but it allows you to go back and add new versions easily as you need them (e.g., as they're released).  It fetches the tarballs you ask for and prints out a list of ``version`` commands ready to copy/paste into your package file:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:688
msgid "By default, Spack will search for new tarball downloads by scraping the parent directory of the tarball you gave it.  So, if your tarball is at ``http://example.com/downloads/foo-1.0.tar.gz``, Spack will look in ``http://example.com/downloads/`` for links to additional versions. If you need to search another path for download links, you can supply some extra attributes that control how your package finds new versions. See the documentation on :ref:`attribute_list_url` and :ref:`attribute_list_depth`."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:699
msgid "This command assumes that Spack can extrapolate new URLs from an existing URL in the package, and that Spack can find similar URLs on a webpage.  If that's not possible, e.g. if the package's developers don't name their tarballs consistently, you'll need to manually add ``version`` calls yourself."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:705
msgid "For ``spack checksum`` to work, Spack needs to be able to ``import`` your package in Python.  That means it can't have any syntax errors, or the ``import`` will fail.  Use this once you've got your package in working order."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:712
msgid "Finding new versions"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:714
msgid "You've already seen the ``homepage`` and ``url`` package attributes:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:728
msgid "These are class-level attributes used by Spack to show users information about the package, and to determine where to download its source code."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:732
msgid "Spack uses the tarball URL to extrapolate where to find other tarballs of the same package (e.g. in :ref:`cmd-spack-checksum`, but this does not always work.  This section covers ways you can tell Spack to find tarballs elsewhere."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:741
msgid "``list_url``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:743
msgid "When spack tries to find available versions of packages (e.g. with :ref:`cmd-spack-checksum`), it spiders the parent directory of the tarball in the ``url`` attribute.  For example, for libelf, the url is:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:752
msgid "Here, Spack spiders ``http://www.mr511.de/software/`` to find similar tarball links and ultimately to make a list of available versions of ``libelf``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:756
msgid "For many packages, the tarball's parent directory may be unlistable, or it may not contain any links to source code archives.  In fact, many times additional package downloads aren't even available in the same directory as the download URL."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:761
msgid "For these, you can specify a separate ``list_url`` indicating the page to search for tarballs.  For example, ``libdwarf`` has the homepage as the ``list_url``, because that is where links to old versions are:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:777
msgid "``list_depth``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:779
msgid "``libdwarf`` and many other packages have a listing of available versions on a single webpage, but not all do.  For example, ``mpich`` has a tarball URL that looks like this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:787
msgid "But its downloads are in many different subdirectories of ``http://www.mpich.org/static/downloads/``.  So, we need to add a ``list_url`` *and* a ``list_depth`` attribute:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:800
msgid "By default, Spack only looks at the top-level page available at ``list_url``.  ``list_depth = 1`` tells it to follow up to 1 level of links from the top-level page.  Note that here, this implies 1 level of subdirectories, as the ``mpich`` website is structured much like a filesystem.  But ``list_depth`` really refers to link depth when spidering the page."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:811
msgid "Fetching from code repositories"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:813
msgid "For some packages, source code is provided in a Version Control System (VCS) repository rather than in a tarball.  Spack can fetch packages from VCS repositories. Currently, Spack supports fetching with `Git <git-fetch_>`_, `Mercurial (hg) <hg-fetch_>`_, `Subversion (svn) <svn-fetch_>`_, and `Go <go-fetch_>`_."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:819
msgid "To fetch a package from a source repository, Spack needs to know which VCS to use and where to download from. Much like with ``url``, package authors can specify a class-level ``git``, ``hg``, ``svn``, or ``go`` attribute containing the correct download location."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:824
msgid "Many packages developed with Git have both a Git repository as well as release tarballs available for download. Packages can define both a class-level tarball URL and VCS. For example:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:842
msgid "If a package contains both a ``url`` and ``git`` class-level attribute, Spack decides which to use based on the arguments to the ``version()`` directive. Versions containing a specific branch, tag, or revision are assumed to be for VCS download methods, while versions containing a checksum are assumed to be for URL download methods."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:848
msgid "Like ``url``, if a specific version downloads from a different repository than the default repo, it can be overridden with a version-specific argument."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:853
msgid "In order to reduce ambiguity, each package can only have a single VCS top-level attribute in addition to ``url``. In the rare case that a package uses multiple VCS, a fetch strategy can be specified for each version. For example, the ``rockstar`` package contains:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:872
msgid "Git"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:874
msgid "Git fetching supports the following parameters to ``version``:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:876
msgid "``git``: URL of the git repository, if different than the class-level ``git``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:877
msgid "``branch``: Name of a branch to fetch."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:878
msgid "``tag``: Name of a tag to fetch."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:879
msgid "``commit``: SHA hash (or prefix) of a commit to fetch."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:880
msgid "``submodules``: Also fetch submodules recursively when checking out this repository."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:882
msgid "Only one of ``tag``, ``branch``, or ``commit`` can be used at a time."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:899
#: ../spack/lib/spack/docs/packaging_guide.rst:998
msgid "Default branch"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:885
msgid "To fetch a repository's default branch:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:895
msgid "This download method is untrusted, and is not recommended. Aside from HTTPS, there is no way to verify that the repository has not been compromised, and the commit you get when you install the package likely won't be the same commit that was used when the package was first written. Additionally, the default branch may change. It is best to at least specify a branch name."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:910
msgid "Branches"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:902
msgid "To fetch a particular branch, use the ``branch`` parameter:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:908
msgid "This download method is untrusted, and is not recommended. Branches are moving targets, so the commit you get when you install the package likely won't be the same commit that was used when the package was first written."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:922
msgid "Tags"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:913
msgid "To fetch from a particular tag, use ``tag`` instead:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:919
msgid "This download method is untrusted, and is not recommended. Although tags are generally more stable than branches, Git allows tags to be moved. Many developers use tags to denote rolling releases, and may move the tag when a bug is patched."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:946
msgid "Commits"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:925
msgid "Finally, to fetch a particular commit, use ``commit``:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:931
msgid "This doesn't have to be a full hash; you can abbreviate it as you'd expect with git:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:938
msgid "This download method *is trusted*.  It is the recommended way to securely download from a Git repository."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:941
msgid "It may be useful to provide a saner version for commits like this, e.g. you might use the date as the version, as done above. Or, if you know the commit at which a release was cut, you can use the release version. It's up to the package author to decide what makes the most sense. Although you can use the commit hash as the version number, this is not recommended, as it won't sort properly."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:956
msgid "Submodules"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:949
msgid "You can supply ``submodules=True`` to cause Spack to fetch submodules recursively along with the repository at fetch time. For more information about git submodules see the manpage of git: ``man git-submodule``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:962
msgid "GitHub"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:964
msgid "If a project is hosted on GitHub, *any* valid Git branch, tag, or hash may be downloaded as a tarball.  This is accomplished simply by constructing an appropriate URL.  Spack can checksum any package downloaded this way, thereby producing a trusted download.  For example, the following downloads a particular hash, and then applies a checksum."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:980
msgid "Mercurial"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:982
msgid "Fetching with Mercurial works much like `Git <git-fetch>`_, but you use the ``hg`` parameter."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:986
msgid "Add the ``hg`` attribute with no ``revision`` passed to ``version``:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:996
msgid "This download method is untrusted, and is not recommended. As with Git's default fetching strategy, there is no way to verify the integrity of the download."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1013
msgid "Revisions"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1001
msgid "To fetch a particular revision, use the ``revision`` parameter:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1007
msgid "Unlike ``git``, which has special parameters for different types of revisions, you can use ``revision`` for branches, tags, and commits when you fetch with Mercurial. Like Git, fetching specific branches or tags is an untrusted download method, and is not recommended. The recommended fetch strategy is to specify a particular commit hash as the revision."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1019
msgid "Subversion"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1021
msgid "To fetch with subversion, use the ``svn`` and ``revision`` parameters."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1035
msgid "Fetching the head"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1024
msgid "Simply add an ``svn`` parameter to the package:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1034
msgid "This download method is untrusted, and is not recommended for the same reasons as mentioned above."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1050
msgid "Fetching a revision"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1038
msgid "To fetch a particular revision, add a ``revision`` argument to the version directive:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1045
msgid "This download method is untrusted, and is not recommended."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1047
msgid "Unfortunately, Subversion has no commit hashing scheme like Git and Mercurial do, so there is no way to guarantee that the download you get is the same as the download used when the package was created. Use at your own risk."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1052
msgid "Subversion branches are handled as part of the directory structure, so you can check out a branch or tag by changing the URL. If you want to package multiple branches, simply add a ``svn`` argument to each version directive."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1061
msgid "Go"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1063
msgid "Go isn't a VCS, it is a programming language with a builtin command, `go get <https://golang.org/cmd/go/#hdr-Download_and_install_packages_and_dependencies>`_, that fetches packages and their dependencies automatically. It can clone a Git repository, or download from another source location. For example:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1078
msgid "Go cannot be used to fetch a particular commit or branch, it always downloads the head of the repository. This download method is untrusted, and is not recommended. Use another fetch strategy whenever possible."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1080
msgid "and is not recommended. Use another fetch strategy whenever possible."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1084
msgid "Variants"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1086
msgid "Many software packages can be configured to enable optional features, which often come at the expense of additional dependencies or longer build-times. To be flexible enough and support a wide variety of use cases, Spack permits to expose to the end-user the ability to choose which features should be activated in a package at the time it is installed. The mechanism to be employed is the :py:func:`spack.directives.variant` directive."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1095
msgid "Boolean variants"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1097
msgid "In their simplest form variants are boolean options specified at the package level:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1108
msgid "with a default value and a description of their meaning / use in the package. *Variants can be tested in any context where a spec constraint is expected.* In the example above the ``shared`` variant is tied to the build of shared dynamic libraries. To pass the right option at configure time we can branch depending on its value:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1124
msgid "As explained in :ref:`basic-variants` the constraint ``+shared`` means that the boolean variant is set to ``True``, while ``~shared`` means it is set to ``False``. Another common example is the optional activation of an extra dependency which requires to use the variant in the ``when`` argument of :py:func:`spack.directives.depends_on`:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1138
msgid "as shown in the snippet above where ``szip`` is modeled to be an optional dependency of ``hdf5``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1143
msgid "Multi-valued variants"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1145
msgid "If need be, Spack can go beyond Boolean variants and permit an arbitrary number of allowed values. This might be useful when modeling options that are tightly related to each other. The values in this case are passed to the :py:func:`spack.directives.variant` directive as a tuple:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1160
msgid "In the example above the argument ``multi`` is set to ``False`` to indicate that only one among all the variant values can be active at any time. This constraint is enforced by the parser and an error is emitted if a user specifies two or more values at the same time:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1176
msgid "Another useful note is that *Python's* ``None`` *is not allowed as a default value* and therefore it should not be used to denote that no feature was selected. Users should instead select another value, like ``'none'``, and handle it explicitly within the package recipe if need be:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1186
msgid "In cases where multiple values can be selected at the same time ``multi`` should be set to ``True``:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1201
msgid "Within a package recipe a multi-valued variant is tested using a ``key=value`` syntax:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1210
msgid "Complex validation logic for variant values"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1211
msgid "To cover complex use cases, the :py:func:`spack.directives.variant` directive could accept as the ``values`` argument a full-fledged object which has ``default`` and other arguments of the directive embedded as attributes."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1215
msgid "An example, already implemented in Spack's core, is :py:class:`spack.variant.DisjointSetsOfValues`. This class is used to implement a few convenience functions, like :py:func:`spack.variant.any_combination_of`:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1229
msgid "that allows any combination of the specified values, and also allows the user to specify ``'none'`` (as a string) to choose none of them. The objects returned by these functions can be modified at will by chaining method calls to change the default value, customize the error message or other similar operations:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1252
msgid "Resources (expanding extra tarballs)"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1254
msgid "Some packages (most notably compilers) provide optional features if additional resources are expanded within their source tree before building. In Spack it is possible to describe such a need with the ``resource`` directive :"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1267
msgid "Based on the keywords present among the arguments the appropriate ``FetchStrategy`` will be used for the resource. The keyword ``destination`` is relative to the source root of the package and should point to where the resource is to be expanded."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1275
msgid "Licensed software"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1277
msgid "In order to install licensed software, Spack needs to know a few more details about a package. The following class attributes should be defined."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1282
msgid "``license_required``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1284
msgid "Boolean. If set to ``True``, this software requires a license. If set to ``False``, all of the following attributes will be ignored. Defaults to ``False``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1290
msgid "``license_comment``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1292
msgid "String. Contains the symbol used by the license manager to denote a comment. Defaults to ``#``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1297
msgid "``license_files``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1299
msgid "List of strings. These are files that the software searches for when looking for a license. All file paths must be relative to the installation directory. More complex packages like Intel may require multiple licenses for individual components. Defaults to the empty list."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1306
msgid "``license_vars``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1308
msgid "List of strings. Environment variables that can be set to tell the software where to look for a license if it is not in the usual location. Defaults to the empty list."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1314
msgid "``license_url``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1316
msgid "String. A URL pointing to license setup instructions for the software. Defaults to the empty string."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1319
msgid "For example, let's take a look at the package for the PGI compilers."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1330
msgid "As you can see, PGI requires a license. Its license manager, FlexNet, uses the ``#`` symbol to denote a comment. It expects the license file to be named ``license.dat`` and to be located directly in the installation prefix. If you would like the installation file to be located elsewhere, simply set ``PGROUPD_LICENSE_FILE`` or ``LM_LICENSE_FILE`` after installation. For further instructions on installation and licensing, see the URL provided."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1337
msgid "Let's walk through a sample PGI installation to see exactly what Spack is and isn't capable of. Since PGI does not provide a download URL, it must be downloaded manually. It can either be added to a mirror or located in the current directory when ``spack install pgi`` is run. See :ref:`mirrors` for instructions on setting up a mirror."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1343
msgid "After running ``spack install pgi``, the first thing that will happen is Spack will create a global license file located at ``$SPACK_ROOT/etc/spack/licenses/pgi/license.dat``. It will then open up the file using the editor set in ``$EDITOR``, or vi if unset. It will look like this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1376
msgid "You can add your license directly to this file, or tell FlexNet to use a license stored on a separate license server. Here is an example that points to a license server called licman1:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1385
msgid "If your package requires the license to install, you can reference the location of this global license using ``self.global_license_file``. After installation, symlinks for all of the files given in ``license_files`` will be created, pointing to this global license. If you install a different version or variant of the package, Spack will automatically detect and reuse the already existing global license."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1392
msgid "If the software you are trying to package doesn't rely on license files, Spack will print a warning message, letting the user know that they need to set an environment variable or pointing them to installation documentation."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1401
msgid "Patches"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1403
msgid "Depending on the host architecture, package version, known bugs, or other issues, you may need to patch your software to get it to build correctly.  Like many other package systems, spack allows you to store patches alongside your package files and apply them to source code after it's downloaded."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1411
msgid "``patch``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1413
msgid "You can specify patches in your package file with the ``patch()`` directive.  ``patch`` looks like this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1422
msgid "The first argument can be either a URL or a filename.  It specifies a patch file that should be applied to your source.  If the patch you supply is a filename, then the patch needs to live within the spack source tree.  For example, the patch above lives in a directory structure like this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1435
msgid "If you supply a URL instead of a filename, you need to supply a ``sha256`` checksum, like this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1443
msgid "Spack includes the hashes of patches in its versioning information, so that the same package with different patches applied will have different hash identifiers.  To ensure that the hashing scheme is consistent, you must use a ``sha256`` checksum for the patch.  Patches will be fetched from their URLs, checked, and applied to your source code.  You can use the ``spack sha256`` command to generate a checksum for a patch file or URL."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1451
msgid "Spack can also handle compressed patches.  If you use these, Spack needs a little more help.  Specifically, it needs *two* checksums: the ``sha256`` of the patch and ``archive_sha256`` for the compressed archive.  ``archive_sha256`` helps Spack ensure that the downloaded file is not corrupted or malicious, before running it through a tool like ``tar`` or ``zip``.  The ``sha256`` of the patch is still required so that it can be included in specs.  Providing it in the package file ensures that Spack won't have to download and decompress patches it won't end up using at install time.  Both the archive and patch checksum are checked when patch archives are downloaded."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1468
msgid "``patch`` keyword arguments are described below."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1472
msgid "``sha256``, ``archive_sha256``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1474
msgid "Hashes of downloaded patch and compressed archive, respectively.  Only needed for patches fetched from URLs."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1479
msgid "``when``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1481
msgid "If supplied, this is a spec that tells spack when to apply the patch.  If the installed package spec matches this spec, the patch will be applied.  In our example above, the patch is applied when mvapich is at version ``1.9`` or higher."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1488
msgid "``level``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1490
msgid "This tells spack how to run the ``patch`` command.  By default, the level is 1 and spack runs ``patch -p 1``.  If level is 2, spack will run ``patch -p 2``, and so on."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1494
msgid "A lot of people are confused by level, so here's a primer.  If you look in your patch file, you may see something like this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1512
msgid "Lines 1-2 show paths with synthetic ``a/`` and ``b/`` prefixes.  These are placeholders for the two ``mvapich2`` source directories that ``diff`` compared when it created the patch file.  This is git's default behavior when creating patch files, but other programs may behave differently."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1518
msgid "``-p1`` strips off the first level of the prefix in both paths, allowing the patch to be applied from the root of an expanded mvapich2 archive.  If you set level to ``2``, it would strip off ``src``, and so on."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1523
msgid "It's generally easier to just structure your patch file so that it applies cleanly with ``-p1``, but if you're using a patch you didn't create yourself, ``level`` can be handy."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1529
msgid "``working_dir``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1531
msgid "This tells spack where to run the ``patch`` command.  By default, the working directory is the source path of the stage (``.``). However, sometimes patches are made with respect to a subdirectory and this is where the working directory comes in handy. Internally, the working directory is given to ``patch`` via the ``-d`` option. Let's take the example patch from above and assume for some reason, it can only be downloaded in the following form:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1554
msgid "Hence, the patch needs to applied in the ``src/mpi`` subdirectory, and the ``working_dir='src/mpi'`` option would exactly do that."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1559
msgid "Patch functions"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1561
msgid "In addition to supplying patch files, you can write a custom function to patch a package's source.  For example, the ``py-pyside`` package contains some custom code for tweaking the way the PySide build handles ``RPATH``:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1572
msgid "A ``patch`` function, if present, will be run after patch files are applied and before ``install()`` is run."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1575
msgid "You could put this logic in ``install()``, but putting it in a patch function gives you some benefits.  First, spack ensures that the ``patch()`` function is run once per code checkout.  That means that if you run install, hit ctrl-C, and run install again, the code in the patch function is only run once.  Also, you can tell Spack to run only the patching part of the build using the :ref:`cmd-spack-patch` command."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1586
#: ../spack/lib/spack/docs/packaging_guide.rst:1933
msgid "Dependency patching"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1588
msgid "So far we've covered how the ``patch`` directive can be used by a package to patch *its own* source code. Packages can *also* specify patches to be applied to their dependencies, if they require special modifications.  As with all packages in Spack, a patched dependency library can coexist with other versions of that library.  See the `section on depends_on <dependency_dependency_patching_>`_ for more details."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1599
msgid "Inspecting patches"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1601
msgid "If you want to better understand the patches that Spack applies to your packages, you can do that using ``spack spec``, ``spack find``, and other query commands.  Let's look at ``m4``.  If you run ``spack spec m4``, you can see the patches that would be applied to ``m4``::"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1616
msgid "You can also see patches that have been applied to installed packages with ``spack find -v``::"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1626
msgid "In both cases above, you can see that the patches' sha256 hashes are stored on the spec as a variant.  As mentioned above, this means that you can have multiple, differently-patched versions of a package installed at once."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1631
msgid "You can look up a patch by its sha256 hash (or a short version of it) using the ``spack resource show`` command::"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1639
msgid "``spack resource show`` looks up downloadable resources from package files by hash and prints out information about them.  Above, we see that the ``3877ab54`` patch applies to the ``m4`` package.  The output also tells us where to find the patch."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1644
msgid "Things get more interesting if you want to know about dependency patches. For example, when ``dealii`` is built with ``boost@1.68.0``, it has to patch boost to work correctly.  If you didn't know this, you might wonder where the extra boost patches are coming from::"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1658
msgid "Here you can see that the patch is applied to ``boost`` by ``dealii``, and that it lives in ``dealii``'s directory in Spack's ``builtin`` package repository."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1666
msgid "Handling RPATHs"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1668
msgid "Spack installs each package in a way that ensures that all of its dependencies are found when it runs.  It does this using `RPATHs <http://en.wikipedia.org/wiki/Rpath>`_.  An RPATH is a search path, stored in a binary (an executable or library), that tells the dynamic loader where to find its dependencies at runtime. You may be familiar with `LD_LIBRARY_PATH <http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html>`_ on Linux or `DYLD_LIBRARY_PATH <https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/dyld.1.html>`_ on Mac OS X.  RPATH is similar to these paths, in that it tells the loader where to find libraries.  Unlike them, it is embedded in the binary and not set in each user's environment."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1681
msgid "RPATHs in Spack are handled in one of three ways:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1683
msgid "For most packages, RPATHs are handled automatically using Spack's :ref:`compiler wrappers <compiler-wrappers>`.  These wrappers are set in standard variables like ``CC``, ``CXX``, ``F77``, and ``FC``, so most build systems (autotools and many gmake systems) pick them up and use them."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1688
msgid "CMake also respects Spack's compiler wrappers, but many CMake builds have logic to overwrite RPATHs when binaries are installed. Spack provides the ``std_cmake_args`` variable, which includes parameters necessary for CMake build use the right installation RPATH.  It can be used like this when ``cmake`` is invoked:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1704
msgid "If you need to modify the build to add your own RPATHs, you can use the ``self.rpath`` property of your package, which will return a list of all the RPATHs that Spack will use when it links.  You can see this how this is used in the :ref:`PySide example <pyside-patch>` above."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1714
msgid "Parallel builds"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1716
msgid "By default, Spack will invoke ``make()`` with a ``-j <njobs>`` argument, so that builds run in parallel.  It figures out how many jobs to run by determining how many cores are on the host machine. Specifically, it uses the number of CPUs reported by Python's `multiprocessing.cpu_count() <http://docs.python.org/library/multiprocessing.html#multiprocessing.cpu_count>`_."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1723
msgid "If a package does not build properly in parallel, you can override this setting by adding ``parallel = False`` to your package.  For example, OpenSSL's build does not work in parallel, so its package looks like this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1741
msgid "Similarly, you can disable parallel builds only for specific make commands, as ``libdwarf`` does:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1761
msgid "The first make will run in parallel here, but the second will not.  If you set ``parallel`` to ``False`` at the package level, then each call to ``make()`` will be sequential by default, but packagers can call ``make(parallel=True)`` to override it."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1770
msgid "Dependencies"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1772
msgid "We've covered how to build a simple package, but what if one package relies on another package to build?  How do you express that in a package file?  And how do you refer to the other package in the build script for your own package?"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1777
msgid "Spack makes this relatively easy.  Let's take a look at the ``libdwarf`` package to see how it's done:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1799
msgid "``depends_on()``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1801
msgid "The highlighted ``depends_on('libelf')`` call tells Spack that it needs to build and install the ``libelf`` package before it builds ``libdwarf``.  This means that in your ``install()`` method, you are guaranteed that ``libelf`` has been built and installed successfully, so you can rely on it for your libdwarf build."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1809
msgid "Dependency specs"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1811
msgid "``depends_on`` doesn't just take the name of another package. It can take a full spec as well. This means that you can restrict the versions or other configuration options of ``libelf`` that ``libdwarf`` will build with. For example, suppose that in the ``libdwarf`` package you write:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1820
msgid "Now ``libdwarf`` will require ``libelf`` at *exactly* version ``0.8``. You can also specify a requirement for a particular variant or for specific compiler flags:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1830
msgid "Both users *and* package authors can use the same spec syntax to refer to different package configurations. Users use the spec syntax on the command line to find installed packages or to install packages with particular constraints, and package authors can use specs to describe relationships between packages."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1838
msgid "Version ranges"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1840
msgid "Although some packages require a specific version for their dependencies, most can be built with a range of version. For example, if you are writing a package for a legacy Python module that only works with Python 2.4 through 2.6, this would look like:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1849
msgid "Version ranges in Spack are *inclusive*, so ``2.4:2.6`` means any version greater than or equal to ``2.4`` and up to and including ``2.6``. If you want to specify that a package works with any version of Python 3, this would look like:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1858
msgid "Here we leave out the upper bound. If you want to say that a package requires Python 2, you can similarly leave out the lower bound:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1865
msgid "Notice that we didn't use ``@:3``. Version ranges are *inclusive*, so ``@:3`` means \"up to and including 3\"."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1868
msgid "What if a package can only be built with Python 2.6? You might be inclined to use:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1875
msgid "However, this would be wrong. Spack assumes that all version constraints are absolute, so it would try to install Python at exactly ``2.6``. The correct way to specify this would be:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1883
msgid "A spec can contain multiple version ranges separated by commas. For example, if you need Boost 1.59.0 or newer, but there are known issues with 1.64.0, 1.65.0, and 1.66.0, you can say:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1894
msgid "Dependency types"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1896
msgid "Not all dependencies are created equal, and Spack allows you to specify exactly what kind of a dependency you need. For example:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1905
msgid "The following dependency types are available:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1907
msgid "**\"build\"**: made available during the project's build. The package will be added to ``PATH``, the compiler include paths, and ``PYTHONPATH``. Other projects which depend on this one will not have these modified (building project X doesn't need project Y's build dependencies)."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1911
msgid "**\"link\"**: the project is linked to by the project. The package will be added to the current package's ``rpath``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1913
msgid "**\"run\"**: the project is used by the project at runtime. The package will be added to ``PATH`` and ``PYTHONPATH``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1916
msgid "One of the advantages of the ``build`` dependency type is that although the dependency needs to be installed in order for the package to be built, it can be uninstalled without concern afterwards. ``link`` and ``run`` disallow this because uninstalling the dependency would break the package."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1921
msgid "If the dependency type is not specified, Spack uses a default of ``('build', 'link')``. This is the common case for compiler languages. Non-compiled packages like Python modules commonly use ``('build', 'run')``. This means that the compiler wrappers don't need to inject the dependency's ``prefix/lib`` directory, but the package needs to be in ``PATH`` and ``PYTHONPATH`` during the build process and later when a user wants to run the package."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1935
msgid "Some packages maintain special patches on their dependencies, either to add new features or to fix bugs.  This typically makes a package harder to maintain, and we encourage developers to upstream (contribute back) their changes rather than maintaining patches.  However, in some cases it's not possible to upstream. Maybe the dependency's developers don't accept changes, or maybe they just haven't had time to integrate them."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1942
msgid "For times like these, Spack's ``depends_on`` directive can optionally take a patch or list of patches:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1952
msgid "Here, the ``special-tool`` package requires a special feature in ``binutils``, so it provides an extra ``patches=<filename>`` keyword argument.  This is similar to the `patch directive <patching_>`_, with one small difference.  Here, ``special-tool`` is responsible for the patch, so it should live in ``special-tool``'s directory in the package repository, not the ``binutils`` directory."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1959
msgid "If you need something more sophisticated than this, you can simply nest a ``patch()`` directive inside of ``depends_on``:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1974
msgid "Note that there are two optional ``when`` conditions here -- one on the ``patch`` directive and the other on ``depends_on``.  The condition in the ``patch`` directive applies to ``binutils`` (the package being patched), while the condition in ``depends_on`` applies to ``special-tool``.  See `patch directive <patching_>`_ for details on all the arguments the ``patch`` directive can take."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1981
msgid "Finally, if you need *multiple* patches on a dependency, you can provide a list for ``patches``, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:1999
msgid "As with ``patch`` directives, patches are applied in the order they appear in the package file (or in this case, in the list)."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2004
msgid "You may wonder whether dependency patching will interfere with other packages that depend on ``binutils``.  It won't."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2007
msgid "As described in patching_, Patching a package adds the ``sha256`` of the patch to the package's spec, which means it will have a *different* unique hash than other versions without the patch.  The patched version coexists with unpatched versions, and Spack's support for handling_rpaths_ guarantees that each installation finds the right version. If two packages depend on ``binutils`` patched *the same* way, they can both use a single installation of ``binutils``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2019
msgid "``setup_dependent_environment()``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2021
msgid "Spack provides a mechanism for dependencies to provide variables that can be used in their dependents' build.  Any package can declare a ``setup_dependent_environment()`` function, and this function will be called before the ``install()`` method of any dependent packages. This allows dependencies to set up environment variables and other properties to be used by dependents."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2028
msgid "The function declaration should look like this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2034
msgid "Here, the Qt package sets the ``QTDIR`` environment variable so that packages that depend on a particular Qt installation will find it."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2037
msgid "The arguments to this function are:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2039
msgid "**spack_env**: List of environment modifications to be applied when the dependent package is built within Spack."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2041
msgid "**run_env**: List of environment modifications to be applied when the dependent package is run outside of Spack. These are added to the resulting module file."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2044
msgid "**dependent_spec**: The spec of the dependent package about to be built. This allows the extendee (self) to query the dependent's state. Note that *this* package's spec is available as ``self.spec``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2048
msgid "A good example of using these is in the Python package:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2054
msgid "The first thing that happens here is that the ``python`` command is inserted into module scope of the dependent.  This allows most python packages to have a very simple install method, like this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2063
msgid "Python's ``setup_dependent_environment`` method also sets up some other variables, creates a directory, and sets up the ``PYTHONPATH`` so that dependent packages can find their dependencies at build time."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2071
msgid "Conflicts"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2073
msgid "Sometimes packages have known bugs, or limitations, that would prevent them to build e.g. against other dependencies or with certain compilers. Spack makes it possible to express such constraints with the ``conflicts`` directive."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2077
msgid "Adding the following to a package:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2083
msgid "we express the fact that the current package *cannot be built* with the Intel compiler when we are trying to install version \"1.2\". The ``when`` argument can be omitted, in which case the conflict will always be active. Conflicts are always evaluated after the concretization step has been performed, and if any match is found a detailed error message is shown to the user."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2093
msgid "Extensions"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2095
msgid "Spack's support for package extensions is documented extensively in :ref:`extensions`.  This section documents how to make your own extendable packages and extensions."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2099
msgid "To support extensions, a package needs to set its ``extendable`` property to ``True``, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2109
msgid "To make a package into an extension, simply add simply add an ``extends`` call in the package definition, and pass it the name of an extendable package:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2120
msgid "Now, the ``py-numpy`` package can be used as an argument to ``spack activate``.  When it is activated, all the files in its prefix will be symbolically linked into the prefix of the python package."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2124
msgid "Some packages produce a Python extension, but are only compatible with Python 3, or with Python 2.  In those cases, a ``depends_on()`` declaration should be made in addition to the ``extends()`` declaration:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2135
msgid "Many packages produce Python extensions for *some* variants, but not others: they should extend ``python`` only if the appropriate variant(s) are selected.  This may be accomplished with conditional ``extends()`` declarations:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2148
msgid "Sometimes, certain files in one package will conflict with those in another, which means they cannot both be activated (symlinked) at the same time.  In this case, you can tell Spack to ignore those files when it does the activation:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2162
msgid "The code above will prevent everything in the ``$prefix/bin/`` directory from being linked in at activation time."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2167
msgid "You can call *either* ``depends_on`` or ``extends`` on any one package, but not both.  For example you cannot both ``depends_on('python')`` and ``extends(python)`` in the same package.  ``extends`` implies ``depends_on``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2174
msgid "Views"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2176
msgid "As covered in :ref:`filesystem-views`, the ``spack view`` command can be used to symlink a number of packages into a merged prefix. The methods of ``PackageViewMixin`` can be overridden to customize how packages are added to views. Generally this can be used to create copies of specific files rather than symlinking them when symlinking does not work. For example, ``Python`` overrides ``add_files_to_view`` in order to create a copy of the ``python`` binary since the real path of the Python executable is used to detect extensions; as a consequence python extension packages (those inheriting from ``PythonPackage``) likewise override ``add_files_to_view`` in order to rewrite shebang lines which point to the Python interpreter."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2189
msgid "Activation & deactivation"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2191
msgid "Adding an extension to a view is referred to as an activation. If the view is maintained in the Spack installation prefix of the extendee this is called a global activation. Activations may involve updating some centralized state that is maintained by the extendee package, so there can be additional work for adding extensions compared with non-extension packages."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2197
msgid "Spack's ``Package`` class has default ``activate`` and ``deactivate`` implementations that handle symbolically linking extensions' prefixes into a specified view. Extendable packages can override these methods to add custom activate/deactivate logic of their own.  For example, the ``activate`` and ``deactivate`` methods in the Python class handle symbolic linking of extensions, but they also handle details surrounding Python's ``.pth`` files, and other aspects of Python packaging."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2205
msgid "Spack's extensions mechanism is designed to be extensible, so that other packages (like Ruby, R, Perl, etc.)  can provide their own custom extension management logic, as they may not handle modules the same way that Python does."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2210
msgid "Let's look at Python's activate function:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2216
msgid "This function is called on the *extendee* (Python).  It first calls ``activate`` in the superclass, which handles symlinking the extension package's prefix into the specified view.  It then does some special handling of the ``easy-install.pth`` file, part of Python's setuptools."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2222
msgid "Deactivate behaves similarly to activate, but it unlinks files:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2228
msgid "Both of these methods call some custom functions in the Python package.  See the source for Spack's Python package for details."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2233
msgid "Activation arguments"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2235
msgid "You may have noticed that the ``activate`` function defined above takes keyword arguments.  These are the keyword arguments from ``extends()``, and they are passed to both activate and deactivate."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2239
msgid "This capability allows an extension to customize its own activation by passing arguments to the extendee.  Extendees can likewise implement custom ``activate()`` and ``deactivate()`` functions to suit their needs."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2244
msgid "The only keyword argument supported by default is the ``ignore`` argument, which can take a regex, list of regexes, or a predicate to determine which files *not* to symlink during activation."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2252
msgid "Virtual dependencies"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2254
msgid "In some cases, more than one package can satisfy another package's dependency.  One way this can happen is if a package depends on a particular *interface*, but there are multiple *implementations* of the interface, and the package could be built with any of them.  A *very* common interface in HPC is the `Message Passing Interface (MPI) <http://www.mcs.anl.gov/research/projects/mpi/>`_, which is used in many large-scale parallel applications."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2262
msgid "MPI has several different implementations (e.g., `MPICH <http://www.mpich.org>`_, `OpenMPI <http://www.open-mpi.org>`_, and `MVAPICH <http://mvapich.cse.ohio-state.edu>`_) and scientific applications can be built with any one of them.  Complicating matters, MPI does not have a standardized ABI, so a package built with one implementation cannot simply be relinked with another implementation. Many package managers handle interfaces like this by requiring many similar package files, e.g., ``foo``, ``foo-mvapich``, ``foo-mpich``, but Spack avoids this explosion of package files by providing support for *virtual dependencies*."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2275
msgid "``provides``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2277
msgid "In Spack, ``mpi`` is handled as a *virtual package*.  A package like ``mpileaks`` can depend on it just like any other package, by supplying a ``depends_on`` call in the package definition.  For example:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2295
msgid "Here, ``callpath`` and ``adept-utils`` are concrete packages, but there is no actual package file for ``mpi``, so we say it is a *virtual* package.  The syntax of ``depends_on``, is the same for both.  If we look inside the package file of an MPI implementation, say MPICH, we'll see something like this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2307
msgid "The ``provides(\"mpi\")`` call tells Spack that the ``mpich`` package can be used to satisfy the dependency of any package that ``depends_on('mpi')``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2313
msgid "Versioned Interfaces"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2315
msgid "Just as you can pass a spec to ``depends_on``, so can you pass a spec to ``provides`` to add constraints.  This allows Spack to support the notion of *versioned interfaces*.  The MPI standard has gone through many revisions, each with new functions added, and each revision of the standard has a version number.  Some packages may require a recent implementation that supports MPI-3 functions, but some MPI versions may only provide up to MPI-2.  Others may need MPI 2.1 or higher.  You can indicate this by adding a version constraint to the spec passed to ``provides``:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2329
msgid "Suppose that the above ``provides`` call is in the ``mpich2`` package. This says that ``mpich2`` provides MPI support *up to* version 2, but if a package ``depends_on(\"mpi@3\")``, then Spack will *not* build that package with ``mpich2``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2336
msgid "``provides when``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2338
msgid "The same package may provide different versions of an interface depending on *its* version.  Above, we simplified the ``provides`` call in ``mpich`` to make the explanation easier.  In reality, this is how ``mpich`` calls ``provides``:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2348
msgid "The ``when`` argument to ``provides`` allows you to specify optional constraints on the *providing* package, or the *provider*.  The provider only provides the declared virtual spec when *it* matches the constraints in the when clause.  Here, when ``mpich`` is at version 3 or higher, it provides MPI up to version 3.  When ``mpich`` is at version 1 or higher, it provides the MPI virtual package at version 1."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2356
msgid "The ``when`` qualifier ensures that Spack selects a suitably high version of ``mpich`` to satisfy some other package that ``depends_on`` a particular version of MPI.  It will also prevent a user from building with too low a version of ``mpich``.  For example, suppose the package ``foo`` declares this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2368
msgid "Suppose a user invokes ``spack install`` like this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2374
msgid "Spack will fail with a constraint violation, because the version of MPICH requested is too low for the ``mpi`` requirement in ``foo``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2381
msgid "Abstract & concrete specs"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2383
msgid "Now that we've seen how spec constraints can be specified :ref:`on the command line <sec-specs>` and within package definitions, we can talk about how Spack puts all of this information together.  When you run this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2392
msgid "Spack parses the command line and builds a spec from the description. The spec says that ``mpileaks`` should be built with the ``callpath`` library at 1.0 and with the debug option enabled, and with ``libelf`` version 0.8.11.  Spack will also look at the ``depends_on`` calls in all of these packages, and it will build a spec from that.  The specs from the command line and the specs built from package descriptions are then combined, and the constraints are checked against each other to make sure they're satisfiable."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2401
msgid "What we have after this is done is called an *abstract spec*.  An abstract spec is partially specified.  In other words, it could describe more than one build of a package.  Spack does this to make things easier on the user: they should only have to specify as much of the package spec as they care about.  Here's an example partial spec DAG, based on the constraints above:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2427
msgid "This diagram shows a spec DAG output as a tree, where successive levels of indentation represent a depends-on relationship.  In the above DAG, we can see some packages annotated with their constraints, and some packages with no annotations at all.  When there are no annotations, it means the user doesn't care what configuration of that package is built, just so long as it works."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2436
msgid "Concretization"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2438
msgid "An abstract spec is useful for the user, but you can't install an abstract spec.  Spack has to take the abstract spec and \"fill in\" the remaining unspecified parts in order to install.  This process is called **concretization**.  Concretization happens in between the time the user runs ``spack install`` and the time the ``install()`` method is called.  The concretized version of the spec above might look like this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2465
msgid "Here, all versions, compilers, and platforms are filled in, and there is a single version (no version ranges) for each package.  All decisions about configuration have been made, and only after this point will Spack call the ``install()`` method for your package."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2470
msgid "Concretization in Spack is based on certain selection policies that tell Spack how to select, e.g., a version, when one is not specified explicitly.  Concretization policies are discussed in more detail in :ref:`configuration`.  Sites using Spack can customize them to match the preferences of their own users."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2480
msgid "``spack spec``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2482
msgid "For an arbitrary spec, you can see the result of concretization by running ``spack spec``.  For example:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2496
msgid "This is useful when you want to know exactly what Spack will do when you ask for a particular spec."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2503
msgid "``Concretization Policies``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2505
msgid "A user may have certain preferences for how packages should be concretized on their system.  For example, one user may prefer packages built with OpenMPI and the Intel compiler.  Another user may prefer packages be built with MVAPICH and GCC."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2510
msgid "See the :ref:`concretization-preferences` section for more details."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2516
msgid "Conflicting Specs"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2518
msgid "Suppose a user needs to install package C, which depends on packages A and B.  Package A builds a library with a Python2 extension, and package B builds a library with a Python3 extension.  Packages A and B cannot be loaded together in the same Python runtime:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2539
msgid "Package C needs to use the libraries from packages A and B, but does not need either of the Python extensions.  In this case, package C should simply depend on the ``~python`` variant of A and B:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2549
msgid "This may require that A or B be built twice, if the user wishes to use the Python extensions provided by them: once for ``+python`` and once for ``~python``.  Other than using a little extra disk space, that solution has no serious problems."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2558
msgid "Implementing the installation procedure"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2560
msgid "The last element of a package is its **installation procedure**.  This is where the real work of installation happens, and it's the main part of the package you'll need to customize for each piece of software."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2564
msgid "Defining an installation procedure means overriding a set of methods or attributes that will be called at some point during the installation of the package. The package base class, usually specialized for a given build system, determines the actual set of entities available for overriding. The classes that are currently provided by Spack are:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2571
msgid "**Base Class**"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2571
msgid "**Purpose**"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2573
msgid ":py:class:`.Package`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2573
msgid "General base class not specialized for any build system"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2576
msgid ":py:class:`.MakefilePackage`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2576
msgid "Specialized class for packages built invoking hand-written Makefiles"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2580
msgid ":py:class:`.AutotoolsPackage`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2580
msgid "Specialized class for packages built using GNU Autotools"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2583
msgid ":py:class:`.CMakePackage`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2583
msgid "Specialized class for packages built using CMake"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2586
msgid ":py:class:`.CudaPackage`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2586
msgid "A helper class for packages that use CUDA. It is intended to be used in combination with others"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2590
msgid ":py:class:`.QMakePackage`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2590
msgid "Specialized class for packages build using QMake"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2593
msgid ":py:class:`.SConsPackage`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2593
msgid "Specialized class for packages built using SCons"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2596
msgid ":py:class:`.WafPackage`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2596
msgid "Specialized class for packages built using Waf"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2599
msgid ":py:class:`.RPackage`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2599
msgid "Specialized class for :py:class:`.R` extensions"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2602
msgid ":py:class:`.OctavePackage`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2602
msgid "Specialized class for :py:class:`.Octave` packages"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2605
msgid ":py:class:`.PythonPackage`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2605
msgid "Specialized class for :py:class:`.Python` extensions"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2608
msgid ":py:class:`.PerlPackage`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2608
msgid "Specialized class for :py:class:`.Perl` extensions"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2611
msgid ":py:class:`.IntelPackage`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2611
msgid "Specialized class for licensed Intel software"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2622
msgid "Choice of the appropriate base class for a package"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2618
msgid "In most cases packagers don't have to worry about the selection of the right base class for a package, as ``spack create`` will make the appropriate choice on their behalf. In those rare cases where manual intervention is needed we need to stress that a package base class depends on the *build system* being used, not the language of the package. For example, a Python extension installed with CMake would ``extends('python')`` and subclass from :py:class:`.CMakePackage`."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2627
msgid "Installation pipeline"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2629
msgid "When a user runs ``spack install``, Spack:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2631
msgid "Fetches an archive for the correct version of the software."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2632
msgid "Expands the archive."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2633
msgid "Sets the current working directory to the root directory of the expanded archive."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2635
msgid "Then, depending on the base class of the package under consideration, it will execute a certain number of **phases** that reflect the way a package of that type is usually built. The name and order in which the phases will be executed can be obtained either reading the API docs at :py:mod:`~.spack.build_systems`, or using the ``spack info`` command:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2664
msgid "Typically, phases have default implementations that fit most of the common cases:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2670
msgid "It is thus just sufficient for a packager to override a few build system specific helper methods or attributes to provide, for instance, configure arguments:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2679
msgid "Each specific build system has a list of attributes that can be overridden to fine-tune the installation of a package without overriding an entire phase. To have more information on them the place to go is the API docs of the :py:mod:`~.spack.build_systems` module."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2686
msgid "Overriding an entire phase"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2688
msgid "In extreme cases it may be necessary to override an entire phase. Regardless of the build system, the signature is the same. For example, the signature for the install phase is:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2702
msgid "``self``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2699
msgid "For those not used to Python instance methods, this is the package itself.  In this case it's an instance of ``Foo``, which extends ``Package``.  For API docs on Package objects, see :py:class:`Package <spack.package.Package>`."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2707
msgid "``spec``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2705
msgid "This is the concrete spec object created by Spack from an abstract spec supplied by the user.  It describes what should be installed.  It will be of type :py:class:`Spec <spack.spec.Spec>`."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2712
msgid "``prefix``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2710
msgid "This is the path that your install method should copy build targets into.  It acts like a string, but it's actually its own special type, :py:class:`Prefix <spack.util.prefix.Prefix>`."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2714
msgid "The arguments ``spec`` and ``prefix`` are passed only for convenience, as they always correspond to ``self.spec`` and ``self.spec.prefix`` respectively."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2717
msgid "As mentioned in :ref:`install-environment`, you will usually not need to refer to dependencies explicitly in your package file, as the compiler wrappers take care of most of the heavy lifting here.  There will be times, though, when you need to refer to the install locations of dependencies, or when you need to do something different depending on the version, compiler, dependencies, etc. that your package is built with.  These parameters give you access to this type of information."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2728
msgid "The build environment"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2730
msgid "In general, you should not have to do much differently in your install method than you would when installing a package on the command line. In fact, you may need to do *less* than you would on the command line."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2734
msgid "Spack tries to set environment variables and modify compiler calls so that it *appears* to the build system that you're building with a standard system install of everything.  Obviously that's not going to cover *all* build systems, but it should make it easy to port packages to Spack if they use a standard build system.  Usually with autotools or cmake, building and installing is easy.  With builds that use custom Makefiles, you may need to add logic to modify the makefiles."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2742
msgid "The remainder of the section covers the way Spack's build environment works."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2747
msgid "Forking ``install()``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2749
msgid "To give packagers free reign over their install environment, Spack forks a new process each time it invokes a package's ``install()`` method. This allows packages to have a sandboxed build environment, without impacting the environments ofother jobs that the main Spack process runs. Packages are free to change the environment or to modify Spack internals, because each ``install()`` call has its own dedicated process."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2758
msgid "Environment variables"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2760
msgid "Spack sets a number of standard environment variables that serve two purposes:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2763
msgid "Make build systems use Spack's compiler wrappers for their builds."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2764
msgid "Allow build systems to find dependencies more easily"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2766
msgid "The Compiler environment variables that Spack sets are:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2769
msgid "Variable"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2769
msgid "Purpose"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2771
msgid "``CC``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2771
msgid "C compiler"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2772
msgid "``CXX``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2772
msgid "C++ compiler"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2773
msgid "``F77``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2773
msgid "Fortran 77 compiler"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2774
msgid "``FC``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2774
msgid "Fortran 90 and above compiler"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2777
msgid "Spack sets these variables so that they point to *compiler wrappers*. These are covered in :ref:`their own section <compiler-wrappers>` below."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2781
msgid "All of these are standard variables respected by most build systems. If your project uses ``Autotools`` or ``CMake``, then it should pick them up automatically when you run ``configure`` or ``cmake`` in the ``install()`` function.  Many traditional builds using GNU Make and BSD make also respect these variables, so they may work with these systems."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2788
msgid "If your build system does *not* automatically pick these variables up from the environment, then you can simply pass them on the command line or use a patch as part of your build process to get the correct compilers into the project's build system.  There are also some file editing commands you can use -- these are described later in the `section on file manipulation <file-manipulation_>`_."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2795
msgid "In addition to the compiler variables, these variables are set before entering ``install()`` so that packages can locate dependencies easily:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2800
msgid "``PATH``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2800
msgid "Set to point to ``/bin`` directories of dependencies"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2801
msgid "``CMAKE_PREFIX_PATH``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2801
msgid "Path to dependency prefixes for CMake"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2802
msgid "``PKG_CONFIG_PATH``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2802
msgid "Path to any pkgconfig directories for dependencies"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2803
msgid "``PYTHONPATH``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2803
msgid "Path to site-packages dir of any python dependencies"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2806
msgid "``PATH`` is set up to point to dependencies ``/bin`` directories so that you can use tools installed by dependency packages at build time. For example, ``$MPICH_ROOT/bin/mpicc`` is frequently used by dependencies of ``mpich``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2811
msgid "``CMAKE_PREFIX_PATH`` contains a colon-separated list of prefixes where ``cmake`` will search for dependency libraries and headers. This causes all standard CMake find commands to look in the paths of your dependencies, so you *do not* have to manually specify arguments like ``-DDEPENDENCY_DIR=/path/to/dependency`` to ``cmake``.  More on this is `in the CMake documentation <http://www.cmake.org/cmake/help/v3.0/variable/CMAKE_PREFIX_PATH.html>`_."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2818
msgid "``PKG_CONFIG_PATH`` is for packages that attempt to discover dependencies using the GNU ``pkg-config`` tool.  It is similar to ``CMAKE_PREFIX_PATH`` in that it allows a build to automatically discover its dependencies."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2823
msgid "If you want to see the environment that a package will build with, or if you want to run commands in that environment to test them out, you can use the :ref:`cmd-spack-env` command, documented below."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2830
msgid "Failing the build"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2832
msgid "Sometimes you don't want a package to successfully install unless some condition is true.  You can explicitly cause the build to fail from ``install()`` by raising an ``InstallError``, for example:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2845
msgid "Shell command functions"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2847
msgid "Recall the install method from ``libelf``:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2853
msgid "Normally in Python, you'd have to write something like this in order to execute shell commands:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2861
msgid "We've tried to make this a bit easier by providing callable wrapper objects for some shell commands.  By default, ``configure``, ``cmake``, and ``make`` wrappers are are provided, so you can call them more naturally in your package files."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2866
msgid "If you need other commands, you can use ``which`` to get them:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2873
msgid "The ``which`` function will search the ``PATH`` for the application."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2875
msgid "Callable wrappers also allow spack to provide some special features. For example, in Spack, ``make`` is parallel by default, and Spack figures out the number of cores on your machine and passes an appropriate value for ``-j<numjobs>`` when it calls ``make`` (see the ``parallel`` `package attribute <attribute_parallel>`).  In a package file, you can supply a keyword argument, ``parallel=False``, to the ``make`` wrapper to disable parallel make.  In the ``libelf`` package, this allows us to avoid race conditions in the library's build system."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2887
msgid "Compiler flags"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2889
msgid "Compiler flags set by the user through the Spec object can be passed to the build in one of three ways. By default, the build environment injects these flags directly into the compiler commands using Spack's compiler wrappers. In cases where the build system requires knowledge of the compiler flags, they can be registered with the build system by alternatively passing them through environment variables or as build system arguments. The flag_handler method can be used to change this behavior."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2898
msgid "Packages can override the flag_handler method with one of three built-in flag_handlers. The built-in flag_handlers are named ``inject_flags``, ``env_flags``, and ``build_system_flags``. The ``inject_flags`` method is the default. The ``env_flags`` method puts all of the flags into the environment variables that ``make`` uses as implicit variables ('CFLAGS', 'CXXFLAGS', etc.). The ``build_system_flags`` method adds the flags as arguments to the invocation of ``configure`` or ``cmake``, respectively."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2910
msgid "Passing compiler flags using build system arguments is only supported for CMake and Autotools packages. Individual packages may also differ in whether they properly respect these arguments."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2914
msgid "Individual packages may also define their own ``flag_handler`` methods. The ``flag_handler`` method takes the package instance (``self``), the name of the flag, and a list of the values of the flag. It will be called on each of the six compiler flags supported in Spack. It should return a triple of ``(injf, envf, bsf)`` where ``injf`` is a list of flags to inject via the Spack compiler wrappers, ``envf`` is a list of flags to set in the appropriate environment variables, and ``bsf`` is a list of flags to pass to the build system as arguments."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2926
msgid "Passing a non-empty list of flags to ``bsf`` for a build system that does not support build system arguments will result in an error."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2930
msgid "Here are the definitions of the three built-in flag handlers:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2945
msgid "Returning ``[]`` and ``None`` are equivalent in a ``flag_handler`` method."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2948
msgid "Packages can override the default behavior either by specifying one of the built-in flag handlers,"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2955
msgid "or by implementing the flag_handler method. Suppose for a package ``Foo`` we need to pass ``cflags``, ``cxxflags``, and ``cppflags`` through the environment, the rest of the flags through compiler wrapper injection, and we need to add ``-lbar`` to ``ldlibs``. The following flag handler method accomplishes that."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2970
msgid "Because these methods can pass values through environment variables, it is important not to override these variables unnecessarily (E.g. setting ``env['CFLAGS']``) in other package methods when using non-default flag handlers. In the ``setup_environment`` and ``setup_dependent_environment`` methods, use the ``append_flags`` method of the ``EnvironmentModifications`` class to append values to a list of flags whenever the flag handler is ``env_flags``. If the package passes flags through the environment or the build system manually (in the install method, for example), we recommend using the default flag handler, or removing manual references and implementing a custom flag handler method that adds the desired flags to export as environment variables or pass to the build system. Manual flag passing is likely to interfere with the ``env_flags`` and ``build_system_flags`` methods."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:2985
msgid "In rare circumstances such as compiling and running small unit tests, a package developer may need to know what are the appropriate compiler flags to enable features like ``OpenMP``, ``c++11``, ``c++14`` and alike. To that end the compiler classes in ``spack`` implement the following **properties**: ``openmp_flag``, ``cxx98_flag``, ``cxx11_flag``, ``cxx14_flag``, and ``cxx17_flag``, which can be accessed in a package by ``self.compiler.cxx11_flag`` and alike. Note that the implementation is such that if a given compiler version does not support this feature, an error will be produced. Therefore package developers can also use these properties to assert that a compiler supports the requested feature. This is handy when a package supports additional variants like"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3005
msgid "Blas, Lapack and ScaLapack libraries"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3007
msgid "Multiple packages provide implementations of ``Blas``, ``Lapack`` and ``ScaLapack`` routines.  The names of the resulting static and/or shared libraries differ from package to package. In order to make the ``install()`` method independent of the choice of ``Blas`` implementation, each package which provides it implements ``@property def blas_libs(self):`` to return an object of `LibraryList <http://spack.readthedocs.io/en/latest/llnl.util.html#llnl.util.filesystem.LibraryList>`_ type which simplifies usage of a set of libraries. The same applies to packages which provide ``Lapack`` and ``ScaLapack``. Package developers are requested to use this interface. Common usage cases are:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3018
msgid "Space separated list of full paths"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3027
msgid "Names of libraries and directories which contain them"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3037
msgid "Search and link flags"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3047
msgid "For more information, see documentation of `LibraryList <http://spack.readthedocs.io/en/latest/llnl.util.html#llnl.util.filesystem.LibraryList>`_ class."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3056
msgid "Prefix objects"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3058
msgid "Spack passes the ``prefix`` parameter to the install method so that you can pass it to ``configure``, ``cmake``, or some other installer, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3066
msgid "For the most part, prefix objects behave exactly like strings.  For packages that do not have their own install target, or for those that implement it poorly (like ``libdwarf``), you may need to manually copy things into particular directories under the prefix.  For this, you can refer to standard subdirectories without having to construct paths yourself, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3086
msgid "Attributes of this object are created on the fly when you request them, so any of the following will work:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3090
msgid "Prefix Attribute"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3090
msgid "Location"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3092
msgid "``prefix.bin``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3092
msgid "``$prefix/bin``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3093
msgid "``prefix.lib64``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3093
msgid "``$prefix/lib64``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3094
msgid "``prefix.share.man``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3094
msgid "``$prefix/share/man``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3095
msgid "``prefix.foo.bar.baz``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3095
msgid "``$prefix/foo/bar/baz``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3098
msgid "Of course, this only works if your file or directory is a valid Python variable name. If your file or directory contains dashes or dots, use ``join`` instead:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3111
msgid "Spec objects"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3113
msgid "When ``install`` is called, most parts of the build process are set up for you.  The correct version's tarball has been downloaded and expanded.  Environment variables like ``CC`` and ``CXX`` are set to point to the correct compiler and version.  An install prefix has already been selected and passed in as ``prefix``.  In most cases this is all you need to get ``configure``, ``cmake``, or another install working correctly."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3121
msgid "There will be times when you need to know more about the build configuration.  For example, some software requires that you pass special parameters to ``configure``, like ``--with-libelf=/path/to/libelf`` or ``--with-mpich``.  You might also need to supply special compiler flags depending on the compiler.  All of this information is available in the spec."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3130
msgid "Testing spec constraints"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3132
msgid "You can test whether your spec is configured a certain way by using the ``satisfies`` method.  For example, if you want to check whether the package's version is in a particular range, you can use specs to do that, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3148
msgid "This works for compilers, too:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3157
msgid "Or for combinations of spec constraints:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3164
msgid "You can also do similar satisfaction tests for dependencies:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3171
msgid "This could allow you to easily work around a bug in a particular dependency version."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3174
msgid "You can use ``satisfies()`` to test for particular dependencies, e.g. ``foo.satisfies('^openmpi@1.2')`` or ``foo.satisfies('^mpich')``, or you can use Python's built-in ``in`` operator:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3183
msgid "This is useful for virtual dependencies, as you can easily see what implementation was selected for this build:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3195
msgid "It's also a bit more concise than satisfies.  The difference between the two functions is that ``satisfies()`` tests whether spec constraints overlap at all, while ``in`` tests whether a spec or any of its dependencies satisfy the provided spec."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3202
msgid "Accessing Dependencies"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3204
msgid "You may need to get at some file or binary that's in the installation prefix of one of your dependencies. You can do that by sub-scripting the spec:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3212
msgid "The value in the brackets needs to be some package name, and spec needs to depend on that package, or the operation will fail.  For example, the above code will fail if the ``spec`` doesn't depend on ``mpi``.  The value returned is itself just another ``Spec`` object, so you can do all the same things you would do with the package's own spec:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3228
msgid "Multimethods and ``@when``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3230
msgid "Spack allows you to make multiple versions of instance functions in packages, based on whether the package's spec satisfies particular criteria."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3234
msgid "The ``@when`` annotation lets packages declare multiple versions of methods like ``install()`` that depend on the package's spec.  For example:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3256
msgid "In the above code there are three versions of ``install()``, two of which are specialized for particular platforms.  The version that is called depends on the architecture of the package spec."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3260
msgid "Note that this works for methods other than install, as well.  So, if you only have part of the install that is platform specific, you could do something more like this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3286
msgid "You can write multiple ``@when`` specs that satisfy the package's spec, for example:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3314
msgid "In situations like this, the first matching spec, in declaration order will be called.  As before, if no ``@when`` spec matches, the default method (the one without the ``@when`` decorator) will be called."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3320
msgid "The default version of decorated methods must **always** come first.  Otherwise it will override all of the platform-specific versions.  There's not much we can do to get around this because of the way decorators work."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3329
msgid "Compiler wrappers"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3331
msgid "As mentioned, ``CC``, ``CXX``, ``F77``, and ``FC`` are set to point to Spack's compiler wrappers.  These are simply called ``cc``, ``c++``, ``f77``, and ``f90``, and they live in ``$SPACK_ROOT/lib/spack/env``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3335
msgid "``$SPACK_ROOT/lib/spack/env`` is added first in the ``PATH`` environment variable when ``install()`` runs so that system compilers are not picked up instead."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3339
msgid "All of these compiler wrappers point to a single compiler wrapper script that figures out which *real* compiler it should be building with.  This comes either from spec `concretization <abstract-and-concrete>`_ or from a user explicitly asking for a particular compiler using, e.g., ``%intel`` on the command line."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3345
msgid "In addition to invoking the right compiler, the compiler wrappers add flags to the compile line so that dependencies can be easily found. These flags are added for each dependency, if they exist:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3349
msgid "Compile-time library search paths * ``-L$dep_prefix/lib`` * ``-L$dep_prefix/lib64``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3353
msgid "Runtime library search paths (RPATHs) * ``$rpath_flag$dep_prefix/lib`` * ``$rpath_flag$dep_prefix/lib64``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3357
msgid "Include search paths * ``-I$dep_prefix/include``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3360
msgid "An example of this would be the ``libdwarf`` build, which has one dependency: ``libelf``.  Every call to ``cc`` in the ``libdwarf`` build will have ``-I$LIBELF_PREFIX/include``, ``-L$LIBELF_PREFIX/lib``, and ``$rpath_flag$LIBELF_PREFIX/lib`` inserted on the command line.  This is done transparently to the project's build system, which will just think it's using a system where ``libelf`` is readily available.  Because of this, you **do not** have to insert extra ``-I``, ``-L``, etc. on the command line."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3369
msgid "Another useful consequence of this is that you often do *not* have to add extra parameters on the ``configure`` line to get autotools to find dependencies.  The ``libdwarf`` install method just calls configure like this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3378
msgid "Because of the ``-L`` and ``-I`` arguments, configure will successfully find ``libdwarf.h`` and ``libdwarf.so``, without the packager having to provide ``--with-libdwarf=/path/to/libdwarf`` on the command line."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3385
msgid "For most compilers, ``$rpath_flag`` is ``-Wl,-rpath,``. However, NAG passes its flags to GCC instead of passing them directly to the linker. Therefore, its ``$rpath_flag`` is doubly wrapped: ``-Wl,-Wl,,-rpath,``. ``$rpath_flag`` can be overriden on a compiler specific basis in ``lib/spack/spack/compilers/$compiler.py``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3391
msgid "The compiler wrappers also pass the compiler flags specified by the user from the command line (``cflags``, ``cxxflags``, ``fflags``, ``cppflags``, ``ldflags``, and/or ``ldlibs``). They do not override the canonical autotools flags with the same names (but in ALL-CAPS) that may be passed into the build by particularly challenging package scripts."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3399
msgid "MPI support in Spack"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3401
msgid "It is common for high performance computing software/packages to use the Message Passing Interface ( ``MPI``).  As a result of conretization, a given package can be built using different implementations of MPI such as ``Openmpi``, ``MPICH`` or ``IntelMPI``.  That is, when your package declares that it ``depends_on('mpi')``, it can be built with any of these ``mpi`` implementations. In some scenarios, to configure a package, one has to provide it with appropriate MPI compiler wrappers such as ``mpicc``, ``mpic++``.  However different implementations of ``MPI`` may have different names for those wrappers."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3411
msgid "Spack provides an idiomatic way to use MPI compilers in your package.  To use MPI wrappers to compile your whole build, do this in your ``install()`` method:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3422
msgid "That's all.  A longer explanation of why this works is below."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3424
msgid "We don't try to force any particular build method on packagers.  The decision to use MPI wrappers depends on the way the package is written, on common practice, and on \"what works\".  Loosely, There are three types of MPI builds:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3429
msgid "Some build systems work well without the wrappers and can treat MPI as an external library, where the person doing the build has to supply includes/libs/etc.  This is fairly uncommon."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3433
msgid "Others really want the wrappers and assume you're using an MPI \"compiler\" – i.e., they have no mechanism to add MPI includes/libraries/etc."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3437
msgid "CMake's ``FindMPI`` needs the compiler wrappers, but it uses them to extract ``–I`` / ``-L`` / ``-D`` arguments, then treats MPI like a regular library."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3441
msgid "Note that some CMake builds fall into case 2 because they either don't know about or don't like CMake's ``FindMPI`` support – they just assume an MPI compiler. Also, some autotools builds fall into case 3 (e.g. `here is an autotools version of CMake's FindMPI <https://github.com/tgamblin/libra/blob/master/m4/lx_find_mpi.m4>`_)."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3447
msgid "Given all of this, we leave the use of the wrappers up to the packager. Spack will support all three ways of building MPI packages."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3452
msgid "Packaging Conventions"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3454
msgid "As mentioned above, in the ``install()`` method, ``CC``, ``CXX``, ``F77``, and ``FC`` point to Spack's wrappers around the chosen compiler. Spack's wrappers are not the MPI compiler wrappers, though they do automatically add ``–I``, ``–L``, and ``–Wl,-rpath`` args for dependencies in a similar way.  The MPI wrappers are a bit different in that they also add ``-l`` arguments for the MPI libraries, and some add special ``-D`` arguments to trigger build options in MPI programs."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3462
msgid "For case 1 above, you generally don't need to do more than patch your Makefile or add configure args as you normally would."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3465
msgid "For case 3, you don't need to do much of anything, as Spack puts the MPI compiler wrappers in the PATH, and the build will find them and interrogate them."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3469
msgid "For case 2, things are a bit more complicated, as you'll need to tell the build to use the MPI compiler wrappers instead of Spack's compiler wrappers.  All it takes some lines like this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3480
msgid "Or, if you pass CC, CXX, etc. directly to your build with, e.g., `--with-cc=<path>`, you'll want to substitute `spec['mpi'].mpicc` in there instead, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3489
msgid "Now, you may think that doing this will lose the includes, library paths, and RPATHs that Spack's compiler wrapper get you, but we've actually set things up so that the MPI compiler wrappers use Spack's compiler wrappers when run from within Spack. So using the MPI wrappers should really be as simple as the code above."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3497
msgid "``spec['mpi']``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3499
msgid "Ok, so how does all this work?"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3501
msgid "If your package has a virtual dependency like ``mpi``, then referring to ``spec['mpi']`` within ``install()`` will get you the concrete ``mpi`` implementation in your dependency DAG.  That is a spec object just like the one passed to install, only the MPI implementations all set some additional properties on it to help you out.  E.g., in mvapich2, you'll find this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3511
msgid "That code allows the mvapich2 package to associate an ``mpicc`` property with the ``mvapich2`` node in the DAG, so that dependents can access it. ``openmpi`` and ``mpich`` do similar things.  So, no matter what MPI you're using, spec['mpi'].mpicc gets you the location of the MPI compilers. This allows us to have a fairly simple polymorphic interface for information about virtual dependencies like MPI."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3520
msgid "Wrapping wrappers"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3522
msgid "Spack likes to use its own compiler wrappers to make it easy to add ``RPATHs`` to builds, and to try hard to ensure that your builds use the right dependencies.  This doesn't play nicely by default with MPI, so we have to do a couple tricks."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3527
msgid "If we build MPI with Spack's wrappers, mpicc and friends will be installed with hard-coded paths to Spack's wrappers, and using them from outside of Spack will fail because they only work within Spack. To fix this, we patch mpicc and friends to use the regular compilers.  Look at the filter_compilers method in mpich, openmpi, or mvapich2 for details."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3534
msgid "We still want to use the Spack compiler wrappers when Spack is calling mpicc. Luckily, wrappers in all mainstream MPI implementations provide environment variables that allow us to dynamically set the compiler to be used by mpicc, mpicxx, etc. Denis pasted some code from this below – Spack's build environment sets ``MPICC``, ``MPICXX``, etc. for mpich derivatives and ``OMPI_CC``, ``OMPI_CXX``, etc. for OpenMPI. This makes the MPI compiler wrappers use the Spack compiler wrappers so that your dependencies still get proper RPATHs even if you use the MPI wrappers."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3547
msgid "MPI on Cray machines"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3549
msgid "The Cray programming environment notably uses ITS OWN compiler wrappers, which function like MPI wrappers.  On Cray systems, the ``CC``, ``cc``, and ``ftn`` wrappers ARE the MPI compiler wrappers, and it's assumed that you'll use them for all of your builds.  So on Cray we don't bother with ``mpicc``, ``mpicxx``, etc, Spack MPI implementations set ``spec['mpi'].mpicc`` to point to Spack's wrappers, which wrap the Cray wrappers, which wrap the regular compilers and include MPI flags.  That may seem complicated, but for packagers, that means the same code for using MPI wrappers will work, even on even on a Cray:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3563
msgid "This is because on Cray, ``spec['mpi'].mpicc`` is just ``spack_cc``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3569
msgid "Checking an installation"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3571
msgid "By default, Spack assumes that a build has failed if nothing is written to the install prefix, and that it has succeeded if anything (a file, a directory, etc.)  is written to the install prefix after ``install()`` completes."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3576
msgid "Consider a simple autotools build like this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3585
msgid "If you are using using standard autotools or CMake, ``configure`` and ``make`` will not write anything to the install prefix.  Only ``make install`` writes the files, and only once the build is already complete."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3592
msgid "``sanity_check_is_file`` and ``sanity_check_is_dir``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3594
msgid "Unfortunately, many builds of scientific software modify the install prefix *before* ``make install``. Builds like this can falsely report that they were successfully installed if an error occurs before the install is complete but after files have been written to the ``prefix``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3600
msgid "You can optionally specify *sanity checks* to deal with this problem. Add properties like this to your package:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3616
msgid "Now, after ``install()`` runs, Spack will check whether ``$prefix/include/libelf.h`` exists and is a file, and whether ``$prefix/lib`` exists and is a directory.  If the checks fail, then the build will fail and the install prefix will be removed.  If they succeed, Spack considers the build successful and keeps the prefix in place."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3625
msgid "Build-time tests"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3627
msgid "Sometimes packages finish to build \"correctly\" and issues with their run-time behavior are discovered only at a later stage, maybe after a full software stack relying on them has already been built. To avoid situations of that kind it's possible to write build-time tests that will be executed only if the option ``--run-tests`` of ``spack install`` has been activated."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3633
msgid "The proper way to write these tests is relying on two decorators that come with any base class listed in :ref:`installation_procedure`."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3644
msgid "The first decorator ``run_after('build')`` schedules this function to be invoked after the ``build`` phase has been executed, while the second one makes the invocation  conditional on the fact that ``self.run_tests == True``. It is also possible to schedule a function to be invoked *before* a given phase using the ``run_before`` decorator."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3652
msgid "Default implementations for build-time tests"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3654
msgid "Packages that are built using specific build systems may already have a default implementation for build-time tests. For instance :py:class:`~.AutotoolsPackage` based packages will try to invoke ``make test`` and ``make check`` if Spack is asked to run tests. More information on each class is available in the the :py:mod:`~.spack.build_systems` documentation."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3663
msgid "The API for adding tests is not yet considered stable and may change drastically in future releases."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3669
msgid "File manipulation functions"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3671
msgid "Many builds are not perfect. If a build lacks an install target, or if it does not use systems like CMake or autotools, which have standard ways of setting compilers and options, you may need to edit files or install some files yourself to get them working with Spack."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3676
msgid "You can do this with standard Python code, and Python has rich libraries with functions for file manipulation and filtering.  Spack also provides a number of convenience functions of its own to make your life even easier.  These functions are described in this section."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3681
msgid "All of the functions in this section can be included by simply running:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3688
msgid "This is already part of the boilerplate for packages created with ``spack create``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3693
msgid "Filtering functions"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3731
msgid ":py:func:`filter_file(regex, repl, *filenames, **kwargs) <spack.filter_file>`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3696
msgid "Works like ``sed`` but with Python regular expression syntax.  Takes a regular expression, a replacement, and a set of files.  ``repl`` can be a raw string or a callable function.  If it is a raw string, it can contain ``\\1``, ``\\2``, etc. to refer to capture groups in the regular expression.  If it is a callable, it is passed the Python ``MatchObject`` and should return a suitable replacement string for the particular match."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3704
msgid "Examples:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3706
msgid "Filtering a Makefile to force it to use Spack's compiler wrappers:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3715
msgid "Replacing ``#!/usr/bin/perl`` with ``#!/usr/bin/env perl`` in ``bib2xhtml``:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3722
msgid "Switching the compilers used by ``mpich``'s MPI wrapper scripts from ``cc``, etc. to the compilers used by the Spack build:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3749
msgid ":py:func:`change_sed_delimiter(old_delim, new_delim, *filenames) <spack.change_sed_delim>`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3734
msgid "Some packages, like TAU, have a build system that can't install into directories with, e.g. '@' in the name, because they use hard-coded ``sed`` commands in their build."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3738
msgid "``change_sed_delimiter`` finds all ``sed`` search/replace commands and change the delimiter.  e.g., if the file contains commands that look like ``s///``, you can use this to change them to ``s@@@``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3743
msgid "Example of changing ``s///`` to ``s@@@`` in TAU:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3753
msgid "File functions"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3756
msgid ":py:func:`ancestor(dir, n=1) <spack.ancestor>`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3756
msgid "Get the n\\ :sup:`th` ancestor of the directory ``dir``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3760
msgid ":py:func:`can_access(path) <spack.can_access>`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3759
msgid "True if we can read and write to the file at ``path``.  Same as native python ``os.access(file_name, os.R_OK|os.W_OK)``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3768
msgid ":py:func:`install(src, dest) <spack.install>`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3763
msgid "Install a file to a particular location.  For example, install a header into the ``include`` directory under the install ``prefix``:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3771
msgid ":py:func:`join_path(*paths) <spack.join_path>`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3771
msgid "An alias for ``os.path.join``. This joins paths using the OS path separator."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3775
msgid ":py:func:`mkdirp(*paths) <spack.mkdirp>`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3774
msgid "Create each of the directories in ``paths``, creating any parent directories if they do not exist."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3817
msgid ":py:func:`working_dir(dirname, kwargs) <spack.working_dir>`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3778
msgid "This is a Python `Context Manager <https://docs.python.org/2/library/contextlib.html>`_ that makes it easier to work with subdirectories in builds.  You use this with the Python ``with`` statement to change into a working directory, and when the with block is done, you change back to the original directory.  Think of it as a safe ``pushd`` / ``popd`` combination, where ``popd`` is guaranteed to be called at the end, even if exceptions are thrown."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3787
msgid "Example usage:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3789
msgid "The ``libdwarf`` build first runs ``configure`` and ``make`` in a subdirectory called ``libdwarf``.  It then implements the installation code itself.  This is natural with ``working_dir``:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3800
msgid "Many CMake builds require that you build \"out of source\", that is, in a subdirectory.  You can handle creating and ``cd``'ing to the subdirectory like the LLVM package does:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3816
msgid "The ``create=True`` keyword argument causes the command to create the directory if it does not exist."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3820
msgid ":py:func:`touch(path) <spack.touch>`"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3820
msgid "Create an empty file at ``path``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3826
msgid "Style guidelines for packages"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3828
msgid "The following guidelines are provided, in the interests of making Spack packages work in a consistent manner:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3833
msgid "Variant Names"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3835
msgid "Spack packages with variants similar to already-existing Spack packages should use the same name for their variants.  Standard variant names are:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3840
msgid "Name"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3840
msgid "Default"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3840
msgid "Description"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3842
msgid "shared"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3842
#: ../spack/lib/spack/docs/packaging_guide.rst:3843
#: ../spack/lib/spack/docs/packaging_guide.rst:3844
msgid "True"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3842
msgid "Build shared libraries"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3843
msgid "static"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3843
msgid "Build static libraries"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3844
msgid "mpi"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3844
msgid "Use MPI"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3845
msgid "python"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3845
msgid "False"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3845
msgid "Build Python extension"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3848
msgid "If specified in this table, the corresponding default should be used when declaring a variant."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3853
msgid "Version Lists"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3855
msgid "Spack packages should list supported versions with the newest first."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3859
msgid "Packaging workflow commands"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3861
msgid "When you are building packages, you will likely not get things completely right the first time."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3864
msgid "The ``spack install`` command performs a number of tasks before it finally installs each package.  It downloads an archive, expands it in a temporary directory, and only then gives control to the package's ``install()`` method.  If the build doesn't go as planned, you may want to clean up the temporary directory, or if the package isn't downloading properly, you might want to run *only* the ``fetch`` stage of the build."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3872
msgid "A typical package workflow might look like this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3884
msgid "Below are some commands that will allow you some finer-grained control over the install process."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3891
msgid "``spack fetch``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3893
msgid "The first step of ``spack install``.  Takes a spec and determines the correct download URL to use for the requested package version, then downloads the archive, checks it against an MD5 checksum, and stores it in a staging directory if the check was successful.  The staging directory will be located under ``$SPACK_HOME/var/spack``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3899
msgid "When run after the archive has already been downloaded, ``spack fetch`` is idempotent and will not download the archive again."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3906
msgid "``spack stage``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3908
msgid "The second step in ``spack install`` after ``spack fetch``.  Expands the downloaded archive in its temporary directory, where it will be built by ``spack install``.  Similar to ``fetch``, if the archive has already been expanded,  ``stage`` is idempotent."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3917
msgid "``spack patch``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3919
msgid "After staging, Spack applies patches to downloaded packages, if any have been specified in the package file.  This command will run the install process through the fetch, stage, and patch phases.  Spack keeps track of whether patches have already been applied and skips this step if they have been.  If Spack discovers that patches didn't apply cleanly on some previous run, then it will restage the entire package before patching."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3931
msgid "``spack restage``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3933
msgid "Restores the source code to pristine state, as it was before building."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3935
msgid "Does this in one of two ways:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3937
msgid "If the source was fetched as a tarball, deletes the entire build directory and re-expands the tarball."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3940
msgid "If the source was checked out from a repository, this deletes the build directory and checks it out again."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3947
msgid "``spack clean``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3949
msgid "Cleans up all of Spack's temporary and cached files.  This can be used to recover disk space if temporary files from interrupted or failed installs accumulate in the staging area."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3953
msgid "When called with ``--stage`` or without arguments this removes all staged files."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3956
msgid "When called with ``--downloads`` this will clear all resources :ref:`cached <caching>` during installs."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3959
msgid "When called with ``--user-cache`` this will remove caches in the user home directory, including cached virtual indices."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3962
msgid "To remove all of the above, the command can be called with ``--all``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3964
msgid "When called with positional arguments, cleans up temporary files only for a particular package. If ``fetch``, ``stage``, or ``install`` are run again after this, Spack's build process will start from scratch."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3971
msgid "Keeping the stage directory on success"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3973
msgid "By default, ``spack install`` will delete the staging area once a package has been successfully built and installed.  Use ``--keep-stage`` to leave the build directory intact:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3981
msgid "This allows you to inspect the build directory and potentially debug the build.  You can use ``clean`` later to get rid of the unwanted temporary files."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3987
msgid "Keeping the install prefix on failure"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3989
msgid "By default, ``spack install`` will delete any partially constructed install prefix if anything fails during ``install()``.  If you want to keep the prefix anyway (e.g. to diagnose a bug), you can use ``--keep-prefix``:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:3998
msgid "Note that this may confuse Spack into thinking that the package has been installed properly, so you may need to use ``spack uninstall --force`` to get rid of the install prefix before you build again:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4008
msgid "Graphing dependencies"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4014
msgid "``spack graph``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4016
msgid "Spack provides the ``spack graph`` command for graphing dependencies. The command by default generates an ASCII rendering of a spec's dependency graph.  For example:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4022
msgid "At the top is the root package in the DAG, with dependency edges emerging from it.  On a color terminal, the edges are colored by which dependency they lead to."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4028
msgid "The ``deptype`` argument tells Spack what types of dependencies to graph. By default it includes link and run dependencies but not build dependencies.  Supplying ``--deptype=link`` will show only link dependencies.  The default is ``--deptype=all``, which is equivalent to ``--deptype=build,link,run,test``.  Options for ``deptype`` include:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4034
msgid "Any combination of ``build``, ``link``, ``run``, and ``test`` separated by commas."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4036
msgid "``all`` for all types of dependencies."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4038
msgid "You can also use ``spack graph`` to generate graphs in the widely used `Dot <http://www.graphviz.org/doc/info/lang.html>`_ format.  For example:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4043
msgid "This graph can be provided as input to other graphing tools, such as those in `Graphviz <http://www.graphviz.org>`_.  If you have graphviz installed, you can write straight to PDF like this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4055
msgid "Interactive shell support"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4057
msgid "Spack provides some limited shell support to make life easier for packagers.  You can enable these commands by sourcing a setup file in the ``share/spack`` directory.  For ``bash`` or ``ksh``, run:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4066
msgid "For ``csh`` and ``tcsh`` run:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4073
msgid "``spack cd`` will then be available."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4079
msgid "``spack cd``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4081
msgid "``spack cd`` allows you to quickly cd to pertinent directories in Spack. Suppose you've staged a package but you want to modify it before you build it:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4096
msgid "``spack cd`` here changed the current working directory to the directory containing the expanded ``libelf`` source code.  There are a number of other places you can cd to in the spack directory hierarchy:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4102
msgid "Some of these change directory into package-specific locations (stage directory, install directory, package directory) and others change to core spack locations.  For example, ``spack cd --module-dir`` will take you to the main python source directory of your spack install."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4111
msgid "``spack env``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4113
msgid "``spack env`` functions much like the standard unix ``env`` command, but it takes a spec as an argument.  You can use it to see the environment variables that will be set when a particular build runs, for example:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4122
msgid "This will display the entire environment that will be set when the ``mpileaks@1.1%intel`` build runs."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4125
msgid "To run commands in a package's build environment, you can simply provide them after the spec argument to ``spack env``:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4133
msgid "This will cd to the build directory and then run ``configure`` in the package's build environment."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4140
msgid "``spack location``"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4142
msgid "``spack location`` is the same as ``spack cd`` but it does not require shell support.  It simply prints out the path you ask for, rather than cd'ing to it.  In bash, this:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4150
msgid "is the same as:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4156
msgid "``spack location`` is intended for use in scripts or makefiles that need to know where packages are installed.  e.g., in a makefile you might write:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4168
msgid "Build System Configuration Support"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4170
msgid "Imagine a developer creating a CMake or Autotools-based project in a local directory, which depends on libraries A-Z.  Once Spack has installed those dependencies, one would like to run ``cmake`` with appropriate command line and environment so CMake can find them.  The ``spack setup`` command does this conveniently, producing a CMake configuration that is essentially the same as how Spack *would have* configured the project.  This can be demonstrated with a usage example:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4188
msgid "Notes:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4190
msgid "Spack must have ``myproject/package.py`` in its repository for this to work."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4192
msgid "``spack setup`` produces the executable script ``spconfig.py`` in the local directory, and also creates the module file for the package.  ``spconfig.py`` is normally run from the user's out-of-source build directory."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4196
msgid "The version number given to ``spack setup`` is arbitrary, just like ``spack diy``.  ``myproject/package.py`` does not need to have any valid downloadable versions listed (typical when a project is new)."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4200
msgid "spconfig.py produces a CMake configuration that *does not* use the Spack wrappers.  Any resulting binaries *will not* use RPATH, unless the user has enabled it.  This is recommended for development purposes, not production."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4204
msgid "``spconfig.py`` is human readable, and can serve as a developer reference of what dependencies are being used."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4206
msgid "``make install`` installs the package into the Spack repository, where it may be used by other Spack packages."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4208
msgid "CMake-generated makefiles re-run CMake in some circumstances.  Use of ``spconfig.py`` breaks this behavior, requiring the developer to manually re-run ``spconfig.py`` when a ``CMakeLists.txt`` file has changed."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4215
msgid "CMakePackage"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4217
msgid "In order to enable ``spack setup`` functionality, the author of ``myproject/package.py`` must subclass from ``CMakePackage`` instead of the standard ``Package`` superclass.  Because CMake is standardized, the packager does not need to tell Spack how to run ``cmake; make; make install``.  Instead the packager only needs to create (optional) methods ``configure_args()`` and ``configure_env()``, which provide the arguments (as a list) and extra environment variables (as a dict) to provide to the ``cmake`` command.  Usually, these will translate variant flags into CMake definitions.  For example:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4239
msgid "If needed, a packager may also override methods defined in ``StagedPackage`` (see below)."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4244
msgid "StagedPackage"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4246
msgid "``CMakePackage`` is implemented by subclassing the ``StagedPackage`` superclass, which breaks down the standard ``Package.install()`` method into several sub-stages: ``setup``, ``configure``, ``build`` and ``install``.  Details:"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4251
msgid "Instead of implementing the standard ``install()`` method, package authors implement the methods for the sub-stages ``install_setup()``, ``install_configure()``, ``install_build()``, and ``install_install()``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4256
msgid "The ``spack install`` command runs the sub-stages ``configure``, ``build`` and ``install`` in order.  (The ``setup`` stage is not run by default; see below)."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4259
msgid "The ``spack setup`` command runs the sub-stages ``setup`` and a dummy install (to create the module file)."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4261
msgid "The sub-stage install methods take no arguments (other than ``self``).  The arguments ``spec`` and ``prefix`` to the standard ``install()`` method may be accessed via ``self.spec`` and ``self.prefix``."
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4268
msgid "GNU Autotools"
msgstr ""

#: ../spack/lib/spack/docs/packaging_guide.rst:4270
msgid "The ``setup`` functionality is currently only available for CMake-based packages.  Extending this functionality to GNU Autotools-based packages would be easy (and should be done by a developer who actively uses Autotools).  Packages that use non-standard build systems can gain ``setup`` functionality by subclassing ``StagedPackage`` directly."
msgstr ""

