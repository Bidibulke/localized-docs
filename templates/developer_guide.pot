# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2019, Lawrence Livermore National Laboratory.
# This file is distributed under the same license as the Spack package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Spack 0.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-27 13:31-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../spack/lib/spack/docs/developer_guide.rst:10
msgid "Developer Guide"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:12
msgid "This guide is intended for people who want to work on Spack itself. If you just want to develop packages, see the :ref:`packaging-guide`."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:15
msgid "It is assumed that you've read the :ref:`basic-usage` and :ref:`packaging-guide` sections, and that you're familiar with the concepts discussed there.  If you're not, we recommend reading those first."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:22
msgid "Overview"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:24
msgid "Spack is designed with three separate roles in mind:"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:26
msgid "**Users**, who need to install software *without* knowing all the details about how it is built."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:28
msgid "**Packagers** who know how a particular software package is built and encode this information in package files."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:30
msgid "**Developers** who work on Spack, add new features, and try to make the jobs of packagers and users easier."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:33
msgid "Users could be end users installing software in their home directory, or administrators installing software to a shared directory on a shared machine.  Packagers could be administrators who want to automate software builds, or application developers who want to make their software more accessible to users."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:39
msgid "As you might expect, there are many types of users with different levels of sophistication, and Spack is designed to accommodate both simple and complex use cases for packages.  A user who only knows that he needs a certain package should be able to type something simple, like ``spack install <package name>``, and get the package that he wants.  If a user wants to ask for a specific version, use particular compilers, or build several versions with different configurations, then that should be possible with a minimal amount of additional specification."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:49
msgid "This gets us to the two key concepts in Spack's software design:"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:51
msgid "**Specs**: expressions for describing builds of software, and"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:52
msgid "**Packages**: Python modules that build software according to a spec."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:55
msgid "A package is a template for building particular software, and a spec as a descriptor for one or more instances of that template.  Users express the configuration they want using a spec, and a package turns the spec into a complete build."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:60
msgid "The obvious difficulty with this design is that users under-specify what they want.  To build a software package, the package object needs a *complete* specification.  In Spack, if a spec describes only one instance of a package, then we say it is **concrete**.  If a spec could describes many instances, (i.e. it is under-specified in one way or another), then we say it is **abstract**."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:67
msgid "Spack's job is to take an *abstract* spec from the user, find a *concrete* spec that satisfies the constraints, and hand the task of building the software off to the package object.  The rest of this document describes all the pieces that come together to make that happen."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:75
msgid "Directory Structure"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:77
msgid "So that you can familiarize yourself with the project, we'll start with a high level view of Spack's directory structure:"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:115
msgid "Spack is designed so that it could live within a `standard UNIX directory hierarchy <http://linux.die.net/man/7/hier>`_, so ``lib``, ``var``, and ``opt`` all contain a ``spack`` subdirectory in case Spack is installed alongside other software.  Most of the interesting parts of Spack live in ``lib/spack``."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:121
msgid "Spack has *one* directory layout and there is no install process. Most Python programs don't look like this (they use distutils, ``setup.py``, etc.) but we wanted to make Spack *very* easy to use.  The simple layout spares users from the need to install Spack into a Python environment. Many users don't have write access to a Python installation, and installing an entire new instance of Python to bootstrap Spack would be very complicated. Users should not have to install a big, complicated package to use the thing that's supposed to spare them from the details of big, complicated packages.  The end result is that Spack works out of the box: clone it and add ``bin`` to your PATH and you're ready to go."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:134
msgid "Code Structure"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:136
msgid "This section gives an overview of the various Python modules in Spack, grouped by functionality."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:141
msgid "Package-related modules"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:147
msgid ":mod:`spack.package`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:144
msgid "Contains the :class:`Package <spack.package.Package>` class, which is the superclass for all packages in Spack.  Methods on ``Package`` implement all phases of the :ref:`package lifecycle <package-lifecycle>` and manage the build process."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:155
msgid ":mod:`spack.packages`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:150
msgid "Contains all of the packages in Spack and methods for managing them. Functions like :func:`packages.get <spack.packages.get>` and :func:`class_name_for_package_name <packages.class_name_for_package_name>` handle mapping package module names to class names and dynamically instantiating packages by name from module files."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:161
msgid ":mod:`spack.relations`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:158
msgid "*Relations* are relationships between packages, like :func:`depends_on <spack.relations.depends_on>` and :func:`provides <spack.relations.provides>`.  See :ref:`dependencies` and :ref:`virtual-dependencies`."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:166
msgid ":mod:`spack.multimethod`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:164
msgid "Implementation of the :func:`@when <spack.multimethod.when>` decorator, which allows :ref:`multimethods <multimethods>` in packages."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:170
msgid "Spec-related modules"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:175
msgid ":mod:`spack.spec`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:173
msgid "Contains :class:`Spec <spack.spec.Spec>` and :class:`SpecParser <spack.spec.SpecParser>`. Also implements most of the logic for normalization and concretization of specs."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:181
msgid ":mod:`spack.parse`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:178
msgid "Contains some base classes for implementing simple recursive descent parsers: :class:`Parser <spack.parse.Parser>` and :class:`Lexer <spack.parse.Lexer>`.  Used by :class:`SpecParser <spack.spec.SpecParser>`."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:186
msgid ":mod:`spack.concretize`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:184
msgid "Contains :class:`DefaultConcretizer <spack.concretize.DefaultConcretizer>` implementation, which allows site administrators to change Spack's :ref:`concretization-policies`."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:197
msgid ":mod:`spack.version`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:189
msgid "Implements a simple :class:`Version <spack.version.Version>` class with simple comparison semantics.  Also implements :class:`VersionRange <spack.version.VersionRange>` and :class:`VersionList <spack.version.VersionList>`.  All three are comparable with each other and offer union and intersection operations.  Spack uses these classes to compare versions and to manage version constraints on specs.  Comparison semantics are similar to the ``LooseVersion`` class in ``distutils`` and to the way RPM compares version strings."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:207
msgid ":mod:`spack.compilers`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:200
msgid "Submodules contains descriptors for all valid compilers in Spack. This is used by the build system to set up the build environment."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:205
msgid "Not yet implemented.  Currently has two compiler descriptions, but compilers aren't fully integrated with the build process yet."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:216
msgid ":mod:`spack.architecture`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:210
msgid ":func:`architecture.sys_type <spack.architecture.sys_type>` is used to determine the host architecture while building."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:215
msgid "Not yet implemented.  Should eventually have architecture descriptions for cross-compiling."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:220
msgid "Build environment"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:223
msgid ":mod:`spack.stage`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:223
msgid "Handles creating temporary directories for builds."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:227
msgid ":mod:`spack.compilation`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:226
msgid "This contains utility functions used by the compiler wrapper script, ``cc``."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:232
msgid ":mod:`spack.directory_layout`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:230
msgid "Classes that control the way an installation directory is laid out. Create more implementations of this to change the hierarchy and naming scheme in ``$spack_prefix/opt``"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:236
msgid "Spack Subcommands"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:240
msgid ":mod:`spack.cmd`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:239
msgid "Each module in this package implements a Spack subcommand.  See :ref:`writing commands <writing-commands>` for details."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:244
#: ../spack/lib/spack/docs/developer_guide.rst:350
msgid "Unit tests"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:248
msgid ":mod:`spack.test`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:247
msgid "Implements Spack's test suite.  Add a module and put its name in the test suite in ``__init__.py`` to add more unit tests."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:252
msgid ":mod:`spack.test.mock_packages`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:251
msgid "This is a fake package hierarchy used to mock up packages for Spack's test suite."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:256
msgid "Other Modules"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:260
msgid ":mod:`spack.url`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:259
msgid "URL parsing, for deducing names and versions of packages from tarball URLs."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:264
msgid ":mod:`spack.error`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:263
msgid ":class:`SpackError <spack.error.SpackError>`, the base class for Spack's exception hierarchy."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:268
msgid ":mod:`llnl.util.tty`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:267
msgid "Basic output functions for all of the messages Spack writes to the terminal."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:271
msgid ":mod:`llnl.util.tty.color`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:271
msgid "Implements a color formatting syntax used by ``spack.tty``."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:275
msgid ":mod:`llnl.util`"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:274
msgid "In this package are a number of utility modules for the rest of Spack."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:279
msgid "Spec objects"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:283
msgid "Package objects"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:285
msgid "Most spack commands look something like this:"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:287
msgid "Parse an abstract spec (or specs) from the command line,"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:288
msgid "*Normalize* the spec based on information in package files,"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:289
msgid "*Concretize* the spec according to some customizable policies,"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:290
msgid "Instantiate a package based on the spec, and"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:291
msgid "Call methods (e.g., ``install()``) on the package object."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:293
msgid "The information in Package files is used at all stages in this process."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:296
msgid "Conceptually, packages are overloaded.  They contain:"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:300
msgid "Stage objects"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:306
msgid "Writing commands"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:308
msgid "Adding a new command to Spack is easy. Simply add a ``<name>.py`` file to ``lib/spack/spack/cmd/``, where ``<name>`` is the name of the subcommand. At the bare minimum, two functions are required in this file:"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:314
msgid "``setup_parser()``"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:316
msgid "Unless your command doesn't accept any arguments, a ``setup_parser()`` function is required to define what arguments and flags your command takes. See the `Argparse documentation <https://docs.python.org/2.7/library/argparse.html>`_ for more details on how to add arguments."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:321
msgid "Some commands have a set of subcommands, like ``spack compiler find`` or ``spack module lmod refresh``. You can add subparsers to your parser to handle this. Check out ``spack edit --command compiler`` for an example of this."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:325
msgid "A lot of commands take the same arguments and flags. These arguments should be defined in ``lib/spack/spack/cmd/common/arguments.py`` so that they don't need to be redefined in multiple commands."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:331
msgid "``<name>()``"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:333
msgid "In order to run your command, Spack searches for a function with the same name as your command in ``<name>.py``. This is the main method for your command, and can call other helper methods to handle common tasks."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:337
msgid "Remember, before adding a new command, think to yourself whether or not this new command is actually necessary. Sometimes, the functionality you desire can be added to an existing command. Also remember to add unit tests for your command. If it isn't used very frequently, changes to the rest of Spack can cause your command to break without sufficient unit tests to prevent this from happening."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:344
msgid "Whenever you add/remove/rename a command or flags for an existing command, make sure to update Spack's `Bash tab completion script <https://github.com/adamjstewart/spack/blob/develop/share/spack/spack-completion.bash>`_."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:354
msgid "Unit testing"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:358
msgid "Developer commands"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:364
msgid "``spack doc``"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:370
msgid "``spack test``"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:376
msgid "``spack python``"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:378
msgid "``spack python`` is a command that lets you import and debug things as if you were in a Spack interactive shell. Without any arguments, it is similar to a normal interactive Python shell, except you can import spack and any other Spack modules:"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:398
msgid "You can also run a single command:"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:405
msgid "or a file:"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:411
msgid "just like you would with the normal ``python`` command."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:417
msgid "``spack url``"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:419
msgid "A package containing a single URL can be used to download several different versions of the package. If you've ever wondered how this works, all of the magic is in :mod:`spack.url`. This module contains methods for extracting the name and version of a package from its URL. The name is used by ``spack create`` to guess the name of the package. By determining the version from the URL, Spack can replace it with other versions to determine where to download them from."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:427
msgid "The regular expressions in ``parse_name_offset`` and ``parse_version_offset`` are used to extract the name and version, but they aren't perfect. In order to debug Spack's URL parsing support, the ``spack url`` command can be used."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:433
msgid "``spack url parse``"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:435
msgid "If you need to debug a single URL, you can use the following command:"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:439
msgid "You'll notice that the name and version of this URL are correctly detected, and you can even see which regular expressions it was matched to. However, you'll notice that when it substitutes the version number in, it doesn't replace the ``2.2`` with ``9.9`` where we would expect ``9.9.9b`` to live. This particular package may require a ``list_url`` or ``url_for_version`` function."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:446
msgid "This command also accepts a ``--spider`` flag. If provided, Spack searches for other versions of the package and prints the matching URLs."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:451
msgid "``spack url list``"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:453
msgid "This command lists every URL in every package in Spack. If given the ``--color`` and ``--extrapolation`` flags, it also colors the part of the string that it detected to be the name and version. The ``--incorrect-name`` and ``--incorrect-version`` flags can be used to print URLs that were not being parsed correctly."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:461
msgid "``spack url summary``"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:463
msgid "This command attempts to parse every URL for every package in Spack and prints a summary of how many of them are being correctly parsed. It also prints a histogram showing which regular expressions are being matched and how frequently:"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:470
msgid "This command is essential for anyone adding or changing the regular expressions that parse names and versions. By running this command before and after the change, you can make sure that your regular expression fixes more packages than it breaks."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:477
msgid "Profiling"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:479
msgid "Spack has some limited built-in support for profiling, and can report statistics using standard Python timing tools.  To use this feature, supply ``--profile`` to Spack on the command line, before any subcommands."
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:487
msgid "``spack --profile``"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:489
msgid "``spack --profile`` output looks like this:"
msgstr ""

#: ../spack/lib/spack/docs/developer_guide.rst:494
msgid "The bottom of the output shows the top most time consuming functions, slowest on top.  The profiling support is from Python's built-in tool, `cProfile <https://docs.python.org/2/library/profile.html#module-cProfile>`_."
msgstr ""

