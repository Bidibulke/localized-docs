# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2019, Lawrence Livermore National Laboratory.
# This file is distributed under the same license as the Spack package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Spack 0.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-27 13:31-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:10
msgid "Advanced Topics in Packaging"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:12
msgid "Spack tries to automatically configure packages with information from dependencies such that all you need to do is to list the dependencies (i.e., with the ``depends_on`` directive) and the build system (for example by deriving from :code:`CmakePackage`)."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:17
msgid "However, there are many special cases. Often you need to retrieve details about dependencies to set package-specific configuration options, or to define package-specific environment variables used by the package's build system. This tutorial covers how to retrieve build information from dependencies, and how you can automatically provide important information to dependents in your package."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:26
msgid "Setup for the tutorial"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:30
msgid "We do not recommend doing this section of the tutorial in a production Spack instance."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:33
msgid "The tutorial uses custom package definitions with missing sections that will be filled in during the tutorial. These package definitions are stored in a separate package repository, which can be enabled with:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:41
msgid "This section of the tutorial may also require a newer version of gcc. If you have not already installed gcc@7.2.0 and added it to your configuration, you can do so with:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:50
msgid "If you are using the tutorial docker image, all dependency packages will have been installed. Otherwise, to install these packages you can use the following commands:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:60
msgid "Now, you are ready to set your preferred ``EDITOR`` and continue with the rest of the tutorial."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:65
msgid "Several of these packages depend on an MPI implementation. You can use OpenMPI if you install it from scratch, but this is slow (>10 min.). A binary cache of MPICH may be provided, in which case you can force the package to use it and install quickly. All tutorial examples with packages that depend on MPICH include the spec syntax for building with it"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:75
msgid "Modifying a package's build environment"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:77
msgid "Spack sets up several environment variables like ``PATH`` by default to aid in building a package, but many packages make use of environment variables which convey specific information about their dependencies (e.g., ``MPICC``). This section covers how to update your Spack packages so that package-specific environment variables are defined at build-time."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:85
msgid "Set environment variables in dependent packages at build-time"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:87
msgid "Dependencies can set environment variables that are required when their dependents build. For example, when a package depends on a python extension like py-numpy, Spack's ``python`` package will add it to ``PYTHONPATH`` so it is available at build time; this is required because the default setup that spack does is not sufficient for python to import modules."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:93
msgid "To provide environment setup for a dependent, a package can implement the :py:func:`setup_dependent_environment <spack.package.PackageBase.setup_dependent_environment>` function. This function takes as a parameter a :py:class:`EnvironmentModifications <spack.util.environment.EnvironmentModifications>` object which includes convenience methods to update the environment. For example, an MPI implementation can set ``MPICC`` for packages that depend on it:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:104
msgid "In this case packages that depend on ``mpi`` will have ``MPICC`` defined in their environment when they build. This section is focused on modifying the build-time environment represented by ``spack_env``, but it's worth noting that modifications to ``run_env`` are included in Spack's automatically-generated module files."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:110
msgid "We can practice by editing the ``mpich`` package to set the ``MPICC`` environment variable in the build-time environment of dependent packages."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:117
msgid "Once you're finished, the method should look like this:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:133
msgid "At this point we can, for instance, install ``netlib-scalapack`` with ``mpich``:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:151
msgid "and double check the environment logs to verify that every variable was set to the correct value."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:156
msgid "Set environment variables in your own package"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:158
msgid "Packages can modify their own build-time environment by implementing the :py:func:`setup_environment <spack.package.PackageBase.setup_environment>` function. For ``qt`` this looks like:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:168
msgid "When ``qt`` builds, ``MAKEFLAGS`` will be defined in the environment."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:170
msgid "To contrast with ``qt``'s :py:func:`setup_dependent_environment <spack.package.PackageBase.setup_dependent_environment>` function:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:178
msgid "Let's see how it works by completing the ``elpa`` package:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:184
msgid "In the end your method should look like:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:199
msgid "At this point it's possible to proceed with the installation of ``elpa ^mpich``"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:203
msgid "Retrieving library information"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:205
msgid "Although Spack attempts to help packages locate their dependency libraries automatically (e.g. by setting ``PKG_CONFIG_PATH`` and ``CMAKE_PREFIX_PATH``), a package may have unique configuration options that are required to locate libraries. When a package needs information about dependency libraries, the general approach in Spack is to query the dependencies for the locations of their libraries and set configuration options accordingly. By default most Spack packages know how to automatically locate their libraries. This section covers how to retrieve library information from dependencies and how to locate libraries when the default logic doesn't work."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:217
msgid "Accessing dependency libraries"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:219
msgid "If you need to access the libraries of a dependency, you can do so via the ``libs`` property of the spec, for example in the ``arpack-ng`` package:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:234
msgid "Note that ``arpack-ng`` is querying virtual dependencies, which Spack automatically resolves to the installed implementation (e.g. ``openblas`` for ``blas``)."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:238
msgid "We've started work on a package for ``armadillo``. You should open it, read through the comment that starts with ``# TUTORIAL:`` and complete the ``cmake_args`` section:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:246
msgid "If you followed the instructions in the package, when you are finished your ``cmake_args`` method should look like:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:268
msgid "As you can see, getting the list of libraries that your dependencies provide is as easy as accessing the their ``libs`` attribute. Furthermore, the interface remains the same whether you are querying regular or virtual dependencies."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:272
msgid "At this point you can complete the installation of ``armadillo`` using ``openblas`` as a LAPACK provider (``armadillo ^openblas ^mpich``):"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:294
msgid "Hopefully the installation went fine and the code we added expanded to the right list of semicolon separated libraries (you are encouraged to open ``armadillo``'s build logs to double check)."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:300
msgid "Providing libraries to dependents"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:302
msgid "Spack provides a default implementation for ``libs`` which often works out of the box. A user can write a package definition without having to implement a ``libs`` property and dependents can retrieve its libraries as shown in the above section. However, the default implementation assumes that libraries follow the naming scheme ``lib<package name>.so`` (or e.g. ``lib<package name>.a`` for static libraries). Packages which don't follow this naming scheme must implement this function themselves, e.g. ``opencv``:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:320
msgid "This issue is common for packages which implement an interface (i.e. virtual package providers in Spack). If we try to build another version of ``armadillo`` tied to ``netlib-lapack`` (``armadillo ^netlib-lapack ^mpich``) we'll notice that this time the installation won't complete:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:352
msgid "Unlike ``openblas`` which provides a library named ``libopenblas.so``, ``netlib-lapack`` provides ``liblapack.so``, so it needs to implement customized library search logic. Let's edit it:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:360
msgid "and follow the instructions in the ``# TUTORIAL:`` comment as before. What we need to implement is:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:372
msgid "i.e., a property that returns the correct list of libraries for the LAPACK interface."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:374
msgid "We use the name ``lapack_libs`` rather than ``libs`` because ``netlib-lapack`` can also provide ``blas``, and when it does it is provided as a separate library file. Using this name ensures that when dependents ask for ``lapack`` libraries, ``netlib-lapack`` will retrieve only the libraries associated with the ``lapack`` interface. Now we can finally install ``armadillo ^netlib-lapack ^mpich``:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:394
msgid "Since each implementation of a virtual package is responsible for locating the libraries associated with the interfaces it provides, dependents do not need to include special-case logic for different implementations and for example need only ask for :code:`spec['blas'].libs`."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:401
msgid "Other Packaging Topics"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:405
msgid "Attach attributes to other packages"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:407
msgid "Build tools usually also provide a set of executables that can be used when another package is being installed. Spack gives you the opportunity to monkey-patch dependent modules and attach attributes to them. This helps make the packager experience as similar as possible to what would have been the manual installation of the same package."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:413
msgid "An example here is the ``automake`` package, which overrides :py:func:`setup_dependent_package <spack.package.PackageBase.setup_dependent_package>`:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:425
msgid "so that every other package that depends on it can use directly ``aclocal`` and ``automake`` with the usual function call syntax of :py:class:`Executable <spack.util.executable.Executable>`:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:434
msgid "Extra query parameters"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:436
msgid "An advanced feature of the Spec's build-interface protocol is the support for extra parameters after the subscript key. In fact, any of the keys used in the query can be followed by a comma-separated list of extra parameters which can be inspected by the package receiving the request to fine-tune a response."
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:441
msgid "Let's look at an example and try to install ``netcdf ^mpich``:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:464
msgid "We can see from the error that ``netcdf`` needs to know how to link the *high-level interface* of ``hdf5``, and thus passes the extra parameter ``hl`` after the request to retrieve it. Clearly the implementation in the ``hdf5`` package is not complete, and we need to fix it:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:472
msgid "If you followed the instructions correctly, the code added to the ``lib`` property should be similar to:"
msgstr ""

#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:486
msgid "where we highlighted the line retrieving the extra parameters. Now we can successfully complete the installation of ``netcdf ^mpich``:"
msgstr ""

