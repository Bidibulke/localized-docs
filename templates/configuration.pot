# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2019, Lawrence Livermore National Laboratory.
# This file is distributed under the same license as the Spack package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Spack 0.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-27 13:44-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../spack/lib/spack/docs/configuration.rst:10
msgid "Configuration Files"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:12
msgid "Spack has many configuration files.  Here is a quick list of them, in case you want to skip directly to specific docs:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:15
msgid ":ref:`compilers.yaml <compiler-config>`"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:16
msgid ":ref:`config.yaml <config-yaml>`"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:17
msgid ":ref:`mirrors.yaml <mirrors>`"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:18
msgid ":ref:`modules.yaml <modules>`"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:19
msgid ":ref:`packages.yaml <build-settings>`"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:20
msgid ":ref:`repos.yaml <repositories>`"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:24
msgid "YAML Format"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:26
msgid "Spack configuration files are written in YAML.  We chose YAML because it's human readable, but also versatile in that it supports dictionaries, lists, and nested sections. For more details on the format, see `yaml.org <http://yaml.org>`_ and `libyaml <http://pyyaml.org/wiki/LibYAML>`_. Here is an example ``config.yaml`` file:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:42
msgid "Each Spack configuration file is nested under a top-level section corresponding to its name. So, ``config.yaml`` starts with ``config:``, ``mirrors.yaml`` starts with ``mirrors:``, etc."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:50
msgid "Configuration Scopes"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:52
msgid "Spack pulls configuration data from files in several directories. There are six configuration scopes. From lowest to highest:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:55
msgid "**defaults**: Stored in ``$(prefix)/etc/spack/defaults/``. These are the \"factory\" settings. Users should generally not modify the settings here, but should override them in other configuration scopes. The defaults here will change from version to version of Spack."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:60
msgid "**system**: Stored in ``/etc/spack/``. These are settings for this machine, or for all machines on which this file system is mounted. The site scope can be used for settings idiosyncratic to a particular machine, such as the locations of compilers or external packages. These settings are presumably controlled by someone with root access on the machine. They override the defaults scope."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:67
msgid "**site**: Stored in ``$(prefix)/etc/spack/``. Settings here affect only *this instance* of Spack, and they override the defaults and system scopes.  The site scope can can be used for per-project settings (one Spack instance per project) or for site-wide settings on a multi-user machine (e.g., for a common Spack instance)."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:73
msgid "**user**: Stored in the home directory: ``~/.spack/``. These settings affect all instances of Spack and take higher precedence than site, system, or defaults scopes."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:77
msgid "**custom**: Stored in a custom directory specified by ``--config-scope``. If multiple scopes are listed on the command line, they are ordered from lowest to highest precedence."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:81
msgid "**command line**: Build settings specified on the command line take precedence over all other scopes."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:84
msgid "Each configuration directory may contain several configuration files, such as ``config.yaml``, ``compilers.yaml``, or ``mirrors.yaml``.  When configurations conflict, settings from higher-precedence scopes override lower-precedence settings."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:89
msgid "Commands that modify scopes (e.g., ``spack compilers``, ``spack repo``, etc.) take a ``--scope=<name>`` parameter that you can use to control which scope is modified.  By default, they modify the highest-precedence scope."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:98
msgid "Custom scopes"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:100
msgid "In addition to the ``defaults``, ``system``, ``site``, and ``user`` scopes, you may add configuration scopes directly on the command line with the ``--config-scope`` argument, or ``-C`` for short."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:104
msgid "For example, the following adds two configuration scopes, named ``scopea`` and ``scopeb``, to a ``spack spec`` command:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:111
msgid "Custom scopes come *after* the ``spack`` command and *before* the subcommand, and they specify a single path to a directory full of configuration files. You can add the same configuration files to that directory that you can add to any other scope (``config.yaml``, ``packages.yaml``, etc.)."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:117
msgid "If multiple scopes are provided:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:119
msgid "Each must be preceded with the ``--config-scope`` or ``-C`` flag."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:120
msgid "They must be ordered from lowest to highest precedence."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:124
msgid "Example: scopes for release and development"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:126
msgid "Suppose that you need to support simultaneous building of release and development versions of ``mypackage``, where ``mypackage`` -> ``A`` -> ``B``. You could create The following files:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:130
msgid "~/myscopes/release/packages.yaml"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:141
msgid "~/myscopes/develop/packages.yaml"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:152
msgid "You can switch between ``release`` and ``develop`` configurations using configuration arguments.  You would type ``spack -C ~/myscopes/release`` when you want to build the designated release versions of ``mypackage``, ``A``, and ``B``, and you would type ``spack -C ~/myscopes/develop`` when you want to build all of these packages at the ``develop`` version."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:160
msgid "Example: swapping MPI providers"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:162
msgid "Suppose that you need to build two software packages, ``packagea`` and ``packageb``. ``packagea`` is Python 2-based and ``packageb`` is Python 3-based. ``packagea`` only builds with OpenMPI and ``packageb`` only builds with MPICH. You can create different configuration scopes for use with ``packagea`` and ``packageb``:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:168
msgid "~/myscopes/packgea/packages.yaml"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:178
msgid "~/myscopes/packageb/packages.yaml"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:193
msgid "Platform-specific Scopes"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:195
msgid "For each scope above, there can also be platform-specific settings. For example, on most platforms, GCC is the preferred compiler. However, on macOS (darwin), Clang often works for more packages, and is set as the default compiler. This configuration is set in ``$(prefix)/etc/spack/defaults/darwin/packages.yaml``. It will take precedence over settings in the ``defaults`` scope, but can still be overridden by settings in ``system``, ``system/darwin``, ``site``, ``site/darwin``, ``user``, ``user/darwin``, ``custom``, or ``custom/darwin``. So, the full scope precedence is:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:205
msgid "``defaults``"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:206
msgid "``defaults/<platform>``"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:207
msgid "``system``"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:208
msgid "``system/<platform>``"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:209
msgid "``site``"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:210
msgid "``site/<platform>``"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:211
msgid "``user``"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:212
msgid "``user/<platform>``"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:213
msgid "``custom``"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:214
msgid "``custom/<platform>``"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:216
msgid "You can get the name to use for ``<platform>`` by running ``spack arch --platform``. The system config scope has a ``<platform>`` section for sites at which ``/etc`` is mounted on multiple heterogeneous machines."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:222
msgid "Scope Precedence"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:224
msgid "When spack queries for configuration parameters, it searches in higher-precedence scopes first. So, settings in a higher-precedence file can override those with the same key in a lower-precedence one. For list-valued settings, Spack *prepends* higher-precedence settings to lower-precedence settings. Completely ignoring higher-level configuration options is supported with the ``::`` notation for keys (see :ref:`config-overrides` below)."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:234
msgid "Simple keys"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:236
msgid "Let's look at an example of overriding a single key in a Spack file. If your configurations look like this:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:239
#: ../spack/lib/spack/docs/configuration.rst:311
msgid "$(prefix)/etc/spack/defaults/config.yaml"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:251
#: ../spack/lib/spack/docs/configuration.rst:287
#: ../spack/lib/spack/docs/configuration.rst:322
#: ../spack/lib/spack/docs/configuration.rst:354
msgid "~/.spack/config.yaml"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:258
msgid "Spack will only override ``install_tree`` in the ``config`` section, and will take the site preferences for other settings. You can see the final, combined configuration with the ``spack config get <configtype>`` command:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:280
msgid "Overriding entire sections"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:282
msgid "Above, the user ``config.yaml`` only overrides specific settings in the default ``config.yaml``. Sometimes, it is useful to *completely* override lower-precedence settings. To do this, you can use *two* colons at the end of a key in a configuration file. For example:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:294
msgid "Spack will ignore all lower-precedence configuration under the ``config::`` section:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:306
msgid "List-valued settings"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:308
msgid "Let's revisit the ``config.yaml`` example one more time. The ``build_stage`` setting's value is an ordered list of directories:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:319
msgid "Suppose the user configuration adds its *own* list of ``build_stage`` paths:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:330
msgid "Spack will first look at the paths in the defaults ``config.yaml``, then the paths in the user's ``~/.spack/config.yaml``. The list in the higher-precedence scope is *prepended* to the defaults. ``spack config get config`` shows the result:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:350
msgid "As in :ref:`config-overrides`, the higher-precedence scope can *completely* override the lower-precedence scope using ``::``. So if the user config looked like this:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:363
msgid "The merged configuration would look like this:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:382
msgid "Config File Variables"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:384
msgid "Spack understands several variables which can be used in config file paths wherever they appear. There are three sets of these variables: Spack-specific variables, environment variables, and user path variables. Spack-specific variables and environment variables are both indicated by prefixing the variable name with ``$``. User path variables are indicated at the start of the path with ``~`` or ``~user``."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:393
msgid "Spack-specific variables"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:395
msgid "Spack understands several special variables. These are:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:397
msgid "``$spack``: path to the prefix of this Spack installation"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:398
msgid "``$tempdir``: default system temporary directory (as specified in Python's `tempfile.tempdir <https://docs.python.org/2/library/tempfile.html#tempfile.tempdir>`_ variable."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:402
msgid "``$user``: name of the current user"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:404
msgid "Note that, as with shell variables, you can write these as ``$varname`` or with braces to distinguish the variable from surrounding characters: ``${varname}``. Their names are also case insensitive, meaning that ``$SPACK`` works just as well as ``$spack``. These special variables are substituted first, so any environment variables with the same name will not be used."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:413
msgid "Environment variables"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:415
msgid "After Spack-specific variables are evaluated, environment variables are expanded. These are formatted like Spack-specific variables, e.g., ``${varname}``. You can use this to insert environment variables in your Spack configuration."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:422
msgid "User home directories"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:424
msgid "Spack performs Unix-style tilde expansion on paths in configuration files. This means that tilde (``~``) will expand to the current user's home directory, and ``~user`` will expand to a specified user's home directory. The ``~`` must appear at the beginning of the path, or Spack will not expand it."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:432
msgid "Seeing Spack's Configuration"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:434
msgid "With so many scopes overriding each other, it can sometimes be difficult to understand what Spack's final configuration looks like."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:437
msgid "Spack provides two useful ways to view the final \"merged\" version of any configuration file: ``spack config get`` and ``spack config blame``."
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:444
msgid "``spack config get``"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:446
msgid "``spack config get`` shows a fully merged configuration file, taking into account all scopes. For example, to see the fully merged ``config.yaml``, you can type:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:475
msgid "Likewise, this will show the fully merged ``packages.yaml``:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:481
msgid "You can use this in conjunction with the ``-C`` / ``--config-scope`` argument to see how your scope will affect Spack's configuration:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:493
msgid "``spack config blame``"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:495
msgid "``spack config blame`` functions much like ``spack config get``, but it shows exactly which configuration file each preference came from. If you do not know why Spack is behaving a certain way, this can help you track down the problem:"
msgstr ""

#: ../spack/lib/spack/docs/configuration.rst:526
msgid "You can see above that the ``build_jobs`` and ``debug`` settings are built in and are not overridden by a configuration file. The ``verify_ssl`` setting comes from the ``--insceure`` option on the command line. ``dirty`` and ``install_tree`` come from the custom scopes ``./my-scope`` and ``./my-scope-2``, and all other configuration options come from the default configuration files that ship with Spack."
msgstr ""

